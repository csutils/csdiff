Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:36: misra_cpp_2008_rule_11_0_1_violation: Member "invertEach_" is not private but "PredicateFilter::Private" is a non-POD type.
#   34|   struct PredicateFilter::Private {
#   35|       typedef std::vector<IPredicate *>               TList;
#   36|->     bool                invertEach_;
#   37|       TList               preds_;
#   38|   

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:37: misra_cpp_2008_rule_11_0_1_violation: Member "preds_" is not private but "PredicateFilter::Private" is a non-POD type.
#   35|       typedef std::vector<IPredicate *>               TList;
#   36|       bool                invertEach_;
#   37|->     TList               preds_;
#   38|   
#   39|       Private():

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:39: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   37|       TList               preds_;
#   38|   
#   39|->     Private():
#   40|           invertEach_(false)
#   41|       {

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:45: misra_cpp_2008_rule_7_1_1_violation: The variable "agent" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   43|   };
#   44|   
#   45|-> PredicateFilter::PredicateFilter(AbstractWriter *agent):
#   46|       AbstractFilter(agent),
#   47|       d(new Private)

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:47: misra_c_2012_directive_4_12_violation: A call to the function "operator new(32UL)" performs dynamic memory allocation.
#   45|   PredicateFilter::PredicateFilter(AbstractWriter *agent):
#   46|       AbstractFilter(agent),
#   47|->     d(new Private)
#   48|   {
#   49|   }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:47: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   45|   PredicateFilter::PredicateFilter(AbstractWriter *agent):
#   46|       AbstractFilter(agent),
#   47|->     d(new Private)
#   48|   {
#   49|   }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:51: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   49|   }
#   50|   
#   51|-> PredicateFilter::~PredicateFilter()
#   52|   {
#   53|       for (IPredicate *pred : d->preds_)

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:53: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#   51|   PredicateFilter::~PredicateFilter()
#   52|   {
#   53|->     for (IPredicate *pred : d->preds_)
#   54|           delete pred;
#   55|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:53: misra_cpp_2008_rule_7_1_1_violation: The variable "pred" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   51|   PredicateFilter::~PredicateFilter()
#   52|   {
#   53|->     for (IPredicate *pred : d->preds_)
#   54|           delete pred;
#   55|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:54: misra_c_2012_rule_15_6_violation: The body of the "for" loop is not a compound statement.
#   52|   {
#   53|       for (IPredicate *pred : d->preds_)
#   54|->         delete pred;
#   55|   
#   56|       delete d;

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:54: misra_cpp_2008_rule_6_3_1_violation: The body of the "for" loop is not a compound statement.
#   52|   {
#   53|       for (IPredicate *pred : d->preds_)
#   54|->         delete pred;
#   55|   
#   56|       delete d;

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:59: misra_c_2012_rule_8_13_violation: The member function "PredicateFilter::append(IPredicate *)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#   57|   }
#   58|   
#   59|-> void PredicateFilter::append(IPredicate *pred)
#   60|   {
#   61|       d->preds_.push_back(pred);

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:59: misra_cpp_2008_rule_7_1_1_violation: The variable "pred" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   57|   }
#   58|   
#   59|-> void PredicateFilter::append(IPredicate *pred)
#   60|   {
#   61|       d->preds_.push_back(pred);

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:64: misra_c_2012_rule_8_13_violation: The member function "PredicateFilter::setInvertEachMatch(bool)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#   62|   }
#   63|   
#   64|-> void PredicateFilter::setInvertEachMatch(bool enabled)
#   65|   {
#   66|       d->invertEach_ = enabled;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:64: misra_cpp_2008_rule_7_1_1_violation: The variable "enabled" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   62|   }
#   63|   
#   64|-> void PredicateFilter::setInvertEachMatch(bool enabled)
#   65|   {
#   66|       d->invertEach_ = enabled;

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:71: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "neg" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:78: end_of_scope: Reached end of scope without using value stored in "neg".
#   69|   bool PredicateFilter::matchDef(const Defect &def)
#   70|   {
#   71|->     const bool neg = d->invertEach_;
#   72|   
#   73|       for (const IPredicate *pred : d->preds_) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:73: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#   71|       const bool neg = d->invertEach_;
#   72|   
#   73|->     for (const IPredicate *pred : d->preds_) {
#   74|           if (neg == pred->matchDef(def))
#   75|               return false;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:73: misra_cpp_2008_rule_7_1_1_violation: The variable "pred" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   71|       const bool neg = d->invertEach_;
#   72|   
#   73|->     for (const IPredicate *pred : d->preds_) {
#   74|           if (neg == pred->matchDef(def))
#   75|               return false;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:75: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   73|       for (const IPredicate *pred : d->preds_) {
#   74|           if (neg == pred->matchDef(def))
#   75|->             return false;
#   76|       }
#   77|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:75: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   73|       for (const IPredicate *pred : d->preds_) {
#   74|           if (neg == pred->matchDef(def))
#   75|->             return false;
#   76|       }
#   77|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:75: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   73|       for (const IPredicate *pred : d->preds_) {
#   74|           if (neg == pred->matchDef(def))
#   75|->             return false;
#   76|       }
#   77|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:75: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   73|       for (const IPredicate *pred : d->preds_) {
#   74|           if (neg == pred->matchDef(def))
#   75|->             return false;
#   76|       }
#   77|   

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:90: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   88|       def.events.clear();
#   89|   
#   90|->     const unsigned cnt = defOrig.events.size();
#   91|       for (unsigned i = 0; i < cnt; ++i) {
#   92|           const DefEvent &evt = defOrig.events[i];

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:90: misra_c_2012_rule_10_3_violation: Implicit conversion of "defOrig.events.size()" from essential type "non-essential type" to different or narrower essential type "unsigned 32-bit int".
#   88|       def.events.clear();
#   89|   
#   90|->     const unsigned cnt = defOrig.events.size();
#   91|       for (unsigned i = 0; i < cnt; ++i) {
#   92|           const DefEvent &evt = defOrig.events[i];

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:90: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   88|       def.events.clear();
#   89|   
#   90|->     const unsigned cnt = defOrig.events.size();
#   91|       for (unsigned i = 0; i < cnt; ++i) {
#   92|           const DefEvent &evt = defOrig.events[i];

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:90: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "defOrig.events.size()" is implicitly reduced from "64-bit unsigned long" to "32-bit unsigned int".
#   88|       def.events.clear();
#   89|   
#   90|->     const unsigned cnt = defOrig.events.size();
#   91|       for (unsigned i = 0; i < cnt; ++i) {
#   92|           const DefEvent &evt = defOrig.events[i];

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:91: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   89|   
#   90|       const unsigned cnt = defOrig.events.size();
#   91|->     for (unsigned i = 0; i < cnt; ++i) {
#   92|           const DefEvent &evt = defOrig.events[i];
#   93|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:91: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   89|   
#   90|       const unsigned cnt = defOrig.events.size();
#   91|->     for (unsigned i = 0; i < cnt; ++i) {
#   92|           const DefEvent &evt = defOrig.events[i];
#   93|   

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:91: misra_cpp_2008_rule_5_0_4_violation: "0" is implicitly converted from a signed value to an unsigned value.
#   89|   
#   90|       const unsigned cnt = defOrig.events.size();
#   91|->     for (unsigned i = 0; i < cnt; ++i) {
#   92|           const DefEvent &evt = defOrig.events[i];
#   93|   

Error: MISRA C-2012 Rule 15.7 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:94: misra_c_2012_rule_15_7_violation: No non-empty terminating "else" statement.
#   92|           const DefEvent &evt = defOrig.events[i];
#   93|   
#   94|->         if (evt.verbosityLevel <= thr_)
#   95|               def.events.push_back(evt);
#   96|           else if (i < defOrig.keyEventIdx)

Error: MISRA C++-2008 Rule 6-4-2 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:94: misra_cpp_2008_rule_6_4_2_violation: No non-empty terminating "else" statement.
#   92|           const DefEvent &evt = defOrig.events[i];
#   93|   
#   94|->         if (evt.verbosityLevel <= thr_)
#   95|               def.events.push_back(evt);
#   96|           else if (i < defOrig.keyEventIdx)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:95: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   93|   
#   94|           if (evt.verbosityLevel <= thr_)
#   95|->             def.events.push_back(evt);
#   96|           else if (i < defOrig.keyEventIdx)
#   97|               def.keyEventIdx--;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:95: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   93|   
#   94|           if (evt.verbosityLevel <= thr_)
#   95|->             def.events.push_back(evt);
#   96|           else if (i < defOrig.keyEventIdx)
#   97|               def.keyEventIdx--;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:97: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   95|               def.events.push_back(evt);
#   96|           else if (i < defOrig.keyEventIdx)
#   97|->             def.keyEventIdx--;
#   98|       }
#   99|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:97: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   95|               def.events.push_back(evt);
#   96|           else if (i < defOrig.keyEventIdx)
#   97|->             def.keyEventIdx--;
#   98|       }
#   99|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:107: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  105|   // implementation of CtxEmbedder
#  106|   
#  107|-> void dropCtxLines(TEvtList *pEvtList)
#  108|   {
#  109|       static CtxEventDetector detector;

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:107: misra_c_2012_rule_8_7_violation: Function "dropCtxLines" has external linkage but is only used in one translation unit.
#  105|   // implementation of CtxEmbedder
#  106|   
#  107|-> void dropCtxLines(TEvtList *pEvtList)
#  108|   {
#  109|       static CtxEventDetector detector;

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:107: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  105|   // implementation of CtxEmbedder
#  106|   
#  107|-> void dropCtxLines(TEvtList *pEvtList)
#  108|   {
#  109|       static CtxEventDetector detector;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:107: misra_cpp_2008_rule_7_1_1_violation: The variable "pEvtList" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  105|   // implementation of CtxEmbedder
#  106|   
#  107|-> void dropCtxLines(TEvtList *pEvtList)
#  108|   {
#  109|       static CtxEventDetector detector;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:107: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "dropCtxLines".
#  105|   // implementation of CtxEmbedder
#  106|   
#  107|-> void dropCtxLines(TEvtList *pEvtList)
#  108|   {
#  109|       static CtxEventDetector detector;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:109: misra_cpp_2008_rule_7_1_1_violation: The variable "detector" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  107|   void dropCtxLines(TEvtList *pEvtList)
#  108|   {
#  109|->     static CtxEventDetector detector;
#  110|   
#  111|       TEvtList dst;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:112: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  110|   
#  111|       TEvtList dst;
#  112|->     for (const DefEvent &evt : *pEvtList) {
#  113|           if (detector.isAnyCtxLine(evt))
#  114|               continue;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:114: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  112|       for (const DefEvent &evt : *pEvtList) {
#  113|           if (detector.isAnyCtxLine(evt))
#  114|->             continue;
#  115|   
#  116|           dst.push_back(evt);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:114: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  112|       for (const DefEvent &evt : *pEvtList) {
#  113|           if (detector.isAnyCtxLine(evt))
#  114|->             continue;
#  115|   
#  116|           dst.push_back(evt);

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:122: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  120|   }
#  121|   
#  122|-> void appendCtxLines(
#  123|           TEvtList       *pDst,
#  124|           std::istream   &inStr,

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:122: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  120|   }
#  121|   
#  122|-> void appendCtxLines(
#  123|           TEvtList       *pDst,
#  124|           std::istream   &inStr,

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:122: misra_c_2012_rule_8_7_violation: Function "appendCtxLines" has external linkage but is only used in one translation unit.
#  120|   }
#  121|   
#  122|-> void appendCtxLines(
#  123|           TEvtList       *pDst,
#  124|           std::istream   &inStr,

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:122: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  120|   }
#  121|   
#  122|-> void appendCtxLines(
#  123|           TEvtList       *pDst,
#  124|           std::istream   &inStr,

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:122: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  120|   }
#  121|   
#  122|-> void appendCtxLines(
#  123|           TEvtList       *pDst,
#  124|           std::istream   &inStr,

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:122: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "appendCtxLines".
#  120|   }
#  121|   
#  122|-> void appendCtxLines(
#  123|           TEvtList       *pDst,
#  124|           std::istream   &inStr,

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:123: misra_cpp_2008_rule_7_1_1_violation: The variable "pDst" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  121|   
#  122|   void appendCtxLines(
#  123|->         TEvtList       *pDst,
#  124|           std::istream   &inStr,
#  125|           const int       defLine,

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:129: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  127|   {
#  128|       if (ctxLines < 0)
#  129|->         return;
#  130|   
#  131|       const int firstLine = defLine - ctxLines;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:129: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  127|   {
#  128|       if (ctxLines < 0)
#  129|->         return;
#  130|   
#  131|       const int firstLine = defLine - ctxLines;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:129: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  127|   {
#  128|       if (ctxLines < 0)
#  129|->         return;
#  130|   
#  131|       const int firstLine = defLine - ctxLines;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:129: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  127|   {
#  128|       if (ctxLines < 0)
#  129|->         return;
#  130|   
#  131|       const int firstLine = defLine - ctxLines;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:131: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  129|           return;
#  130|   
#  131|->     const int firstLine = defLine - ctxLines;
#  132|       const int lastLine  = defLine + ctxLines;
#  133|   

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:131: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "firstLine" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:166: end_of_scope: Reached end of scope without using value stored in "firstLine".
#  129|           return;
#  130|   
#  131|->     const int firstLine = defLine - ctxLines;
#  132|       const int lastLine  = defLine + ctxLines;
#  133|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:131: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  129|           return;
#  130|   
#  131|->     const int firstLine = defLine - ctxLines;
#  132|       const int lastLine  = defLine + ctxLines;
#  133|   

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:132: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  130|   
#  131|       const int firstLine = defLine - ctxLines;
#  132|->     const int lastLine  = defLine + ctxLines;
#  133|   
#  134|       int line = 1;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:132: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  130|   
#  131|       const int firstLine = defLine - ctxLines;
#  132|->     const int lastLine  = defLine + ctxLines;
#  133|   
#  134|       int line = 1;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:134: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  132|       const int lastLine  = defLine + ctxLines;
#  133|   
#  134|->     int line = 1;
#  135|       std::string text;
#  136|       for (; line <= lastLine; ++line) {

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:134: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  132|       const int lastLine  = defLine + ctxLines;
#  133|   
#  134|->     int line = 1;
#  135|       std::string text;
#  136|       for (; line <= lastLine; ++line) {

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:139: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  137|           if (!std::getline(inStr, text))
#  138|               // premature end of input
#  139|->             break;
#  140|   
#  141|           if (line < firstLine)

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:139: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  137|           if (!std::getline(inStr, text))
#  138|               // premature end of input
#  139|->             break;
#  140|   
#  141|           if (line < firstLine)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:143: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  141|           if (line < firstLine)
#  142|               // skip lines before the context lines
#  143|->             continue;
#  144|   
#  145|           // quote embedded NULs as they cause problems to some JSON parsers

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:143: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  141|           if (line < firstLine)
#  142|               // skip lines before the context lines
#  143|->             continue;
#  144|   
#  145|           // quote embedded NULs as they cause problems to some JSON parsers

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:152: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  150|           // format a single line of the comment
#  151|           std::ostringstream str;
#  152|->         str << std::fixed << std::setw(5) << line;
#  153|           if (defLine == line)
#  154|               str << "|-> ";

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:152: misra_cpp_2008_rule_8_4_4_violation: Function identifier "fixed" is not used to call the function or preceded by &.
#  150|           // format a single line of the comment
#  151|           std::ostringstream str;
#  152|->         str << std::fixed << std::setw(5) << line;
#  153|           if (defLine == line)
#  154|               str << "|-> ";

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:154: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  152|           str << std::fixed << std::setw(5) << line;
#  153|           if (defLine == line)
#  154|->             str << "|-> ";
#  155|           else
#  156|               str << "|   ";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:154: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  152|           str << std::fixed << std::setw(5) << line;
#  153|           if (defLine == line)
#  154|->             str << "|-> ";
#  155|           else
#  156|               str << "|   ";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:154: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  152|           str << std::fixed << std::setw(5) << line;
#  153|           if (defLine == line)
#  154|->             str << "|-> ";
#  155|           else
#  156|               str << "|   ";

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:156: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  154|               str << "|-> ";
#  155|           else
#  156|->             str << "|   ";
#  157|           str << text;
#  158|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:156: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  154|               str << "|-> ";
#  155|           else
#  156|->             str << "|   ";
#  157|           str << text;
#  158|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:156: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  154|               str << "|-> ";
#  155|           else
#  156|->             str << "|   ";
#  157|           str << text;
#  158|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:157: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  155|           else
#  156|               str << "|   ";
#  157|->         str << text;
#  158|   
#  159|           // append the comment as a new event

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:161: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  159|           // append the comment as a new event
#  160|           DefEvent evt;
#  161|->         evt.event = "#";
#  162|           evt.msg = str.str();
#  163|           evt.verbosityLevel = /* not a key event */ 1;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:162: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  160|           DefEvent evt;
#  161|           evt.event = "#";
#  162|->         evt.msg = str.str();
#  163|           evt.verbosityLevel = /* not a key event */ 1;
#  164|           pDst->push_back(evt);

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:171: misra_c_2012_rule_10_1_violation: The expression "evt.line" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  169|   {
#  170|       const DefEvent &evt = defOrig.events[defOrig.keyEventIdx];
#  171|->     if (!evt.line) {
#  172|           // no line number for the key event
#  173|           agent_->handleDef(defOrig);

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:171: misra_cpp_2008_rule_5_0_13_violation: The type of "evt.line" is not bool in the condition of "if-statement".
#  169|   {
#  170|       const DefEvent &evt = defOrig.events[defOrig.keyEventIdx];
#  171|->     if (!evt.line) {
#  172|           // no line number for the key event
#  173|           agent_->handleDef(defOrig);

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:171: misra_cpp_2008_rule_5_3_1_violation: Operand "evt.line" of the operator "!" is not bool type.
#  169|   {
#  170|       const DefEvent &evt = defOrig.events[defOrig.keyEventIdx];
#  171|->     if (!evt.line) {
#  172|           // no line number for the key event
#  173|           agent_->handleDef(defOrig);

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:174: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  172|           // no line number for the key event
#  173|           agent_->handleDef(defOrig);
#  174|->         return;
#  175|       }
#  176|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:174: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  172|           // no line number for the key event
#  173|           agent_->handleDef(defOrig);
#  174|->         return;
#  175|       }
#  176|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:181: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  179|           // failed to open input file
#  180|           agent_->handleDef(defOrig);
#  181|->         return;
#  182|       }
#  183|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.cc:181: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  179|           // failed to open input file
#  180|           agent_->handleDef(defOrig);
#  181|->         return;
#  182|       }
#  183|   

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:26: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "GenericAbstractFilter".
#   24|   
#   25|   /// decorator
#   26|-> class GenericAbstractFilter: public AbstractWriter {
#   27|       protected:
#   28|           AbstractWriter *agent_;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:28: misra_cpp_2008_rule_11_0_1_violation: Member "agent_" is not private but "GenericAbstractFilter" is a non-POD type.
#   26|   class GenericAbstractFilter: public AbstractWriter {
#   27|       protected:
#   28|->         AbstractWriter *agent_;
#   29|           virtual void handleDef(const Defect &def) = 0;
#   30|   

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:32: misra_cpp_2008_rule_10_3_1_violation: Virtual function "GenericAbstractFilter::notifyFile(std::string const &)" has already been defined in "AbstractWriter::notifyFile(std::string const &)".
#   30|   
#   31|       public:
#   32|->         virtual void notifyFile(const std::string &fileName) {
#   33|               agent_->notifyFile(fileName);
#   34|           }

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:36: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "AbstractWriter" are not called in this constructor.
#   34|           }
#   35|   
#   36|->         GenericAbstractFilter(AbstractWriter *agent):
#   37|               agent_(agent)
#   38|           {

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:36: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "agent" clashes with "agent_"
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:28: misra_typographically_ambiguous_orig: (Previously declared symbol "agent_" at line 28)
#   34|           }
#   35|   
#   36|->         GenericAbstractFilter(AbstractWriter *agent):
#   37|               agent_(agent)
#   38|           {

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:36: misra_cpp_2008_rule_7_1_1_violation: The variable "agent" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   34|           }
#   35|   
#   36|->         GenericAbstractFilter(AbstractWriter *agent):
#   37|               agent_(agent)
#   38|           {

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:41: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   39|           }
#   40|   
#   41|->         ~GenericAbstractFilter() {
#   42|               delete agent_;
#   43|           }

Error: MISRA C++-2008 Rule 10-3-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:41: misra_cpp_2008_rule_10_3_2_violation: Virtual function "GenericAbstractFilter::~GenericAbstractFilter()" is not explicitly declared 'virtual'.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:38: misra_implicitly_virtual_because: function "GenericAbstractFilter::~GenericAbstractFilter()" overrides virtual function "AbstractWriter::~AbstractWriter()" declared at line 38 of "../../src/abstract-writer.hh".
#   39|           }
#   40|   
#   41|->         ~GenericAbstractFilter() {
#   42|               delete agent_;
#   43|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:45: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   43|           }
#   44|   
#   45|->         virtual void flush() {
#   46|               agent_->flush();
#   47|           }

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:45: misra_cpp_2008_rule_10_3_1_violation: Virtual function "GenericAbstractFilter::flush()" has already been defined in "AbstractWriter::flush()".
#   43|           }
#   44|   
#   45|->         virtual void flush() {
#   46|               agent_->flush();
#   47|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:49: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   47|           }
#   48|   
#   49|->         virtual const TScanProps& getScanProps() const {
#   50|               return agent_->getScanProps();
#   51|           }

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:49: misra_cpp_2008_rule_10_3_1_violation: Virtual function "GenericAbstractFilter::getScanProps[abi:cxx11]() const" has already been defined in "AbstractWriter::getScanProps[abi:cxx11]() const".
#   47|           }
#   48|   
#   49|->         virtual const TScanProps& getScanProps() const {
#   50|               return agent_->getScanProps();
#   51|           }

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:53: misra_cpp_2008_rule_10_3_1_violation: Virtual function "GenericAbstractFilter::setScanProps(TScanProps const &)" has already been defined in "AbstractWriter::setScanProps(TScanProps const &)".
#   51|           }
#   52|   
#   53|->         virtual void setScanProps(const TScanProps &scanProps) {
#   54|               agent_->setScanProps(scanProps);
#   55|           }

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:59: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "EventPrunner".
#   57|   
#   58|   /// decorator
#   59|-> class EventPrunner: public GenericAbstractFilter {
#   60|       private:
#   61|           int thr_;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:61: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   59|   class EventPrunner: public GenericAbstractFilter {
#   60|       private:
#   61|->         int thr_;
#   62|   
#   63|       public:

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:61: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   59|   class EventPrunner: public GenericAbstractFilter {
#   60|       private:
#   61|->         int thr_;
#   62|   
#   63|       public:

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:64: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   62|   
#   63|       public:
#   64|->         EventPrunner(AbstractWriter *agent, unsigned thr):
#   65|               GenericAbstractFilter(agent),
#   66|               thr_(thr)

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:64: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "thr" clashes with "thr_"
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:61: misra_typographically_ambiguous_orig: (Previously declared symbol "thr_" at line 61)
#   62|   
#   63|       public:
#   64|->         EventPrunner(AbstractWriter *agent, unsigned thr):
#   65|               GenericAbstractFilter(agent),
#   66|               thr_(thr)

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:64: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   62|   
#   63|       public:
#   64|->         EventPrunner(AbstractWriter *agent, unsigned thr):
#   65|               GenericAbstractFilter(agent),
#   66|               thr_(thr)

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:64: misra_cpp_2008_rule_7_1_1_violation: The variable "agent" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   62|   
#   63|       public:
#   64|->         EventPrunner(AbstractWriter *agent, unsigned thr):
#   65|               GenericAbstractFilter(agent),
#   66|               thr_(thr)

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:64: misra_cpp_2008_rule_7_1_1_violation: The variable "thr" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   62|   
#   63|       public:
#   64|->         EventPrunner(AbstractWriter *agent, unsigned thr):
#   65|               GenericAbstractFilter(agent),
#   66|               thr_(thr)

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:66: misra_cpp_2008_rule_5_0_4_violation: "thr" is implicitly converted from an unsigned value to a signed value.
#   64|           EventPrunner(AbstractWriter *agent, unsigned thr):
#   65|               GenericAbstractFilter(agent),
#   66|->             thr_(thr)
#   67|           {
#   68|           }

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:70: misra_c_2012_rule_8_3_violation: Declaration uses a different parameter name than "void GenericAbstractFilter::handleDef(const Defect &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:29: prev_declaration: (see previous declaration of "GenericAbstractFilter::handleDef" at line 29)
#   68|           }
#   69|   
#   70|->         virtual void handleDef(const Defect &defOrig);
#   71|   };
#   72|   

Error: MISRA C++-2008 Rule 8-4-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:70: misra_cpp_2008_rule_8_4_2_violation: Declaration uses a different parameter name than "void GenericAbstractFilter::handleDef(const Defect &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:29: prev_declaration: (see previous declaration of "GenericAbstractFilter::handleDef" at line 29)
#   68|           }
#   69|   
#   70|->         virtual void handleDef(const Defect &defOrig);
#   71|   };
#   72|   

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:74: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "CtxEmbedder".
#   72|   
#   73|   /// decorator
#   74|-> class CtxEmbedder: public GenericAbstractFilter {
#   75|       private:
#   76|           int ctxLines_;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:76: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   74|   class CtxEmbedder: public GenericAbstractFilter {
#   75|       private:
#   76|->         int ctxLines_;
#   77|   
#   78|       public:

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:76: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   74|   class CtxEmbedder: public GenericAbstractFilter {
#   75|       private:
#   76|->         int ctxLines_;
#   77|   
#   78|       public:

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:79: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   77|   
#   78|       public:
#   79|->         CtxEmbedder(AbstractWriter *agent, const int ctxLines):
#   80|               GenericAbstractFilter(agent),
#   81|               ctxLines_(ctxLines)

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:79: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "ctxLines" clashes with "ctxLines_"
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:76: misra_typographically_ambiguous_orig: (Previously declared symbol "ctxLines_" at line 76)
#   77|   
#   78|       public:
#   79|->         CtxEmbedder(AbstractWriter *agent, const int ctxLines):
#   80|               GenericAbstractFilter(agent),
#   81|               ctxLines_(ctxLines)

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:79: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   77|   
#   78|       public:
#   79|->         CtxEmbedder(AbstractWriter *agent, const int ctxLines):
#   80|               GenericAbstractFilter(agent),
#   81|               ctxLines_(ctxLines)

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:79: misra_cpp_2008_rule_7_1_1_violation: The variable "agent" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   77|   
#   78|       public:
#   79|->         CtxEmbedder(AbstractWriter *agent, const int ctxLines):
#   80|               GenericAbstractFilter(agent),
#   81|               ctxLines_(ctxLines)

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:85: misra_c_2012_rule_8_3_violation: Declaration uses a different parameter name than "void GenericAbstractFilter::handleDef(const Defect &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:29: prev_declaration: (see previous declaration of "GenericAbstractFilter::handleDef" at line 29)
#   83|           }
#   84|   
#   85|->         virtual void handleDef(const Defect &defOrig);
#   86|   };
#   87|   

Error: MISRA C++-2008 Rule 8-4-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:85: misra_cpp_2008_rule_8_4_2_violation: Declaration uses a different parameter name than "void GenericAbstractFilter::handleDef(const Defect &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:29: prev_declaration: (see previous declaration of "GenericAbstractFilter::handleDef" at line 29)
#   83|           }
#   84|   
#   85|->         virtual void handleDef(const Defect &defOrig);
#   86|   };
#   87|   

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:89: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "AbstractFilter".
#   87|   
#   88|   /// decorator
#   89|-> class AbstractFilter: public GenericAbstractFilter {
#   90|       private:
#   91|           bool neg_;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:97: misra_cpp_2008_rule_7_1_1_violation: The variable "agent" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   95|   
#   96|       public:
#   97|->         AbstractFilter(AbstractWriter *agent):
#   98|               GenericAbstractFilter(agent),
#   99|               neg_(false)

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:103: misra_cpp_2008_rule_7_1_1_violation: The variable "enabled" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  101|           }
#  102|   
#  103|->         void setInvertMatch(bool enabled = true) {
#  104|               neg_ = enabled;
#  105|           }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:109: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  107|           virtual void handleDef(const Defect &def) {
#  108|               if (neg_ == matchDef(def))
#  109|->                 return;
#  110|   
#  111|               agent_->handleDef(def);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:109: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  107|           virtual void handleDef(const Defect &def) {
#  108|               if (neg_ == matchDef(def))
#  109|->                 return;
#  110|   
#  111|               agent_->handleDef(def);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:109: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  107|           virtual void handleDef(const Defect &def) {
#  108|               if (neg_ == matchDef(def))
#  109|->                 return;
#  110|   
#  111|               agent_->handleDef(def);

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:109: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  107|           virtual void handleDef(const Defect &def) {
#  108|               if (neg_ == matchDef(def))
#  109|->                 return;
#  110|   
#  111|               agent_->handleDef(def);

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:115: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "IPredicate".
#  113|   };
#  114|   
#  115|-> class IPredicate {
#  116|       public:
#  117|           virtual ~IPredicate() { }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:117: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  115|   class IPredicate {
#  116|       public:
#  117|->         virtual ~IPredicate() { }
#  118|           virtual bool matchDef(const Defect &def) const = 0;
#  119|   };

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:121: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "PredicateFilter".
#  119|   };
#  120|   
#  121|-> class PredicateFilter: public AbstractFilter {
#  122|       public:
#  123|           PredicateFilter(AbstractWriter *agent);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:124: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  122|       public:
#  123|           PredicateFilter(AbstractWriter *agent);
#  124|->         virtual ~PredicateFilter();
#  125|   
#  126|           /// takes ownership of pred and will call delete on it on destruction

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:127: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#  125|   
#  126|           /// takes ownership of pred and will call delete on it on destruction
#  127|->         void append(IPredicate *);
#  128|   
#  129|           void setInvertEachMatch(bool enabled = true);

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011-2013 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:27: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "createParser".
#   25|   #include "xml-parser.hh"
#   26|   
#   27|-> AbstractParser* createParser(InStream &input)
#   28|   {
#   29|       // sniff the first two chars from the input

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:30: misra_cpp_2008_rule_7_1_1_violation: The variable "head" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   28|   {
#   29|       // sniff the first two chars from the input
#   30|->     InStreamLookAhead head(input, 2U);
#   31|   
#   32|       switch (head[0]) {

Error: MISRA C-2012 Rule 16.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:33: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:37: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:43: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:47: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:32: misra_c_2012_rule_16_1_violation: The switch statement is not well formed.
#   30|       InStreamLookAhead head(input, 2U);
#   31|   
#   32|->     switch (head[0]) {
#   33|           case '{':
#   34|               // JSON

Error: MISRA C-2012 Rule 16.6 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:32: misra_c_2012_rule_16_6_violation: The switch statement "switch (head[0U])" has only one conforming switch clause.
#   30|       InStreamLookAhead head(input, 2U);
#   31|   
#   32|->     switch (head[0]) {
#   33|           case '{':
#   34|               // JSON

Error: MISRA C++-2008 Rule 6-4-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:33: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:35: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:39: break_statement_location: The break statement "break;" is not the last statement in "case '<':".
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:37: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:41: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:45: break_statement_location: The break statement "break;" is not the last statement in "case 'E':".
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:43: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:47: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:49: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:32: misra_cpp_2008_rule_6_4_3_violation: The switch statement is not well formed.
#   30|       InStreamLookAhead head(input, 2U);
#   31|   
#   32|->     switch (head[0]) {
#   33|           case '{':
#   34|               // JSON

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:33: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#   31|   
#   32|       switch (head[0]) {
#   33|->         case '{':
#   34|               // JSON
#   35|               return new JsonParser(input);

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:33: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#   31|   
#   32|       switch (head[0]) {
#   33|->         case '{':
#   34|               // JSON
#   35|               return new JsonParser(input);

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:35: misra_c_2012_directive_4_12_violation: A call to the function "operator new(64UL)" performs dynamic memory allocation.
#   33|           case '{':
#   34|               // JSON
#   35|->             return new JsonParser(input);
#   36|   
#   37|           case '<':

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:35: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   33|           case '{':
#   34|               // JSON
#   35|->             return new JsonParser(input);
#   36|   
#   37|           case '<':

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:35: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   33|           case '{':
#   34|               // JSON
#   35|->             return new JsonParser(input);
#   36|   
#   37|           case '<':

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:35: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   33|           case '{':
#   34|               // JSON
#   35|->             return new JsonParser(input);
#   36|   
#   37|           case '<':

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:37: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#   35|               return new JsonParser(input);
#   36|   
#   37|->         case '<':
#   38|               if ('?' != head[1])
#   39|                   break;

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:37: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#   35|               return new JsonParser(input);
#   36|   
#   37|->         case '<':
#   38|               if ('?' != head[1])
#   39|                   break;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:39: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   37|           case '<':
#   38|               if ('?' != head[1])
#   39|->                 break;
#   40|               // XML
#   41|               return new XmlParser(input);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:39: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   37|           case '<':
#   38|               if ('?' != head[1])
#   39|->                 break;
#   40|               // XML
#   41|               return new XmlParser(input);

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:41: misra_c_2012_directive_4_12_violation: A call to the function "operator new(64UL)" performs dynamic memory allocation.
#   39|                   break;
#   40|               // XML
#   41|->             return new XmlParser(input);
#   42|   
#   43|           case 'E':

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:41: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   39|                   break;
#   40|               // XML
#   41|->             return new XmlParser(input);
#   42|   
#   43|           case 'E':

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:41: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   39|                   break;
#   40|               // XML
#   41|->             return new XmlParser(input);
#   42|   
#   43|           case 'E':

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:41: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   39|                   break;
#   40|               // XML
#   41|->             return new XmlParser(input);
#   42|   
#   43|           case 'E':

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:43: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#   41|               return new XmlParser(input);
#   42|   
#   43|->         case 'E':
#   44|               if ('r' != head[1])
#   45|                   break;

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:43: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#   41|               return new XmlParser(input);
#   42|   
#   43|->         case 'E':
#   44|               if ('r' != head[1])
#   45|                   break;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:45: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   43|           case 'E':
#   44|               if ('r' != head[1])
#   45|->                 break;
#   46|               // fall through!
#   47|           case '#':

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:45: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   43|           case 'E':
#   44|               if ('r' != head[1])
#   45|->                 break;
#   46|               // fall through!
#   47|           case '#':

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:47: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#   45|                   break;
#   46|               // fall through!
#   47|->         case '#':
#   48|               // Coverity
#   49|               return new CovParser(input);

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:47: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#   45|                   break;
#   46|               // fall through!
#   47|->         case '#':
#   48|               // Coverity
#   49|               return new CovParser(input);

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:49: misra_c_2012_directive_4_12_violation: A call to the function "operator new(64UL)" performs dynamic memory allocation.
#   47|           case '#':
#   48|               // Coverity
#   49|->             return new CovParser(input);
#   50|   
#   51|           default:

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:49: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   47|           case '#':
#   48|               // Coverity
#   49|->             return new CovParser(input);
#   50|   
#   51|           default:

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:49: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   47|           case '#':
#   48|               // Coverity
#   49|->             return new CovParser(input);
#   50|   
#   51|           default:

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:49: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   47|           case '#':
#   48|               // Coverity
#   49|->             return new CovParser(input);
#   50|   
#   51|           default:

Error: MISRA C-2012 Rule 16.4 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:52: misra_c_2012_rule_16_4_violation: The switch statement does not have a non-empty default clause.
#   50|   
#   51|           default:
#   52|->             break;
#   53|       }
#   54|   

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:56: misra_c_2012_directive_4_12_violation: A call to the function "operator new(64UL)" performs dynamic memory allocation.
#   54|   
#   55|       // GCC
#   56|->     return new GccParser(input);
#   57|   }
#   58|   

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:56: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   54|   
#   55|       // GCC
#   56|->     return new GccParser(input);
#   57|   }
#   58|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:59: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   57|   }
#   58|   
#   59|-> EFileFormat Parser::inputFormat() const
#   60|   {
#   61|       if (dynamic_cast<JsonParser *>(parser_))

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:61: misra_c_2012_rule_14_4_violation: The condition expression "dynamic_cast <JsonParser *>(this->parser_)" does not have an essentially boolean type.
#   59|   EFileFormat Parser::inputFormat() const
#   60|   {
#   61|->     if (dynamic_cast<JsonParser *>(parser_))
#   62|           return FF_JSON;
#   63|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:61: misra_cpp_2008_rule_5_0_13_violation: The type of "dynamic_cast <JsonParser *>(this->parser_)" is not bool in the condition of "if-statement".
#   59|   EFileFormat Parser::inputFormat() const
#   60|   {
#   61|->     if (dynamic_cast<JsonParser *>(parser_))
#   62|           return FF_JSON;
#   63|   

Error: MISRA C++-2008 Rule 5-2-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:61: misra_cpp_2008_rule_5_2_3_violation: Cast from base class "AbstractParser" to derived class "JsonParser" on polymorphic types.
#   59|   EFileFormat Parser::inputFormat() const
#   60|   {
#   61|->     if (dynamic_cast<JsonParser *>(parser_))
#   62|           return FF_JSON;
#   63|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:62: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   60|   {
#   61|       if (dynamic_cast<JsonParser *>(parser_))
#   62|->         return FF_JSON;
#   63|   
#   64|       if (dynamic_cast<CovParser *>(parser_))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:62: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   60|   {
#   61|       if (dynamic_cast<JsonParser *>(parser_))
#   62|->         return FF_JSON;
#   63|   
#   64|       if (dynamic_cast<CovParser *>(parser_))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:62: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   60|   {
#   61|       if (dynamic_cast<JsonParser *>(parser_))
#   62|->         return FF_JSON;
#   63|   
#   64|       if (dynamic_cast<CovParser *>(parser_))

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:62: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   60|   {
#   61|       if (dynamic_cast<JsonParser *>(parser_))
#   62|->         return FF_JSON;
#   63|   
#   64|       if (dynamic_cast<CovParser *>(parser_))

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:64: misra_c_2012_rule_14_4_violation: The condition expression "dynamic_cast <CovParser *>(this->parser_)" does not have an essentially boolean type.
#   62|           return FF_JSON;
#   63|   
#   64|->     if (dynamic_cast<CovParser *>(parser_))
#   65|           return FF_COVERITY;
#   66|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:64: misra_cpp_2008_rule_5_0_13_violation: The type of "dynamic_cast <CovParser *>(this->parser_)" is not bool in the condition of "if-statement".
#   62|           return FF_JSON;
#   63|   
#   64|->     if (dynamic_cast<CovParser *>(parser_))
#   65|           return FF_COVERITY;
#   66|   

Error: MISRA C++-2008 Rule 5-2-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:64: misra_cpp_2008_rule_5_2_3_violation: Cast from base class "AbstractParser" to derived class "CovParser" on polymorphic types.
#   62|           return FF_JSON;
#   63|   
#   64|->     if (dynamic_cast<CovParser *>(parser_))
#   65|           return FF_COVERITY;
#   66|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:65: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   63|   
#   64|       if (dynamic_cast<CovParser *>(parser_))
#   65|->         return FF_COVERITY;
#   66|   
#   67|       if (dynamic_cast<GccParser *>(parser_))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:65: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   63|   
#   64|       if (dynamic_cast<CovParser *>(parser_))
#   65|->         return FF_COVERITY;
#   66|   
#   67|       if (dynamic_cast<GccParser *>(parser_))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:65: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   63|   
#   64|       if (dynamic_cast<CovParser *>(parser_))
#   65|->         return FF_COVERITY;
#   66|   
#   67|       if (dynamic_cast<GccParser *>(parser_))

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:65: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   63|   
#   64|       if (dynamic_cast<CovParser *>(parser_))
#   65|->         return FF_COVERITY;
#   66|   
#   67|       if (dynamic_cast<GccParser *>(parser_))

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:67: misra_c_2012_rule_14_4_violation: The condition expression "dynamic_cast <GccParser *>(this->parser_)" does not have an essentially boolean type.
#   65|           return FF_COVERITY;
#   66|   
#   67|->     if (dynamic_cast<GccParser *>(parser_))
#   68|           return FF_GCC;
#   69|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:67: misra_cpp_2008_rule_5_0_13_violation: The type of "dynamic_cast <GccParser *>(this->parser_)" is not bool in the condition of "if-statement".
#   65|           return FF_COVERITY;
#   66|   
#   67|->     if (dynamic_cast<GccParser *>(parser_))
#   68|           return FF_GCC;
#   69|   

Error: MISRA C++-2008 Rule 5-2-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:67: misra_cpp_2008_rule_5_2_3_violation: Cast from base class "AbstractParser" to derived class "GccParser" on polymorphic types.
#   65|           return FF_COVERITY;
#   66|   
#   67|->     if (dynamic_cast<GccParser *>(parser_))
#   68|           return FF_GCC;
#   69|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:68: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   66|   
#   67|       if (dynamic_cast<GccParser *>(parser_))
#   68|->         return FF_GCC;
#   69|   
#   70|       return FF_INVALID;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:68: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   66|   
#   67|       if (dynamic_cast<GccParser *>(parser_))
#   68|->         return FF_GCC;
#   69|   
#   70|       return FF_INVALID;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:68: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   66|   
#   67|       if (dynamic_cast<GccParser *>(parser_))
#   68|->         return FF_GCC;
#   69|   
#   70|       return FF_INVALID;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.cc:68: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   66|   
#   67|       if (dynamic_cast<GccParser *>(parser_))
#   68|->         return FF_GCC;
#   69|   
#   70|       return FF_INVALID;

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011-2012 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:29: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "EFileFormat".
#   27|   typedef std::map<std::string, std::string> TScanProps;
#   28|   
#   29|-> enum EFileFormat {
#   30|       FF_INVALID = 0,                         ///< for signalling errors
#   31|       FF_AUTO,                                ///< choose format automatically

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:39: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "AbstractParser".
#   37|   
#   38|   // abstract class with a factory method
#   39|-> class AbstractParser {
#   40|       public:
#   41|           virtual ~AbstractParser() { }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:41: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   39|   class AbstractParser {
#   40|       public:
#   41|->         virtual ~AbstractParser() { }
#   42|           virtual bool getNext(Defect *) = 0;
#   43|           virtual bool hasError() const = 0;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:42: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   40|       public:
#   41|           virtual ~AbstractParser() { }
#   42|->         virtual bool getNext(Defect *) = 0;
#   43|           virtual bool hasError() const = 0;
#   44|   

Error: MISRA C++-2008 Rule 7-1-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:42: misra_cpp_2008_rule_7_1_2_violation: The virtual function "AbstractParser::getNext(Defect *)" or any of its overriding functions do not modify the object pointed to by the this pointer. Consider marking the function const.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:620: overriding_function: Example 1: Overriding function.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:759: overriding_function: Example 2: Overriding function.
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:167: overriding_function: Example 3: Overriding function.
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:337: overriding_function: Example 4: Overriding function.
#   40|       public:
#   41|           virtual ~AbstractParser() { }
#   42|->         virtual bool getNext(Defect *) = 0;
#   43|           virtual bool hasError() const = 0;
#   44|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:43: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   41|           virtual ~AbstractParser() { }
#   42|           virtual bool getNext(Defect *) = 0;
#   43|->         virtual bool hasError() const = 0;
#   44|   
#   45|           /// used only by the JSON format

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:46: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   44|   
#   45|           /// used only by the JSON format
#   46|->         virtual const TScanProps& getScanProps() const {
#   47|               return emptyProps_;
#   48|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:51: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   49|   
#   50|       protected:
#   51|->         AbstractParser() { }
#   52|   
#   53|       private:

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:57: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "createParser".
#   55|   };
#   56|   
#   57|-> AbstractParser* createParser(InStream &input);
#   58|   
#   59|   // RAII

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:60: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "Parser".
#   58|   
#   59|   // RAII
#   60|-> class Parser {
#   61|       public:
#   62|           Parser(InStream &input):

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:68: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   66|           }
#   67|   
#   68|->         ~Parser() {
#   69|               delete parser_;
#   70|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:72: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   70|           }
#   71|   
#   72|->         InStream &input() const {
#   73|               return input_;
#   74|           }

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:76: misra_c_2012_rule_8_13_violation: The member function "Parser::getNext(Defect *)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#   74|           }
#   75|   
#   76|->         bool getNext(Defect *def) {
#   77|               return parser_->getNext(def);
#   78|           }

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:76: misra_cpp_2008_rule_7_1_1_violation: The variable "def" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   74|           }
#   75|   
#   76|->         bool getNext(Defect *def) {
#   77|               return parser_->getNext(def);
#   78|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:80: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   78|           }
#   79|   
#   80|->         bool hasError() const {
#   81|               return parser_->hasError();
#   82|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:84: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   82|           }
#   83|   
#   84|->         const TScanProps& getScanProps() const {
#   85|               return parser_->getScanProps();
#   86|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:88: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   86|           }
#   87|   
#   88|->         EFileFormat inputFormat() const;
#   89|   
#   90|       private:

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:91: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   89|   
#   90|       private:
#   91|->         Parser(const Parser &);
#   92|           Parser& operator=(const Parser &);
#   93|   

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:91: misra_c_2012_rule_8_6_violation: Function "Parser" is declared but never defined.
#   89|   
#   90|       private:
#   91|->         Parser(const Parser &);
#   92|           Parser& operator=(const Parser &);
#   93|   

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:91: misra_cpp_2008_rule_3_2_2_violation: Function "Parser" is declared but never defined.
#   89|   
#   90|       private:
#   91|->         Parser(const Parser &);
#   92|           Parser& operator=(const Parser &);
#   93|   

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:91: misra_cpp_2008_rule_3_2_4_violation: Function "Parser" is declared but never defined.
#   89|   
#   90|       private:
#   91|->         Parser(const Parser &);
#   92|           Parser& operator=(const Parser &);
#   93|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:92: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   90|       private:
#   91|           Parser(const Parser &);
#   92|->         Parser& operator=(const Parser &);
#   93|   
#   94|           InStream       &input_;

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:92: misra_c_2012_rule_8_6_violation: Function "operator =" is declared but never defined.
#   90|       private:
#   91|           Parser(const Parser &);
#   92|->         Parser& operator=(const Parser &);
#   93|   
#   94|           InStream       &input_;

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:92: misra_cpp_2008_rule_3_2_2_violation: Function "operator =" is declared but never defined.
#   90|       private:
#   91|           Parser(const Parser &);
#   92|->         Parser& operator=(const Parser &);
#   93|   
#   94|           InStream       &input_;

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:92: misra_cpp_2008_rule_3_2_4_violation: Function "operator =" is declared but never defined.
#   90|       private:
#   91|           Parser(const Parser &);
#   92|->         Parser& operator=(const Parser &);
#   93|   
#   94|           InStream       &input_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:94: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "input_" clashes with "input"
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:72: misra_typographically_ambiguous_orig: (Previously declared symbol "input" at line 72)
#   92|           Parser& operator=(const Parser &);
#   93|   
#   94|->         InStream       &input_;
#   95|           AbstractParser *parser_;
#   96|   };

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:95: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "parser_" clashes with "Parser"
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:62: misra_typographically_ambiguous_orig: (Previously declared symbol "Parser" at line 62)
#   93|   
#   94|           InStream       &input_;
#   95|->         AbstractParser *parser_;
#   96|   };
#   97|   

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011-2021 Red Hat, Inc.
#    3|    *

Error: MISRA C-2012 Rule 8.5 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:27: misra_c_2012_rule_8_5_violation: Symbol "Defect" is declared more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.hh:23: other_declaration: Another declaration for "Defect".
#   25|   namespace pt = boost::property_tree;
#   26|   
#   27|-> struct Defect;
#   28|   
#   29|   /// abstraction for higher-level decoders for various tree-based file formats

Error: MISRA C++-2008 Rule 3-2-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:27: misra_cpp_2008_rule_3_2_3_violation: Symbol "Defect" is declared more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.hh:23: other_declaration: Another declaration for "Defect".
#   25|   namespace pt = boost::property_tree;
#   26|   
#   27|-> struct Defect;
#   28|   
#   29|   /// abstraction for higher-level decoders for various tree-based file formats

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:27: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "Defect".
#   25|   namespace pt = boost::property_tree;
#   26|   
#   27|-> struct Defect;
#   28|   
#   29|   /// abstraction for higher-level decoders for various tree-based file formats

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:30: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "AbstractTreeDecoder".
#   28|   
#   29|   /// abstraction for higher-level decoders for various tree-based file formats
#   30|-> class AbstractTreeDecoder {
#   31|       public:
#   32|           virtual ~AbstractTreeDecoder() { }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:32: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   30|   class AbstractTreeDecoder {
#   31|       public:
#   32|->         virtual ~AbstractTreeDecoder() { }
#   33|   
#   34|           virtual void readRoot(

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:35: misra_cpp_2008_rule_7_1_1_violation: The variable "pDefList" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   33|   
#   34|           virtual void readRoot(
#   35|->                 const pt::ptree       **pDefList,
#   36|                   const pt::ptree        *root)
#   37|           {

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:36: misra_cpp_2008_rule_7_1_1_violation: The variable "root" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   34|           virtual void readRoot(
#   35|                   const pt::ptree       **pDefList,
#   36|->                 const pt::ptree        *root)
#   37|           {
#   38|               *pDefList = root;

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:47: misra_c_2012_rule_5_8_violation: Identifier "findChildOf" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:47: external_linkage_symbol: Declaring an external linkage function with identifier "findChildOf".
#   45|   
#   46|   template <typename TNode>
#   47|-> bool findChildOf(TNode **pDst, TNode &node, const char *key)
#   48|   {
#   49|       if (node.not_found() == node.find(key))

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:47: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   45|   
#   46|   template <typename TNode>
#   47|-> bool findChildOf(TNode **pDst, TNode &node, const char *key)
#   48|   {
#   49|       if (node.not_found() == node.find(key))

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:47: misra_cpp_2008_rule_7_1_1_violation: The variable "key" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   45|   
#   46|   template <typename TNode>
#   47|-> bool findChildOf(TNode **pDst, TNode &node, const char *key)
#   48|   {
#   49|       if (node.not_found() == node.find(key))

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:47: misra_cpp_2008_rule_7_1_1_violation: The variable "pDst" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   45|   
#   46|   template <typename TNode>
#   47|-> bool findChildOf(TNode **pDst, TNode &node, const char *key)
#   48|   {
#   49|       if (node.not_found() == node.find(key))

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:47: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "findChildOf".
#   45|   
#   46|   template <typename TNode>
#   47|-> bool findChildOf(TNode **pDst, TNode &node, const char *key)
#   48|   {
#   49|       if (node.not_found() == node.find(key))

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:49: misra_c_2012_rule_14_4_violation: The condition expression "boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::assoc_iterator(node->not_found()) == boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::assoc_iterator(node->find(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::key_type const(key, std::allocator<char>())))" does not have an essentially boolean type.
#   47|   bool findChildOf(TNode **pDst, TNode &node, const char *key)
#   48|   {
#   49|->     if (node.not_found() == node.find(key))
#   50|           return false;
#   51|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:49: misra_c_2012_rule_14_4_violation: The condition expression "boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::const_assoc_iterator(node->not_found()) == boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::const_assoc_iterator(node->find(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::key_type const(key, std::allocator<char>())))" does not have an essentially boolean type.
#   47|   bool findChildOf(TNode **pDst, TNode &node, const char *key)
#   48|   {
#   49|->     if (node.not_found() == node.find(key))
#   50|           return false;
#   51|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:50: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   48|   {
#   49|       if (node.not_found() == node.find(key))
#   50|->         return false;
#   51|   
#   52|       *pDst = &node.get_child(key);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:50: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   48|   {
#   49|       if (node.not_found() == node.find(key))
#   50|->         return false;
#   51|   
#   52|       *pDst = &node.get_child(key);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:50: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   48|   {
#   49|       if (node.not_found() == node.find(key))
#   50|->         return false;
#   51|   
#   52|       *pDst = &node.get_child(key);

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:50: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   48|   {
#   49|       if (node.not_found() == node.find(key))
#   50|->         return false;
#   51|   
#   52|       *pDst = &node.get_child(key);

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:57: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   55|   
#   56|   template <typename T>
#   57|-> inline T valueOf(const pt::ptree &node, const char *path, const T &defVal)
#   58|   {
#   59|       const boost::optional<T> &opt = node.get_optional<T>(path);

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:57: misra_c_2012_rule_5_8_violation: Identifier "valueOf" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:57: external_linkage_symbol: Declaring an external linkage function with identifier "valueOf".
#   55|   
#   56|   template <typename T>
#   57|-> inline T valueOf(const pt::ptree &node, const char *path, const T &defVal)
#   58|   {
#   59|       const boost::optional<T> &opt = node.get_optional<T>(path);

Error: MISRA C-2012 Rule 8.10 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:57: misra_c_2012_rule_8_10_violation: The inline function "valueOf<int>(boost::property_tree::ptree const &, char const *, int const &)" is not declared with a static scope.
#   55|   
#   56|   template <typename T>
#   57|-> inline T valueOf(const pt::ptree &node, const char *path, const T &defVal)
#   58|   {
#   59|       const boost::optional<T> &opt = node.get_optional<T>(path);

Error: MISRA C-2012 Rule 8.10 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:57: misra_c_2012_rule_8_10_violation: The inline function "valueOf<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(boost::property_tree::ptree const &, char const *, std::string const &)" is not declared with a static scope.
#   55|   
#   56|   template <typename T>
#   57|-> inline T valueOf(const pt::ptree &node, const char *path, const T &defVal)
#   58|   {
#   59|       const boost::optional<T> &opt = node.get_optional<T>(path);

Error: MISRA C-2012 Rule 8.10 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:57: misra_c_2012_rule_8_10_violation: The inline function "valueOf<typename T1>(boost::property_tree::ptree const &, char const *, /*template param*/ const &)" is not declared with a static scope.
#   55|   
#   56|   template <typename T>
#   57|-> inline T valueOf(const pt::ptree &node, const char *path, const T &defVal)
#   58|   {
#   59|       const boost::optional<T> &opt = node.get_optional<T>(path);

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:57: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   55|   
#   56|   template <typename T>
#   57|-> inline T valueOf(const pt::ptree &node, const char *path, const T &defVal)
#   58|   {
#   59|       const boost::optional<T> &opt = node.get_optional<T>(path);

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:57: misra_cpp_2008_rule_7_1_1_violation: The variable "path" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   55|   
#   56|   template <typename T>
#   57|-> inline T valueOf(const pt::ptree &node, const char *path, const T &defVal)
#   58|   {
#   59|       const boost::optional<T> &opt = node.get_optional<T>(path);

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:57: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "valueOf".
#   55|   
#   56|   template <typename T>
#   57|-> inline T valueOf(const pt::ptree &node, const char *path, const T &defVal)
#   58|   {
#   59|       const boost::optional<T> &opt = node.get_optional<T>(path);

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:63: misra_c_2012_rule_5_8_violation: Identifier "getStringValue" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:68: external_linkage_symbol: Declaring an external linkage function with identifier "getStringValue".
#   61|   }
#   62|   
#   63|-> inline std::string getStringValue(const pt::ptree *const node)
#   64|   {
#   65|       return node->get_value<std::string>();

Error: MISRA C-2012 Rule 8.10 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:63: misra_c_2012_rule_8_10_violation: The inline function "getStringValue(boost::property_tree::ptree const *)" is not declared with a static scope.
#   61|   }
#   62|   
#   63|-> inline std::string getStringValue(const pt::ptree *const node)
#   64|   {
#   65|       return node->get_value<std::string>();

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:63: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   61|   }
#   62|   
#   63|-> inline std::string getStringValue(const pt::ptree *const node)
#   64|   {
#   65|       return node->get_value<std::string>();

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:63: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "getStringValue".
#   61|   }
#   62|   
#   63|-> inline std::string getStringValue(const pt::ptree *const node)
#   64|   {
#   65|       return node->get_value<std::string>();

Error: MISRA C-2012 Rule 8.10 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:68: misra_c_2012_rule_8_10_violation: The inline function "getStringValue(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::const_iterator)" is not declared with a static scope.
#   66|   }
#   67|   
#   68|-> inline std::string getStringValue(const pt::ptree::const_iterator it)
#   69|   {
#   70|       return getStringValue(&it->second);

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:68: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   66|   }
#   67|   
#   68|-> inline std::string getStringValue(const pt::ptree::const_iterator it)
#   69|   {
#   70|       return getStringValue(&it->second);

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:68: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "getStringValue".
#   66|   }
#   67|   
#   68|-> inline std::string getStringValue(const pt::ptree::const_iterator it)
#   69|   {
#   70|       return getStringValue(&it->second);

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:31: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "parser" clashes with "Parser"
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:60: misra_typographically_ambiguous_orig: (Previously declared symbol "Parser" at line 60 of "../../src/abstract-parser.hh")
#   29|   // implementation of AbstractWriter
#   30|   
#   31|-> bool AbstractWriter::handleFile(Parser &parser)
#   32|   {
#   33|           this->notifyFile(parser.input().fileName());

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:37: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   35|           // detect the input format and create the parser
#   36|           if (inputFormat_ == FF_INVALID)
#   37|->             inputFormat_ = parser.inputFormat();
#   38|   
#   39|           // read scan properties if still empty

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:37: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   35|           // detect the input format and create the parser
#   36|           if (inputFormat_ == FF_INVALID)
#   37|->             inputFormat_ = parser.inputFormat();
#   38|   
#   39|           // read scan properties if still empty

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:41: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   39|           // read scan properties if still empty
#   40|           if (this->getScanProps().empty())
#   41|->             this->setScanProps(parser.getScanProps());
#   42|   
#   43|           Defect def;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:41: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   39|           // read scan properties if still empty
#   40|           if (this->getScanProps().empty())
#   41|->             this->setScanProps(parser.getScanProps());
#   42|   
#   43|           Defect def;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:45: misra_c_2012_rule_15_6_violation: The body of the "while" loop is not a compound statement.
#   43|           Defect def;
#   44|           while (parser.getNext(&def))
#   45|->             this->handleDef(def);
#   46|   
#   47|           return !parser.hasError();

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:45: misra_cpp_2008_rule_6_3_1_violation: The body of the "while" loop is not a compound statement.
#   43|           Defect def;
#   44|           while (parser.getNext(&def))
#   45|->             this->handleDef(def);
#   46|   
#   47|           return !parser.hasError();

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:52: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "parser" clashes with "Parser"
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:60: misra_typographically_ambiguous_orig: (Previously declared symbol "Parser" at line 60 of "../../src/abstract-parser.hh")
#   50|   bool AbstractWriter::handleFile(InStream &input)
#   51|   {
#   52|->     Parser parser(input);
#   53|       return this->handleFile(parser);
#   54|   }

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:56: misra_cpp_2008_rule_7_1_1_violation: The variable "silent" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   54|   }
#   55|   
#   56|-> bool AbstractWriter::handleFile(const std::string &fileName, bool silent)
#   57|   {
#   58|       try {

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:60: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   58|       try {
#   59|           InStream str(fileName, silent);
#   60|->         return this->handleFile(str);
#   61|       }
#   62|       catch (const InFileException &e) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:60: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   58|       try {
#   59|           InStream str(fileName, silent);
#   60|->         return this->handleFile(str);
#   61|       }
#   62|       catch (const InFileException &e) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:63: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   61|       }
#   62|       catch (const InFileException &e) {
#   63|->         std::cerr << e.fileName << ": failed to open input file\n";
#   64|           return false;
#   65|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:64: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   62|       catch (const InFileException &e) {
#   63|           std::cerr << e.fileName << ": failed to open input file\n";
#   64|->         return false;
#   65|       }
#   66|   }

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:64: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   62|       catch (const InFileException &e) {
#   63|           std::cerr << e.fileName << ": failed to open input file\n";
#   64|->         return false;
#   65|       }
#   66|   }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:71: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   69|   {
#   70|       if (scanProps.empty())
#   71|->         return;
#   72|   
#   73|       std::cerr << "warning: scan properties not supported by output format\n";

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:71: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   69|   {
#   70|       if (scanProps.empty())
#   71|->         return;
#   72|   
#   73|       std::cerr << "warning: scan properties not supported by output format\n";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:71: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   69|   {
#   70|       if (scanProps.empty())
#   71|->         return;
#   72|   
#   73|       std::cerr << "warning: scan properties not supported by output format\n";

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:71: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   69|   {
#   70|       if (scanProps.empty())
#   71|->         return;
#   72|   
#   73|       std::cerr << "warning: scan properties not supported by output format\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:73: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   71|           return;
#   72|   
#   73|->     std::cerr << "warning: scan properties not supported by output format\n";
#   74|   }
#   75|   

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:76: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "createWriter".
#   74|   }
#   75|   
#   76|-> AbstractWriter* createWriter(
#   77|           std::ostream               &strDst,
#   78|           const EFileFormat           format,

Error: MISRA C++-2008 Rule 4-10-2 (CWE-547):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:82: misra_cpp_2008_rule_4_10_2_violation: Literal zero (0) is used as the null-pointer-constant.
#   80|           const TScanProps           &scanProps)
#   81|   {
#   82|->     AbstractWriter *writer = 0;
#   83|   
#   84|       switch (format) {

Error: MISRA C-2012 Rule 16.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:84: missing_default: No default case found for the switch statement "switch (format)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:84: misra_c_2012_rule_16_1_violation: The switch statement is not well formed.
#   82|       AbstractWriter *writer = 0;
#   83|   
#   84|->     switch (format) {
#   85|           case FF_GCC:
#   86|               // we have no writer for GCC format, fallback to Coverity

Error: MISRA C-2012 Rule 16.4 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:84: misra_c_2012_rule_16_4_violation: The switch statement "switch (format)"does not have a non-empty default clause.
#   82|       AbstractWriter *writer = 0;
#   83|   
#   84|->     switch (format) {
#   85|           case FF_GCC:
#   86|               // we have no writer for GCC format, fallback to Coverity

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:91: misra_c_2012_directive_4_12_violation: A call to the function "operator new(72UL)" performs dynamic memory allocation.
#   89|           case FF_INVALID:
#   90|           case FF_COVERITY:
#   91|->             writer = new CovWriter(strDst, cm);
#   92|               break;
#   93|   

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:91: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   89|           case FF_INVALID:
#   90|           case FF_COVERITY:
#   91|->             writer = new CovWriter(strDst, cm);
#   92|               break;
#   93|   

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:98: misra_c_2012_directive_4_12_violation: A call to the function "operator new(72UL)" performs dynamic memory allocation.
#   96|   
#   97|           case FF_JSON:
#   98|->             writer = new JsonWriter(strDst);
#   99|               break;
#  100|   

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:98: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   96|   
#   97|           case FF_JSON:
#   98|->             writer = new JsonWriter(strDst);
#   99|               break;
#  100|   

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:104: misra_c_2012_directive_4_12_violation: A call to the function "operator new(72UL)" performs dynamic memory allocation.
#  102|               const std::string emp;
#  103|               const std::string spPlacement = "bottom";
#  104|->             writer = new HtmlWriter(strDst, emp, emp, spPlacement);
#  105|               break;
#  106|           }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:104: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  102|               const std::string emp;
#  103|               const std::string spPlacement = "bottom";
#  104|->             writer = new HtmlWriter(strDst, emp, emp, spPlacement);
#  105|               break;
#  106|           }

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:110: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  108|   
#  109|       if (!scanProps.empty())
#  110|->         writer->setScanProps(scanProps);
#  111|   
#  112|       return writer;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:110: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  108|   
#  109|       if (!scanProps.empty())
#  110|->         writer->setScanProps(scanProps);
#  111|   
#  112|       return writer;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:120: misra_cpp_2008_rule_11_0_1_violation: Member "reAnyCtxLine" is not private but "CtxEventDetector::Private" is a non-POD type.
#  118|   
#  119|   struct CtxEventDetector::Private {
#  120|->     const RE reAnyCtxLine = RE("^ *[0-9]+\\|(?:->)? .*$");
#  121|       const RE reKeyCtxLine = RE("^ *[0-9]+\\|-> .*$");
#  122|   };

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:121: misra_cpp_2008_rule_11_0_1_violation: Member "reKeyCtxLine" is not private but "CtxEventDetector::Private" is a non-POD type.
#  119|   struct CtxEventDetector::Private {
#  120|       const RE reAnyCtxLine = RE("^ *[0-9]+\\|(?:->)? .*$");
#  121|->     const RE reKeyCtxLine = RE("^ *[0-9]+\\|-> .*$");
#  122|   };
#  123|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:124: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  122|   };
#  123|   
#  124|-> CtxEventDetector::CtxEventDetector():
#  125|       d(new Private)
#  126|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:125: misra_c_2012_directive_4_12_violation: A call to the function "operator new(32UL)" performs dynamic memory allocation.
#  123|   
#  124|   CtxEventDetector::CtxEventDetector():
#  125|->     d(new Private)
#  126|   {
#  127|   }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:125: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  123|   
#  124|   CtxEventDetector::CtxEventDetector():
#  125|->     d(new Private)
#  126|   {
#  127|   }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.cc:129: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  127|   }
#  128|   
#  129|-> CtxEventDetector::~CtxEventDetector()
#  130|   {
#  131|       delete d;

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:27: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "AbstractWriter".
#   25|   
#   26|   // FIXME: misleading class name
#   27|-> class AbstractWriter {
#   28|       public:
#   29|           virtual void handleDef(const Defect &def) = 0;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:30: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   28|       public:
#   29|           virtual void handleDef(const Defect &def) = 0;
#   30|->         virtual void notifyFile(const std::string &) { }
#   31|   
#   32|       public:

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:33: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   31|   
#   32|       public:
#   33|->         AbstractWriter():
#   34|               inputFormat_(FF_INVALID)
#   35|           {

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:38: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   36|           }
#   37|   
#   38|->         virtual ~AbstractWriter() { }
#   39|   
#   40|           virtual void flush() { };

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:40: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   38|           virtual ~AbstractWriter() { }
#   39|   
#   40|->         virtual void flush() { };
#   41|   
#   42|           bool handleFile(Parser &parser);

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:42: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "parser" clashes with "Parser"
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:60: misra_typographically_ambiguous_orig: (Previously declared symbol "Parser" at line 60 of "../../src/abstract-parser.hh")
#   40|           virtual void flush() { };
#   41|   
#   42|->         bool handleFile(Parser &parser);
#   43|   
#   44|           bool handleFile(InStream &);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:44: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   42|           bool handleFile(Parser &parser);
#   43|   
#   44|->         bool handleFile(InStream &);
#   45|   
#   46|           bool handleFile(const std::string &fileName, bool silent);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:48: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   46|           bool handleFile(const std::string &fileName, bool silent);
#   47|   
#   48|->         EFileFormat inputFormat() const {
#   49|               return inputFormat_;
#   50|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:52: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   50|           }
#   51|   
#   52|->         virtual const TScanProps& getScanProps() const {
#   53|               return emptyProps_;
#   54|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:56: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   54|           }
#   55|   
#   56|->         virtual void setScanProps(const TScanProps &);
#   57|   
#   58|       private:

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:59: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   57|   
#   58|       private:
#   59|->         AbstractWriter(const AbstractWriter &);
#   60|           AbstractWriter& operator=(const AbstractWriter &);
#   61|   

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:59: misra_c_2012_rule_8_6_violation: Function "AbstractWriter" is declared but never defined.
#   57|   
#   58|       private:
#   59|->         AbstractWriter(const AbstractWriter &);
#   60|           AbstractWriter& operator=(const AbstractWriter &);
#   61|   

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:59: misra_cpp_2008_rule_3_2_2_violation: Function "AbstractWriter" is declared but never defined.
#   57|   
#   58|       private:
#   59|->         AbstractWriter(const AbstractWriter &);
#   60|           AbstractWriter& operator=(const AbstractWriter &);
#   61|   

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:59: misra_cpp_2008_rule_3_2_4_violation: Function "AbstractWriter" is declared but never defined.
#   57|   
#   58|       private:
#   59|->         AbstractWriter(const AbstractWriter &);
#   60|           AbstractWriter& operator=(const AbstractWriter &);
#   61|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:60: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   58|       private:
#   59|           AbstractWriter(const AbstractWriter &);
#   60|->         AbstractWriter& operator=(const AbstractWriter &);
#   61|   
#   62|       private:

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:60: misra_c_2012_rule_8_6_violation: Function "operator =" is declared but never defined.
#   58|       private:
#   59|           AbstractWriter(const AbstractWriter &);
#   60|->         AbstractWriter& operator=(const AbstractWriter &);
#   61|   
#   62|       private:

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:60: misra_cpp_2008_rule_3_2_2_violation: Function "operator =" is declared but never defined.
#   58|       private:
#   59|           AbstractWriter(const AbstractWriter &);
#   60|->         AbstractWriter& operator=(const AbstractWriter &);
#   61|   
#   62|       private:

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:60: misra_cpp_2008_rule_3_2_4_violation: Function "operator =" is declared but never defined.
#   58|       private:
#   59|           AbstractWriter(const AbstractWriter &);
#   60|->         AbstractWriter& operator=(const AbstractWriter &);
#   61|   
#   62|       private:

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:63: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "inputFormat_" clashes with "inputFormat"
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:48: misra_typographically_ambiguous_orig: (Previously declared symbol "inputFormat" at line 48)
#   61|   
#   62|       private:
#   63|->         EFileFormat                 inputFormat_;
#   64|           const TScanProps            emptyProps_;
#   65|   };

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:67: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "createWriter".
#   65|   };
#   66|   
#   67|-> AbstractWriter* createWriter(
#   68|           std::ostream               &strDst,
#   69|           const EFileFormat           format,

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:73: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "CtxEventDetector".
#   71|           const TScanProps           &scanProps = TScanProps());
#   72|   
#   73|-> class CtxEventDetector {
#   74|       public:
#   75|           CtxEventDetector();

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:75: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   73|   class CtxEventDetector {
#   74|       public:
#   75|->         CtxEventDetector();
#   76|           ~CtxEventDetector();
#   77|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-writer.hh:76: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   74|       public:
#   75|           CtxEventDetector();
#   76|->         ~CtxEventDetector();
#   77|   
#   78|           bool isAnyCtxLine(const DefEvent &evt) const;

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2014 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:24: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "ColorWriter::ColorWriter(const std::ostream &, EColorMode)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:41: prev_declaration: (see previous declaration of "ColorWriter::ColorWriter" at line 41 of "../../src/color.hh")
#   22|   #include <unistd.h>
#   23|   
#   24|-> ColorWriter::ColorWriter(const std::ostream &str, const EColorMode cm)
#   25|   {
#   26|       switch (cm) {

Error: MISRA C-2012 Rule 16.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:35: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:26: misra_c_2012_rule_16_1_violation: The switch statement is not well formed.
#   24|   ColorWriter::ColorWriter(const std::ostream &str, const EColorMode cm)
#   25|   {
#   26|->     switch (cm) {
#   27|           case CM_NEVER:
#   28|               enabled_ = false;

Error: MISRA C++-2008 Rule 6-4-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:36: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:26: misra_cpp_2008_rule_6_4_3_violation: The switch statement is not well formed.
#   24|   ColorWriter::ColorWriter(const std::ostream &str, const EColorMode cm)
#   25|   {
#   26|->     switch (cm) {
#   27|           case CM_NEVER:
#   28|               enabled_ = false;

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:35: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#   33|               break;
#   34|   
#   35|->         case CM_AUTO:
#   36|           default:
#   37|               enabled_ = (&str == &std::cout)

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:35: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#   33|               break;
#   34|   
#   35|->         case CM_AUTO:
#   36|           default:
#   37|               enabled_ = (&str == &std::cout)

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:37: misra_cpp_2008_rule_5_3_1_violation: Operand "isatty(1)" of the operator "&&" is not bool type.
#   35|           case CM_AUTO:
#   36|           default:
#   37|->             enabled_ = (&str == &std::cout)
#   38|                   && isatty(STDOUT_FILENO);
#   39|       }

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:38: misra_c_2012_rule_10_1_violation: The expression "isatty(1)" of non-boolean essential type is being interpreted as a boolean value for the operator "&&".
#   36|           default:
#   37|               enabled_ = (&str == &std::cout)
#   38|->                 && isatty(STDOUT_FILENO);
#   39|       }
#   40|   }

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:42: misra_c_2012_rule_8_13_violation: The member function "ColorWriter::setColor(EColor)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#   40|   }
#   41|   
#   42|-> const char* ColorWriter::setColor(const EColor color)
#   43|   {
#   44|       if (!enabled_)

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:42: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "const char *ColorWriter::setColor(EColor)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:42: prev_declaration: (see previous declaration of "ColorWriter::setColor" at line 42 of "../../src/color.hh")
#   40|   }
#   41|   
#   42|-> const char* ColorWriter::setColor(const EColor color)
#   43|   {
#   44|       if (!enabled_)

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:42: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#   40|   }
#   41|   
#   42|-> const char* ColorWriter::setColor(const EColor color)
#   43|   {
#   44|       if (!enabled_)

Error: MISRA C++-2008 Rule 9-3-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:42: misra_cpp_2008_rule_9_3_3_violation: Member function "setColor" does not modify members, so can be made const.
#   40|   }
#   41|   
#   42|-> const char* ColorWriter::setColor(const EColor color)
#   43|   {
#   44|       if (!enabled_)

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:45: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   43|   {
#   44|       if (!enabled_)
#   45|->         return "";
#   46|   
#   47|       switch (color) {

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:45: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   43|   {
#   44|       if (!enabled_)
#   45|->         return "";
#   46|   
#   47|       switch (color) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:45: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   43|   {
#   44|       if (!enabled_)
#   45|->         return "";
#   46|   
#   47|       switch (color) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:45: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   43|   {
#   44|       if (!enabled_)
#   45|->         return "";
#   46|   
#   47|       switch (color) {

Error: MISRA C-2012 Rule 16.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:47: missing_default: No default case found for the switch statement "switch (color)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:48: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:49: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:50: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:51: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:52: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:47: misra_c_2012_rule_16_1_violation: The switch statement is not well formed.
#   45|           return "";
#   46|   
#   47|->     switch (color) {
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";

Error: MISRA C-2012 Rule 16.4 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:47: misra_c_2012_rule_16_4_violation: The switch statement "switch (color)"does not have a non-empty default clause.
#   45|           return "";
#   46|   
#   47|->     switch (color) {
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";

Error: MISRA C-2012 Rule 16.6 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:47: misra_c_2012_rule_16_6_violation: The switch statement "switch (color)" has no conforming switch clauses.
#   45|           return "";
#   46|   
#   47|->     switch (color) {
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";

Error: MISRA C++-2008 Rule 6-4-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:48: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:48: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:49: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:49: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:50: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:50: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:51: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:51: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:52: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:52: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:47: misra_cpp_2008_rule_6_4_3_violation: The switch statement is not well formed.
#   45|           return "";
#   46|   
#   47|->     switch (color) {
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";

Error: MISRA C++-2008 Rule 6-4-8 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:47: misra_cpp_2008_rule_6_4_8_violation: The switch statement has no case-clause.
#   45|           return "";
#   46|   
#   47|->     switch (color) {
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:48: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   46|   
#   47|       switch (color) {
#   48|->         case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:48: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#   46|   
#   47|       switch (color) {
#   48|->         case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";

Error: MISRA C-2012 Rule 4.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:48: misra_c_2012_rule_4_1_violation: octal or hexadecimal escape sequence is not terminated
#   46|   
#   47|       switch (color) {
#   48|->         case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";

Error: MISRA C++-2008 Rule 2-13-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:48: misra_cpp_2008_rule_2_13_2_violation: Octal escape "\033" used.
#   46|   
#   47|       switch (color) {
#   48|->         case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:48: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#   46|   
#   47|       switch (color) {
#   48|->         case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:48: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   46|   
#   47|       switch (color) {
#   48|->         case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:49: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   47|       switch (color) {
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|->         case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:49: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#   47|       switch (color) {
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|->         case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";

Error: MISRA C-2012 Rule 4.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:49: misra_c_2012_rule_4_1_violation: octal or hexadecimal escape sequence is not terminated
#   47|       switch (color) {
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|->         case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";

Error: MISRA C++-2008 Rule 2-13-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:49: misra_cpp_2008_rule_2_13_2_violation: Octal escape "\033" used.
#   47|       switch (color) {
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|->         case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:49: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#   47|       switch (color) {
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|->         case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:49: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   47|       switch (color) {
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|->         case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:50: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|->         case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|           case C_WHITE:           return "\033[1;37m";

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:50: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|->         case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|           case C_WHITE:           return "\033[1;37m";

Error: MISRA C-2012 Rule 4.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:50: misra_c_2012_rule_4_1_violation: octal or hexadecimal escape sequence is not terminated
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|->         case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|           case C_WHITE:           return "\033[1;37m";

Error: MISRA C++-2008 Rule 2-13-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:50: misra_cpp_2008_rule_2_13_2_violation: Octal escape "\033" used.
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|->         case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|           case C_WHITE:           return "\033[1;37m";

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:50: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|->         case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|           case C_WHITE:           return "\033[1;37m";

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:50: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   48|           case C_NO_COLOR:        return "\033[0m";
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|->         case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|           case C_WHITE:           return "\033[1;37m";

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:51: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|->         case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|           case C_WHITE:           return "\033[1;37m";
#   53|       }

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:51: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|->         case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|           case C_WHITE:           return "\033[1;37m";
#   53|       }

Error: MISRA C-2012 Rule 4.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:51: misra_c_2012_rule_4_1_violation: octal or hexadecimal escape sequence is not terminated
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|->         case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|           case C_WHITE:           return "\033[1;37m";
#   53|       }

Error: MISRA C++-2008 Rule 2-13-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:51: misra_cpp_2008_rule_2_13_2_violation: Octal escape "\033" used.
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|->         case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|           case C_WHITE:           return "\033[1;37m";
#   53|       }

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:51: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|->         case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|           case C_WHITE:           return "\033[1;37m";
#   53|       }

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:51: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   49|           case C_DARK_GRAY:       return "\033[1;30m";
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|->         case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|           case C_WHITE:           return "\033[1;37m";
#   53|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:52: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|->         case C_WHITE:           return "\033[1;37m";
#   53|       }
#   54|   

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:52: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|->         case C_WHITE:           return "\033[1;37m";
#   53|       }
#   54|   

Error: MISRA C-2012 Rule 4.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:52: misra_c_2012_rule_4_1_violation: octal or hexadecimal escape sequence is not terminated
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|->         case C_WHITE:           return "\033[1;37m";
#   53|       }
#   54|   

Error: MISRA C++-2008 Rule 2-13-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:52: misra_cpp_2008_rule_2_13_2_violation: Octal escape "\033" used.
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|->         case C_WHITE:           return "\033[1;37m";
#   53|       }
#   54|   

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:52: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|->         case C_WHITE:           return "\033[1;37m";
#   53|       }
#   54|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:52: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   50|           case C_LIGHT_GREEN:     return "\033[1;32m";
#   51|           case C_LIGHT_CYAN:      return "\033[1;36m";
#   52|->         case C_WHITE:           return "\033[1;37m";
#   53|       }
#   54|   

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:58: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "const char *ColorWriter::setColorIf(bool, EColor)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:43: prev_declaration: (see previous declaration of "ColorWriter::setColorIf" at line 43 of "../../src/color.hh")
#   56|   }
#   57|   
#   58|-> const char* ColorWriter::setColorIf(bool cond, const EColor color)
#   59|   {
#   60|       return (cond) ? this->setColor(color) : "";

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:58: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#   56|   }
#   57|   
#   58|-> const char* ColorWriter::setColorIf(bool cond, const EColor color)
#   59|   {
#   60|       return (cond) ? this->setColor(color) : "";

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:58: misra_cpp_2008_rule_7_1_1_violation: The variable "cond" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   56|   }
#   57|   
#   58|-> const char* ColorWriter::setColorIf(bool cond, const EColor color)
#   59|   {
#   60|       return (cond) ? this->setColor(color) : "";

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2014 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:25: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "EColorMode".
#   23|   #include <iostream>
#   24|   
#   25|-> enum EColorMode {
#   26|       CM_AUTO,
#   27|       CM_NEVER,

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:31: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "EColor".
#   29|   };
#   30|   
#   31|-> enum EColor {
#   32|       C_NO_COLOR,
#   33|       C_DARK_GRAY,

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:39: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "ColorWriter".
#   37|   };
#   38|   
#   39|-> class ColorWriter {
#   40|       public:
#   41|           ColorWriter(const std::ostream &str, EColorMode);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:41: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   39|   class ColorWriter {
#   40|       public:
#   41|->         ColorWriter(const std::ostream &str, EColorMode);
#   42|           const char* setColor(EColor);
#   43|           const char* setColorIf(bool, EColor);

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:41: misra_c_2012_rule_8_3_violation: Symbol "ColorWriter" is declared more than once and with types that are not identical.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.cc:24: definition: Definition for "ColorWriter".
#   39|   class ColorWriter {
#   40|       public:
#   41|->         ColorWriter(const std::ostream &str, EColorMode);
#   42|           const char* setColor(EColor);
#   43|           const char* setColorIf(bool, EColor);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:42: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   40|       public:
#   41|           ColorWriter(const std::ostream &str, EColorMode);
#   42|->         const char* setColor(EColor);
#   43|           const char* setColorIf(bool, EColor);
#   44|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:42: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#   40|       public:
#   41|           ColorWriter(const std::ostream &str, EColorMode);
#   42|->         const char* setColor(EColor);
#   43|           const char* setColorIf(bool, EColor);
#   44|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:43: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   41|           ColorWriter(const std::ostream &str, EColorMode);
#   42|           const char* setColor(EColor);
#   43|->         const char* setColorIf(bool, EColor);
#   44|   
#   45|       private:

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:43: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#   41|           ColorWriter(const std::ostream &str, EColorMode);
#   42|           const char* setColor(EColor);
#   43|->         const char* setColorIf(bool, EColor);
#   44|   
#   45|       private:

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:50: misra_c_2012_rule_5_8_violation: Identifier "addColorOptions" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:50: external_linkage_symbol: Declaring an external linkage function with identifier "addColorOptions".
#   48|   
#   49|   template <class TOptDesc>
#   50|-> void addColorOptions(TOptDesc *desc)
#   51|   {
#   52|       desc->add_options()

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:50: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   48|   
#   49|   template <class TOptDesc>
#   50|-> void addColorOptions(TOptDesc *desc)
#   51|   {
#   52|       desc->add_options()

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:50: misra_cpp_2008_rule_7_1_1_violation: The variable "desc" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   48|   
#   49|   template <class TOptDesc>
#   50|-> void addColorOptions(TOptDesc *desc)
#   51|   {
#   52|       desc->add_options()

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:50: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "addColorOptions".
#   48|   
#   49|   template <class TOptDesc>
#   50|-> void addColorOptions(TOptDesc *desc)
#   51|   {
#   52|       desc->add_options()

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:52: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#   50|   void addColorOptions(TOptDesc *desc)
#   51|   {
#   52|->     desc->add_options()
#   53|           ("color",
#   54|            "use colorized console output (default if connected to a terminal)")

Error: MISRA C++-2008 Rule 14-6-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:52: misra_cpp_2008_rule_14_6_2_violation: Function call resolves to a function declared after its usage.
/usr/include/boost/program_options/options_description.hpp:167: function_chosen: (chose function "boost::program_options::options_description_easy_init::operator()(const char *, const char *)" at line 167 of "/usr/include/boost/program_options/options_description.hpp")
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:55: det_during_template_instantiation_context: detected during instantiation of "void addColorOptions(TOptDesc *) [with TOptDesc=boost::program_options::options_description]" at line 55 of "../../src/csdiff.cc"
#   50|   void addColorOptions(TOptDesc *desc)
#   51|   {
#   52|->     desc->add_options()
#   53|           ("color",
#   54|            "use colorized console output (default if connected to a terminal)")

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:60: misra_c_2012_rule_5_8_violation: Identifier "readColorOptions" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:60: external_linkage_symbol: Declaring an external linkage function with identifier "readColorOptions".
#   58|   
#   59|   template <class TValMap>
#   60|-> bool readColorOptions(EColorMode *pDst, const char **pErr, const TValMap &vm)
#   61|   {
#   62|       const bool colorAlways = vm.count("color");

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:60: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   58|   
#   59|   template <class TValMap>
#   60|-> bool readColorOptions(EColorMode *pDst, const char **pErr, const TValMap &vm)
#   61|   {
#   62|       const bool colorAlways = vm.count("color");

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:60: misra_cpp_2008_rule_7_1_1_violation: The variable "pDst" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   58|   
#   59|   template <class TValMap>
#   60|-> bool readColorOptions(EColorMode *pDst, const char **pErr, const TValMap &vm)
#   61|   {
#   62|       const bool colorAlways = vm.count("color");

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:60: misra_cpp_2008_rule_7_1_1_violation: The variable "pErr" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   58|   
#   59|   template <class TValMap>
#   60|-> bool readColorOptions(EColorMode *pDst, const char **pErr, const TValMap &vm)
#   61|   {
#   62|       const bool colorAlways = vm.count("color");

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:60: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "readColorOptions".
#   58|   
#   59|   template <class TValMap>
#   60|-> bool readColorOptions(EColorMode *pDst, const char **pErr, const TValMap &vm)
#   61|   {
#   62|       const bool colorAlways = vm.count("color");

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:62: misra_c_2012_rule_10_3_violation: Implicit conversion of "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("color", std::allocator<char>()))" from essential type "non-essential type" to different or narrower essential type "boolean".
#   60|   bool readColorOptions(EColorMode *pDst, const char **pErr, const TValMap &vm)
#   61|   {
#   62|->     const bool colorAlways = vm.count("color");
#   63|       const bool colorNever = vm.count("no-color");
#   64|       if (colorAlways && colorNever) {

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:62: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("color", std::allocator<char>()))" is implicitly reduced from "64-bit unsigned long" to "bool".
#   60|   bool readColorOptions(EColorMode *pDst, const char **pErr, const TValMap &vm)
#   61|   {
#   62|->     const bool colorAlways = vm.count("color");
#   63|       const bool colorNever = vm.count("no-color");
#   64|       if (colorAlways && colorNever) {

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:63: misra_c_2012_rule_10_3_violation: Implicit conversion of "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("no-color", std::allocator<char>()))" from essential type "non-essential type" to different or narrower essential type "boolean".
#   61|   {
#   62|       const bool colorAlways = vm.count("color");
#   63|->     const bool colorNever = vm.count("no-color");
#   64|       if (colorAlways && colorNever) {
#   65|           *pErr = "options --color and --no-color are mutually exclusive";

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:63: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("no-color", std::allocator<char>()))" is implicitly reduced from "64-bit unsigned long" to "bool".
#   61|   {
#   62|       const bool colorAlways = vm.count("color");
#   63|->     const bool colorNever = vm.count("no-color");
#   64|       if (colorAlways && colorNever) {
#   65|           *pErr = "options --color and --no-color are mutually exclusive";

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:66: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   64|       if (colorAlways && colorNever) {
#   65|           *pErr = "options --color and --no-color are mutually exclusive";
#   66|->         return false;
#   67|       }
#   68|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:66: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   64|       if (colorAlways && colorNever) {
#   65|           *pErr = "options --color and --no-color are mutually exclusive";
#   66|->         return false;
#   67|       }
#   68|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:70: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   68|   
#   69|       if (colorAlways)
#   70|->         *pDst = CM_ALWAYS;
#   71|       else if (colorNever)
#   72|           *pDst = CM_NEVER;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:70: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   68|   
#   69|       if (colorAlways)
#   70|->         *pDst = CM_ALWAYS;
#   71|       else if (colorNever)
#   72|           *pDst = CM_NEVER;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:72: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   70|           *pDst = CM_ALWAYS;
#   71|       else if (colorNever)
#   72|->         *pDst = CM_NEVER;
#   73|       else
#   74|           *pDst = CM_AUTO;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:72: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   70|           *pDst = CM_ALWAYS;
#   71|       else if (colorNever)
#   72|->         *pDst = CM_NEVER;
#   73|       else
#   74|           *pDst = CM_AUTO;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:74: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   72|           *pDst = CM_NEVER;
#   73|       else
#   74|->         *pDst = CM_AUTO;
#   75|   
#   76|       return true;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/color.hh:74: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   72|           *pDst = CM_NEVER;
#   73|       else
#   74|->         *pDst = CM_AUTO;
#   75|   
#   76|       return true;

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011-2012 Red Hat, Inc.
#    3|    *

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:30: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   28|   // FIXME: some keys should be merge more intelligently if they already exist
#   29|   // TODO: define a nesting limit for keys like diffbase-diffbase-diffbase-...
#   30|-> void mergeScanProps(TScanProps &props, const TScanProps &oldProps)
#   31|   {
#   32|       for (TScanProps::const_reference item : oldProps) {

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:30: misra_c_2012_rule_8_7_violation: Function "mergeScanProps" has external linkage but is only used in one translation unit.
#   28|   // FIXME: some keys should be merge more intelligently if they already exist
#   29|   // TODO: define a nesting limit for keys like diffbase-diffbase-diffbase-...
#   30|-> void mergeScanProps(TScanProps &props, const TScanProps &oldProps)
#   31|   {
#   32|       for (TScanProps::const_reference item : oldProps) {

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:30: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   28|   // FIXME: some keys should be merge more intelligently if they already exist
#   29|   // TODO: define a nesting limit for keys like diffbase-diffbase-diffbase-...
#   30|-> void mergeScanProps(TScanProps &props, const TScanProps &oldProps)
#   31|   {
#   32|       for (TScanProps::const_reference item : oldProps) {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:30: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "mergeScanProps".
#   28|   // FIXME: some keys should be merge more intelligently if they already exist
#   29|   // TODO: define a nesting limit for keys like diffbase-diffbase-diffbase-...
#   30|-> void mergeScanProps(TScanProps &props, const TScanProps &oldProps)
#   31|   {
#   32|       for (TScanProps::const_reference item : oldProps) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:32: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#   30|   void mergeScanProps(TScanProps &props, const TScanProps &oldProps)
#   31|   {
#   32|->     for (TScanProps::const_reference item : oldProps) {
#   33|           const std::string &oldKey = item.first;
#   34|           const std::string &oldVal = item.second;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:36: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#   34|           const std::string &oldVal = item.second;
#   35|           std::string key("diffbase-");
#   36|->         key += oldKey;
#   37|           props[key] = oldVal;
#   38|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:37: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   35|           std::string key("diffbase-");
#   36|           key += oldKey;
#   37|->         props[key] = oldVal;
#   38|       }
#   39|   }

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:41: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "bool diffScans(std::ostream &, InStream &, InStream &, bool, EFileFormat, EColorMode)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.hh:24: prev_declaration: (see previous declaration of "diffScans" at line 24 of "../../src/csdiff-core.hh")
#   39|   }
#   40|   
#   41|-> bool /* anyError */ diffScans(
#   42|           std::ostream               &strDst,
#   43|           InStream                   &strOld,

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:41: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "diffScans".
#   39|   }
#   40|   
#   41|-> bool /* anyError */ diffScans(
#   42|           std::ostream               &strDst,
#   43|           InStream                   &strOld,

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:59: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   57|       // decide which format use for the output
#   58|       if (format == FF_AUTO)
#   59|->         format = pNew.inputFormat();
#   60|   
#   61|       // create the appropriate writer

Error: MISRA C-2012 Rule 17.8 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:46: param_declaration: Declaration of parameter "format".
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:59: misra_c_2012_rule_17_8_violation: Modifying parameter "format".
#   57|       // decide which format use for the output
#   58|       if (format == FF_AUTO)
#   59|->         format = pNew.inputFormat();
#   60|   
#   61|       // create the appropriate writer

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:59: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   57|       // decide which format use for the output
#   58|       if (format == FF_AUTO)
#   59|->         format = pNew.inputFormat();
#   60|   
#   61|       // create the appropriate writer

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:63: misra_cpp_2008_rule_7_1_1_violation: The variable "writer" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   61|       // create the appropriate writer
#   62|       typedef boost::shared_ptr<AbstractWriter> TWriterPtr;
#   63|->     TWriterPtr writer(createWriter(strDst, format, cm, props));
#   64|   
#   65|       // read old

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:69: misra_c_2012_rule_15_6_violation: The body of the "while" loop is not a compound statement.
#   67|       Defect def;
#   68|       while (pOld.getNext(&def))
#   69|->         stor.hashDefect(def);
#   70|   
#   71|       // read new

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:69: misra_cpp_2008_rule_6_3_1_violation: The body of the "while" loop is not a compound statement.
#   67|       Defect def;
#   68|       while (pOld.getNext(&def))
#   69|->         stor.hashDefect(def);
#   70|   
#   71|       // read new

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:74: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   72|       while (pNew.getNext(&def)) {
#   73|           if (stor.lookup(def))
#   74|->             continue;
#   75|   
#   76|           if (!showInternal) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:74: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   72|       while (pNew.getNext(&def)) {
#   73|           if (stor.lookup(def))
#   74|->             continue;
#   75|   
#   76|           if (!showInternal) {

Error: MISRA C++-2008 Rule 6-6-3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:74: misra_cpp_2008_rule_6_6_3_violation: "continue;" statement is not used in a well-formed for loop.
#   72|       while (pNew.getNext(&def)) {
#   73|           if (stor.lookup(def))
#   74|->             continue;
#   75|   
#   76|           if (!showInternal) {

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:80: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   78|               if (keyEvt.event == "internal warning")
#   79|                   // we suppress internal warnings by default
#   80|->                 continue;
#   81|           }
#   82|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:80: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   78|               if (keyEvt.event == "internal warning")
#   79|                   // we suppress internal warnings by default
#   80|->                 continue;
#   81|           }
#   82|   

Error: MISRA C++-2008 Rule 6-6-3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.cc:80: misra_cpp_2008_rule_6_6_3_violation: "continue;" statement is not used in a well-formed for loop.
#   78|               if (keyEvt.event == "internal warning")
#   79|                   // we suppress internal warnings by default
#   80|->                 continue;
#   81|           }
#   82|   

Error: MISRA C-2012 Directive 4.10 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.hh:1: misra_c_2012_directive_4_10_violation: Header files should be guarded against multiple inclusion. (Cause: code in header outside guard)
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.hh:20: misra_code_outside_guard: (Unguarded source code at line 20)
#    1|-> /*
#    2|    * Copyright (C) 2011-2012 Red Hat, Inc.
#    3|    *

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011-2012 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 16-2-3 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.hh:1: misra_cpp_2008_rule_16_2_3_violation: Header files should be guarded against multiple inclusion. (Cause: code in header outside guard)
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.hh:20: misra_code_outside_guard: (Unguarded source code at line 20)
#    1|-> /*
#    2|    * Copyright (C) 2011-2012 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.hh:24: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "diffScans".
#   22|   #include "instream.hh"
#   23|   
#   24|-> bool /* anyError */ diffScans(
#   25|           std::ostream               &strDst,
#   26|           InStream                   &strOld,

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011 Red Hat, Inc.
#    3|    *

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: misra_c_2012_rule_8_13_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#   28|   #include <boost/program_options.hpp>
#   29|   
#   30|-> int main(int argc, char *argv[])
#   31|   {
#   32|       using std::string;

Error: MISRA C++-2008 Rule 15-3-2 (CWE-703):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: misra_cpp_2008_rule_15_3_2_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block.
#   28|   #include <boost/program_options.hpp>
#   29|   
#   30|-> int main(int argc, char *argv[])
#   31|   {
#   32|       using std::string;

Error: MISRA C++-2008 Rule 15-3-4 (CWE-755):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: misra_cpp_2008_rule_15_3_4_violation: In program root function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_any_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:120: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_any_cast>".
#   28|   #include <boost/program_options.hpp>
#   29|   
#   30|-> int main(int argc, char *argv[])
#   31|   {
#   32|       using std::string;

Error: MISRA C++-2008 Rule 15-3-4 (CWE-755):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: misra_cpp_2008_rule_15_3_4_violation: In program root function "main(int, char **)" an exception of type "boost::wrapexcept<boost::io::too_many_args>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:160: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::io::too_many_args>".
#   28|   #include <boost/program_options.hpp>
#   29|   
#   30|-> int main(int argc, char *argv[])
#   31|   {
#   32|       using std::string;

Error: MISRA C++-2008 Rule 15-3-4 (CWE-755):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: misra_cpp_2008_rule_15_3_4_violation: In program root function "main(int, char **)" an exception of type "boost::wrapexcept<std::logic_error>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:124: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<std::logic_error>".
#   28|   #include <boost/program_options.hpp>
#   29|   
#   30|-> int main(int argc, char *argv[])
#   31|   {
#   32|       using std::string;

Error: MISRA C++-2008 Rule 15-5-3 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: misra_cpp_2008_rule_15_5_3_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block. terminate() could be called implicitly.
#   28|   #include <boost/program_options.hpp>
#   29|   
#   30|-> int main(int argc, char *argv[])
#   31|   {
#   32|       using std::string;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: misra_cpp_2008_rule_7_1_1_violation: The variable "argc" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   28|   #include <boost/program_options.hpp>
#   29|   
#   30|-> int main(int argc, char *argv[])
#   31|   {
#   32|       using std::string;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: misra_cpp_2008_rule_7_1_1_violation: The variable "argv" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   28|   #include <boost/program_options.hpp>
#   29|   
#   30|-> int main(int argc, char *argv[])
#   31|   {
#   32|       using std::string;

Error: MISRA C++-2008 Rule 7-1-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: misra_cpp_2008_rule_7_1_2_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#   28|   #include <boost/program_options.hpp>
#   29|   
#   30|-> int main(int argc, char *argv[])
#   31|   {
#   32|       using std::string;

Error: UNCAUGHT_EXCEPT (CWE-248):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: root_function: In function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_any_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:120: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_any_cast>".
#   28|   #include <boost/program_options.hpp>
#   29|   
#   30|-> int main(int argc, char *argv[])
#   31|   {
#   32|       using std::string;

Error: UNCAUGHT_EXCEPT (CWE-248):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: root_function: In function "main(int, char **)" an exception of type "boost::wrapexcept<boost::io::too_many_args>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:160: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::io::too_many_args>".
#   28|   #include <boost/program_options.hpp>
#   29|   
#   30|-> int main(int argc, char *argv[])
#   31|   {
#   32|       using std::string;

Error: UNCAUGHT_EXCEPT (CWE-248):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: root_function: In function "main(int, char **)" an exception of type "boost::wrapexcept<std::logic_error>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:124: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<std::logic_error>".
#   28|   #include <boost/program_options.hpp>
#   29|   
#   30|-> int main(int argc, char *argv[])
#   31|   {
#   32|       using std::string;

Error: MISRA C-2012 Rule 5.9 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:33: misra_c_2012_rule_5_9_violation: Identifier "name" is already used to represent an object with internal linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:452: internal_linkage_symbol: Declaring an internal linkage object with identifier "name".
#   31|   {
#   32|       using std::string;
#   33|->     const char *name = argv[0];
#   34|   
#   35|       namespace po = boost::program_options;

Error: MISRA C++-2008 Rule 2-10-5 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:33: misra_cpp_2008_rule_2_10_5_violation: Identifier "name" is already used to represent an object with static storage duration.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:452: static_storage_symbol: Declaring a static storage duration object with identifier "name".
#   31|   {
#   32|       using std::string;
#   33|->     const char *name = argv[0];
#   34|   
#   35|       namespace po = boost::program_options;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:33: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#   31|   {
#   32|       using std::string;
#   33|->     const char *name = argv[0];
#   34|   
#   35|       namespace po = boost::program_options;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:33: misra_cpp_2008_rule_7_1_1_violation: The variable "name" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   31|   {
#   32|       using std::string;
#   33|->     const char *name = argv[0];
#   34|   
#   35|       namespace po = boost::program_options;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:41: misra_cpp_2008_rule_7_1_1_violation: The variable "mode" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   39|   
#   40|       typedef std::vector<string> TStringList;
#   41|->     string mode;
#   42|   
#   43|       try {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:44: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#   42|   
#   43|       try {
#   44|->         desc.add_options()
#   45|               ("fixed,x", "print fixed defects (just swaps the arguments)")
#   46|               ("ignore-path,z", "ignore directory structure when matching")

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:57: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#   55|           addColorOptions(&desc);
#   56|   
#   57|->         desc.add_options()
#   58|               ("help", "produce help message")
#   59|               ("version", "print version");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:62: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#   60|   
#   61|           po::options_description hidden("");
#   62|->         hidden.add_options()
#   63|               ("input-file", po::value<TStringList>(), "input file");
#   64|           po::positional_options_description p;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:65: misra_c_2012_rule_17_7_violation: The return value of a non-void function "add" is unused.
#   63|               ("input-file", po::value<TStringList>(), "input file");
#   64|           po::positional_options_description p;
#   65|->         p.add("input-file", -1);
#   66|   
#   67|           po::store(po::parse_command_line(argc, argv, desc), vm);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:65: misra_cpp_2008_rule_0_1_7_violation: The return value of function "p.add("input-file", -1)" is not used.
#   63|               ("input-file", po::value<TStringList>(), "input file");
#   64|           po::positional_options_description p;
#   65|->         p.add("input-file", -1);
#   66|   
#   67|           po::store(po::parse_command_line(argc, argv, desc), vm);

Error: MISRA C-2012 Rule 11.3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:67: misra_c_2012_rule_11_3_violation: The object pointer expression "argv" of type "char **" is cast to type "char const * const *".
#   65|           p.add("input-file", -1);
#   66|   
#   67|->         po::store(po::parse_command_line(argc, argv, desc), vm);
#   68|           po::notify(vm);
#   69|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:71: misra_c_2012_rule_17_7_violation: The return value of a non-void function "add" is unused.
#   69|   
#   70|           po::options_description opts;
#   71|->         opts.add(desc).add(hidden);
#   72|           po::store(po::command_line_parser(argc, argv).
#   73|                   options(opts).positional(p).run(), vm);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:71: misra_cpp_2008_rule_0_1_7_violation: The return value of function "opts.add(desc)->add(hidden)" is not used.
#   69|   
#   70|           po::options_description opts;
#   71|->         opts.add(desc).add(hidden);
#   72|           po::store(po::command_line_parser(argc, argv).
#   73|                   options(opts).positional(p).run(), vm);

Error: MISRA C-2012 Rule 11.3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:72: misra_c_2012_rule_11_3_violation: The object pointer expression "argv" of type "char **" is cast to type "char const * const *".
#   70|           po::options_description opts;
#   71|           opts.add(desc).add(hidden);
#   72|->         po::store(po::command_line_parser(argc, argv).
#   73|                   options(opts).positional(p).run(), vm);
#   74|           po::notify(vm);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:77: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   75|       }
#   76|       catch (po::error &e) {
#   77|->         std::cerr << name << ": error: " << e.what() << "\n\n";
#   78|           desc.print(std::cerr);
#   79|           return 1;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:79: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   77|           std::cerr << name << ": error: " << e.what() << "\n\n";
#   78|           desc.print(std::cerr);
#   79|->         return 1;
#   80|       }
#   81|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:79: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   77|           std::cerr << name << ": error: " << e.what() << "\n\n";
#   78|           desc.print(std::cerr);
#   79|->         return 1;
#   80|       }
#   81|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:82: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("help", std::allocator<char>()))" does not have an essentially boolean type.
#   80|       }
#   81|   
#   82|->     if (vm.count("help")) {
#   83|           desc.print(std::cout);
#   84|           return 0;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:82: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("help", std::allocator<char>()))" is not bool in the condition of "if-statement".
#   80|       }
#   81|   
#   82|->     if (vm.count("help")) {
#   83|           desc.print(std::cout);
#   84|           return 0;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:84: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   82|       if (vm.count("help")) {
#   83|           desc.print(std::cout);
#   84|->         return 0;
#   85|       }
#   86|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:84: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   82|       if (vm.count("help")) {
#   83|           desc.print(std::cout);
#   84|->         return 0;
#   85|       }
#   86|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:87: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("version", std::allocator<char>()))" does not have an essentially boolean type.
#   85|       }
#   86|   
#   87|->     if (vm.count("version")) {
#   88|           std::cout << CS_VERSION << "\n";
#   89|           return 0;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:87: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("version", std::allocator<char>()))" is not bool in the condition of "if-statement".
#   85|       }
#   86|   
#   87|->     if (vm.count("version")) {
#   88|           std::cout << CS_VERSION << "\n";
#   89|           return 0;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:88: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   86|   
#   87|       if (vm.count("version")) {
#   88|->         std::cout << CS_VERSION << "\n";
#   89|           return 0;
#   90|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:89: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   87|       if (vm.count("version")) {
#   88|           std::cout << CS_VERSION << "\n";
#   89|->         return 0;
#   90|       }
#   91|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:89: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   87|       if (vm.count("version")) {
#   88|           std::cout << CS_VERSION << "\n";
#   89|->         return 0;
#   90|       }
#   91|   

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:92: misra_c_2012_rule_10_1_violation: The expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("coverity-output", std::allocator<char>()))" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#   90|       }
#   91|   
#   92|->     const bool forceCov  = !!vm.count("coverity-output");
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:92: misra_cpp_2008_rule_5_3_1_violation: Operand "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("coverity-output", std::allocator<char>()))" of the operator "!" is not bool type.
#   90|       }
#   91|   
#   92|->     const bool forceCov  = !!vm.count("coverity-output");
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:93: misra_c_2012_rule_10_1_violation: The expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("json-output", std::allocator<char>()))" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#   91|   
#   92|       const bool forceCov  = !!vm.count("coverity-output");
#   93|->     const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");
#   95|       if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:93: misra_cpp_2008_rule_5_3_1_violation: Operand "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("json-output", std::allocator<char>()))" of the operator "!" is not bool type.
#   91|   
#   92|       const bool forceCov  = !!vm.count("coverity-output");
#   93|->     const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");
#   95|       if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:94: misra_c_2012_rule_10_1_violation: The expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("html-output", std::allocator<char>()))" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#   92|       const bool forceCov  = !!vm.count("coverity-output");
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|->     const bool useHtml = !!vm.count("html-output");
#   95|       if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:94: misra_cpp_2008_rule_5_3_1_violation: Operand "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("html-output", std::allocator<char>()))" of the operator "!" is not bool type.
#   92|       const bool forceCov  = !!vm.count("coverity-output");
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|->     const bool useHtml = !!vm.count("html-output");
#   95|       if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:95: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");
#   95|->     if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "
#   97|               "--json-output(-j), and --html-output are mutually exclusive\n\n";

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:95: misra_c_2012_rule_10_1_violation: The expression "forceJson" of essential type boolean is used as an operand to "+" where it is interpreted as a numerical value.
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");
#   95|->     if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "
#   97|               "--json-output(-j), and --html-output are mutually exclusive\n\n";

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:95: misra_c_2012_rule_10_1_violation: The expression "useHtml" of essential type boolean is used as an operand to "+" where it is interpreted as a numerical value.
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");
#   95|->     if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "
#   97|               "--json-output(-j), and --html-output are mutually exclusive\n\n";

Error: MISRA C-2012 Rule 10.4 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:95: misra_c_2012_rule_10_4_violation: Essential type of the left hand operand "static_cast<int>(forceCov) + forceJson" (signed) is not the same as that of the right operand "useHtml"(boolean).
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");
#   95|->     if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "
#   97|               "--json-output(-j), and --html-output are mutually exclusive\n\n";

Error: MISRA C-2012 Rule 10.4 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:95: misra_c_2012_rule_10_4_violation: Essential type of the left hand operand "static_cast<int>(forceCov)" (signed) is not the same as that of the right operand "forceJson"(boolean).
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");
#   95|->     if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "
#   97|               "--json-output(-j), and --html-output are mutually exclusive\n\n";

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:95: misra_c_2012_rule_12_1_violation: Missing explicit parentheses on sub-expression: "static_cast<int>(forceCov) + forceJson + useHtml".
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");
#   95|->     if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "
#   97|               "--json-output(-j), and --html-output are mutually exclusive\n\n";

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:95: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");
#   95|->     if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "
#   97|               "--json-output(-j), and --html-output are mutually exclusive\n\n";

Error: MISRA C++-2008 Rule 4-5-1 (CWE-480):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:95: misra_cpp_2008_rule_4_5_1_violation: "forceJson" is used as an operand to the operator "+".
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");
#   95|->     if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "
#   97|               "--json-output(-j), and --html-output are mutually exclusive\n\n";

Error: MISRA C++-2008 Rule 4-5-1 (CWE-480):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:95: misra_cpp_2008_rule_4_5_1_violation: "useHtml" is used as an operand to the operator "+".
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");
#   95|->     if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "
#   97|               "--json-output(-j), and --html-output are mutually exclusive\n\n";

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:95: misra_cpp_2008_rule_5_0_2_violation: "static_cast<int>(forceCov) + forceJson + useHtml" should be parenthesized.
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");
#   95|->     if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "
#   97|               "--json-output(-j), and --html-output are mutually exclusive\n\n";

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:95: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "1" is implicitly reduced from "8-bit signed char" to "bool".
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");
#   95|->     if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "
#   97|               "--json-output(-j), and --html-output are mutually exclusive\n\n";

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:95: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "static_cast<int>(forceCov)" is implicitly reduced from "32-bit signed int" to "bool".
#   93|       const bool forceJson = !!vm.count("json-output");
#   94|       const bool useHtml = !!vm.count("html-output");
#   95|->     if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "
#   97|               "--json-output(-j), and --html-output are mutually exclusive\n\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:96: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   94|       const bool useHtml = !!vm.count("html-output");
#   95|       if (1 < static_cast<int>(forceCov) + forceJson + useHtml) {
#   96|->         std::cerr << name << ": error: options --coverity-output(-c) "
#   97|               "--json-output(-j), and --html-output are mutually exclusive\n\n";
#   98|           return 1;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:98: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "
#   97|               "--json-output(-j), and --html-output are mutually exclusive\n\n";
#   98|->         return 1;
#   99|       }
#  100|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:98: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   96|           std::cerr << name << ": error: options --coverity-output(-c) "
#   97|               "--json-output(-j), and --html-output are mutually exclusive\n\n";
#   98|->         return 1;
#   99|       }
#  100|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:103: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  101|       EFileFormat format;
#  102|       if (forceCov)
#  103|->         format = FF_COVERITY;
#  104|       else if (forceJson)
#  105|           format = FF_JSON;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:103: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  101|       EFileFormat format;
#  102|       if (forceCov)
#  103|->         format = FF_COVERITY;
#  104|       else if (forceJson)
#  105|           format = FF_JSON;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:105: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  103|           format = FF_COVERITY;
#  104|       else if (forceJson)
#  105|->         format = FF_JSON;
#  106|       else if (useHtml)
#  107|           format = FF_HTML;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:105: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  103|           format = FF_COVERITY;
#  104|       else if (forceJson)
#  105|->         format = FF_JSON;
#  106|       else if (useHtml)
#  107|           format = FF_HTML;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:107: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  105|           format = FF_JSON;
#  106|       else if (useHtml)
#  107|->         format = FF_HTML;
#  108|       else
#  109|           format = FF_AUTO;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:107: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  105|           format = FF_JSON;
#  106|       else if (useHtml)
#  107|->         format = FF_HTML;
#  108|       else
#  109|           format = FF_AUTO;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:109: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  107|           format = FF_HTML;
#  108|       else
#  109|->         format = FF_AUTO;
#  110|   
#  111|       EColorMode cm;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:109: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  107|           format = FF_HTML;
#  108|       else
#  109|->         format = FF_AUTO;
#  110|   
#  111|       EColorMode cm;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:112: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  110|   
#  111|       EColorMode cm;
#  112|->     const char *err;
#  113|       if (!readColorOptions(&cm, &err, vm)) {
#  114|           std::cerr << name << ": error: " << err << std::endl;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:114: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  112|       const char *err;
#  113|       if (!readColorOptions(&cm, &err, vm)) {
#  114|->         std::cerr << name << ": error: " << err << std::endl;
#  115|           return 1;
#  116|       }

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:114: misra_cpp_2008_rule_8_4_4_violation: Function identifier "endl" is not used to call the function or preceded by &.
#  112|       const char *err;
#  113|       if (!readColorOptions(&cm, &err, vm)) {
#  114|->         std::cerr << name << ": error: " << err << std::endl;
#  115|           return 1;
#  116|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:115: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  113|       if (!readColorOptions(&cm, &err, vm)) {
#  114|           std::cerr << name << ": error: " << err << std::endl;
#  115|->         return 1;
#  116|       }
#  117|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:115: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  113|       if (!readColorOptions(&cm, &err, vm)) {
#  114|           std::cerr << name << ": error: " << err << std::endl;
#  115|->         return 1;
#  116|       }
#  117|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:119: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("file-rename", std::allocator<char>()))" does not have an essentially boolean type.
#  117|   
#  118|       // there are probably better solutions for this (Custom Validations)
#  119|->     if (vm.count("file-rename")) {
#  120|           const TStringList &substList = vm["file-rename"].as<TStringList>();
#  121|           boost::smatch sm;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:119: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("file-rename", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  117|   
#  118|       // there are probably better solutions for this (Custom Validations)
#  119|->     if (vm.count("file-rename")) {
#  120|           const TStringList &substList = vm["file-rename"].as<TStringList>();
#  121|           boost::smatch sm;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:123: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  121|           boost::smatch sm;
#  122|           const RE reSubst("([^,]+),(.*)");
#  123|->         for (const string &subst : substList) {
#  124|               if (!boost::regex_match(subst, sm, reSubst)) {
#  125|                   std::cerr << "bad substutution format: " << subst

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:125: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  123|           for (const string &subst : substList) {
#  124|               if (!boost::regex_match(subst, sm, reSubst)) {
#  125|->                 std::cerr << "bad substutution format: " << subst
#  126|                       << std::endl << "use: -s OLD,NEW" << std::endl;
#  127|                   return 1;

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:126: misra_cpp_2008_rule_8_4_4_violation: Function identifier "endl" is not used to call the function or preceded by &.
#  124|               if (!boost::regex_match(subst, sm, reSubst)) {
#  125|                   std::cerr << "bad substutution format: " << subst
#  126|->                     << std::endl << "use: -s OLD,NEW" << std::endl;
#  127|                   return 1;
#  128|               }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:127: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  125|                   std::cerr << "bad substutution format: " << subst
#  126|                       << std::endl << "use: -s OLD,NEW" << std::endl;
#  127|->                 return 1;
#  128|               }
#  129|           }

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:127: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  125|                   std::cerr << "bad substutution format: " << subst
#  126|                       << std::endl << "use: -s OLD,NEW" << std::endl;
#  127|->                 return 1;
#  128|               }
#  129|           }

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:133: misra_c_2012_rule_10_1_violation: The expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("input-file", std::allocator<char>()))" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  131|       }
#  132|   
#  133|->     if (!vm.count("input-file")) {
#  134|           desc.print(std::cerr);
#  135|           return 1;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:133: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("input-file", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  131|       }
#  132|   
#  133|->     if (!vm.count("input-file")) {
#  134|           desc.print(std::cerr);
#  135|           return 1;

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:133: misra_cpp_2008_rule_5_3_1_violation: Operand "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("input-file", std::allocator<char>()))" of the operator "!" is not bool type.
#  131|       }
#  132|   
#  133|->     if (!vm.count("input-file")) {
#  134|           desc.print(std::cerr);
#  135|           return 1;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:135: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  133|       if (!vm.count("input-file")) {
#  134|           desc.print(std::cerr);
#  135|->         return 1;
#  136|       }
#  137|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:135: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  133|       if (!vm.count("input-file")) {
#  134|           desc.print(std::cerr);
#  135|->         return 1;
#  136|       }
#  137|   

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:139: misra_cpp_2008_rule_5_0_4_violation: "2" is implicitly converted from a signed value to an unsigned value.
#  137|   
#  138|       const TStringList &files = vm["input-file"].as<TStringList>();
#  139|->     if (2 != files.size()) {
#  140|           desc.print(std::cerr);
#  141|           return 1;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:141: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  139|       if (2 != files.size()) {
#  140|           desc.print(std::cerr);
#  141|->         return 1;
#  142|       }
#  143|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:141: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  139|       if (2 != files.size()) {
#  140|           desc.print(std::cerr);
#  141|->         return 1;
#  142|       }
#  143|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:144: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("ignore-path", std::allocator<char>()))" does not have an essentially boolean type.
#  142|       }
#  143|   
#  144|->     if (vm.count("ignore-path"))
#  145|           MsgFilter::inst()->setIgnorePath(true);
#  146|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:144: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("ignore-path", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  142|       }
#  143|   
#  144|->     if (vm.count("ignore-path"))
#  145|           MsgFilter::inst()->setIgnorePath(true);
#  146|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:145: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  143|   
#  144|       if (vm.count("ignore-path"))
#  145|->         MsgFilter::inst()->setIgnorePath(true);
#  146|   
#  147|       const bool swap = vm.count("fixed");

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:145: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  143|   
#  144|       if (vm.count("ignore-path"))
#  145|->         MsgFilter::inst()->setIgnorePath(true);
#  146|   
#  147|       const bool swap = vm.count("fixed");

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:147: misra_c_2012_rule_10_3_violation: Implicit conversion of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("fixed", std::allocator<char>()))" from essential type "non-essential type" to different or narrower essential type "boolean".
#  145|           MsgFilter::inst()->setIgnorePath(true);
#  146|   
#  147|->     const bool swap = vm.count("fixed");
#  148|       const string &fnOld = files[swap];
#  149|       const string &fnNew = files[!swap];

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:147: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("fixed", std::allocator<char>()))" is implicitly reduced from "64-bit unsigned long" to "bool".
#  145|           MsgFilter::inst()->setIgnorePath(true);
#  146|   
#  147|->     const bool swap = vm.count("fixed");
#  148|       const string &fnOld = files[swap];
#  149|       const string &fnNew = files[!swap];

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:151: misra_c_2012_rule_10_3_violation: Implicit conversion of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("show-internal", std::allocator<char>()))" from essential type "non-essential type" to different or narrower essential type "boolean".
#  149|       const string &fnNew = files[!swap];
#  150|   
#  151|->     const bool showInternal = vm.count("show-internal");
#  152|       const bool silent       = vm.count("quiet");
#  153|   

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:151: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("show-internal", std::allocator<char>()))" is implicitly reduced from "64-bit unsigned long" to "bool".
#  149|       const string &fnNew = files[!swap];
#  150|   
#  151|->     const bool showInternal = vm.count("show-internal");
#  152|       const bool silent       = vm.count("quiet");
#  153|   

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:152: misra_c_2012_rule_10_3_violation: Implicit conversion of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("quiet", std::allocator<char>()))" from essential type "non-essential type" to different or narrower essential type "boolean".
#  150|   
#  151|       const bool showInternal = vm.count("show-internal");
#  152|->     const bool silent       = vm.count("quiet");
#  153|   
#  154|       try {

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:152: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("quiet", std::allocator<char>()))" is implicitly reduced from "64-bit unsigned long" to "bool".
#  150|   
#  151|       const bool showInternal = vm.count("show-internal");
#  152|->     const bool silent       = vm.count("quiet");
#  153|   
#  154|       try {

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:160: misra_c_2012_rule_10_3_violation: Implicit conversion of "diffScans(std::cout, strOld, strNew, showInternal, format, cm)" from essential type "boolean" to different or narrower essential type "signed 32-bit int".
#  158|   
#  159|           // run the core
#  160|->         return diffScans(std::cout, strOld, strNew, showInternal, format, cm);
#  161|       }
#  162|       catch (const InFileException &e) {

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:160: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  158|   
#  159|           // run the core
#  160|->         return diffScans(std::cout, strOld, strNew, showInternal, format, cm);
#  161|       }
#  162|       catch (const InFileException &e) {

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:160: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "diffScans(std::cout, strOld, strNew, showInternal, format, cm)" with underlying type "bool" is implicitly converted to a different underlying type "32-bit signed int".
#  158|   
#  159|           // run the core
#  160|->         return diffScans(std::cout, strOld, strNew, showInternal, format, cm);
#  161|       }
#  162|       catch (const InFileException &e) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:160: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  158|   
#  159|           // run the core
#  160|->         return diffScans(std::cout, strOld, strNew, showInternal, format, cm);
#  161|       }
#  162|       catch (const InFileException &e) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:163: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  161|       }
#  162|       catch (const InFileException &e) {
#  163|->         std::cerr << e.fileName << ": failed to open input file\n";
#  164|           return EXIT_FAILURE;
#  165|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:164: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  162|       catch (const InFileException &e) {
#  163|           std::cerr << e.fileName << ": failed to open input file\n";
#  164|->         return EXIT_FAILURE;
#  165|       }
#  166|   }

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:164: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  162|       catch (const InFileException &e) {
#  163|           std::cerr << e.fileName << ": failed to open input file\n";
#  164|->         return EXIT_FAILURE;
#  165|       }
#  166|   }

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:27: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   25|   // Setup verbosity for debugging string substitions while matching them.
#   26|   // Verbosity levels are from 0 to 3 (0 is off)
#   27|-> #define DEBUG_SUBST 0
#   28|   
#   29|   inline std::string regexReplaceWrap(

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:27: misra_cpp_2008_rule_16_2_2_violation: Macro "DEBUG_SUBST" is used other than include guards, type qualifiers, or storage class specifiers.
#   25|   // Setup verbosity for debugging string substitions while matching them.
#   26|   // Verbosity levels are from 0 to 3 (0 is off)
#   27|-> #define DEBUG_SUBST 0
#   28|   
#   29|   inline std::string regexReplaceWrap(

Error: MISRA C-2012 Rule 8.10 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:29: misra_c_2012_rule_8_10_violation: The inline function "regexReplaceWrap(std::string const &, RE const &, std::string const &)" is not declared with a static scope.
#   27|   #define DEBUG_SUBST 0
#   28|   
#   29|-> inline std::string regexReplaceWrap(
#   30|           const std::string       &input,
#   31|           const RE                &re,

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:29: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   27|   #define DEBUG_SUBST 0
#   28|   
#   29|-> inline std::string regexReplaceWrap(
#   30|           const std::string       &input,
#   31|           const RE                &re,

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:29: misra_c_2012_rule_8_7_violation: Function "regexReplaceWrap" has external linkage but is only used in one translation unit.
#   27|   #define DEBUG_SUBST 0
#   28|   
#   29|-> inline std::string regexReplaceWrap(
#   30|           const std::string       &input,
#   31|           const RE                &re,

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:29: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   27|   #define DEBUG_SUBST 0
#   28|   
#   29|-> inline std::string regexReplaceWrap(
#   30|           const std::string       &input,
#   31|           const RE                &re,

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:29: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "regexReplaceWrap".
#   27|   #define DEBUG_SUBST 0
#   28|   
#   29|-> inline std::string regexReplaceWrap(
#   30|           const std::string       &input,
#   31|           const RE                &re,

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:31: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re" clashes with "RE"
csdiff-2.1.1.20210615.144928.g9c9686f/src/regex.hh:25: misra_typographically_ambiguous_orig: (Previously declared symbol "RE" at line 25 of "../../src/regex.hh")
#   29|   inline std::string regexReplaceWrap(
#   30|           const std::string       &input,
#   31|->         const RE                &re,
#   32|           const std::string       &fmt)
#   33|   {

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:35: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   33|   {
#   34|       std::string output(boost::regex_replace(input, re, fmt));
#   35|-> #if DEBUG_SUBST > 1
#   36|       if (input != output)
#   37|           std::cerr << "regex_replace: " << input << " -> " << output << "\n";

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:38: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   36|       if (input != output)
#   37|           std::cerr << "regex_replace: " << input << " -> " << output << "\n";
#   38|-> #endif
#   39|       return output;
#   40|   }

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:44: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "MsgReplace".
#   42|   MsgFilter* MsgFilter::self_;
#   43|   
#   44|-> struct MsgReplace {
#   45|       const RE                    regex;
#   46|       const std::string           replaceWith;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:45: misra_cpp_2008_rule_11_0_1_violation: Member "regex" is not private but "MsgReplace" is a non-POD type.
#   43|   
#   44|   struct MsgReplace {
#   45|->     const RE                    regex;
#   46|       const std::string           replaceWith;
#   47|   

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:46: misra_cpp_2008_rule_11_0_1_violation: Member "replaceWith" is not private but "MsgReplace" is a non-POD type.
#   44|   struct MsgReplace {
#   45|       const RE                    regex;
#   46|->     const std::string           replaceWith;
#   47|   
#   48|       MsgReplace(const std::string &regex_, const std::string &rpl) :

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:48: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "regex_" clashes with "regex"
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:45: misra_typographically_ambiguous_orig: (Previously declared symbol "regex" at line 45)
#   46|       const std::string           replaceWith;
#   47|   
#   48|->     MsgReplace(const std::string &regex_, const std::string &rpl) :
#   49|           regex(regex_),
#   50|           replaceWith(rpl)

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:59: misra_cpp_2008_rule_11_0_1_violation: Member "ignorePath" is not private but "MsgFilter::Private" is a non-POD type.
#   57|   
#   58|   struct MsgFilter::Private {
#   59|->     bool ignorePath = false;
#   60|       TMsgFilterMap msgFilterMap;
#   61|       TSubstMap fileSubsts;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:60: misra_cpp_2008_rule_11_0_1_violation: Member "msgFilterMap" is not private but "MsgFilter::Private" is a non-POD type.
#   58|   struct MsgFilter::Private {
#   59|       bool ignorePath = false;
#   60|->     TMsgFilterMap msgFilterMap;
#   61|       TSubstMap fileSubsts;
#   62|   

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:61: misra_cpp_2008_rule_11_0_1_violation: Member "fileSubsts" is not private but "MsgFilter::Private" is a non-POD type.
#   59|       bool ignorePath = false;
#   60|       TMsgFilterMap msgFilterMap;
#   61|->     TSubstMap fileSubsts;
#   62|   
#   63|       const std::string strKrn = "^[a-zA-Z+]+";

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:63: misra_cpp_2008_rule_11_0_1_violation: Member "strKrn" is not private but "MsgFilter::Private" is a non-POD type.
#   61|       TSubstMap fileSubsts;
#   62|   
#   63|->     const std::string strKrn = "^[a-zA-Z+]+";
#   64|       const RE reKrn = RE(strKrn);
#   65|       const RE reDir = RE("^([^:]*/)");

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:64: misra_cpp_2008_rule_11_0_1_violation: Member "reKrn" is not private but "MsgFilter::Private" is a non-POD type.
#   62|   
#   63|       const std::string strKrn = "^[a-zA-Z+]+";
#   64|->     const RE reKrn = RE(strKrn);
#   65|       const RE reDir = RE("^([^:]*/)");
#   66|       const RE reFile = RE("[^/]+$");

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:65: misra_cpp_2008_rule_11_0_1_violation: Member "reDir" is not private but "MsgFilter::Private" is a non-POD type.
#   63|       const std::string strKrn = "^[a-zA-Z+]+";
#   64|       const RE reKrn = RE(strKrn);
#   65|->     const RE reDir = RE("^([^:]*/)");
#   66|       const RE reFile = RE("[^/]+$");
#   67|       const RE rePath = RE("^(?:/builddir/build/BUILD/)?([^/]+/)(.*)(\\.[ly])?$");

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:66: misra_cpp_2008_rule_11_0_1_violation: Member "reFile" is not private but "MsgFilter::Private" is a non-POD type.
#   64|       const RE reKrn = RE(strKrn);
#   65|       const RE reDir = RE("^([^:]*/)");
#   66|->     const RE reFile = RE("[^/]+$");
#   67|       const RE rePath = RE("^(?:/builddir/build/BUILD/)?([^/]+/)(.*)(\\.[ly])?$");
#   68|       const RE rePyBuild = RE("^((?:/builddir/build/BUILD/)?[^/]+/)build/lib/(.*)$");

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:67: misra_cpp_2008_rule_11_0_1_violation: Member "rePath" is not private but "MsgFilter::Private" is a non-POD type.
#   65|       const RE reDir = RE("^([^:]*/)");
#   66|       const RE reFile = RE("[^/]+$");
#   67|->     const RE rePath = RE("^(?:/builddir/build/BUILD/)?([^/]+/)(.*)(\\.[ly])?$");
#   68|       const RE rePyBuild = RE("^((?:/builddir/build/BUILD/)?[^/]+/)build/lib/(.*)$");
#   69|       const RE reTmpPath = RE("^(/var)?/tmp/(.*)$");

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:68: misra_cpp_2008_rule_11_0_1_violation: Member "rePyBuild" is not private but "MsgFilter::Private" is a non-POD type.
#   66|       const RE reFile = RE("[^/]+$");
#   67|       const RE rePath = RE("^(?:/builddir/build/BUILD/)?([^/]+/)(.*)(\\.[ly])?$");
#   68|->     const RE rePyBuild = RE("^((?:/builddir/build/BUILD/)?[^/]+/)build/lib/(.*)$");
#   69|       const RE reTmpPath = RE("^(/var)?/tmp/(.*)$");
#   70|       const RE reTmpCleaner = RE("(.*)");

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:69: misra_cpp_2008_rule_11_0_1_violation: Member "reTmpPath" is not private but "MsgFilter::Private" is a non-POD type.
#   67|       const RE rePath = RE("^(?:/builddir/build/BUILD/)?([^/]+/)(.*)(\\.[ly])?$");
#   68|       const RE rePyBuild = RE("^((?:/builddir/build/BUILD/)?[^/]+/)build/lib/(.*)$");
#   69|->     const RE reTmpPath = RE("^(/var)?/tmp/(.*)$");
#   70|       const RE reTmpCleaner = RE("(.*)");
#   71|   

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:70: misra_cpp_2008_rule_11_0_1_violation: Member "reTmpCleaner" is not private but "MsgFilter::Private" is a non-POD type.
#   68|       const RE rePyBuild = RE("^((?:/builddir/build/BUILD/)?[^/]+/)build/lib/(.*)$");
#   69|       const RE reTmpPath = RE("^(/var)?/tmp/(.*)$");
#   70|->     const RE reTmpCleaner = RE("(.*)");
#   71|   
#   72|       void addMsgFilter(

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:77: misra_c_2012_directive_4_12_violation: A call to the function "operator new(48UL)" performs dynamic memory allocation.
#   75|               const std::string          &replacement = "")
#   76|       {
#   77|->         struct MsgReplace *rpl = new MsgReplace(regexp, replacement);
#   78|           msgFilterMap[checker].push_back(rpl);
#   79|       }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:77: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   75|               const std::string          &replacement = "")
#   76|       {
#   77|->         struct MsgReplace *rpl = new MsgReplace(regexp, replacement);
#   78|           msgFilterMap[checker].push_back(rpl);
#   79|       }

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:77: misra_cpp_2008_rule_7_1_1_violation: The variable "rpl" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   75|               const std::string          &replacement = "")
#   76|       {
#   77|->         struct MsgReplace *rpl = new MsgReplace(regexp, replacement);
#   78|           msgFilterMap[checker].push_back(rpl);
#   79|       }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:82: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   80|   };
#   81|   
#   82|-> MsgFilter::MsgFilter():
#   83|       d(new Private)
#   84|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:83: misra_c_2012_directive_4_12_violation: A call to the function "operator new(248UL)" performs dynamic memory allocation.
#   81|   
#   82|   MsgFilter::MsgFilter():
#   83|->     d(new Private)
#   84|   {
#   85|       d->addMsgFilter("", "[0-9][0-9]* out of [0-9][0-9]* times");

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:83: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   81|   
#   82|   MsgFilter::MsgFilter():
#   83|->     d(new Private)
#   84|   {
#   85|       d->addMsgFilter("", "[0-9][0-9]* out of [0-9][0-9]* times");

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:97: misra_c_2012_rule_10_3_violation: Implicit conversion of "0" from essential type "signed 8-bit int" to different or narrower essential type "character".
#   95|       // unify the format of glib/gnome dprecation warnings
#   96|       // NOTE: "\u007f\u007f\u007f" does not compile on el6
#   97|->     static const char uniApos[] = { 0x7f, 0x7f, 0x7f, 0x00 };
#   98|       d->addMsgFilter("COMPILER_WARNING", uniApos, "'");
#   99|   

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:97: misra_c_2012_rule_10_3_violation: Implicit conversion of "127" from essential type "signed 8-bit int" to different or narrower essential type "character".
#   95|       // unify the format of glib/gnome dprecation warnings
#   96|       // NOTE: "\u007f\u007f\u007f" does not compile on el6
#   97|->     static const char uniApos[] = { 0x7f, 0x7f, 0x7f, 0x00 };
#   98|       d->addMsgFilter("COMPILER_WARNING", uniApos, "'");
#   99|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:97: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#   95|       // unify the format of glib/gnome dprecation warnings
#   96|       // NOTE: "\u007f\u007f\u007f" does not compile on el6
#   97|->     static const char uniApos[] = { 0x7f, 0x7f, 0x7f, 0x00 };
#   98|       d->addMsgFilter("COMPILER_WARNING", uniApos, "'");
#   99|   

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:97: misra_cpp_2008_rule_5_0_11_violation: Plain char type is used for storage of non-character values of "0".
#   95|       // unify the format of glib/gnome dprecation warnings
#   96|       // NOTE: "\u007f\u007f\u007f" does not compile on el6
#   97|->     static const char uniApos[] = { 0x7f, 0x7f, 0x7f, 0x00 };
#   98|       d->addMsgFilter("COMPILER_WARNING", uniApos, "'");
#   99|   

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:97: misra_cpp_2008_rule_5_0_11_violation: Plain char type is used for storage of non-character values of "127".
#   95|       // unify the format of glib/gnome dprecation warnings
#   96|       // NOTE: "\u007f\u007f\u007f" does not compile on el6
#   97|->     static const char uniApos[] = { 0x7f, 0x7f, 0x7f, 0x00 };
#   98|       d->addMsgFilter("COMPILER_WARNING", uniApos, "'");
#   99|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:122: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  120|           "PYLINT_WARNING"
#  121|       };
#  122|->     for (const std::string &checker : pylintCheckers) {
#  123|           // "Too many lines in module (1152/1000)" etc.
#  124|           d->addMsgFilter(checker, " \\([0-9]+/[0-9]+\\)$", "");

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:144: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  142|   }
#  143|   
#  144|-> MsgFilter::~MsgFilter()
#  145|   {
#  146|       for (TMsgFilterMap::const_reference item : d->msgFilterMap)

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:146: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  144|   MsgFilter::~MsgFilter()
#  145|   {
#  146|->     for (TMsgFilterMap::const_reference item : d->msgFilterMap)
#  147|           for (struct MsgReplace *rpl : item.second)
#  148|               delete rpl;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:147: misra_c_2012_rule_15_6_violation: The body of the "for" loop is not a compound statement.
#  145|   {
#  146|       for (TMsgFilterMap::const_reference item : d->msgFilterMap)
#  147|->         for (struct MsgReplace *rpl : item.second)
#  148|               delete rpl;
#  149|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:147: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  145|   {
#  146|       for (TMsgFilterMap::const_reference item : d->msgFilterMap)
#  147|->         for (struct MsgReplace *rpl : item.second)
#  148|               delete rpl;
#  149|   

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:147: misra_cpp_2008_rule_6_3_1_violation: The body of the "for" loop is not a compound statement.
#  145|   {
#  146|       for (TMsgFilterMap::const_reference item : d->msgFilterMap)
#  147|->         for (struct MsgReplace *rpl : item.second)
#  148|               delete rpl;
#  149|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:147: misra_cpp_2008_rule_7_1_1_violation: The variable "rpl" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  145|   {
#  146|       for (TMsgFilterMap::const_reference item : d->msgFilterMap)
#  147|->         for (struct MsgReplace *rpl : item.second)
#  148|               delete rpl;
#  149|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:148: misra_c_2012_rule_15_6_violation: The body of the "for" loop is not a compound statement.
#  146|       for (TMsgFilterMap::const_reference item : d->msgFilterMap)
#  147|           for (struct MsgReplace *rpl : item.second)
#  148|->             delete rpl;
#  149|   
#  150|       delete d;

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:148: misra_cpp_2008_rule_6_3_1_violation: The body of the "for" loop is not a compound statement.
#  146|       for (TMsgFilterMap::const_reference item : d->msgFilterMap)
#  147|           for (struct MsgReplace *rpl : item.second)
#  148|->             delete rpl;
#  149|   
#  150|       delete d;

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:153: misra_c_2012_rule_8_13_violation: The member function "MsgFilter::setIgnorePath(bool)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  151|   }
#  152|   
#  153|-> void MsgFilter::setIgnorePath(bool enable)
#  154|   {
#  155|       d->ignorePath = enable;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:153: misra_cpp_2008_rule_7_1_1_violation: The variable "enable" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  151|   }
#  152|   
#  153|-> void MsgFilter::setIgnorePath(bool enable)
#  154|   {
#  155|       d->ignorePath = enable;

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:158: misra_c_2012_rule_8_13_violation: The member function "MsgFilter::setFileNameSubstitution(std::string const &, std::string const &)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  156|   }
#  157|   
#  158|-> void MsgFilter::setFileNameSubstitution(
#  159|                   const std::string      &oldFile,
#  160|                   const std::string      &newFile)

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:162: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  160|                   const std::string      &newFile)
#  161|   {
#  162|->     d->fileSubsts[oldFile] = newFile;
#  163|   }
#  164|   

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:165: misra_c_2012_rule_8_13_violation: The member function "MsgFilter::filterMsg(std::string const &, std::string const &)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  163|   }
#  164|   
#  165|-> std::string MsgFilter::filterMsg(
#  166|           const std::string &msg,
#  167|           const std::string &checker)

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:170: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  168|   {
#  169|       std::string filtered = msg;
#  170|->     for (const struct MsgReplace *rpl : d->msgFilterMap[checker]) {
#  171|           filtered = regexReplaceWrap(filtered, rpl->regex, rpl->replaceWith);
#  172|       }

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:170: misra_cpp_2008_rule_7_1_1_violation: The variable "rpl" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  168|   {
#  169|       std::string filtered = msg;
#  170|->     for (const struct MsgReplace *rpl : d->msgFilterMap[checker]) {
#  171|           filtered = regexReplaceWrap(filtered, rpl->regex, rpl->replaceWith);
#  172|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:171: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  169|       std::string filtered = msg;
#  170|       for (const struct MsgReplace *rpl : d->msgFilterMap[checker]) {
#  171|->         filtered = regexReplaceWrap(filtered, rpl->regex, rpl->replaceWith);
#  172|       }
#  173|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:175: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  173|   
#  174|       // these substitutions are common for all checkers
#  175|->     for (const struct MsgReplace *rpl : d->msgFilterMap[""]) {
#  176|           filtered = regexReplaceWrap(filtered, rpl->regex, rpl->replaceWith);
#  177|       }

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:175: misra_cpp_2008_rule_7_1_1_violation: The variable "rpl" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  173|   
#  174|       // these substitutions are common for all checkers
#  175|->     for (const struct MsgReplace *rpl : d->msgFilterMap[""]) {
#  176|           filtered = regexReplaceWrap(filtered, rpl->regex, rpl->replaceWith);
#  177|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:176: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  174|       // these substitutions are common for all checkers
#  175|       for (const struct MsgReplace *rpl : d->msgFilterMap[""]) {
#  176|->         filtered = regexReplaceWrap(filtered, rpl->regex, rpl->replaceWith);
#  177|       }
#  178|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:179: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  177|       }
#  178|   
#  179|-> #if DEBUG_SUBST > 1
#  180|       std::cerr << "filterMsg: " << filtered << "\n";
#  181|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:181: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  179|   #if DEBUG_SUBST > 1
#  180|       std::cerr << "filterMsg: " << filtered << "\n";
#  181|-> #endif
#  182|       return filtered;
#  183|   }

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:185: misra_c_2012_rule_8_13_violation: The member function "MsgFilter::filterPath(std::string const &)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  183|   }
#  184|   
#  185|-> std::string MsgFilter::filterPath(const std::string &origPath)
#  186|   {
#  187|       std::string path = origPath;

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:185: misra_c_2012_rule_8_3_violation: Declaration uses a different parameter name than "std::string MsgFilter::filterPath(const std::string &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.hh:45: prev_declaration: (see previous declaration of "MsgFilter::filterPath" at line 45 of "../../src/csfilter.hh")
#  183|   }
#  184|   
#  185|-> std::string MsgFilter::filterPath(const std::string &origPath)
#  186|   {
#  187|       std::string path = origPath;

Error: MISRA C++-2008 Rule 8-4-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:185: misra_cpp_2008_rule_8_4_2_violation: Declaration uses a different parameter name than "std::string MsgFilter::filterPath(const std::string &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.hh:45: prev_declaration: (see previous declaration of "MsgFilter::filterPath" at line 45 of "../../src/csfilter.hh")
#  183|   }
#  184|   
#  185|-> std::string MsgFilter::filterPath(const std::string &origPath)
#  186|   {
#  187|       std::string path = origPath;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:191: misra_cpp_2008_rule_7_1_1_violation: The variable "base" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  189|       TSubstMap &substMap = d->fileSubsts;
#  190|       if (!substMap.empty()) {
#  191|->         std::string base = regexReplaceWrap(origPath, d->reDir, "");
#  192|           std::string dir = regexReplaceWrap(origPath, d->reFile, "");
#  193|           if (substMap.find(base) != substMap.end()) {

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:192: misra_cpp_2008_rule_7_1_1_violation: The variable "dir" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  190|       if (!substMap.empty()) {
#  191|           std::string base = regexReplaceWrap(origPath, d->reDir, "");
#  192|->         std::string dir = regexReplaceWrap(origPath, d->reFile, "");
#  193|           if (substMap.find(base) != substMap.end()) {
#  194|               const std::string &substWith = substMap[base];

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:195: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  193|           if (substMap.find(base) != substMap.end()) {
#  194|               const std::string &substWith = substMap[base];
#  195|->             path = dir + substWith;
#  196|           }
#  197|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:200: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  198|   
#  199|       if (d->ignorePath)
#  200|->         return regexReplaceWrap(path, d->reDir, "");
#  201|   
#  202|       if (boost::regex_match(path, d->reTmpPath)) {

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:200: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  198|   
#  199|       if (d->ignorePath)
#  200|->         return regexReplaceWrap(path, d->reDir, "");
#  201|   
#  202|       if (boost::regex_match(path, d->reTmpPath)) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:200: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  198|   
#  199|       if (d->ignorePath)
#  200|->         return regexReplaceWrap(path, d->reDir, "");
#  201|   
#  202|       if (boost::regex_match(path, d->reTmpPath)) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:200: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  198|   
#  199|       if (d->ignorePath)
#  200|->         return regexReplaceWrap(path, d->reDir, "");
#  201|   
#  202|       if (boost::regex_match(path, d->reTmpPath)) {

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:205: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  203|           // filter random numbers in names of temporary generated files
#  204|           std::string tmpPath = boost::regex_replace(path, d->reTmpCleaner, "/tmp/tmp.c");
#  205|->         return tmpPath;
#  206|       }
#  207|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:205: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  203|           // filter random numbers in names of temporary generated files
#  204|           std::string tmpPath = boost::regex_replace(path, d->reTmpCleaner, "/tmp/tmp.c");
#  205|->         return tmpPath;
#  206|       }
#  207|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:212: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  210|           // %{_builddir}/build/lib/setuptools/glob.py ->
#  211|           // %{_builddir}/setuptools/glob.py
#  212|->         path = sm[1] + sm[2];
#  213|       }
#  214|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:217: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  215|       if (!boost::regex_match(path, sm, d->rePath))
#  216|           // no match
#  217|->         return path;
#  218|   
#  219|       std::string nvr (sm[/* NVR  */ 1]);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:217: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  215|       if (!boost::regex_match(path, sm, d->rePath))
#  216|           // no match
#  217|->         return path;
#  218|   
#  219|       std::string nvr (sm[/* NVR  */ 1]);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:217: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  215|       if (!boost::regex_match(path, sm, d->rePath))
#  216|           // no match
#  217|->         return path;
#  218|   
#  219|       std::string nvr (sm[/* NVR  */ 1]);

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:217: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  215|       if (!boost::regex_match(path, sm, d->rePath))
#  216|           // no match
#  217|->         return path;
#  218|   
#  219|       std::string nvr (sm[/* NVR  */ 1]);

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:223: misra_cpp_2008_rule_5_0_4_violation: "1" is implicitly converted from a signed value to an unsigned value.
#  221|   
#  222|       // try to kill the multiple version strings in paths (kernel, OpenLDAP, ...)
#  223|->     nvr.resize(nvr.size() - 1);
#  224|       std::string ver(boost::regex_replace(nvr, d->reKrn, ""));
#  225|       const std::string krnPattern = d->strKrn + ver + "[^/]*/";

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:224: misra_cpp_2008_rule_7_1_1_violation: The variable "ver" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  222|       // try to kill the multiple version strings in paths (kernel, OpenLDAP, ...)
#  223|       nvr.resize(nvr.size() - 1);
#  224|->     std::string ver(boost::regex_replace(nvr, d->reKrn, ""));
#  225|       const std::string krnPattern = d->strKrn + ver + "[^/]*/";
#  226|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:227: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  225|       const std::string krnPattern = d->strKrn + ver + "[^/]*/";
#  226|   
#  227|-> #if DEBUG_SUBST > 2
#  228|       std::cerr << "nvr: " << nvr << "\n";
#  229|       std::cerr << "ver: " << ver << "\n";

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:231: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  229|       std::cerr << "ver: " << ver << "\n";
#  230|       std::cerr << "krnPattern: " << krnPattern << "\n";
#  231|-> #endif
#  232|   
#  233|       const RE reKill(krnPattern);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:234: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  232|   
#  233|       const RE reKill(krnPattern);
#  234|->     core = boost::regex_replace(core, reKill, "");
#  235|   
#  236|       // quirk for Coverity inconsistency in handling bison-generated file names

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:237: misra_cpp_2008_rule_7_1_1_violation: The variable "suff" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  235|   
#  236|       // quirk for Coverity inconsistency in handling bison-generated file names
#  237|->     std::string suff(sm[/* Bison suffix */ 3]);
#  238|       if (!suff.empty())
#  239|           core += ".c";

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:239: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  237|       std::string suff(sm[/* Bison suffix */ 3]);
#  238|       if (!suff.empty())
#  239|->         core += ".c";
#  240|   
#  241|   #if DEBUG_SUBST

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:239: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  237|       std::string suff(sm[/* Bison suffix */ 3]);
#  238|       if (!suff.empty())
#  239|->         core += ".c";
#  240|   
#  241|   #if DEBUG_SUBST

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:239: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  237|       std::string suff(sm[/* Bison suffix */ 3]);
#  238|       if (!suff.empty())
#  239|->         core += ".c";
#  240|   
#  241|   #if DEBUG_SUBST

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:241: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  239|           core += ".c";
#  240|   
#  241|-> #if DEBUG_SUBST
#  242|       std::cerr << "filterPath: " << path << " -> " << core << "\n";
#  243|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.cc:243: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  241|   #if DEBUG_SUBST
#  242|       std::cerr << "filterPath: " << path << " -> " << core << "\n";
#  243|-> #endif
#  244|       return core;
#  245|   }

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.hh:28: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "MsgFilter".
#   26|   typedef std::map<std::string, std::string> TSubstMap;
#   27|   
#   28|-> class MsgFilter {
#   29|       public:
#   30|           // singleton

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.hh:31: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   29|       public:
#   30|           // singleton
#   31|->         static MsgFilter* inst() {
#   32|               return (self_)
#   33|                   ? (self_)

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.hh:32: misra_c_2012_directive_4_12_violation: A call to the function "operator new(8UL)" performs dynamic memory allocation.
#   30|           // singleton
#   31|           static MsgFilter* inst() {
#   32|->             return (self_)
#   33|                   ? (self_)
#   34|                   : (self_ = new MsgFilter);

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.hh:32: misra_c_2012_rule_10_1_violation: The expression "MsgFilter::self_" of non-boolean essential type is being interpreted as a boolean value for the operator "? :".
#   30|           // singleton
#   31|           static MsgFilter* inst() {
#   32|->             return (self_)
#   33|                   ? (self_)
#   34|                   : (self_ = new MsgFilter);

Error: MISRA C++-2008 Rule 5-0-14 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.hh:32: misra_cpp_2008_rule_5_0_14_violation: "MsgFilter::self_" is not an operand of type bool.
#   30|           // singleton
#   31|           static MsgFilter* inst() {
#   32|->             return (self_)
#   33|                   ? (self_)
#   34|                   : (self_ = new MsgFilter);

Error: MISRA C-2012 Rule 13.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.hh:34: misra_c_2012_rule_13_4_violation: The value returned by the assignment operator in "MsgFilter::self_ = new MsgFilter" is being used.
#   32|               return (self_)
#   33|                   ? (self_)
#   34|->                 : (self_ = new MsgFilter);
#   35|           }
#   36|   

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.hh:34: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   32|               return (self_)
#   33|                   ? (self_)
#   34|->                 : (self_ = new MsgFilter);
#   35|           }
#   36|   

Error: MISRA C++-2008 Rule 6-2-1 (CWE-481):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.hh:34: misra_cpp_2008_rule_6_2_1_violation: Assignment operator "=" is used in sub-expression "MsgFilter::self_ = new MsgFilter".
#   32|               return (self_)
#   33|                   ? (self_)
#   34|->                 : (self_ = new MsgFilter);
#   35|           }
#   36|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.hh:37: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   35|           }
#   36|   
#   37|->         void setIgnorePath(bool);
#   38|           void setFileNameSubstitution(
#   39|                   const std::string      &oldFile,

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.hh:48: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   46|   
#   47|       private:
#   48|->         MsgFilter();
#   49|           ~MsgFilter();
#   50|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csfilter.hh:49: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   47|       private:
#   48|           MsgFilter();
#   49|->         ~MsgFilter();
#   50|   
#   51|           static MsgFilter *self_;

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011 - 2013 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:35: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "StatWriter".
#   33|   #include <boost/program_options.hpp>
#   34|   
#   35|-> class StatWriter: public AbstractWriter {
#   36|       public:
#   37|           /// silently drop scan properties when printing stats only

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:38: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   36|       public:
#   37|           /// silently drop scan properties when printing stats only
#   38|->         virtual void setScanProps(const TScanProps &) { }
#   39|   };
#   40|   

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:38: misra_cpp_2008_rule_10_3_1_violation: Virtual function "StatWriter::setScanProps(TScanProps const &)" has already been defined in "AbstractWriter::setScanProps(TScanProps const &)".
#   36|       public:
#   37|           /// silently drop scan properties when printing stats only
#   38|->         virtual void setScanProps(const TScanProps &) { }
#   39|   };
#   40|   

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:41: misra_cpp_2008_rule_3_4_1_violation: Symbol "FilePrinter" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:407: single_use: Symbol "FilePrinter" is only used in "WriterFactory::createFiles()".
#   39|   };
#   40|   
#   41|-> class FilePrinter: public StatWriter {
#   42|       private:
#   43|           std::string file_;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:41: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "FilePrinter".
#   39|   };
#   40|   
#   41|-> class FilePrinter: public StatWriter {
#   42|       private:
#   43|           std::string file_;

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:46: misra_cpp_2008_rule_10_3_1_violation: Virtual function "FilePrinter::notifyFile(std::string const &)" has already been defined in "AbstractWriter::notifyFile(std::string const &)".
#   44|   
#   45|       protected:
#   46|->         virtual void notifyFile(const std::string &fileName) {
#   47|               file_ = fileName;
#   48|           }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:47: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   45|       protected:
#   46|           virtual void notifyFile(const std::string &fileName) {
#   47|->             file_ = fileName;
#   48|           }
#   49|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:50: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   48|           }
#   49|   
#   50|->         virtual void handleDef(const Defect &) {
#   51|               if (file_.empty())
#   52|                   return;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:52: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   50|           virtual void handleDef(const Defect &) {
#   51|               if (file_.empty())
#   52|->                 return;
#   53|   
#   54|               std::cout << file_ << "\n";

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:52: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   50|           virtual void handleDef(const Defect &) {
#   51|               if (file_.empty())
#   52|->                 return;
#   53|   
#   54|               std::cout << file_ << "\n";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:52: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   50|           virtual void handleDef(const Defect &) {
#   51|               if (file_.empty())
#   52|->                 return;
#   53|   
#   54|               std::cout << file_ << "\n";

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:52: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   50|           virtual void handleDef(const Defect &) {
#   51|               if (file_.empty())
#   52|->                 return;
#   53|   
#   54|               std::cout << file_ << "\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:54: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   52|                   return;
#   53|   
#   54|->             std::cout << file_ << "\n";
#   55|               file_.clear();
#   56|           }

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:59: misra_cpp_2008_rule_3_4_1_violation: Symbol "GroupPrinter" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:408: single_use: Symbol "GroupPrinter" is only used in "WriterFactory::createGrouped()".
#   57|   };
#   58|   
#   59|-> class GroupPrinter: public StatWriter {
#   60|       private:
#   61|           std::string file_;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:59: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "GroupPrinter".
#   57|   };
#   58|   
#   59|-> class GroupPrinter: public StatWriter {
#   60|       private:
#   61|           std::string file_;

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:64: misra_cpp_2008_rule_10_3_1_violation: Virtual function "GroupPrinter::notifyFile(std::string const &)" has already been defined in "AbstractWriter::notifyFile(std::string const &)".
#   62|   
#   63|       protected:
#   64|->         virtual void notifyFile(const std::string &fileName) {
#   65|               file_ = fileName;
#   66|           }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:65: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   63|       protected:
#   64|           virtual void notifyFile(const std::string &fileName) {
#   65|->             file_ = fileName;
#   66|           }
#   67|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:70: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   68|           virtual void handleDef(const Defect &def) {
#   69|               if (!file_.empty()) {
#   70|->                 std::cout << "\n\n=== " << file_ << " ===\n";
#   71|                   file_.clear();
#   72|               }

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:79: misra_cpp_2008_rule_3_4_1_violation: Symbol "KeyEventPrinter" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:421: single_use: Symbol "KeyEventPrinter" is only used in "WriterFactory::createKeyEventPrinter()".
#   77|   };
#   78|   
#   79|-> class KeyEventPrinter: public StatWriter {
#   80|       protected:
#   81|           virtual void handleDef(const Defect &def) {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:79: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "KeyEventPrinter".
#   77|   };
#   78|   
#   79|-> class KeyEventPrinter: public StatWriter {
#   80|       protected:
#   81|           virtual void handleDef(const Defect &def) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:83: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   81|           virtual void handleDef(const Defect &def) {
#   82|               const DefEvent &keyEvent = def.events[def.keyEventIdx];
#   83|->             std::cout << def.checker << "\t" << keyEvent.event << "\n";
#   84|           }
#   85|   };

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:87: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "DefCounter".
#   85|   };
#   86|   
#   87|-> class DefCounter: public StatWriter {
#   88|       private:
#   89|           typedef std::map<std::string, int> TMap;

Error: MISRA C-2012 Rule 13.3 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:94: misra_c_2012_rule_13_3_violation: Operator "++*this->cnt_[def.checker]" in full expression with other potential side effects.
#   92|       public:
#   93|           virtual void handleDef(const Defect &def) {
#   94|->             ++cnt_[def.checker];
#   95|           }
#   96|   

Error: MISRA C++-2008 Rule 5-2-10 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:94: misra_cpp_2008_rule_5_2_10_violation: The ++ or -- operator is mixed with other operators in expression "++*this->cnt_[def.checker]".
#   92|       public:
#   93|           virtual void handleDef(const Defect &def) {
#   94|->             ++cnt_[def.checker];
#   95|           }
#   96|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:97: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   95|           }
#   96|   
#   97|->         virtual void flush() {
#   98|               for (TMap::const_reference item : cnt_) {
#   99|                   using namespace std;

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:97: misra_cpp_2008_rule_10_3_1_violation: Virtual function "DefCounter::flush()" has already been defined in "AbstractWriter::flush()".
#   95|           }
#   96|   
#   97|->         virtual void flush() {
#   98|               for (TMap::const_reference item : cnt_) {
#   99|                   using namespace std;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:98: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#   96|   
#   97|           virtual void flush() {
#   98|->             for (TMap::const_reference item : cnt_) {
#   99|                   using namespace std;
#  100|                   const ios_base::fmtflags oldFlags = cout.flags();

Error: MISRA C++-2008 Rule 7-3-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:99: misra_cpp_2008_rule_7_3_4_violation: Using a using-directive for namespace "std".
#   97|           virtual void flush() {
#   98|               for (TMap::const_reference item : cnt_) {
#   99|->                 using namespace std;
#  100|                   const ios_base::fmtflags oldFlags = cout.flags();
#  101|                   const int oldWidth = cout.width();

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:101: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   99|                   using namespace std;
#  100|                   const ios_base::fmtflags oldFlags = cout.flags();
#  101|->                 const int oldWidth = cout.width();
#  102|                   cout << fixed << setw(7) << item.second;
#  103|                   cout.width(oldWidth);

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:101: misra_c_2012_rule_10_3_violation: Implicit conversion of "std::cout.width()" from essential type "signed 64-bit int" to different or narrower essential type "signed 32-bit int".
#   99|                   using namespace std;
#  100|                   const ios_base::fmtflags oldFlags = cout.flags();
#  101|->                 const int oldWidth = cout.width();
#  102|                   cout << fixed << setw(7) << item.second;
#  103|                   cout.width(oldWidth);

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:101: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   99|                   using namespace std;
#  100|                   const ios_base::fmtflags oldFlags = cout.flags();
#  101|->                 const int oldWidth = cout.width();
#  102|                   cout << fixed << setw(7) << item.second;
#  103|                   cout.width(oldWidth);

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:101: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "std::cout.width()" is implicitly reduced from "64-bit signed long" to "32-bit signed int".
#   99|                   using namespace std;
#  100|                   const ios_base::fmtflags oldFlags = cout.flags();
#  101|->                 const int oldWidth = cout.width();
#  102|                   cout << fixed << setw(7) << item.second;
#  103|                   cout.width(oldWidth);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:102: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  100|                   const ios_base::fmtflags oldFlags = cout.flags();
#  101|                   const int oldWidth = cout.width();
#  102|->                 cout << fixed << setw(7) << item.second;
#  103|                   cout.width(oldWidth);
#  104|                   cout.flags(oldFlags);

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:102: misra_cpp_2008_rule_8_4_4_violation: Function identifier "fixed" is not used to call the function or preceded by &.
#  100|                   const ios_base::fmtflags oldFlags = cout.flags();
#  101|                   const int oldWidth = cout.width();
#  102|->                 cout << fixed << setw(7) << item.second;
#  103|                   cout.width(oldWidth);
#  104|                   cout.flags(oldFlags);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:103: misra_c_2012_rule_17_7_violation: The return value of a non-void function "width" is unused.
#  101|                   const int oldWidth = cout.width();
#  102|                   cout << fixed << setw(7) << item.second;
#  103|->                 cout.width(oldWidth);
#  104|                   cout.flags(oldFlags);
#  105|                   cout << "\t" << item.first << "\n";

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:103: misra_cpp_2008_rule_0_1_7_violation: The return value of function "std::cout.width(oldWidth)" is not used.
#  101|                   const int oldWidth = cout.width();
#  102|                   cout << fixed << setw(7) << item.second;
#  103|->                 cout.width(oldWidth);
#  104|                   cout.flags(oldFlags);
#  105|                   cout << "\t" << item.first << "\n";

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:103: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "oldWidth" with underlying type "32-bit signed int" is implicitly converted to a different underlying type "64-bit signed long".
#  101|                   const int oldWidth = cout.width();
#  102|                   cout << fixed << setw(7) << item.second;
#  103|->                 cout.width(oldWidth);
#  104|                   cout.flags(oldFlags);
#  105|                   cout << "\t" << item.first << "\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:104: misra_c_2012_rule_17_7_violation: The return value of a non-void function "flags" is unused.
#  102|                   cout << fixed << setw(7) << item.second;
#  103|                   cout.width(oldWidth);
#  104|->                 cout.flags(oldFlags);
#  105|                   cout << "\t" << item.first << "\n";
#  106|               }

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:104: misra_cpp_2008_rule_0_1_7_violation: The return value of function "std::cout.flags(oldFlags)" is not used.
#  102|                   cout << fixed << setw(7) << item.second;
#  103|                   cout.width(oldWidth);
#  104|->                 cout.flags(oldFlags);
#  105|                   cout << "\t" << item.first << "\n";
#  106|               }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:105: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  103|                   cout.width(oldWidth);
#  104|                   cout.flags(oldFlags);
#  105|->                 cout << "\t" << item.first << "\n";
#  106|               }
#  107|           }

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:110: misra_cpp_2008_rule_3_4_1_violation: Symbol "EvtCounter" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:410: single_use: Symbol "EvtCounter" is only used in "WriterFactory::createEvtStat()".
#  108|   };
#  109|   
#  110|-> class EvtCounter: public StatWriter {
#  111|       private:
#  112|           typedef std::pair<std::string, std::string>     TKey;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:110: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "EvtCounter".
#  108|   };
#  109|   
#  110|-> class EvtCounter: public StatWriter {
#  111|       private:
#  112|           typedef std::pair<std::string, std::string>     TKey;

Error: MISRA C-2012 Rule 13.3 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:120: misra_c_2012_rule_13_3_violation: Operator "++*this->cnt_[key]" in full expression with other potential side effects.
#  118|               const DefEvent &evt = def.events[def.keyEventIdx];
#  119|               const TKey key(def.checker, evt.event);
#  120|->             ++cnt_[key];
#  121|           }
#  122|   

Error: MISRA C++-2008 Rule 5-2-10 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:120: misra_cpp_2008_rule_5_2_10_violation: The ++ or -- operator is mixed with other operators in expression "++*this->cnt_[key]".
#  118|               const DefEvent &evt = def.events[def.keyEventIdx];
#  119|               const TKey key(def.checker, evt.event);
#  120|->             ++cnt_[key];
#  121|           }
#  122|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:123: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  121|           }
#  122|   
#  123|->         virtual void flush() {
#  124|               for (TMap::const_reference item : cnt_) {
#  125|                   using namespace std;

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:123: misra_cpp_2008_rule_10_3_1_violation: Virtual function "EvtCounter::flush()" has already been defined in "AbstractWriter::flush()".
#  121|           }
#  122|   
#  123|->         virtual void flush() {
#  124|               for (TMap::const_reference item : cnt_) {
#  125|                   using namespace std;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:124: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  122|   
#  123|           virtual void flush() {
#  124|->             for (TMap::const_reference item : cnt_) {
#  125|                   using namespace std;
#  126|                   const TKey &key = item.first;

Error: MISRA C++-2008 Rule 7-3-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:125: misra_cpp_2008_rule_7_3_4_violation: Using a using-directive for namespace "std".
#  123|           virtual void flush() {
#  124|               for (TMap::const_reference item : cnt_) {
#  125|->                 using namespace std;
#  126|                   const TKey &key = item.first;
#  127|   

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:130: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  128|                   // save iostream flags
#  129|                   const ios_base::fmtflags oldFlags = cout.flags();
#  130|->                 const int oldWidth = cout.width();
#  131|   
#  132|                   cout << fixed << setw(7) << item.second;

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:130: misra_c_2012_rule_10_3_violation: Implicit conversion of "std::cout.width()" from essential type "signed 64-bit int" to different or narrower essential type "signed 32-bit int".
#  128|                   // save iostream flags
#  129|                   const ios_base::fmtflags oldFlags = cout.flags();
#  130|->                 const int oldWidth = cout.width();
#  131|   
#  132|                   cout << fixed << setw(7) << item.second;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:130: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  128|                   // save iostream flags
#  129|                   const ios_base::fmtflags oldFlags = cout.flags();
#  130|->                 const int oldWidth = cout.width();
#  131|   
#  132|                   cout << fixed << setw(7) << item.second;

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:130: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "std::cout.width()" is implicitly reduced from "64-bit signed long" to "32-bit signed int".
#  128|                   // save iostream flags
#  129|                   const ios_base::fmtflags oldFlags = cout.flags();
#  130|->                 const int oldWidth = cout.width();
#  131|   
#  132|                   cout << fixed << setw(7) << item.second;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:132: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  130|                   const int oldWidth = cout.width();
#  131|   
#  132|->                 cout << fixed << setw(7) << item.second;
#  133|                   cout << "\t" << left << setw(48) << key.first;
#  134|   

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:132: misra_cpp_2008_rule_8_4_4_violation: Function identifier "fixed" is not used to call the function or preceded by &.
#  130|                   const int oldWidth = cout.width();
#  131|   
#  132|->                 cout << fixed << setw(7) << item.second;
#  133|                   cout << "\t" << left << setw(48) << key.first;
#  134|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:133: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  131|   
#  132|                   cout << fixed << setw(7) << item.second;
#  133|->                 cout << "\t" << left << setw(48) << key.first;
#  134|   
#  135|                   // restore iostream flags

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:133: misra_cpp_2008_rule_8_4_4_violation: Function identifier "left" is not used to call the function or preceded by &.
#  131|   
#  132|                   cout << fixed << setw(7) << item.second;
#  133|->                 cout << "\t" << left << setw(48) << key.first;
#  134|   
#  135|                   // restore iostream flags

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:136: misra_c_2012_rule_17_7_violation: The return value of a non-void function "width" is unused.
#  134|   
#  135|                   // restore iostream flags
#  136|->                 cout.width(oldWidth);
#  137|                   cout.flags(oldFlags);
#  138|   

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:136: misra_cpp_2008_rule_0_1_7_violation: The return value of function "std::cout.width(oldWidth)" is not used.
#  134|   
#  135|                   // restore iostream flags
#  136|->                 cout.width(oldWidth);
#  137|                   cout.flags(oldFlags);
#  138|   

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:136: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "oldWidth" with underlying type "32-bit signed int" is implicitly converted to a different underlying type "64-bit signed long".
#  134|   
#  135|                   // restore iostream flags
#  136|->                 cout.width(oldWidth);
#  137|                   cout.flags(oldFlags);
#  138|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:137: misra_c_2012_rule_17_7_violation: The return value of a non-void function "flags" is unused.
#  135|                   // restore iostream flags
#  136|                   cout.width(oldWidth);
#  137|->                 cout.flags(oldFlags);
#  138|   
#  139|                   cout << "\t" << key.second << "\n";

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:137: misra_cpp_2008_rule_0_1_7_violation: The return value of function "std::cout.flags(oldFlags)" is not used.
#  135|                   // restore iostream flags
#  136|                   cout.width(oldWidth);
#  137|->                 cout.flags(oldFlags);
#  138|   
#  139|                   cout << "\t" << key.second << "\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:139: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  137|                   cout.flags(oldFlags);
#  138|   
#  139|->                 cout << "\t" << key.second << "\n";
#  140|               }
#  141|           }

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:144: misra_cpp_2008_rule_3_4_1_violation: Symbol "FileDefCounter" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:411: single_use: Symbol "FileDefCounter" is only used in "WriterFactory::createFileStat()".
#  142|   };
#  143|   
#  144|-> class FileDefCounter: public StatWriter {
#  145|       private:
#  146|           typedef std::map<std::string, DefCounter *> TMap;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:144: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "FileDefCounter".
#  142|   };
#  143|   
#  144|-> class FileDefCounter: public StatWriter {
#  145|       private:
#  146|           typedef std::map<std::string, DefCounter *> TMap;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:150: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  148|   
#  149|       public:
#  150|->         virtual ~FileDefCounter() {
#  151|               for (TMap::const_reference item : cntMap_)
#  152|                   delete /* (DefCounter *) */ item.second;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:151: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  149|       public:
#  150|           virtual ~FileDefCounter() {
#  151|->             for (TMap::const_reference item : cntMap_)
#  152|                   delete /* (DefCounter *) */ item.second;
#  153|           }

Error: MISRA C-2012 Directive 4.4 (CWE-1078):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:152: misra_c_2012_directive_4_4_violation: The comment resembles a code snippet.
#  150|           virtual ~FileDefCounter() {
#  151|               for (TMap::const_reference item : cntMap_)
#  152|->                 delete /* (DefCounter *) */ item.second;
#  153|           }
#  154|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:152: misra_c_2012_rule_15_6_violation: The body of the "for" loop is not a compound statement.
#  150|           virtual ~FileDefCounter() {
#  151|               for (TMap::const_reference item : cntMap_)
#  152|->                 delete /* (DefCounter *) */ item.second;
#  153|           }
#  154|   

Error: MISRA C++-2008 Rule 2-7-2 (CWE-1078):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:152: misra_cpp_2008_rule_2_7_2_violation: The comment resembles a code snippet.
#  150|           virtual ~FileDefCounter() {
#  151|               for (TMap::const_reference item : cntMap_)
#  152|->                 delete /* (DefCounter *) */ item.second;
#  153|           }
#  154|   

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:152: misra_cpp_2008_rule_6_3_1_violation: The body of the "for" loop is not a compound statement.
#  150|           virtual ~FileDefCounter() {
#  151|               for (TMap::const_reference item : cntMap_)
#  152|->                 delete /* (DefCounter *) */ item.second;
#  153|           }
#  154|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:157: misra_cpp_2008_rule_7_1_1_violation: The variable "it" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  155|           virtual void handleDef(const Defect &def) {
#  156|               const std::string fName = def.events[def.keyEventIdx].fileName;
#  157|->             TMap::const_iterator it = cntMap_.find(fName);
#  158|   
#  159|               DefCounter *defCnt = (cntMap_.end() == it)

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:159: misra_c_2012_directive_4_12_violation: A call to the function "operator new(112UL)" performs dynamic memory allocation.
#  157|               TMap::const_iterator it = cntMap_.find(fName);
#  158|   
#  159|->             DefCounter *defCnt = (cntMap_.end() == it)
#  160|                   ? (cntMap_[fName] = new DefCounter)
#  161|                   : (it->second);

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:159: misra_cpp_2008_rule_7_1_1_violation: The variable "defCnt" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  157|               TMap::const_iterator it = cntMap_.find(fName);
#  158|   
#  159|->             DefCounter *defCnt = (cntMap_.end() == it)
#  160|                   ? (cntMap_[fName] = new DefCounter)
#  161|                   : (it->second);

Error: MISRA C-2012 Rule 13.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:160: misra_c_2012_rule_13_4_violation: The value returned by the assignment operator in "this->cntMap_[fName] = new DefCounter" is being used.
#  158|   
#  159|               DefCounter *defCnt = (cntMap_.end() == it)
#  160|->                 ? (cntMap_[fName] = new DefCounter)
#  161|                   : (it->second);
#  162|   

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:160: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  158|   
#  159|               DefCounter *defCnt = (cntMap_.end() == it)
#  160|->                 ? (cntMap_[fName] = new DefCounter)
#  161|                   : (it->second);
#  162|   

Error: MISRA C++-2008 Rule 6-2-1 (CWE-481):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:160: misra_cpp_2008_rule_6_2_1_violation: Assignment operator "=" is used in sub-expression "this->cntMap_[fName] = new DefCounter".
#  158|   
#  159|               DefCounter *defCnt = (cntMap_.end() == it)
#  160|->                 ? (cntMap_[fName] = new DefCounter)
#  161|                   : (it->second);
#  162|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:166: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  164|           }
#  165|   
#  166|->         virtual void flush() {
#  167|               for (TMap::const_reference item : cntMap_) {
#  168|                   const std::string fName = item.first;

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:166: misra_cpp_2008_rule_10_3_1_violation: Virtual function "FileDefCounter::flush()" has already been defined in "AbstractWriter::flush()".
#  164|           }
#  165|   
#  166|->         virtual void flush() {
#  167|               for (TMap::const_reference item : cntMap_) {
#  168|                   const std::string fName = item.first;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:167: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  165|   
#  166|           virtual void flush() {
#  167|->             for (TMap::const_reference item : cntMap_) {
#  168|                   const std::string fName = item.first;
#  169|                   std::cout << "\n\n--- " << fName << " ---\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:169: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  167|               for (TMap::const_reference item : cntMap_) {
#  168|                   const std::string fName = item.first;
#  169|->                 std::cout << "\n\n--- " << fName << " ---\n";
#  170|   
#  171|                   DefCounter *defCnt = item.second;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:171: misra_cpp_2008_rule_7_1_1_violation: The variable "defCnt" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  169|                   std::cout << "\n\n--- " << fName << " ---\n";
#  170|   
#  171|->                 DefCounter *defCnt = item.second;
#  172|                   defCnt->flush();
#  173|               }

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:177: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "MsgPredicate".
#  175|   };
#  176|   
#  177|-> class MsgPredicate: public IPredicate {
#  178|       private:
#  179|           const RE re_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:179: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re_" clashes with "RE"
csdiff-2.1.1.20210615.144928.g9c9686f/src/regex.hh:25: misra_typographically_ambiguous_orig: (Previously declared symbol "RE" at line 25 of "../../src/regex.hh")
#  177|   class MsgPredicate: public IPredicate {
#  178|       private:
#  179|->         const RE re_;
#  180|   
#  181|       public:

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:182: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "IPredicate" are not called in this constructor.
#  180|   
#  181|       public:
#  182|->         MsgPredicate(const RE &re):
#  183|               re_(re)
#  184|           {

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:182: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re" clashes with "re_"
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:179: misra_typographically_ambiguous_orig: (Previously declared symbol "re_" at line 179)
#  180|   
#  181|       public:
#  182|->         MsgPredicate(const RE &re):
#  183|               re_(re)
#  184|           {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:188: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  186|   
#  187|           virtual bool matchDef(const Defect &def) const {
#  188|->             for (const DefEvent &evt : def.events) {
#  189|                   if (boost::regex_search(evt.msg, re_))
#  190|                       return true;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:190: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  188|               for (const DefEvent &evt : def.events) {
#  189|                   if (boost::regex_search(evt.msg, re_))
#  190|->                     return true;
#  191|               }
#  192|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:190: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  188|               for (const DefEvent &evt : def.events) {
#  189|                   if (boost::regex_search(evt.msg, re_))
#  190|->                     return true;
#  191|               }
#  192|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:190: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  188|               for (const DefEvent &evt : def.events) {
#  189|                   if (boost::regex_search(evt.msg, re_))
#  190|->                     return true;
#  191|               }
#  192|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:190: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  188|               for (const DefEvent &evt : def.events) {
#  189|                   if (boost::regex_search(evt.msg, re_))
#  190|->                     return true;
#  191|               }
#  192|   

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:197: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "KeyEventPredicate".
#  195|   };
#  196|   
#  197|-> class KeyEventPredicate: public IPredicate {
#  198|       private:
#  199|           const RE re_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:199: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re_" clashes with "RE"
csdiff-2.1.1.20210615.144928.g9c9686f/src/regex.hh:25: misra_typographically_ambiguous_orig: (Previously declared symbol "RE" at line 25 of "../../src/regex.hh")
#  197|   class KeyEventPredicate: public IPredicate {
#  198|       private:
#  199|->         const RE re_;
#  200|   
#  201|       public:

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:202: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "IPredicate" are not called in this constructor.
#  200|   
#  201|       public:
#  202|->         KeyEventPredicate(const RE &re):
#  203|               re_(re)
#  204|           {

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:202: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re" clashes with "re_"
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:199: misra_typographically_ambiguous_orig: (Previously declared symbol "re_" at line 199)
#  200|   
#  201|       public:
#  202|->         KeyEventPredicate(const RE &re):
#  203|               re_(re)
#  204|           {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:213: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "ErrorPredicate".
#  211|   };
#  212|   
#  213|-> class ErrorPredicate: public IPredicate {
#  214|       private:
#  215|           const RE re_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:215: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re_" clashes with "RE"
csdiff-2.1.1.20210615.144928.g9c9686f/src/regex.hh:25: misra_typographically_ambiguous_orig: (Previously declared symbol "RE" at line 25 of "../../src/regex.hh")
#  213|   class ErrorPredicate: public IPredicate {
#  214|       private:
#  215|->         const RE re_;
#  216|   
#  217|       public:

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:218: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "IPredicate" are not called in this constructor.
#  216|   
#  217|       public:
#  218|->         ErrorPredicate(const RE &re):
#  219|               re_(re)
#  220|           {

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:218: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re" clashes with "re_"
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:215: misra_typographically_ambiguous_orig: (Previously declared symbol "re_" at line 215)
#  216|   
#  217|       public:
#  218|->         ErrorPredicate(const RE &re):
#  219|               re_(re)
#  220|           {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:229: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "PathPredicate".
#  227|   };
#  228|   
#  229|-> class PathPredicate: public IPredicate {
#  230|       private:
#  231|           const RE re_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:231: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re_" clashes with "RE"
csdiff-2.1.1.20210615.144928.g9c9686f/src/regex.hh:25: misra_typographically_ambiguous_orig: (Previously declared symbol "RE" at line 25 of "../../src/regex.hh")
#  229|   class PathPredicate: public IPredicate {
#  230|       private:
#  231|->         const RE re_;
#  232|   
#  233|       public:

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:234: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "IPredicate" are not called in this constructor.
#  232|   
#  233|       public:
#  234|->         PathPredicate(const RE &re):
#  235|               re_(re)
#  236|           {

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:234: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re" clashes with "re_"
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:231: misra_typographically_ambiguous_orig: (Previously declared symbol "re_" at line 231)
#  232|   
#  233|       public:
#  234|->         PathPredicate(const RE &re):
#  235|               re_(re)
#  236|           {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:245: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "CheckerPredicate".
#  243|   };
#  244|   
#  245|-> class CheckerPredicate: public IPredicate {
#  246|       private:
#  247|           const RE re_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:247: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re_" clashes with "RE"
csdiff-2.1.1.20210615.144928.g9c9686f/src/regex.hh:25: misra_typographically_ambiguous_orig: (Previously declared symbol "RE" at line 25 of "../../src/regex.hh")
#  245|   class CheckerPredicate: public IPredicate {
#  246|       private:
#  247|->         const RE re_;
#  248|   
#  249|       public:

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:250: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "IPredicate" are not called in this constructor.
#  248|   
#  249|       public:
#  250|->         CheckerPredicate(const RE &re):
#  251|               re_(re)
#  252|           {

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:250: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re" clashes with "re_"
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:247: misra_typographically_ambiguous_orig: (Previously declared symbol "re_" at line 247)
#  248|   
#  249|       public:
#  250|->         CheckerPredicate(const RE &re):
#  251|               re_(re)
#  252|           {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:260: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "AnnotPredicate".
#  258|   };
#  259|   
#  260|-> class AnnotPredicate: public IPredicate {
#  261|       private:
#  262|           const RE re_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:262: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re_" clashes with "RE"
csdiff-2.1.1.20210615.144928.g9c9686f/src/regex.hh:25: misra_typographically_ambiguous_orig: (Previously declared symbol "RE" at line 25 of "../../src/regex.hh")
#  260|   class AnnotPredicate: public IPredicate {
#  261|       private:
#  262|->         const RE re_;
#  263|   
#  264|       public:

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:265: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "IPredicate" are not called in this constructor.
#  263|   
#  264|       public:
#  265|->         AnnotPredicate(const RE &re):
#  266|               re_(re)
#  267|           {

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:265: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re" clashes with "re_"
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:262: misra_typographically_ambiguous_orig: (Previously declared symbol "re_" at line 262)
#  263|   
#  264|       public:
#  265|->         AnnotPredicate(const RE &re):
#  266|               re_(re)
#  267|           {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:275: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "SrcAnnotPredicate".
#  273|   };
#  274|   
#  275|-> class SrcAnnotPredicate: public IPredicate {
#  276|       private:
#  277|           const RE re_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:277: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re_" clashes with "RE"
csdiff-2.1.1.20210615.144928.g9c9686f/src/regex.hh:25: misra_typographically_ambiguous_orig: (Previously declared symbol "RE" at line 25 of "../../src/regex.hh")
#  275|   class SrcAnnotPredicate: public IPredicate {
#  276|       private:
#  277|->         const RE re_;
#  278|   
#  279|       public:

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:280: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "IPredicate" are not called in this constructor.
#  278|   
#  279|       public:
#  280|->         SrcAnnotPredicate(const RE &re):
#  281|               re_(re)
#  282|           {

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:280: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re" clashes with "re_"
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:277: misra_typographically_ambiguous_orig: (Previously declared symbol "re_" at line 277)
#  278|   
#  279|       public:
#  280|->         SrcAnnotPredicate(const RE &re):
#  281|               re_(re)
#  282|           {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:291: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  289|               std::fstream fstr(fname.c_str(), std::ios::in);
#  290|               if (!fstr) {
#  291|->                 std::cerr << "failed to open source file: " << fname << "\n";
#  292|                   return false;
#  293|               }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:292: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  290|               if (!fstr) {
#  291|                   std::cerr << "failed to open source file: " << fname << "\n";
#  292|->                 return false;
#  293|               }
#  294|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:292: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  290|               if (!fstr) {
#  291|                   std::cerr << "failed to open source file: " << fname << "\n";
#  292|->                 return false;
#  293|               }
#  294|   

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:297: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  295|               bool matched = false;
#  296|   
#  297|->             const int lineno = evt.line;
#  298|               std::string line;
#  299|               for (int i = 1; i <= lineno; i++) {

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:297: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  295|               bool matched = false;
#  296|   
#  297|->             const int lineno = evt.line;
#  298|               std::string line;
#  299|               for (int i = 1; i <= lineno; i++) {

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:299: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  297|               const int lineno = evt.line;
#  298|               std::string line;
#  299|->             for (int i = 1; i <= lineno; i++) {
#  300|                   if (std::getline(fstr, line))
#  301|                       continue;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:299: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  297|               const int lineno = evt.line;
#  298|               std::string line;
#  299|->             for (int i = 1; i <= lineno; i++) {
#  300|                   if (std::getline(fstr, line))
#  301|                       continue;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:301: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  299|               for (int i = 1; i <= lineno; i++) {
#  300|                   if (std::getline(fstr, line))
#  301|->                     continue;
#  302|   
#  303|                   std::cerr << "failed to seek line "

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:301: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  299|               for (int i = 1; i <= lineno; i++) {
#  300|                   if (std::getline(fstr, line))
#  301|->                     continue;
#  302|   
#  303|                   std::cerr << "failed to seek line "

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:303: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  301|                       continue;
#  302|   
#  303|->                 std::cerr << "failed to seek line "
#  304|                       << lineno << " in the source file: "
#  305|                       << fname << "\n";

Error: MISRA C-2012 Rule 15.1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:307: misra_c_2012_rule_15_1_violation: Using "goto" statement.
#  305|                       << fname << "\n";
#  306|   
#  307|->                 goto fail;
#  308|               }
#  309|   

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:317: misra_cpp_2008_rule_3_4_1_violation: Symbol "PathStripper" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:558: single_use: Symbol "PathStripper" is only used in "main(int, char **)".
#  315|   };
#  316|   
#  317|-> class PathStripper: public GenericAbstractFilter {
#  318|       public:
#  319|           PathStripper(AbstractWriter *agent, const std::string &prefix):

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:317: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "PathStripper".
#  315|   };
#  316|   
#  317|-> class PathStripper: public GenericAbstractFilter {
#  318|       public:
#  319|           PathStripper(AbstractWriter *agent, const std::string &prefix):

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:319: misra_cpp_2008_rule_7_1_1_violation: The variable "agent" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  317|   class PathStripper: public GenericAbstractFilter {
#  318|       public:
#  319|->         PathStripper(AbstractWriter *agent, const std::string &prefix):
#  320|               GenericAbstractFilter(agent),
#  321|               prefStr_(prefix),

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:326: misra_c_2012_rule_8_3_violation: Declaration uses a different parameter name than "void GenericAbstractFilter::handleDef(const Defect &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:29: prev_declaration: (see previous declaration of "GenericAbstractFilter::handleDef" at line 29 of "../../src/abstract-filter.hh")
#  324|           }
#  325|   
#  326|->         virtual void handleDef(const Defect &defOrig) {
#  327|               Defect def(defOrig);
#  328|   

Error: MISRA C++-2008 Rule 8-4-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:326: misra_cpp_2008_rule_8_4_2_violation: Declaration uses a different parameter name than "void GenericAbstractFilter::handleDef(const Defect &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-filter.hh:29: prev_declaration: (see previous declaration of "GenericAbstractFilter::handleDef" at line 29 of "../../src/abstract-filter.hh")
#  324|           }
#  325|   
#  326|->         virtual void handleDef(const Defect &defOrig) {
#  327|               Defect def(defOrig);
#  328|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:330: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  328|   
#  329|               // iterate through all events
#  330|->             for (DefEvent &evt : def.events) {
#  331|                   std::string &path = evt.fileName;
#  332|                   if (path.size() < prefSize_)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:333: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  331|                   std::string &path = evt.fileName;
#  332|                   if (path.size() < prefSize_)
#  333|->                     continue;
#  334|   
#  335|                   const std::string str(path, /* pos */ 0U, prefSize_);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:333: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  331|                   std::string &path = evt.fileName;
#  332|                   if (path.size() < prefSize_)
#  333|->                     continue;
#  334|   
#  335|                   const std::string str(path, /* pos */ 0U, prefSize_);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:337: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  335|                   const std::string str(path, /* pos */ 0U, prefSize_);
#  336|                   if (str != prefStr_)
#  337|->                     continue;
#  338|   
#  339|                   // strip path prefix in this event

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:337: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  335|                   const std::string str(path, /* pos */ 0U, prefSize_);
#  336|                   if (str != prefStr_)
#  337|->                     continue;
#  338|   
#  339|                   // strip path prefix in this event

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:340: misra_c_2012_rule_17_7_violation: The return value of a non-void function "erase" is unused.
#  338|   
#  339|                   // strip path prefix in this event
#  340|->                 path.erase(/* pos */ 0U, prefSize_);
#  341|               }
#  342|   

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:340: misra_cpp_2008_rule_0_1_7_violation: The return value of function "path->erase(0UL, this->prefSize_)" is not used.
#  338|   
#  339|                   // strip path prefix in this event
#  340|->                 path.erase(/* pos */ 0U, prefSize_);
#  341|               }
#  342|   

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:351: misra_cpp_2008_rule_3_4_1_violation: Symbol "DropScanProps" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:558: single_use: Symbol "DropScanProps" is only used in "main(int, char **)".
#  349|   };
#  350|   
#  351|-> class DropScanProps: public GenericAbstractFilter {
#  352|       public:
#  353|           DropScanProps(AbstractWriter *agent):

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:351: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "DropScanProps".
#  349|   };
#  350|   
#  351|-> class DropScanProps: public GenericAbstractFilter {
#  352|       public:
#  353|           DropScanProps(AbstractWriter *agent):

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:353: misra_cpp_2008_rule_7_1_1_violation: The variable "agent" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  351|   class DropScanProps: public GenericAbstractFilter {
#  352|       public:
#  353|->         DropScanProps(AbstractWriter *agent):
#  354|               GenericAbstractFilter(agent)
#  355|           {

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:359: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#  357|   
#  358|           /// ignore any given scan properties
#  359|->         virtual void setScanProps(const TScanProps &) {
#  360|           }
#  361|   

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:359: misra_cpp_2008_rule_10_3_1_violation: Virtual function "DropScanProps::setScanProps(TScanProps const &)" has already been defined in "AbstractWriter::setScanProps(TScanProps const &)".
#  357|   
#  358|           /// ignore any given scan properties
#  359|->         virtual void setScanProps(const TScanProps &) {
#  360|           }
#  361|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:363: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  361|   
#  362|           /// always return empty scan properties
#  363|->         virtual const TScanProps& getScanProps() const {
#  364|               return emp_;
#  365|           }

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:363: misra_cpp_2008_rule_10_3_1_violation: Virtual function "DropScanProps::getScanProps[abi:cxx11]() const" has already been defined in "AbstractWriter::getScanProps[abi:cxx11]() const".
#  361|   
#  362|           /// always return empty scan properties
#  363|->         virtual const TScanProps& getScanProps() const {
#  364|               return emp_;
#  365|           }

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:377: misra_cpp_2008_rule_3_4_1_violation: Symbol "DuplicateFilter" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:558: single_use: Symbol "DuplicateFilter" is only used in "main(int, char **)".
#  375|   };
#  376|   
#  377|-> class DuplicateFilter: public AbstractFilter {
#  378|       public:
#  379|           DuplicateFilter(AbstractWriter *agent):

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:377: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "DuplicateFilter".
#  375|   };
#  376|   
#  377|-> class DuplicateFilter: public AbstractFilter {
#  378|       public:
#  379|           DuplicateFilter(AbstractWriter *agent):

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:379: misra_cpp_2008_rule_7_1_1_violation: The variable "agent" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  377|   class DuplicateFilter: public AbstractFilter {
#  378|       public:
#  379|->         DuplicateFilter(AbstractWriter *agent):
#  380|               AbstractFilter(agent)
#  381|           {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:389: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  387|   
#  388|               // abstract out differences we do not deem important
#  389|->             evt.fileName = MsgFilter::inst()->filterPath(evt.fileName);
#  390|               evt.msg = MsgFilter::inst()->filterMsg(evt.msg, def.checker);
#  391|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:390: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  388|               // abstract out differences we do not deem important
#  389|               evt.fileName = MsgFilter::inst()->filterPath(evt.fileName);
#  390|->             evt.msg = MsgFilter::inst()->filterMsg(evt.msg, def.checker);
#  391|   
#  392|               return lookup_.insert(evt)./* inserted */second;

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:400: misra_cpp_2008_rule_3_4_1_violation: Symbol "WriterFactory" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:558: single_use: Symbol "WriterFactory" is only used in "main(int, char **)".
#  398|   };
#  399|   
#  400|-> class WriterFactory {
#  401|       private:
#  402|           typedef std::map<std::string, AbstractWriter* (*)(void)> TTable;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:400: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "WriterFactory".
#  398|   };
#  399|   
#  400|-> class WriterFactory {
#  401|       private:
#  402|           typedef std::map<std::string, AbstractWriter* (*)(void)> TTable;

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:407: misra_c_2012_directive_4_12_violation: A call to the function "operator new(96UL)" performs dynamic memory allocation.
#  405|           static EColorMode cm_;
#  406|   
#  407|->         static AbstractWriter* createFiles()    { return new FilePrinter;   }
#  408|           static AbstractWriter* createGrouped()  { return new GroupPrinter;  }
#  409|           static AbstractWriter* createStat()     { return new DefCounter;    }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:407: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  405|           static EColorMode cm_;
#  406|   
#  407|->         static AbstractWriter* createFiles()    { return new FilePrinter;   }
#  408|           static AbstractWriter* createGrouped()  { return new GroupPrinter;  }
#  409|           static AbstractWriter* createStat()     { return new DefCounter;    }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:407: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  405|           static EColorMode cm_;
#  406|   
#  407|->         static AbstractWriter* createFiles()    { return new FilePrinter;   }
#  408|           static AbstractWriter* createGrouped()  { return new GroupPrinter;  }
#  409|           static AbstractWriter* createStat()     { return new DefCounter;    }

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:408: misra_c_2012_directive_4_12_violation: A call to the function "operator new(96UL)" performs dynamic memory allocation.
#  406|   
#  407|           static AbstractWriter* createFiles()    { return new FilePrinter;   }
#  408|->         static AbstractWriter* createGrouped()  { return new GroupPrinter;  }
#  409|           static AbstractWriter* createStat()     { return new DefCounter;    }
#  410|           static AbstractWriter* createEvtStat()  { return new EvtCounter;    }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:408: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  406|   
#  407|           static AbstractWriter* createFiles()    { return new FilePrinter;   }
#  408|->         static AbstractWriter* createGrouped()  { return new GroupPrinter;  }
#  409|           static AbstractWriter* createStat()     { return new DefCounter;    }
#  410|           static AbstractWriter* createEvtStat()  { return new EvtCounter;    }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:408: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  406|   
#  407|           static AbstractWriter* createFiles()    { return new FilePrinter;   }
#  408|->         static AbstractWriter* createGrouped()  { return new GroupPrinter;  }
#  409|           static AbstractWriter* createStat()     { return new DefCounter;    }
#  410|           static AbstractWriter* createEvtStat()  { return new EvtCounter;    }

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:409: misra_c_2012_directive_4_12_violation: A call to the function "operator new(112UL)" performs dynamic memory allocation.
#  407|           static AbstractWriter* createFiles()    { return new FilePrinter;   }
#  408|           static AbstractWriter* createGrouped()  { return new GroupPrinter;  }
#  409|->         static AbstractWriter* createStat()     { return new DefCounter;    }
#  410|           static AbstractWriter* createEvtStat()  { return new EvtCounter;    }
#  411|           static AbstractWriter* createFileStat() { return new FileDefCounter;}

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:409: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  407|           static AbstractWriter* createFiles()    { return new FilePrinter;   }
#  408|           static AbstractWriter* createGrouped()  { return new GroupPrinter;  }
#  409|->         static AbstractWriter* createStat()     { return new DefCounter;    }
#  410|           static AbstractWriter* createEvtStat()  { return new EvtCounter;    }
#  411|           static AbstractWriter* createFileStat() { return new FileDefCounter;}

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:409: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  407|           static AbstractWriter* createFiles()    { return new FilePrinter;   }
#  408|           static AbstractWriter* createGrouped()  { return new GroupPrinter;  }
#  409|->         static AbstractWriter* createStat()     { return new DefCounter;    }
#  410|           static AbstractWriter* createEvtStat()  { return new EvtCounter;    }
#  411|           static AbstractWriter* createFileStat() { return new FileDefCounter;}

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:410: misra_c_2012_directive_4_12_violation: A call to the function "operator new(112UL)" performs dynamic memory allocation.
#  408|           static AbstractWriter* createGrouped()  { return new GroupPrinter;  }
#  409|           static AbstractWriter* createStat()     { return new DefCounter;    }
#  410|->         static AbstractWriter* createEvtStat()  { return new EvtCounter;    }
#  411|           static AbstractWriter* createFileStat() { return new FileDefCounter;}
#  412|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:410: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  408|           static AbstractWriter* createGrouped()  { return new GroupPrinter;  }
#  409|           static AbstractWriter* createStat()     { return new DefCounter;    }
#  410|->         static AbstractWriter* createEvtStat()  { return new EvtCounter;    }
#  411|           static AbstractWriter* createFileStat() { return new FileDefCounter;}
#  412|   

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:410: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  408|           static AbstractWriter* createGrouped()  { return new GroupPrinter;  }
#  409|           static AbstractWriter* createStat()     { return new DefCounter;    }
#  410|->         static AbstractWriter* createEvtStat()  { return new EvtCounter;    }
#  411|           static AbstractWriter* createFileStat() { return new FileDefCounter;}
#  412|   

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:411: misra_c_2012_directive_4_12_violation: A call to the function "operator new(112UL)" performs dynamic memory allocation.
#  409|           static AbstractWriter* createStat()     { return new DefCounter;    }
#  410|           static AbstractWriter* createEvtStat()  { return new EvtCounter;    }
#  411|->         static AbstractWriter* createFileStat() { return new FileDefCounter;}
#  412|   
#  413|           static AbstractWriter* createGrep() {

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:411: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  409|           static AbstractWriter* createStat()     { return new DefCounter;    }
#  410|           static AbstractWriter* createEvtStat()  { return new EvtCounter;    }
#  411|->         static AbstractWriter* createFileStat() { return new FileDefCounter;}
#  412|   
#  413|           static AbstractWriter* createGrep() {

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:411: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  409|           static AbstractWriter* createStat()     { return new DefCounter;    }
#  410|           static AbstractWriter* createEvtStat()  { return new EvtCounter;    }
#  411|->         static AbstractWriter* createFileStat() { return new FileDefCounter;}
#  412|   
#  413|           static AbstractWriter* createGrep() {

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:413: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  411|           static AbstractWriter* createFileStat() { return new FileDefCounter;}
#  412|   
#  413|->         static AbstractWriter* createGrep() {
#  414|               return new CovWriter(std::cout, cm_);
#  415|           }

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:414: misra_c_2012_directive_4_12_violation: A call to the function "operator new(72UL)" performs dynamic memory allocation.
#  412|   
#  413|           static AbstractWriter* createGrep() {
#  414|->             return new CovWriter(std::cout, cm_);
#  415|           }
#  416|   

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:414: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  412|   
#  413|           static AbstractWriter* createGrep() {
#  414|->             return new CovWriter(std::cout, cm_);
#  415|           }
#  416|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:417: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  415|           }
#  416|   
#  417|->         static AbstractWriter* createJson() {
#  418|               return new JsonWriter(std::cout);
#  419|           }

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:418: misra_c_2012_directive_4_12_violation: A call to the function "operator new(72UL)" performs dynamic memory allocation.
#  416|   
#  417|           static AbstractWriter* createJson() {
#  418|->             return new JsonWriter(std::cout);
#  419|           }
#  420|   

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:418: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  416|   
#  417|           static AbstractWriter* createJson() {
#  418|->             return new JsonWriter(std::cout);
#  419|           }
#  420|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:421: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  419|           }
#  420|   
#  421|->         static AbstractWriter* createKeyEventPrinter() {
#  422|               return new KeyEventPrinter;
#  423|           }

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:422: misra_c_2012_directive_4_12_violation: A call to the function "operator new(64UL)" performs dynamic memory allocation.
#  420|   
#  421|           static AbstractWriter* createKeyEventPrinter() {
#  422|->             return new KeyEventPrinter;
#  423|           }
#  424|   

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:422: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  420|   
#  421|           static AbstractWriter* createKeyEventPrinter() {
#  422|->             return new KeyEventPrinter;
#  423|           }
#  424|   

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:426: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "cm" clashes with "cm_"
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:405: misra_typographically_ambiguous_orig: (Previously declared symbol "cm_" at line 405)
#  424|   
#  425|       public:
#  426|->         static void setColorMode(const EColorMode cm) {
#  427|               cm_ = cm;
#  428|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:430: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  428|           }
#  429|   
#  430|->         WriterFactory() {
#  431|               tbl_["dig_key_events"]  = createKeyEventPrinter;
#  432|               tbl_["evtstat"]         = createEvtStat;

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:431: misra_cpp_2008_rule_8_4_4_violation: Function identifier "createKeyEventPrinter" is not used to call the function or preceded by &.
#  429|   
#  430|           WriterFactory() {
#  431|->             tbl_["dig_key_events"]  = createKeyEventPrinter;
#  432|               tbl_["evtstat"]         = createEvtStat;
#  433|               tbl_["files"]           = createFiles;

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:432: misra_cpp_2008_rule_8_4_4_violation: Function identifier "createEvtStat" is not used to call the function or preceded by &.
#  430|           WriterFactory() {
#  431|               tbl_["dig_key_events"]  = createKeyEventPrinter;
#  432|->             tbl_["evtstat"]         = createEvtStat;
#  433|               tbl_["files"]           = createFiles;
#  434|               tbl_["filestat"]        = createFileStat;

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:433: misra_cpp_2008_rule_8_4_4_violation: Function identifier "createFiles" is not used to call the function or preceded by &.
#  431|               tbl_["dig_key_events"]  = createKeyEventPrinter;
#  432|               tbl_["evtstat"]         = createEvtStat;
#  433|->             tbl_["files"]           = createFiles;
#  434|               tbl_["filestat"]        = createFileStat;
#  435|               tbl_["grep"]            = createGrep;

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:434: misra_cpp_2008_rule_8_4_4_violation: Function identifier "createFileStat" is not used to call the function or preceded by &.
#  432|               tbl_["evtstat"]         = createEvtStat;
#  433|               tbl_["files"]           = createFiles;
#  434|->             tbl_["filestat"]        = createFileStat;
#  435|               tbl_["grep"]            = createGrep;
#  436|               tbl_["grouped"]         = createGrouped;

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:435: misra_cpp_2008_rule_8_4_4_violation: Function identifier "createGrep" is not used to call the function or preceded by &.
#  433|               tbl_["files"]           = createFiles;
#  434|               tbl_["filestat"]        = createFileStat;
#  435|->             tbl_["grep"]            = createGrep;
#  436|               tbl_["grouped"]         = createGrouped;
#  437|               tbl_["json"]            = createJson;

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:436: misra_cpp_2008_rule_8_4_4_violation: Function identifier "createGrouped" is not used to call the function or preceded by &.
#  434|               tbl_["filestat"]        = createFileStat;
#  435|               tbl_["grep"]            = createGrep;
#  436|->             tbl_["grouped"]         = createGrouped;
#  437|               tbl_["json"]            = createJson;
#  438|               tbl_["stat"]            = createStat;

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:437: misra_cpp_2008_rule_8_4_4_violation: Function identifier "createJson" is not used to call the function or preceded by &.
#  435|               tbl_["grep"]            = createGrep;
#  436|               tbl_["grouped"]         = createGrouped;
#  437|->             tbl_["json"]            = createJson;
#  438|               tbl_["stat"]            = createStat;
#  439|           }

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:438: misra_cpp_2008_rule_8_4_4_violation: Function identifier "createStat" is not used to call the function or preceded by &.
#  436|               tbl_["grouped"]         = createGrouped;
#  437|               tbl_["json"]            = createJson;
#  438|->             tbl_["stat"]            = createStat;
#  439|           }
#  440|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:442: misra_cpp_2008_rule_7_1_1_violation: The variable "it" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  440|   
#  441|           AbstractWriter* create(const std::string &mode) const {
#  442|->             TTable::const_iterator it = tbl_.find(mode);
#  443|               if (tbl_.end() == it)
#  444|                   return 0;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:444: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  442|               TTable::const_iterator it = tbl_.find(mode);
#  443|               if (tbl_.end() == it)
#  444|->                 return 0;
#  445|   
#  446|               return it->second();

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:444: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  442|               TTable::const_iterator it = tbl_.find(mode);
#  443|               if (tbl_.end() == it)
#  444|->                 return 0;
#  445|   
#  446|               return it->second();

Error: MISRA C++-2008 Rule 4-10-2 (CWE-547):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:444: misra_cpp_2008_rule_4_10_2_violation: Literal zero (0) is used as the null-pointer-constant.
#  442|               TTable::const_iterator it = tbl_.find(mode);
#  443|               if (tbl_.end() == it)
#  444|->                 return 0;
#  445|   
#  446|               return it->second();

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:444: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  442|               TTable::const_iterator it = tbl_.find(mode);
#  443|               if (tbl_.end() == it)
#  444|->                 return 0;
#  445|   
#  446|               return it->second();

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:444: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  442|               TTable::const_iterator it = tbl_.find(mode);
#  443|               if (tbl_.end() == it)
#  444|->                 return 0;
#  445|   
#  446|               return it->second();

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:452: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "name".
#  450|   EColorMode WriterFactory::cm_;
#  451|   
#  452|-> static std::string name;
#  453|   
#  454|   namespace po = boost::program_options;

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:457: misra_c_2012_rule_5_8_violation: Identifier "appendPredIfNeeded" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:457: external_linkage_symbol: Declaring an external linkage function with identifier "appendPredIfNeeded".
#  455|   
#  456|   template <class TPred>
#  457|-> bool appendPredIfNeeded(
#  458|           PredicateFilter                                 *pf,
#  459|           const po::variables_map                         &vm,

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:457: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  455|   
#  456|   template <class TPred>
#  457|-> bool appendPredIfNeeded(
#  458|           PredicateFilter                                 *pf,
#  459|           const po::variables_map                         &vm,

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:457: misra_c_2012_rule_8_7_violation: Function "appendPredIfNeeded" has external linkage but is only used in one translation unit.
#  455|   
#  456|   template <class TPred>
#  457|-> bool appendPredIfNeeded(
#  458|           PredicateFilter                                 *pf,
#  459|           const po::variables_map                         &vm,

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:457: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  455|   
#  456|   template <class TPred>
#  457|-> bool appendPredIfNeeded(
#  458|           PredicateFilter                                 *pf,
#  459|           const po::variables_map                         &vm,

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:457: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "appendPredIfNeeded".
#  455|   
#  456|   template <class TPred>
#  457|-> bool appendPredIfNeeded(
#  458|           PredicateFilter                                 *pf,
#  459|           const po::variables_map                         &vm,

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:458: misra_cpp_2008_rule_7_1_1_violation: The variable "pf" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  456|   template <class TPred>
#  457|   bool appendPredIfNeeded(
#  458|->         PredicateFilter                                 *pf,
#  459|           const po::variables_map                         &vm,
#  460|           boost::regex_constants::syntax_option_type      flags,

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:460: misra_cpp_2008_rule_7_1_1_violation: The variable "flags" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  458|           PredicateFilter                                 *pf,
#  459|           const po::variables_map                         &vm,
#  460|->         boost::regex_constants::syntax_option_type      flags,
#  461|           const char                                      *key)
#  462|   {

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:461: misra_cpp_2008_rule_7_1_1_violation: The variable "key" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  459|           const po::variables_map                         &vm,
#  460|           boost::regex_constants::syntax_option_type      flags,
#  461|->         const char                                      *key)
#  462|   {
#  463|       if (!vm.count(key))

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:463: misra_c_2012_rule_10_1_violation: The expression "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const(key, std::allocator<char>()))" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  461|           const char                                      *key)
#  462|   {
#  463|->     if (!vm.count(key))
#  464|           return true;
#  465|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:463: misra_cpp_2008_rule_5_0_13_violation: After template specialization, the type of "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const(key, std::allocator<char>()))" is not bool in the condition of "if-statement".
#  461|           const char                                      *key)
#  462|   {
#  463|->     if (!vm.count(key))
#  464|           return true;
#  465|   

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:463: misra_cpp_2008_rule_5_3_1_violation: Operand "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const(key, std::allocator<char>()))" of the operator "!" is not bool type.
#  461|           const char                                      *key)
#  462|   {
#  463|->     if (!vm.count(key))
#  464|           return true;
#  465|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:464: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  462|   {
#  463|       if (!vm.count(key))
#  464|->         return true;
#  465|   
#  466|       TPred *pred = 0;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:464: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  462|   {
#  463|       if (!vm.count(key))
#  464|->         return true;
#  465|   
#  466|       TPred *pred = 0;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:464: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  462|   {
#  463|       if (!vm.count(key))
#  464|->         return true;
#  465|   
#  466|       TPred *pred = 0;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:464: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  462|   {
#  463|       if (!vm.count(key))
#  464|->         return true;
#  465|   
#  466|       TPred *pred = 0;

Error: MISRA C++-2008 Rule 4-10-2 (CWE-547):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:466: misra_cpp_2008_rule_4_10_2_violation: Literal zero (0) is used as the null-pointer-constant.
#  464|           return true;
#  465|   
#  466|->     TPred *pred = 0;
#  467|       const std::string &reStr = vm[key].as<std::string>();
#  468|       try {

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:469: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "re" clashes with "RE"
csdiff-2.1.1.20210615.144928.g9c9686f/src/regex.hh:25: misra_typographically_ambiguous_orig: (Previously declared symbol "RE" at line 25 of "../../src/regex.hh")
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:519: det_during_template_instantiation_context: detected during instantiation of "bool chainFiltersCore(PredicateFilter *, const boost::program_options::variables_map &, TFlags) [with TFlags=boost::regex_constants::syntax_option_type]" at line 519
#  467|       const std::string &reStr = vm[key].as<std::string>();
#  468|       try {
#  469|->         const RE re(reStr, flags);
#  470|           pred = new TPred(re);
#  471|       }

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:470: misra_c_2012_directive_4_12_violation: A call to the function "operator new(24UL)" performs dynamic memory allocation.
#  468|       try {
#  469|           const RE re(reStr, flags);
#  470|->         pred = new TPred(re);
#  471|       }
#  472|       catch (...) {

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:470: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  468|       try {
#  469|           const RE re(reStr, flags);
#  470|->         pred = new TPred(re);
#  471|       }
#  472|       catch (...) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:473: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  471|       }
#  472|       catch (...) {
#  473|->         std::cerr << ::name << ": error: failed to compile regex: --"
#  474|               << key << " '" << reStr << "'\n";
#  475|       }

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:477: misra_c_2012_rule_10_1_violation: The expression "pred" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  475|       }
#  476|   
#  477|->     if (!pred)
#  478|           return false;
#  479|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:477: misra_cpp_2008_rule_5_0_13_violation: After template specialization, the type of "pred" is not bool in the condition of "if-statement".
#  475|       }
#  476|   
#  477|->     if (!pred)
#  478|           return false;
#  479|   

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:477: misra_cpp_2008_rule_5_3_1_violation: Operand "pred" of the operator "!" is not bool type.
#  475|       }
#  476|   
#  477|->     if (!pred)
#  478|           return false;
#  479|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:478: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  476|   
#  477|       if (!pred)
#  478|->         return false;
#  479|   
#  480|       // append a predicate

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:478: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  476|   
#  477|       if (!pred)
#  478|->         return false;
#  479|   
#  480|       // append a predicate

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:478: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  476|   
#  477|       if (!pred)
#  478|->         return false;
#  479|   
#  480|       // append a predicate

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:478: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  476|   
#  477|       if (!pred)
#  478|->         return false;
#  479|   
#  480|       // append a predicate

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:486: misra_c_2012_rule_5_8_violation: Identifier "chainFiltersCore" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:486: external_linkage_symbol: Declaring an external linkage function with identifier "chainFiltersCore".
#  484|   
#  485|   template <typename TFlags>
#  486|-> bool chainFiltersCore(
#  487|           PredicateFilter                                 *pf,
#  488|           const po::variables_map                         &vm,

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:486: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  484|   
#  485|   template <typename TFlags>
#  486|-> bool chainFiltersCore(
#  487|           PredicateFilter                                 *pf,
#  488|           const po::variables_map                         &vm,

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:486: misra_c_2012_rule_8_7_violation: Function "chainFiltersCore" has external linkage but is only used in one translation unit.
#  484|   
#  485|   template <typename TFlags>
#  486|-> bool chainFiltersCore(
#  487|           PredicateFilter                                 *pf,
#  488|           const po::variables_map                         &vm,

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:486: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  484|   
#  485|   template <typename TFlags>
#  486|-> bool chainFiltersCore(
#  487|           PredicateFilter                                 *pf,
#  488|           const po::variables_map                         &vm,

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:486: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "chainFiltersCore".
#  484|   
#  485|   template <typename TFlags>
#  486|-> bool chainFiltersCore(
#  487|           PredicateFilter                                 *pf,
#  488|           const po::variables_map                         &vm,

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:487: misra_cpp_2008_rule_7_1_1_violation: The variable "pf" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  485|   template <typename TFlags>
#  486|   bool chainFiltersCore(
#  487|->         PredicateFilter                                 *pf,
#  488|           const po::variables_map                         &vm,
#  489|           const TFlags                                    flags)

Error: MISRA C-2012 Rule 13.5 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:492: misra_c_2012_rule_13_5_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "appendPredIfNeeded(pf, vm, flags, "src-annot")".
#  490|   {
#  491|       return appendPredIfNeeded<CheckerPredicate>   (pf, vm, flags, "checker")
#  492|->         && appendPredIfNeeded<SrcAnnotPredicate>  (pf, vm, flags, "src-annot")
#  493|           && appendPredIfNeeded<AnnotPredicate>     (pf, vm, flags, "annot")
#  494|           && appendPredIfNeeded<ErrorPredicate>     (pf, vm, flags, "error")

Error: MISRA C++-2008 Rule 5-14-1 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:492: misra_cpp_2008_rule_5_14_1_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "appendPredIfNeeded(pf, vm, flags, "src-annot")".
#  490|   {
#  491|       return appendPredIfNeeded<CheckerPredicate>   (pf, vm, flags, "checker")
#  492|->         && appendPredIfNeeded<SrcAnnotPredicate>  (pf, vm, flags, "src-annot")
#  493|           && appendPredIfNeeded<AnnotPredicate>     (pf, vm, flags, "annot")
#  494|           && appendPredIfNeeded<ErrorPredicate>     (pf, vm, flags, "error")

Error: MISRA C-2012 Rule 13.5 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:493: misra_c_2012_rule_13_5_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "appendPredIfNeeded(pf, vm, flags, "annot")".
#  491|       return appendPredIfNeeded<CheckerPredicate>   (pf, vm, flags, "checker")
#  492|           && appendPredIfNeeded<SrcAnnotPredicate>  (pf, vm, flags, "src-annot")
#  493|->         && appendPredIfNeeded<AnnotPredicate>     (pf, vm, flags, "annot")
#  494|           && appendPredIfNeeded<ErrorPredicate>     (pf, vm, flags, "error")
#  495|           && appendPredIfNeeded<KeyEventPredicate>  (pf, vm, flags, "event")

Error: MISRA C++-2008 Rule 5-14-1 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:493: misra_cpp_2008_rule_5_14_1_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "appendPredIfNeeded(pf, vm, flags, "annot")".
#  491|       return appendPredIfNeeded<CheckerPredicate>   (pf, vm, flags, "checker")
#  492|           && appendPredIfNeeded<SrcAnnotPredicate>  (pf, vm, flags, "src-annot")
#  493|->         && appendPredIfNeeded<AnnotPredicate>     (pf, vm, flags, "annot")
#  494|           && appendPredIfNeeded<ErrorPredicate>     (pf, vm, flags, "error")
#  495|           && appendPredIfNeeded<KeyEventPredicate>  (pf, vm, flags, "event")

Error: MISRA C-2012 Rule 13.5 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:494: misra_c_2012_rule_13_5_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "appendPredIfNeeded(pf, vm, flags, "error")".
#  492|           && appendPredIfNeeded<SrcAnnotPredicate>  (pf, vm, flags, "src-annot")
#  493|           && appendPredIfNeeded<AnnotPredicate>     (pf, vm, flags, "annot")
#  494|->         && appendPredIfNeeded<ErrorPredicate>     (pf, vm, flags, "error")
#  495|           && appendPredIfNeeded<KeyEventPredicate>  (pf, vm, flags, "event")
#  496|           && appendPredIfNeeded<MsgPredicate>       (pf, vm, flags, "msg")

Error: MISRA C++-2008 Rule 5-14-1 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:494: misra_cpp_2008_rule_5_14_1_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "appendPredIfNeeded(pf, vm, flags, "error")".
#  492|           && appendPredIfNeeded<SrcAnnotPredicate>  (pf, vm, flags, "src-annot")
#  493|           && appendPredIfNeeded<AnnotPredicate>     (pf, vm, flags, "annot")
#  494|->         && appendPredIfNeeded<ErrorPredicate>     (pf, vm, flags, "error")
#  495|           && appendPredIfNeeded<KeyEventPredicate>  (pf, vm, flags, "event")
#  496|           && appendPredIfNeeded<MsgPredicate>       (pf, vm, flags, "msg")

Error: MISRA C-2012 Rule 13.5 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:495: misra_c_2012_rule_13_5_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "appendPredIfNeeded(pf, vm, flags, "event")".
#  493|           && appendPredIfNeeded<AnnotPredicate>     (pf, vm, flags, "annot")
#  494|           && appendPredIfNeeded<ErrorPredicate>     (pf, vm, flags, "error")
#  495|->         && appendPredIfNeeded<KeyEventPredicate>  (pf, vm, flags, "event")
#  496|           && appendPredIfNeeded<MsgPredicate>       (pf, vm, flags, "msg")
#  497|           && appendPredIfNeeded<PathPredicate>      (pf, vm, flags, "path");

Error: MISRA C++-2008 Rule 5-14-1 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:495: misra_cpp_2008_rule_5_14_1_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "appendPredIfNeeded(pf, vm, flags, "event")".
#  493|           && appendPredIfNeeded<AnnotPredicate>     (pf, vm, flags, "annot")
#  494|           && appendPredIfNeeded<ErrorPredicate>     (pf, vm, flags, "error")
#  495|->         && appendPredIfNeeded<KeyEventPredicate>  (pf, vm, flags, "event")
#  496|           && appendPredIfNeeded<MsgPredicate>       (pf, vm, flags, "msg")
#  497|           && appendPredIfNeeded<PathPredicate>      (pf, vm, flags, "path");

Error: MISRA C-2012 Rule 13.5 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:496: misra_c_2012_rule_13_5_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "appendPredIfNeeded(pf, vm, flags, "msg")".
#  494|           && appendPredIfNeeded<ErrorPredicate>     (pf, vm, flags, "error")
#  495|           && appendPredIfNeeded<KeyEventPredicate>  (pf, vm, flags, "event")
#  496|->         && appendPredIfNeeded<MsgPredicate>       (pf, vm, flags, "msg")
#  497|           && appendPredIfNeeded<PathPredicate>      (pf, vm, flags, "path");
#  498|   }

Error: MISRA C++-2008 Rule 5-14-1 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:496: misra_cpp_2008_rule_5_14_1_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "appendPredIfNeeded(pf, vm, flags, "msg")".
#  494|           && appendPredIfNeeded<ErrorPredicate>     (pf, vm, flags, "error")
#  495|           && appendPredIfNeeded<KeyEventPredicate>  (pf, vm, flags, "event")
#  496|->         && appendPredIfNeeded<MsgPredicate>       (pf, vm, flags, "msg")
#  497|           && appendPredIfNeeded<PathPredicate>      (pf, vm, flags, "path");
#  498|   }

Error: MISRA C-2012 Rule 13.5 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:497: misra_c_2012_rule_13_5_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "appendPredIfNeeded(pf, vm, flags, "path")".
#  495|           && appendPredIfNeeded<KeyEventPredicate>  (pf, vm, flags, "event")
#  496|           && appendPredIfNeeded<MsgPredicate>       (pf, vm, flags, "msg")
#  497|->         && appendPredIfNeeded<PathPredicate>      (pf, vm, flags, "path");
#  498|   }
#  499|   

Error: MISRA C++-2008 Rule 5-14-1 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:497: misra_cpp_2008_rule_5_14_1_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "appendPredIfNeeded(pf, vm, flags, "path")".
#  495|           && appendPredIfNeeded<KeyEventPredicate>  (pf, vm, flags, "event")
#  496|           && appendPredIfNeeded<MsgPredicate>       (pf, vm, flags, "msg")
#  497|->         && appendPredIfNeeded<PathPredicate>      (pf, vm, flags, "path");
#  498|   }
#  499|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:500: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  498|   }
#  499|   
#  500|-> bool chainFilters(
#  501|           AbstractWriter                                  **pEng,
#  502|           const po::variables_map                         &vm)

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:500: misra_c_2012_rule_8_7_violation: Function "chainFilters" has external linkage but is only used in one translation unit.
#  498|   }
#  499|   
#  500|-> bool chainFilters(
#  501|           AbstractWriter                                  **pEng,
#  502|           const po::variables_map                         &vm)

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:500: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  498|   }
#  499|   
#  500|-> bool chainFilters(
#  501|           AbstractWriter                                  **pEng,
#  502|           const po::variables_map                         &vm)

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:500: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "chainFilters".
#  498|   }
#  499|   
#  500|-> bool chainFilters(
#  501|           AbstractWriter                                  **pEng,
#  502|           const po::variables_map                         &vm)

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:501: misra_cpp_2008_rule_7_1_1_violation: The variable "pEng" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  499|   
#  500|   bool chainFilters(
#  501|->         AbstractWriter                                  **pEng,
#  502|           const po::variables_map                         &vm)
#  503|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:505: misra_c_2012_directive_4_12_violation: A call to the function "operator new(88UL)" performs dynamic memory allocation.
#  503|   {
#  504|       // insert a filter predicate into the chain
#  505|->     PredicateFilter *pf = new PredicateFilter(*pEng);
#  506|       *pEng = pf;
#  507|   

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:505: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  503|   {
#  504|       // insert a filter predicate into the chain
#  505|->     PredicateFilter *pf = new PredicateFilter(*pEng);
#  506|       *pEng = pf;
#  507|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:505: misra_cpp_2008_rule_7_1_1_violation: The variable "pf" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  503|   {
#  504|       // insert a filter predicate into the chain
#  505|->     PredicateFilter *pf = new PredicateFilter(*pEng);
#  506|       *pEng = pf;
#  507|   

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:509: misra_cpp_2008_rule_5_0_4_violation: "0" is implicitly converted from a signed value to an unsigned value.
#  507|   
#  508|       // common matching flags
#  509|->     boost::regex_constants::syntax_option_type flags = 0;
#  510|       if (vm.count("ignore-case"))
#  511|           flags |= boost::regex_constants::icase;

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:510: misra_c_2012_rule_14_4_violation: The condition expression "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("ignore-case", std::allocator<char>()))" does not have an essentially boolean type.
#  508|       // common matching flags
#  509|       boost::regex_constants::syntax_option_type flags = 0;
#  510|->     if (vm.count("ignore-case"))
#  511|           flags |= boost::regex_constants::icase;
#  512|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:510: misra_cpp_2008_rule_5_0_13_violation: The type of "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("ignore-case", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  508|       // common matching flags
#  509|       boost::regex_constants::syntax_option_type flags = 0;
#  510|->     if (vm.count("ignore-case"))
#  511|           flags |= boost::regex_constants::icase;
#  512|   

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:511: misra_c_2012_rule_10_1_violation: The expression "boost::regex_constants::icase" of essential type enum is used as an operand to the arithmetic operator "|".
#  509|       boost::regex_constants::syntax_option_type flags = 0;
#  510|       if (vm.count("ignore-case"))
#  511|->         flags |= boost::regex_constants::icase;
#  512|   
#  513|       if (vm.count("invert-match"))

Error: MISRA C-2012 Rule 10.4 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:511: misra_c_2012_rule_10_4_violation: Essential type of the left hand operand "flags" (unsigned) is not the same as that of the right operand "boost::regex_constants::icase"(enum).
#  509|       boost::regex_constants::syntax_option_type flags = 0;
#  510|       if (vm.count("ignore-case"))
#  511|->         flags |= boost::regex_constants::icase;
#  512|   
#  513|       if (vm.count("invert-match"))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:511: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  509|       boost::regex_constants::syntax_option_type flags = 0;
#  510|       if (vm.count("ignore-case"))
#  511|->         flags |= boost::regex_constants::icase;
#  512|   
#  513|       if (vm.count("invert-match"))

Error: MISRA C++-2008 Rule 4-5-2 (CWE-480):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:511: misra_cpp_2008_rule_4_5_2_violation: "boost::regex_constants::icase" is used as an operand to the operator "|".
#  509|       boost::regex_constants::syntax_option_type flags = 0;
#  510|       if (vm.count("ignore-case"))
#  511|->         flags |= boost::regex_constants::icase;
#  512|   
#  513|       if (vm.count("invert-match"))

Error: MISRA C++-2008 Rule 5-0-21 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:511: misra_cpp_2008_rule_5_0_21_violation: Bitwise operator "|=" has a signed operand "boost::regex_constants::icase".
#  509|       boost::regex_constants::syntax_option_type flags = 0;
#  510|       if (vm.count("ignore-case"))
#  511|->         flags |= boost::regex_constants::icase;
#  512|   
#  513|       if (vm.count("invert-match"))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:511: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  509|       boost::regex_constants::syntax_option_type flags = 0;
#  510|       if (vm.count("ignore-case"))
#  511|->         flags |= boost::regex_constants::icase;
#  512|   
#  513|       if (vm.count("invert-match"))

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:513: misra_c_2012_rule_14_4_violation: The condition expression "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("invert-match", std::allocator<char>()))" does not have an essentially boolean type.
#  511|           flags |= boost::regex_constants::icase;
#  512|   
#  513|->     if (vm.count("invert-match"))
#  514|           pf->setInvertMatch();
#  515|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:513: misra_cpp_2008_rule_5_0_13_violation: The type of "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("invert-match", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  511|           flags |= boost::regex_constants::icase;
#  512|   
#  513|->     if (vm.count("invert-match"))
#  514|           pf->setInvertMatch();
#  515|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:514: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  512|   
#  513|       if (vm.count("invert-match"))
#  514|->         pf->setInvertMatch();
#  515|   
#  516|       if (vm.count("invert-regex"))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:514: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  512|   
#  513|       if (vm.count("invert-match"))
#  514|->         pf->setInvertMatch();
#  515|   
#  516|       if (vm.count("invert-regex"))

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:516: misra_c_2012_rule_14_4_violation: The condition expression "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("invert-regex", std::allocator<char>()))" does not have an essentially boolean type.
#  514|           pf->setInvertMatch();
#  515|   
#  516|->     if (vm.count("invert-regex"))
#  517|           pf->setInvertEachMatch();
#  518|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:516: misra_cpp_2008_rule_5_0_13_violation: The type of "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("invert-regex", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  514|           pf->setInvertMatch();
#  515|   
#  516|->     if (vm.count("invert-regex"))
#  517|           pf->setInvertEachMatch();
#  518|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:517: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  515|   
#  516|       if (vm.count("invert-regex"))
#  517|->         pf->setInvertEachMatch();
#  518|   
#  519|       if (chainFiltersCore(pf, vm, flags))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:517: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  515|   
#  516|       if (vm.count("invert-regex"))
#  517|->         pf->setInvertEachMatch();
#  518|   
#  519|       if (chainFiltersCore(pf, vm, flags))

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:520: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  518|   
#  519|       if (chainFiltersCore(pf, vm, flags))
#  520|->         return true;
#  521|   
#  522|       // failed to create the chain of filters

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:520: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  518|   
#  519|       if (chainFiltersCore(pf, vm, flags))
#  520|->         return true;
#  521|   
#  522|       // failed to create the chain of filters

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:520: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  518|   
#  519|       if (chainFiltersCore(pf, vm, flags))
#  520|->         return true;
#  521|   
#  522|       // failed to create the chain of filters

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:520: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  518|   
#  519|       if (chainFiltersCore(pf, vm, flags))
#  520|->         return true;
#  521|   
#  522|       // failed to create the chain of filters

Error: MISRA C++-2008 Rule 4-10-2 (CWE-547):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:524: misra_cpp_2008_rule_4_10_2_violation: Literal zero (0) is used as the null-pointer-constant.
#  522|       // failed to create the chain of filters
#  523|       delete pf;
#  524|->     *pEng = 0;
#  525|       return false;
#  526|   }

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:529: misra_c_2012_rule_5_8_violation: Identifier "printUsage" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:529: external_linkage_symbol: Declaring an external linkage function with identifier "printUsage".
#  527|   
#  528|   template <class TDesc, class TStream>
#  529|-> void printUsage(TStream &str, const TDesc &desc)
#  530|   {
#  531|       desc.print(str);

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:529: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  527|   
#  528|   template <class TDesc, class TStream>
#  529|-> void printUsage(TStream &str, const TDesc &desc)
#  530|   {
#  531|       desc.print(str);

Error: MISRA C-2012 Rule 8.5 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:529: misra_c_2012_rule_8_5_violation: Symbol "printUsage" is declared more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:155: other_declaration: Another declaration for "printUsage".
#  527|   
#  528|   template <class TDesc, class TStream>
#  529|-> void printUsage(TStream &str, const TDesc &desc)
#  530|   {
#  531|       desc.print(str);

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:529: misra_c_2012_rule_8_7_violation: Function "printUsage" has external linkage but is only used in one translation unit.
#  527|   
#  528|   template <class TDesc, class TStream>
#  529|-> void printUsage(TStream &str, const TDesc &desc)
#  530|   {
#  531|       desc.print(str);

Error: MISRA C++-2008 Rule 3-2-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:529: misra_cpp_2008_rule_3_2_3_violation: Symbol "printUsage" is declared more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:155: other_declaration: Another declaration for "printUsage".
#  527|   
#  528|   template <class TDesc, class TStream>
#  529|-> void printUsage(TStream &str, const TDesc &desc)
#  530|   {
#  531|       desc.print(str);

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:529: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  527|   
#  528|   template <class TDesc, class TStream>
#  529|-> void printUsage(TStream &str, const TDesc &desc)
#  530|   {
#  531|       desc.print(str);

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:529: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "printUsage".
#  527|   
#  528|   template <class TDesc, class TStream>
#  529|-> void printUsage(TStream &str, const TDesc &desc)
#  530|   {
#  531|       desc.print(str);

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:535: misra_c_2012_rule_5_8_violation: Identifier "chainDecorator" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:535: external_linkage_symbol: Declaring an external linkage function with identifier "chainDecorator".
#  533|   
#  534|   template <class TDecorator>
#  535|-> bool chainDecorator(
#  536|           AbstractWriter            **pEng,
#  537|           const po::variables_map    &vm,

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:535: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  533|   
#  534|   template <class TDecorator>
#  535|-> bool chainDecorator(
#  536|           AbstractWriter            **pEng,
#  537|           const po::variables_map    &vm,

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:535: misra_c_2012_rule_8_7_violation: Function "chainDecorator" has external linkage but is only used in one translation unit.
#  533|   
#  534|   template <class TDecorator>
#  535|-> bool chainDecorator(
#  536|           AbstractWriter            **pEng,
#  537|           const po::variables_map    &vm,

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:535: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  533|   
#  534|   template <class TDecorator>
#  535|-> bool chainDecorator(
#  536|           AbstractWriter            **pEng,
#  537|           const po::variables_map    &vm,

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:535: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "chainDecorator".
#  533|   
#  534|   template <class TDecorator>
#  535|-> bool chainDecorator(
#  536|           AbstractWriter            **pEng,
#  537|           const po::variables_map    &vm,

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:536: misra_cpp_2008_rule_7_1_1_violation: The variable "pEng" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  534|   template <class TDecorator>
#  535|   bool chainDecorator(
#  536|->         AbstractWriter            **pEng,
#  537|           const po::variables_map    &vm,
#  538|           const char                 *key)

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:538: misra_cpp_2008_rule_7_1_1_violation: The variable "key" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  536|           AbstractWriter            **pEng,
#  537|           const po::variables_map    &vm,
#  538|->         const char                 *key)
#  539|   {
#  540|       if (!vm.count(key))

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:540: misra_c_2012_rule_10_1_violation: The expression "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const(key, std::allocator<char>()))" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  538|           const char                 *key)
#  539|   {
#  540|->     if (!vm.count(key))
#  541|           // nothing to chain
#  542|           return true;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:540: misra_cpp_2008_rule_5_0_13_violation: After template specialization, the type of "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const(key, std::allocator<char>()))" is not bool in the condition of "if-statement".
#  538|           const char                 *key)
#  539|   {
#  540|->     if (!vm.count(key))
#  541|           // nothing to chain
#  542|           return true;

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:540: misra_cpp_2008_rule_5_3_1_violation: Operand "vm->count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const(key, std::allocator<char>()))" of the operator "!" is not bool type.
#  538|           const char                 *key)
#  539|   {
#  540|->     if (!vm.count(key))
#  541|           // nothing to chain
#  542|           return true;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:542: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  540|       if (!vm.count(key))
#  541|           // nothing to chain
#  542|->         return true;
#  543|   
#  544|       const int val = vm[key].as<int>();

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:542: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  540|       if (!vm.count(key))
#  541|           // nothing to chain
#  542|->         return true;
#  543|   
#  544|       const int val = vm[key].as<int>();

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:542: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  540|       if (!vm.count(key))
#  541|           // nothing to chain
#  542|->         return true;
#  543|   
#  544|       const int val = vm[key].as<int>();

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:542: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  540|       if (!vm.count(key))
#  541|           // nothing to chain
#  542|->         return true;
#  543|   
#  544|       const int val = vm[key].as<int>();

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:544: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  542|           return true;
#  543|   
#  544|->     const int val = vm[key].as<int>();
#  545|       if (val < 0) {
#  546|           std::cerr << name << ": error: invalid value for --"

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:544: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  542|           return true;
#  543|   
#  544|->     const int val = vm[key].as<int>();
#  545|       if (val < 0) {
#  546|           std::cerr << name << ": error: invalid value for --"

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:546: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  544|       const int val = vm[key].as<int>();
#  545|       if (val < 0) {
#  546|->         std::cerr << name << ": error: invalid value for --"
#  547|               << key << ": " << val << "\n";
#  548|           delete *pEng;

Error: MISRA C++-2008 Rule 4-10-2 (CWE-547):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:549: misra_cpp_2008_rule_4_10_2_violation: Literal zero (0) is used as the null-pointer-constant.
#  547|               << key << ": " << val << "\n";
#  548|           delete *pEng;
#  549|->         *pEng = 0;
#  550|           return false;
#  551|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:550: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  548|           delete *pEng;
#  549|           *pEng = 0;
#  550|->         return false;
#  551|       }
#  552|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:550: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  548|           delete *pEng;
#  549|           *pEng = 0;
#  550|->         return false;
#  551|       }
#  552|   

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:554: misra_c_2012_directive_4_12_violation: A call to the function "operator new(80UL)" performs dynamic memory allocation.
#  552|   
#  553|       // chain the decorator
#  554|->     *pEng = new TDecorator(*pEng, val);
#  555|       return true;
#  556|   }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:554: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  552|   
#  553|       // chain the decorator
#  554|->     *pEng = new TDecorator(*pEng, val);
#  555|       return true;
#  556|   }

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:554: misra_cpp_2008_rule_5_0_4_violation: "val" is implicitly converted from a signed value to an unsigned value.
#  552|   
#  553|       // chain the decorator
#  554|->     *pEng = new TDecorator(*pEng, val);
#  555|       return true;
#  556|   }

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:558: misra_c_2012_rule_5_8_violation: Identifier "main" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: external_linkage_symbol: Declaring an external linkage function with identifier "main".
#  556|   }
#  557|   
#  558|-> int main(int argc, char *argv[])
#  559|   {
#  560|       using std::string;

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:558: misra_c_2012_rule_8_13_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  556|   }
#  557|   
#  558|-> int main(int argc, char *argv[])
#  559|   {
#  560|       using std::string;

Error: MISRA C++-2008 Rule 15-3-2 (CWE-703):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:558: misra_cpp_2008_rule_15_3_2_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block.
#  556|   }
#  557|   
#  558|-> int main(int argc, char *argv[])
#  559|   {
#  560|       using std::string;

Error: MISRA C++-2008 Rule 15-3-4 (CWE-755):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:558: misra_cpp_2008_rule_15_3_4_violation: In program root function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_any_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:654: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_any_cast>".
#  556|   }
#  557|   
#  558|-> int main(int argc, char *argv[])
#  559|   {
#  560|       using std::string;

Error: MISRA C++-2008 Rule 15-3-4 (CWE-755):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:558: misra_cpp_2008_rule_15_3_4_violation: In program root function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_lexical_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:592: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_lexical_cast>".
#  556|   }
#  557|   
#  558|-> int main(int argc, char *argv[])
#  559|   {
#  560|       using std::string;

Error: MISRA C++-2008 Rule 15-5-3 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:558: misra_cpp_2008_rule_15_5_3_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block. terminate() could be called implicitly.
#  556|   }
#  557|   
#  558|-> int main(int argc, char *argv[])
#  559|   {
#  560|       using std::string;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:558: misra_cpp_2008_rule_7_1_1_violation: The variable "argc" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  556|   }
#  557|   
#  558|-> int main(int argc, char *argv[])
#  559|   {
#  560|       using std::string;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:558: misra_cpp_2008_rule_7_1_1_violation: The variable "argv" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  556|   }
#  557|   
#  558|-> int main(int argc, char *argv[])
#  559|   {
#  560|       using std::string;

Error: MISRA C++-2008 Rule 7-1-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:558: misra_cpp_2008_rule_7_1_2_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  556|   }
#  557|   
#  558|-> int main(int argc, char *argv[])
#  559|   {
#  560|       using std::string;

Error: UNCAUGHT_EXCEPT (CWE-248):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:558: root_function: In function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_any_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:654: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_any_cast>".
#  556|   }
#  557|   
#  558|-> int main(int argc, char *argv[])
#  559|   {
#  560|       using std::string;

Error: UNCAUGHT_EXCEPT (CWE-248):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:558: root_function: In function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_lexical_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:592: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_lexical_cast>".
#  556|   }
#  557|   
#  558|-> int main(int argc, char *argv[])
#  559|   {
#  560|       using std::string;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:562: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  560|       using std::string;
#  561|   
#  562|->     ::name = argv[0];
#  563|   
#  564|       po::variables_map vm;

Error: MISRA C-2012 Rule 5.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:568: misra_c_2012_rule_5_6_violation: Identifier "TStringList" is already used to represent a typedef.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:40: typedef_declaration: Declaring a typedef with identifier "TStringList".
#  566|               + " [options] [file1.err [...]], where options are");
#  567|   
#  568|->     typedef std::vector<string> TStringList;
#  569|       string mode;
#  570|   

Error: MISRA C++-2008 Rule 2-10-3 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:568: misra_cpp_2008_rule_2_10_3_violation: Identifier "TStringList" is already used to represent a typedef.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:40: typedef_declaration: Declaring a typedef with identifier "TStringList".
#  566|               + " [options] [file1.err [...]], where options are");
#  567|   
#  568|->     typedef std::vector<string> TStringList;
#  569|       string mode;
#  570|   

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:568: misra_cpp_2008_rule_3_4_1_violation: Declaration of "TStringList" could be made in an inner scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:678: inner_scope: Declaration could be moved to this block.
#  566|               + " [options] [file1.err [...]], where options are");
#  567|   
#  568|->     typedef std::vector<string> TStringList;
#  569|       string mode;
#  570|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:572: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#  570|   
#  571|       try {
#  572|->         desc.add_options()
#  573|               ("checker",             po::value<string>(),        "defect matches if its checker matches the given regex (each defect has assigned exactly one checker)")
#  574|               ("path",                po::value<string>(),        "defect matches if the path of its key event matches the given regex")

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:592: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#  590|   
#  591|           addColorOptions(&desc);
#  592|->         desc.add_options()
#  593|               ("quiet,q",                                         "do not report any parsing errors")
#  594|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:602: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#  600|   
#  601|           po::options_description hidden("");
#  602|->         hidden.add_options()
#  603|               ("input-file",          po::value<TStringList>(),   "input file");
#  604|           po::positional_options_description p;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:605: misra_c_2012_rule_17_7_violation: The return value of a non-void function "add" is unused.
#  603|               ("input-file",          po::value<TStringList>(),   "input file");
#  604|           po::positional_options_description p;
#  605|->         p.add("input-file", -1);
#  606|   
#  607|           po::store(po::parse_command_line(argc, argv, desc), vm);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:605: misra_cpp_2008_rule_0_1_7_violation: The return value of function "p.add("input-file", -1)" is not used.
#  603|               ("input-file",          po::value<TStringList>(),   "input file");
#  604|           po::positional_options_description p;
#  605|->         p.add("input-file", -1);
#  606|   
#  607|           po::store(po::parse_command_line(argc, argv, desc), vm);

Error: MISRA C-2012 Rule 11.3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:607: misra_c_2012_rule_11_3_violation: The object pointer expression "argv" of type "char **" is cast to type "char const * const *".
#  605|           p.add("input-file", -1);
#  606|   
#  607|->         po::store(po::parse_command_line(argc, argv, desc), vm);
#  608|           po::notify(vm);    
#  609|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:611: misra_c_2012_rule_17_7_violation: The return value of a non-void function "add" is unused.
#  609|   
#  610|           po::options_description opts;
#  611|->         opts.add(desc).add(hidden);
#  612|           po::store(po::command_line_parser(argc, argv).
#  613|                   options(opts).positional(p).run(), vm);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:611: misra_cpp_2008_rule_0_1_7_violation: The return value of function "opts.add(desc)->add(hidden)" is not used.
#  609|   
#  610|           po::options_description opts;
#  611|->         opts.add(desc).add(hidden);
#  612|           po::store(po::command_line_parser(argc, argv).
#  613|                   options(opts).positional(p).run(), vm);

Error: MISRA C-2012 Rule 11.3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:612: misra_c_2012_rule_11_3_violation: The object pointer expression "argv" of type "char **" is cast to type "char const * const *".
#  610|           po::options_description opts;
#  611|           opts.add(desc).add(hidden);
#  612|->         po::store(po::command_line_parser(argc, argv).
#  613|                   options(opts).positional(p).run(), vm);
#  614|           po::notify(vm);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:617: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  615|       }
#  616|       catch (po::error &e) {
#  617|->         std::cerr << name << ": error: " << e.what() << "\n\n";
#  618|           printUsage(std::cerr, desc);
#  619|           return 1;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:619: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  617|           std::cerr << name << ": error: " << e.what() << "\n\n";
#  618|           printUsage(std::cerr, desc);
#  619|->         return 1;
#  620|       }
#  621|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:619: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  617|           std::cerr << name << ": error: " << e.what() << "\n\n";
#  618|           printUsage(std::cerr, desc);
#  619|->         return 1;
#  620|       }
#  621|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:622: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("help", std::allocator<char>()))" does not have an essentially boolean type.
#  620|       }
#  621|   
#  622|->     if (vm.count("help")) {
#  623|           printUsage(std::cout, desc);
#  624|           return 0;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:622: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("help", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  620|       }
#  621|   
#  622|->     if (vm.count("help")) {
#  623|           printUsage(std::cout, desc);
#  624|           return 0;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:624: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  622|       if (vm.count("help")) {
#  623|           printUsage(std::cout, desc);
#  624|->         return 0;
#  625|       }
#  626|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:624: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  622|       if (vm.count("help")) {
#  623|           printUsage(std::cout, desc);
#  624|->         return 0;
#  625|       }
#  626|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:627: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("version", std::allocator<char>()))" does not have an essentially boolean type.
#  625|       }
#  626|   
#  627|->     if (vm.count("version")) {
#  628|           std::cout << CS_VERSION << "\n";
#  629|           return 0;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:627: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("version", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  625|       }
#  626|   
#  627|->     if (vm.count("version")) {
#  628|           std::cout << CS_VERSION << "\n";
#  629|           return 0;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:628: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  626|   
#  627|       if (vm.count("version")) {
#  628|->         std::cout << CS_VERSION << "\n";
#  629|           return 0;
#  630|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:629: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  627|       if (vm.count("version")) {
#  628|           std::cout << CS_VERSION << "\n";
#  629|->         return 0;
#  630|       }
#  631|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:629: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  627|       if (vm.count("version")) {
#  628|           std::cout << CS_VERSION << "\n";
#  629|->         return 0;
#  630|       }
#  631|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:634: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  632|       // handle --[no-]color options
#  633|       EColorMode cm;
#  634|->     const char *err;
#  635|       if (readColorOptions(&cm, &err, vm))
#  636|           WriterFactory::setColorMode(cm);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:636: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  634|       const char *err;
#  635|       if (readColorOptions(&cm, &err, vm))
#  636|->         WriterFactory::setColorMode(cm);
#  637|       else {
#  638|           std::cerr << name << ": error: " << err << std::endl;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:636: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  634|       const char *err;
#  635|       if (readColorOptions(&cm, &err, vm))
#  636|->         WriterFactory::setColorMode(cm);
#  637|       else {
#  638|           std::cerr << name << ": error: " << err << std::endl;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:638: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  636|           WriterFactory::setColorMode(cm);
#  637|       else {
#  638|->         std::cerr << name << ": error: " << err << std::endl;
#  639|           return 1;
#  640|       }

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:638: misra_cpp_2008_rule_8_4_4_violation: Function identifier "endl" is not used to call the function or preceded by &.
#  636|           WriterFactory::setColorMode(cm);
#  637|       else {
#  638|->         std::cerr << name << ": error: " << err << std::endl;
#  639|           return 1;
#  640|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:639: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  637|       else {
#  638|           std::cerr << name << ": error: " << err << std::endl;
#  639|->         return 1;
#  640|       }
#  641|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:639: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  637|       else {
#  638|           std::cerr << name << ": error: " << err << std::endl;
#  639|->         return 1;
#  640|       }
#  641|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:643: misra_cpp_2008_rule_7_1_1_violation: The variable "factory" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  641|   
#  642|       // create a writer according to the selected mode
#  643|->     WriterFactory factory;
#  644|       AbstractWriter *eng = factory.create(mode);
#  645|       if (!eng) {

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:645: misra_c_2012_rule_10_1_violation: The expression "eng" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  643|       WriterFactory factory;
#  644|       AbstractWriter *eng = factory.create(mode);
#  645|->     if (!eng) {
#  646|           std::cerr << name << ": error: unknown mode: " << mode << "\n\n";
#  647|           printUsage(std::cerr, desc);

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:645: misra_cpp_2008_rule_5_0_13_violation: The type of "eng" is not bool in the condition of "if-statement".
#  643|       WriterFactory factory;
#  644|       AbstractWriter *eng = factory.create(mode);
#  645|->     if (!eng) {
#  646|           std::cerr << name << ": error: unknown mode: " << mode << "\n\n";
#  647|           printUsage(std::cerr, desc);

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:645: misra_cpp_2008_rule_5_3_1_violation: Operand "eng" of the operator "!" is not bool type.
#  643|       WriterFactory factory;
#  644|       AbstractWriter *eng = factory.create(mode);
#  645|->     if (!eng) {
#  646|           std::cerr << name << ": error: unknown mode: " << mode << "\n\n";
#  647|           printUsage(std::cerr, desc);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:646: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  644|       AbstractWriter *eng = factory.create(mode);
#  645|       if (!eng) {
#  646|->         std::cerr << name << ": error: unknown mode: " << mode << "\n\n";
#  647|           printUsage(std::cerr, desc);
#  648|           return 1;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:648: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  646|           std::cerr << name << ": error: unknown mode: " << mode << "\n\n";
#  647|           printUsage(std::cerr, desc);
#  648|->         return 1;
#  649|       }
#  650|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:648: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  646|           std::cerr << name << ": error: unknown mode: " << mode << "\n\n";
#  647|           printUsage(std::cerr, desc);
#  648|->         return 1;
#  649|       }
#  650|   

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:654: misra_c_2012_directive_4_12_violation: A call to the function "operator new(112UL)" performs dynamic memory allocation.
#  652|       if (it != vm.end())
#  653|           // insert PathStripper into the chain
#  654|->         eng = new PathStripper(eng, it->second.as<std::string>());
#  655|   
#  656|       // chain all filters

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:654: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  652|       if (it != vm.end())
#  653|           // insert PathStripper into the chain
#  654|->         eng = new PathStripper(eng, it->second.as<std::string>());
#  655|   
#  656|       // chain all filters

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:654: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  652|       if (it != vm.end())
#  653|           // insert PathStripper into the chain
#  654|->         eng = new PathStripper(eng, it->second.as<std::string>());
#  655|   
#  656|       // chain all filters

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:654: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  652|       if (it != vm.end())
#  653|           // insert PathStripper into the chain
#  654|->         eng = new PathStripper(eng, it->second.as<std::string>());
#  655|   
#  656|       // chain all filters

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:659: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  657|       if (!chainFilters(&eng, vm))
#  658|           // an error message already printed out
#  659|->         return 1;
#  660|   
#  661|       if (vm.count("drop-scan-props"))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:659: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  657|       if (!chainFilters(&eng, vm))
#  658|           // an error message already printed out
#  659|->         return 1;
#  660|   
#  661|       if (vm.count("drop-scan-props"))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:659: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  657|       if (!chainFilters(&eng, vm))
#  658|           // an error message already printed out
#  659|->         return 1;
#  660|   
#  661|       if (vm.count("drop-scan-props"))

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:659: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  657|       if (!chainFilters(&eng, vm))
#  658|           // an error message already printed out
#  659|->         return 1;
#  660|   
#  661|       if (vm.count("drop-scan-props"))

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:661: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("drop-scan-props", std::allocator<char>()))" does not have an essentially boolean type.
#  659|           return 1;
#  660|   
#  661|->     if (vm.count("drop-scan-props"))
#  662|           eng = new DropScanProps(eng);
#  663|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:661: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("drop-scan-props", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  659|           return 1;
#  660|   
#  661|->     if (vm.count("drop-scan-props"))
#  662|           eng = new DropScanProps(eng);
#  663|   

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:662: misra_c_2012_directive_4_12_violation: A call to the function "operator new(120UL)" performs dynamic memory allocation.
#  660|   
#  661|       if (vm.count("drop-scan-props"))
#  662|->         eng = new DropScanProps(eng);
#  663|   
#  664|       if (vm.count("remove-duplicates"))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:662: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  660|   
#  661|       if (vm.count("drop-scan-props"))
#  662|->         eng = new DropScanProps(eng);
#  663|   
#  664|       if (vm.count("remove-duplicates"))

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:662: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  660|   
#  661|       if (vm.count("drop-scan-props"))
#  662|->         eng = new DropScanProps(eng);
#  663|   
#  664|       if (vm.count("remove-duplicates"))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:662: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  660|   
#  661|       if (vm.count("drop-scan-props"))
#  662|->         eng = new DropScanProps(eng);
#  663|   
#  664|       if (vm.count("remove-duplicates"))

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:664: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("remove-duplicates", std::allocator<char>()))" does not have an essentially boolean type.
#  662|           eng = new DropScanProps(eng);
#  663|   
#  664|->     if (vm.count("remove-duplicates"))
#  665|           eng = new DuplicateFilter(eng);
#  666|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:664: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("remove-duplicates", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  662|           eng = new DropScanProps(eng);
#  663|   
#  664|->     if (vm.count("remove-duplicates"))
#  665|           eng = new DuplicateFilter(eng);
#  666|   

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:665: misra_c_2012_directive_4_12_violation: A call to the function "operator new(128UL)" performs dynamic memory allocation.
#  663|   
#  664|       if (vm.count("remove-duplicates"))
#  665|->         eng = new DuplicateFilter(eng);
#  666|   
#  667|       const bool silent = vm.count("quiet");

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:665: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  663|   
#  664|       if (vm.count("remove-duplicates"))
#  665|->         eng = new DuplicateFilter(eng);
#  666|   
#  667|       const bool silent = vm.count("quiet");

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:665: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  663|   
#  664|       if (vm.count("remove-duplicates"))
#  665|->         eng = new DuplicateFilter(eng);
#  666|   
#  667|       const bool silent = vm.count("quiet");

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:665: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  663|   
#  664|       if (vm.count("remove-duplicates"))
#  665|->         eng = new DuplicateFilter(eng);
#  666|   
#  667|       const bool silent = vm.count("quiet");

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:667: misra_c_2012_rule_10_3_violation: Implicit conversion of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("quiet", std::allocator<char>()))" from essential type "non-essential type" to different or narrower essential type "boolean".
#  665|           eng = new DuplicateFilter(eng);
#  666|   
#  667|->     const bool silent = vm.count("quiet");
#  668|       bool hasError = false;
#  669|   

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:667: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "silent" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:673: end_of_scope: Reached end of scope without using value stored in "silent".
#  665|           eng = new DuplicateFilter(eng);
#  666|   
#  667|->     const bool silent = vm.count("quiet");
#  668|       bool hasError = false;
#  669|   

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:667: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("quiet", std::allocator<char>()))" is implicitly reduced from "64-bit unsigned long" to "bool".
#  665|           eng = new DuplicateFilter(eng);
#  666|   
#  667|->     const bool silent = vm.count("quiet");
#  668|       bool hasError = false;
#  669|   

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:668: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "hasError" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:673: end_of_scope: Reached end of scope without using value stored in "hasError".
#  666|   
#  667|       const bool silent = vm.count("quiet");
#  668|->     bool hasError = false;
#  669|   
#  670|       if (!chainDecorator<EventPrunner>(&eng, vm, "prune-events")

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:670: misra_cpp_2008_rule_5_2_1_violation: Operand "!chainDecorator(&eng, vm, "prune-events")" is not a postfix expression.
#  668|       bool hasError = false;
#  669|   
#  670|->     if (!chainDecorator<EventPrunner>(&eng, vm, "prune-events")
#  671|               || !chainDecorator<CtxEmbedder>(&eng, vm, "embed-context"))
#  672|           // error message already printed, eng already feeed

Error: MISRA C-2012 Rule 13.5 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:671: misra_c_2012_rule_13_5_violation: The right hand operand of a logical operator "||" has persistent side effects because of calling function "chainDecorator(&eng, vm, "embed-context")".
#  669|   
#  670|       if (!chainDecorator<EventPrunner>(&eng, vm, "prune-events")
#  671|->             || !chainDecorator<CtxEmbedder>(&eng, vm, "embed-context"))
#  672|           // error message already printed, eng already feeed
#  673|           return 1;

Error: MISRA C++-2008 Rule 5-14-1 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:671: misra_cpp_2008_rule_5_14_1_violation: The right hand operand of a logical operator "||" has persistent side effects because of calling function "chainDecorator(&eng, vm, "embed-context")".
#  669|   
#  670|       if (!chainDecorator<EventPrunner>(&eng, vm, "prune-events")
#  671|->             || !chainDecorator<CtxEmbedder>(&eng, vm, "embed-context"))
#  672|           // error message already printed, eng already feeed
#  673|           return 1;

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:671: misra_cpp_2008_rule_5_2_1_violation: Operand "!chainDecorator(&eng, vm, "embed-context")" is not a postfix expression.
#  669|   
#  670|       if (!chainDecorator<EventPrunner>(&eng, vm, "prune-events")
#  671|->             || !chainDecorator<CtxEmbedder>(&eng, vm, "embed-context"))
#  672|           // error message already printed, eng already feeed
#  673|           return 1;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:673: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  671|               || !chainDecorator<CtxEmbedder>(&eng, vm, "embed-context"))
#  672|           // error message already printed, eng already feeed
#  673|->         return 1;
#  674|   
#  675|       if (!vm.count("input-file")) {

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:673: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  671|               || !chainDecorator<CtxEmbedder>(&eng, vm, "embed-context"))
#  672|           // error message already printed, eng already feeed
#  673|->         return 1;
#  674|   
#  675|       if (!vm.count("input-file")) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:673: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  671|               || !chainDecorator<CtxEmbedder>(&eng, vm, "embed-context"))
#  672|           // error message already printed, eng already feeed
#  673|->         return 1;
#  674|   
#  675|       if (!vm.count("input-file")) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:673: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  671|               || !chainDecorator<CtxEmbedder>(&eng, vm, "embed-context"))
#  672|           // error message already printed, eng already feeed
#  673|->         return 1;
#  674|   
#  675|       if (!vm.count("input-file")) {

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:675: misra_c_2012_rule_10_1_violation: The expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("input-file", std::allocator<char>()))" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  673|           return 1;
#  674|   
#  675|->     if (!vm.count("input-file")) {
#  676|           hasError = !eng->handleFile("-", silent);
#  677|       }

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:675: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("input-file", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  673|           return 1;
#  674|   
#  675|->     if (!vm.count("input-file")) {
#  676|           hasError = !eng->handleFile("-", silent);
#  677|       }

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:675: misra_cpp_2008_rule_5_3_1_violation: Operand "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("input-file", std::allocator<char>()))" of the operator "!" is not bool type.
#  673|           return 1;
#  674|   
#  675|->     if (!vm.count("input-file")) {
#  676|           hasError = !eng->handleFile("-", silent);
#  677|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:680: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  678|       else {
#  679|           const TStringList &files = vm["input-file"].as<TStringList>();
#  680|->         for (const string &fileName : files) {
#  681|               if (!eng->handleFile(fileName, silent))
#  682|                   hasError = true;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:682: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  680|           for (const string &fileName : files) {
#  681|               if (!eng->handleFile(fileName, silent))
#  682|->                 hasError = true;
#  683|           }
#  684|       }

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:682: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  680|           for (const string &fileName : files) {
#  681|               if (!eng->handleFile(fileName, silent))
#  682|->                 hasError = true;
#  683|           }
#  684|       }

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:688: misra_c_2012_rule_10_3_violation: Implicit conversion of "hasError" from essential type "boolean" to different or narrower essential type "signed 32-bit int".
#  686|       eng->flush();
#  687|       delete eng;
#  688|->     return hasError;
#  689|   }

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:688: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "hasError" with underlying type "bool" is implicitly converted to a different underlying type "32-bit signed int".
#  686|       eng->flush();
#  687|       delete eng;
#  688|->     return hasError;
#  689|   }

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2012 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:31: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   29|   #include <boost/program_options.hpp>
#   30|   
#   31|-> #ifndef DEFAULT_CWE_NAMES_FILE
#   32|   #   define DEFAULT_CWE_NAMES_FILE "/usr/share/csdiff/cwe-names.csv"
#   33|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:32: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   30|   
#   31|   #ifndef DEFAULT_CWE_NAMES_FILE
#   32|-> #   define DEFAULT_CWE_NAMES_FILE "/usr/share/csdiff/cwe-names.csv"
#   33|   #endif
#   34|   

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:32: misra_cpp_2008_rule_16_2_2_violation: Macro "DEFAULT_CWE_NAMES_FILE" is used other than include guards, type qualifiers, or storage class specifiers.
#   30|   
#   31|   #ifndef DEFAULT_CWE_NAMES_FILE
#   32|-> #   define DEFAULT_CWE_NAMES_FILE "/usr/share/csdiff/cwe-names.csv"
#   33|   #endif
#   34|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:33: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   31|   #ifndef DEFAULT_CWE_NAMES_FILE
#   32|   #   define DEFAULT_CWE_NAMES_FILE "/usr/share/csdiff/cwe-names.csv"
#   33|-> #endif
#   34|   
#   35|   std::string titleFromFileName(const std::string &fileName)

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:35: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   33|   #endif
#   34|   
#   35|-> std::string titleFromFileName(const std::string &fileName)
#   36|   {
#   37|       if (!fileName.compare("-"))

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:35: misra_c_2012_rule_8_7_violation: Function "titleFromFileName" has external linkage but is only used in one translation unit.
#   33|   #endif
#   34|   
#   35|-> std::string titleFromFileName(const std::string &fileName)
#   36|   {
#   37|       if (!fileName.compare("-"))

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:35: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   33|   #endif
#   34|   
#   35|-> std::string titleFromFileName(const std::string &fileName)
#   36|   {
#   37|       if (!fileName.compare("-"))

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:35: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "titleFromFileName".
#   33|   #endif
#   34|   
#   35|-> std::string titleFromFileName(const std::string &fileName)
#   36|   {
#   37|       if (!fileName.compare("-"))

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:37: misra_c_2012_rule_10_1_violation: The expression "fileName->compare("-")" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#   35|   std::string titleFromFileName(const std::string &fileName)
#   36|   {
#   37|->     if (!fileName.compare("-"))
#   38|           return "";
#   39|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:37: misra_cpp_2008_rule_5_0_13_violation: The type of "fileName->compare("-")" is not bool in the condition of "if-statement".
#   35|   std::string titleFromFileName(const std::string &fileName)
#   36|   {
#   37|->     if (!fileName.compare("-"))
#   38|           return "";
#   39|   

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:37: misra_cpp_2008_rule_5_3_1_violation: Operand "fileName->compare("-")" of the operator "!" is not bool type.
#   35|   std::string titleFromFileName(const std::string &fileName)
#   36|   {
#   37|->     if (!fileName.compare("-"))
#   38|           return "";
#   39|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:38: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   36|   {
#   37|       if (!fileName.compare("-"))
#   38|->         return "";
#   39|   
#   40|       const RE reNoVer("^(.*/)?[^/0-9]*$");

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:38: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   36|   {
#   37|       if (!fileName.compare("-"))
#   38|->         return "";
#   39|   
#   40|       const RE reNoVer("^(.*/)?[^/0-9]*$");

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:38: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   36|   {
#   37|       if (!fileName.compare("-"))
#   38|->         return "";
#   39|   
#   40|       const RE reNoVer("^(.*/)?[^/0-9]*$");

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:38: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   36|   {
#   37|       if (!fileName.compare("-"))
#   38|->         return "";
#   39|   
#   40|       const RE reNoVer("^(.*/)?[^/0-9]*$");

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:43: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   41|       if (boost::regex_match(fileName, reNoVer))
#   42|           // no version information -> bailing out
#   43|->         return "";
#   44|   
#   45|       const RE reTitle("^(?:.*/)?([^/]*)\\.(?:err|js)$");

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:43: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   41|       if (boost::regex_match(fileName, reNoVer))
#   42|           // no version information -> bailing out
#   43|->         return "";
#   44|   
#   45|       const RE reTitle("^(?:.*/)?([^/]*)\\.(?:err|js)$");

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:43: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   41|       if (boost::regex_match(fileName, reNoVer))
#   42|           // no version information -> bailing out
#   43|->         return "";
#   44|   
#   45|       const RE reTitle("^(?:.*/)?([^/]*)\\.(?:err|js)$");

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:43: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   41|       if (boost::regex_match(fileName, reNoVer))
#   42|           // no version information -> bailing out
#   43|->         return "";
#   44|   
#   45|       const RE reTitle("^(?:.*/)?([^/]*)\\.(?:err|js)$");

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:49: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   47|       boost::smatch sm;
#   48|       if (!boost::regex_match(fileName, sm, reTitle))
#   49|->         return "";
#   50|   
#   51|       return sm[/* title */ 1];

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:49: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   47|       boost::smatch sm;
#   48|       if (!boost::regex_match(fileName, sm, reTitle))
#   49|->         return "";
#   50|   
#   51|       return sm[/* title */ 1];

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:49: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   47|       boost::smatch sm;
#   48|       if (!boost::regex_match(fileName, sm, reTitle))
#   49|->         return "";
#   50|   
#   51|       return sm[/* title */ 1];

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:49: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   47|       boost::smatch sm;
#   48|       if (!boost::regex_match(fileName, sm, reTitle))
#   49|->         return "";
#   50|   
#   51|       return sm[/* title */ 1];

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:54: misra_c_2012_rule_5_8_violation: Identifier "main" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: external_linkage_symbol: Declaring an external linkage function with identifier "main".
#   52|   }
#   53|   
#   54|-> int main(int argc, char *argv[])
#   55|   {
#   56|       using std::string;

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:54: misra_c_2012_rule_8_13_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#   52|   }
#   53|   
#   54|-> int main(int argc, char *argv[])
#   55|   {
#   56|       using std::string;

Error: MISRA C++-2008 Rule 15-3-2 (CWE-703):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:54: misra_cpp_2008_rule_15_3_2_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block.
#   52|   }
#   53|   
#   54|-> int main(int argc, char *argv[])
#   55|   {
#   56|       using std::string;

Error: MISRA C++-2008 Rule 15-3-4 (CWE-755):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:54: misra_cpp_2008_rule_15_3_4_violation: In program root function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_any_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:129: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_any_cast>".
#   52|   }
#   53|   
#   54|-> int main(int argc, char *argv[])
#   55|   {
#   56|       using std::string;

Error: MISRA C++-2008 Rule 15-3-4 (CWE-755):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:54: misra_cpp_2008_rule_15_3_4_violation: In program root function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_lexical_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:74: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_lexical_cast>".
#   52|   }
#   53|   
#   54|-> int main(int argc, char *argv[])
#   55|   {
#   56|       using std::string;

Error: MISRA C++-2008 Rule 15-5-3 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:54: misra_cpp_2008_rule_15_5_3_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block. terminate() could be called implicitly.
#   52|   }
#   53|   
#   54|-> int main(int argc, char *argv[])
#   55|   {
#   56|       using std::string;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:54: misra_cpp_2008_rule_7_1_1_violation: The variable "argc" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   52|   }
#   53|   
#   54|-> int main(int argc, char *argv[])
#   55|   {
#   56|       using std::string;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:54: misra_cpp_2008_rule_7_1_1_violation: The variable "argv" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   52|   }
#   53|   
#   54|-> int main(int argc, char *argv[])
#   55|   {
#   56|       using std::string;

Error: MISRA C++-2008 Rule 7-1-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:54: misra_cpp_2008_rule_7_1_2_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#   52|   }
#   53|   
#   54|-> int main(int argc, char *argv[])
#   55|   {
#   56|       using std::string;

Error: UNCAUGHT_EXCEPT (CWE-248):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:54: root_function: In function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_any_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:129: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_any_cast>".
#   52|   }
#   53|   
#   54|-> int main(int argc, char *argv[])
#   55|   {
#   56|       using std::string;

Error: UNCAUGHT_EXCEPT (CWE-248):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:54: root_function: In function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_lexical_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:74: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_lexical_cast>".
#   52|   }
#   53|   
#   54|-> int main(int argc, char *argv[])
#   55|   {
#   56|       using std::string;

Error: MISRA C-2012 Rule 5.9 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:57: misra_c_2012_rule_5_9_violation: Identifier "name" is already used to represent an object with internal linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:452: internal_linkage_symbol: Declaring an internal linkage object with identifier "name".
#   55|   {
#   56|       using std::string;
#   57|->     const char *name = argv[0];
#   58|   
#   59|       std::string fnCweNamesDefault = DEFAULT_CWE_NAMES_FILE;

Error: MISRA C++-2008 Rule 2-10-5 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:57: misra_cpp_2008_rule_2_10_5_violation: Identifier "name" is already used to represent an object with static storage duration.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:452: static_storage_symbol: Declaring a static storage duration object with identifier "name".
#   55|   {
#   56|       using std::string;
#   57|->     const char *name = argv[0];
#   58|   
#   59|       std::string fnCweNamesDefault = DEFAULT_CWE_NAMES_FILE;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:57: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#   55|   {
#   56|       using std::string;
#   57|->     const char *name = argv[0];
#   58|   
#   59|       std::string fnCweNamesDefault = DEFAULT_CWE_NAMES_FILE;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:57: misra_cpp_2008_rule_7_1_1_violation: The variable "name" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   55|   {
#   56|       using std::string;
#   57|->     const char *name = argv[0];
#   58|   
#   59|       std::string fnCweNamesDefault = DEFAULT_CWE_NAMES_FILE;

Error: MISRA C++-2008 Rule 14-8-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:60: misra_cpp_2008_rule_14_8_2_violation: Overload resolution set contains both specialized and unspecialized functions.
/usr/include/boost/filesystem/path.hpp:174: non_template_candidate_example: (example non-template candidate function "boost::filesystem::path::path(boost::filesystem::path::string_type &)" at line 174 of "/usr/include/boost/filesystem/path.hpp")
/usr/include/boost/filesystem/path.hpp:164: template_candidate_example: (example template candidate function template "boost::filesystem::path::path(const Source &, boost::enable_if<boost::filesystem::path_traits::is_pathable<boost::decay<Source>::type>, void>::type *)" at line 164 of "/usr/include/boost/filesystem/path.hpp")
#   58|   
#   59|       std::string fnCweNamesDefault = DEFAULT_CWE_NAMES_FILE;
#   60|->     if (!boost::filesystem::exists(fnCweNamesDefault))
#   61|           // if the default file is not installed, do not use it as default
#   62|           fnCweNamesDefault.clear();

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:62: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   60|       if (!boost::filesystem::exists(fnCweNamesDefault))
#   61|           // if the default file is not installed, do not use it as default
#   62|->         fnCweNamesDefault.clear();
#   63|   
#   64|       namespace po = boost::program_options;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:62: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   60|       if (!boost::filesystem::exists(fnCweNamesDefault))
#   61|           // if the default file is not installed, do not use it as default
#   62|->         fnCweNamesDefault.clear();
#   63|   
#   64|       namespace po = boost::program_options;

Error: MISRA C++-2008 Rule 2-13-3 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:67: misra_cpp_2008_rule_2_13_3_violation: The "U" suffix is not applied to 128 (decimal) of type "32-bit unsigned int".
#   65|       po::variables_map vm;
#   66|       po::options_description desc(string("Usage: ") + name
#   67|->             + " [options] proj.js, where options are", /* line_length */ 0x80);
#   68|   
#   69|       typedef std::vector<string> TStringList;

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:67: misra_cpp_2008_rule_5_0_4_violation: "128" is implicitly converted from a signed value to an unsigned value.
#   65|       po::variables_map vm;
#   66|       po::options_description desc(string("Usage: ") + name
#   67|->             + " [options] proj.js, where options are", /* line_length */ 0x80);
#   68|   
#   69|       typedef std::vector<string> TStringList;

Error: MISRA C-2012 Rule 5.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:69: misra_c_2012_rule_5_6_violation: Identifier "TStringList" is already used to represent a typedef.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:40: typedef_declaration: Declaring a typedef with identifier "TStringList".
#   67|               + " [options] proj.js, where options are", /* line_length */ 0x80);
#   68|   
#   69|->     typedef std::vector<string> TStringList;
#   70|       string defUrlTemplate, fnBase, checkerIgnRegex, plainTextUrl, spPosition;
#   71|       string fnCweNames;

Error: MISRA C++-2008 Rule 2-10-3 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:69: misra_cpp_2008_rule_2_10_3_violation: Identifier "TStringList" is already used to represent a typedef.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:40: typedef_declaration: Declaring a typedef with identifier "TStringList".
#   67|               + " [options] proj.js, where options are", /* line_length */ 0x80);
#   68|   
#   69|->     typedef std::vector<string> TStringList;
#   70|       string defUrlTemplate, fnBase, checkerIgnRegex, plainTextUrl, spPosition;
#   71|       string fnCweNames;

Error: MISRA C++-2008 Rule 8-0-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:70: misra_cpp_2008_rule_8_0_1_violation: Declarator list has more than one declarator.
#   68|   
#   69|       typedef std::vector<string> TStringList;
#   70|->     string defUrlTemplate, fnBase, checkerIgnRegex, plainTextUrl, spPosition;
#   71|       string fnCweNames;
#   72|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:74: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#   72|   
#   73|       try {
#   74|->         desc.add_options()
#   75|               ("cwe-names",
#   76|                po::value(&fnCweNames)->default_value(fnCweNamesDefault),

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:94: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#   92|   
#   93|           po::options_description hidden("");
#   94|->         hidden.add_options()
#   95|               ("input-file", po::value<TStringList>(), "input file");
#   96|           po::positional_options_description p;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:97: misra_c_2012_rule_17_7_violation: The return value of a non-void function "add" is unused.
#   95|               ("input-file", po::value<TStringList>(), "input file");
#   96|           po::positional_options_description p;
#   97|->         p.add("input-file", -1);
#   98|   
#   99|           po::store(po::parse_command_line(argc, argv, desc), vm);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:97: misra_cpp_2008_rule_0_1_7_violation: The return value of function "p.add("input-file", -1)" is not used.
#   95|               ("input-file", po::value<TStringList>(), "input file");
#   96|           po::positional_options_description p;
#   97|->         p.add("input-file", -1);
#   98|   
#   99|           po::store(po::parse_command_line(argc, argv, desc), vm);

Error: MISRA C-2012 Rule 11.3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:99: misra_c_2012_rule_11_3_violation: The object pointer expression "argv" of type "char **" is cast to type "char const * const *".
#   97|           p.add("input-file", -1);
#   98|   
#   99|->         po::store(po::parse_command_line(argc, argv, desc), vm);
#  100|           po::notify(vm);    
#  101|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:103: misra_c_2012_rule_17_7_violation: The return value of a non-void function "add" is unused.
#  101|   
#  102|           po::options_description opts;
#  103|->         opts.add(desc).add(hidden);
#  104|           po::store(po::command_line_parser(argc, argv).
#  105|                   options(opts).positional(p).run(), vm);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:103: misra_cpp_2008_rule_0_1_7_violation: The return value of function "opts.add(desc)->add(hidden)" is not used.
#  101|   
#  102|           po::options_description opts;
#  103|->         opts.add(desc).add(hidden);
#  104|           po::store(po::command_line_parser(argc, argv).
#  105|                   options(opts).positional(p).run(), vm);

Error: MISRA C-2012 Rule 11.3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:104: misra_c_2012_rule_11_3_violation: The object pointer expression "argv" of type "char **" is cast to type "char const * const *".
#  102|           po::options_description opts;
#  103|           opts.add(desc).add(hidden);
#  104|->         po::store(po::command_line_parser(argc, argv).
#  105|                   options(opts).positional(p).run(), vm);
#  106|           po::notify(vm);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:109: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  107|       }
#  108|       catch (po::error &e) {
#  109|->         std::cerr << name << ": error: " << e.what() << "\n\n";
#  110|           desc.print(std::cerr);
#  111|           return 1;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:111: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  109|           std::cerr << name << ": error: " << e.what() << "\n\n";
#  110|           desc.print(std::cerr);
#  111|->         return 1;
#  112|       }
#  113|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:111: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  109|           std::cerr << name << ": error: " << e.what() << "\n\n";
#  110|           desc.print(std::cerr);
#  111|->         return 1;
#  112|       }
#  113|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:114: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("help", std::allocator<char>()))" does not have an essentially boolean type.
#  112|       }
#  113|   
#  114|->     if (vm.count("help")) {
#  115|           desc.print(std::cout);
#  116|           return 0;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:114: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("help", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  112|       }
#  113|   
#  114|->     if (vm.count("help")) {
#  115|           desc.print(std::cout);
#  116|           return 0;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:116: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  114|       if (vm.count("help")) {
#  115|           desc.print(std::cout);
#  116|->         return 0;
#  117|       }
#  118|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:116: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  114|       if (vm.count("help")) {
#  115|           desc.print(std::cout);
#  116|->         return 0;
#  117|       }
#  118|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:119: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("version", std::allocator<char>()))" does not have an essentially boolean type.
#  117|       }
#  118|   
#  119|->     if (vm.count("version")) {
#  120|           std::cout << CS_VERSION << "\n";
#  121|           return 0;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:119: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("version", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  117|       }
#  118|   
#  119|->     if (vm.count("version")) {
#  120|           std::cout << CS_VERSION << "\n";
#  121|           return 0;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:120: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  118|   
#  119|       if (vm.count("version")) {
#  120|->         std::cout << CS_VERSION << "\n";
#  121|           return 0;
#  122|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:121: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  119|       if (vm.count("version")) {
#  120|           std::cout << CS_VERSION << "\n";
#  121|->         return 0;
#  122|       }
#  123|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:121: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  119|       if (vm.count("version")) {
#  120|           std::cout << CS_VERSION << "\n";
#  121|->         return 0;
#  122|       }
#  123|   

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:124: misra_c_2012_rule_10_1_violation: The expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("input-file", std::allocator<char>()))" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  122|       }
#  123|   
#  124|->     if (!vm.count("input-file")) {
#  125|           desc.print(std::cerr);
#  126|           return 1;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:124: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("input-file", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  122|       }
#  123|   
#  124|->     if (!vm.count("input-file")) {
#  125|           desc.print(std::cerr);
#  126|           return 1;

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:124: misra_cpp_2008_rule_5_3_1_violation: Operand "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("input-file", std::allocator<char>()))" of the operator "!" is not bool type.
#  122|       }
#  123|   
#  124|->     if (!vm.count("input-file")) {
#  125|           desc.print(std::cerr);
#  126|           return 1;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:126: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  124|       if (!vm.count("input-file")) {
#  125|           desc.print(std::cerr);
#  126|->         return 1;
#  127|       }
#  128|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:126: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  124|       if (!vm.count("input-file")) {
#  125|           desc.print(std::cerr);
#  126|->         return 1;
#  127|       }
#  128|   

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:130: misra_cpp_2008_rule_5_0_4_violation: "1" is implicitly converted from a signed value to an unsigned value.
#  128|   
#  129|       const TStringList inputFiles(vm["input-file"].as<TStringList>());
#  130|->     if (1 != inputFiles.size()) {
#  131|           desc.print(std::cerr);
#  132|           return 1;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:132: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  130|       if (1 != inputFiles.size()) {
#  131|           desc.print(std::cerr);
#  132|->         return 1;
#  133|       }
#  134|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:132: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  130|       if (1 != inputFiles.size()) {
#  131|           desc.print(std::cerr);
#  132|->         return 1;
#  133|       }
#  134|   

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:136: misra_c_2012_rule_10_3_violation: Implicit conversion of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("quiet", std::allocator<char>()))" from essential type "non-essential type" to different or narrower essential type "boolean".
#  134|   
#  135|       const string &fnInput = inputFiles.front();
#  136|->     const bool silent = vm.count("quiet");
#  137|   
#  138|       try {

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:136: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("quiet", std::allocator<char>()))" is implicitly reduced from "64-bit unsigned long" to "bool".
#  134|   
#  135|       const string &fnInput = inputFiles.front();
#  136|->     const bool silent = vm.count("quiet");
#  137|   
#  138|       try {

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:152: misra_c_2012_rule_15_6_violation: The body of the "while" loop is not a compound statement.
#  150|               Defect def;
#  151|               while (pBase.getNext(&def))
#  152|->                 baseLookup.hashDefect(def);
#  153|   
#  154|               baseProps = pBase.getScanProps();

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:152: misra_cpp_2008_rule_6_3_1_violation: The body of the "while" loop is not a compound statement.
#  150|               Defect def;
#  151|               while (pBase.getNext(&def))
#  152|->                 baseLookup.hashDefect(def);
#  153|   
#  154|               baseProps = pBase.getScanProps();

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:154: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  152|                   baseLookup.hashDefect(def);
#  153|   
#  154|->             baseProps = pBase.getScanProps();
#  155|           }
#  156|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:162: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  160|           writer.setScanProps(pInput.getScanProps());
#  161|           if (!plainTextUrl.empty())
#  162|->             writer.setPlainTextUrl(plainTextUrl);
#  163|   
#  164|           if (!fnBase.empty()) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:162: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  160|           writer.setScanProps(pInput.getScanProps());
#  161|           if (!plainTextUrl.empty())
#  162|->             writer.setPlainTextUrl(plainTextUrl);
#  163|   
#  164|           if (!fnBase.empty()) {

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:171: misra_cpp_2008_rule_3_4_1_violation: Declaration of "cweNames" could be made in an inner scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:172: inner_scope: Declaration could be moved to this block.
#  169|   
#  170|           // initialize CWE names lookup
#  171|->         CweNameLookup cweNames;
#  172|           if (!fnCweNames.empty()) {
#  173|               InStream strCweNames(fnCweNames);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:174: misra_c_2012_rule_17_7_violation: The return value of a non-void function "parse" is unused.
#  172|           if (!fnCweNames.empty()) {
#  173|               InStream strCweNames(fnCweNames);
#  174|->             cweNames.parse(strCweNames);
#  175|               writer.setCweNameLookup(&cweNames);
#  176|           }

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:174: misra_cpp_2008_rule_0_1_7_violation: The return value of function "cweNames.parse(strCweNames)" is not used.
#  172|           if (!fnCweNames.empty()) {
#  173|               InStream strCweNames(fnCweNames);
#  174|->             cweNames.parse(strCweNames);
#  175|               writer.setCweNameLookup(&cweNames);
#  176|           }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:179: misra_c_2012_rule_17_7_violation: The return value of a non-void function "handleFile" is unused.
#  177|   
#  178|           // write HTML
#  179|->         writer.handleFile(pInput);
#  180|           writer.flush();
#  181|   

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:179: misra_cpp_2008_rule_0_1_7_violation: The return value of function "writer.handleFile(pInput)" is not used.
#  177|   
#  178|           // write HTML
#  179|->         writer.handleFile(pInput);
#  180|           writer.flush();
#  181|   

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:182: misra_c_2012_rule_10_3_violation: Implicit conversion of "pInput.hasError()" from essential type "boolean" to different or narrower essential type "signed 32-bit int".
#  180|           writer.flush();
#  181|   
#  182|->         return pInput.hasError();
#  183|       }
#  184|       catch (const InFileException &e) {

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:182: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  180|           writer.flush();
#  181|   
#  182|->         return pInput.hasError();
#  183|       }
#  184|       catch (const InFileException &e) {

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:182: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "pInput.hasError()" with underlying type "bool" is implicitly converted to a different underlying type "32-bit signed int".
#  180|           writer.flush();
#  181|   
#  182|->         return pInput.hasError();
#  183|       }
#  184|       catch (const InFileException &e) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:182: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  180|           writer.flush();
#  181|   
#  182|->         return pInput.hasError();
#  183|       }
#  184|       catch (const InFileException &e) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:185: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  183|       }
#  184|       catch (const InFileException &e) {
#  185|->         std::cerr << e.fileName << ": failed to open input file\n";
#  186|           return EXIT_FAILURE;
#  187|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:186: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  184|       catch (const InFileException &e) {
#  185|           std::cerr << e.fileName << ": failed to open input file\n";
#  186|->         return EXIT_FAILURE;
#  187|       }
#  188|       catch (const std::exception &e) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:186: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  184|       catch (const InFileException &e) {
#  185|           std::cerr << e.fileName << ": failed to open input file\n";
#  186|->         return EXIT_FAILURE;
#  187|       }
#  188|       catch (const std::exception &e) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:189: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  187|       }
#  188|       catch (const std::exception &e) {
#  189|->         std::cerr << name << ": error: " << e.what() << "\n";
#  190|           return EXIT_FAILURE;
#  191|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:190: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  188|       catch (const std::exception &e) {
#  189|           std::cerr << name << ": error: " << e.what() << "\n";
#  190|->         return EXIT_FAILURE;
#  191|       }
#  192|   }

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cshtml.cc:190: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  188|       catch (const std::exception &e) {
#  189|           std::cerr << name << ": error: " << e.what() << "\n";
#  190|->         return EXIT_FAILURE;
#  191|       }
#  192|   }

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2012 - 2013 Red Hat, Inc.
#    3|    *

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:33: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned long" rather than a typedef that includes size and signedness information.
#   31|   namespace pt = boost::property_tree;
#   32|   
#   33|-> void parseError(
#   34|           const std::string          &msg,
#   35|           const std::string          &fName,

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:33: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   31|   namespace pt = boost::property_tree;
#   32|   
#   33|-> void parseError(
#   34|           const std::string          &msg,
#   35|           const std::string          &fName,

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:33: misra_c_2012_rule_8_7_violation: Function "parseError" has external linkage but is only used in one translation unit.
#   31|   namespace pt = boost::property_tree;
#   32|   
#   33|-> void parseError(
#   34|           const std::string          &msg,
#   35|           const std::string          &fName,

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:33: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   31|   namespace pt = boost::property_tree;
#   32|   
#   33|-> void parseError(
#   34|           const std::string          &msg,
#   35|           const std::string          &fName,

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:33: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned long" rather than a typedef that includes size and signedness information.
#   31|   namespace pt = boost::property_tree;
#   32|   
#   33|-> void parseError(
#   34|           const std::string          &msg,
#   35|           const std::string          &fName,

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:33: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "parseError".
#   31|   namespace pt = boost::property_tree;
#   32|   
#   33|-> void parseError(
#   34|           const std::string          &msg,
#   35|           const std::string          &fName,

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:36: misra_cpp_2008_rule_5_0_4_violation: "0" is implicitly converted from a signed value to an unsigned value.
#   34|           const std::string          &msg,
#   35|           const std::string          &fName,
#   36|->         const unsigned long         line = 0)
#   37|   {
#   38|       std::cerr << fName;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:38: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   36|           const unsigned long         line = 0)
#   37|   {
#   38|->     std::cerr << fName;
#   39|   
#   40|       if (line)

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:40: misra_c_2012_rule_14_4_violation: The condition expression "line" does not have an essentially boolean type.
#   38|       std::cerr << fName;
#   39|   
#   40|->     if (line)
#   41|           // line number available
#   42|           std::cerr << ":" << line;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:40: misra_cpp_2008_rule_5_0_13_violation: The type of "line" is not bool in the condition of "if-statement".
#   38|       std::cerr << fName;
#   39|   
#   40|->     if (line)
#   41|           // line number available
#   42|           std::cerr << ":" << line;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:42: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   40|       if (line)
#   41|           // line number available
#   42|->         std::cerr << ":" << line;
#   43|   
#   44|       std::cerr << ": parse error: " << msg << "\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:42: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   40|       if (line)
#   41|           // line number available
#   42|->         std::cerr << ":" << line;
#   43|   
#   44|       std::cerr << ": parse error: " << msg << "\n";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:42: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   40|       if (line)
#   41|           // line number available
#   42|->         std::cerr << ":" << line;
#   43|   
#   44|       std::cerr << ": parse error: " << msg << "\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:44: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   42|           std::cerr << ":" << line;
#   43|   
#   44|->     std::cerr << ": parse error: " << msg << "\n";
#   45|   }
#   46|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:47: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   45|   }
#   46|   
#   47|-> void printError(const InFileException &e)
#   48|   {
#   49|       std::cerr << e.fileName << ": failed to open input file\n";

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:47: misra_c_2012_rule_8_7_violation: Function "printError" has external linkage but is only used in one translation unit.
#   45|   }
#   46|   
#   47|-> void printError(const InFileException &e)
#   48|   {
#   49|       std::cerr << e.fileName << ": failed to open input file\n";

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:47: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   45|   }
#   46|   
#   47|-> void printError(const InFileException &e)
#   48|   {
#   49|       std::cerr << e.fileName << ": failed to open input file\n";

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:47: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "printError".
#   45|   }
#   46|   
#   47|-> void printError(const InFileException &e)
#   48|   {
#   49|       std::cerr << e.fileName << ": failed to open input file\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:49: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   47|   void printError(const InFileException &e)
#   48|   {
#   49|->     std::cerr << e.fileName << ": failed to open input file\n";
#   50|   }
#   51|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:52: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   50|   }
#   51|   
#   52|-> bool loadPropsFromIniFile(
#   53|           AbstractWriter             &writer,
#   54|           const std::string          &fName)

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:52: misra_c_2012_rule_8_7_violation: Function "loadPropsFromIniFile" has external linkage but is only used in one translation unit.
#   50|   }
#   51|   
#   52|-> bool loadPropsFromIniFile(
#   53|           AbstractWriter             &writer,
#   54|           const std::string          &fName)

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:52: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   50|   }
#   51|   
#   52|-> bool loadPropsFromIniFile(
#   53|           AbstractWriter             &writer,
#   54|           const std::string          &fName)

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:52: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "loadPropsFromIniFile".
#   50|   }
#   51|   
#   52|-> bool loadPropsFromIniFile(
#   53|           AbstractWriter             &writer,
#   54|           const std::string          &fName)

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:58: misra_cpp_2008_rule_7_1_1_violation: The variable "input" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   56|       try {
#   57|           // open the input file
#   58|->         InStream input(fName);
#   59|   
#   60|           // parse .ini

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:69: misra_c_2012_rule_14_4_violation: The condition expression "<anonymous> != <anonymous>" does not have an essentially boolean type.
#   67|           // update scan properties from the ptree node
#   68|           pt::ptree scanNode = root.get_child("scan");
#   69|->         for (const pt::ptree::value_type &item : scanNode)
#   70|               props[item.first] = item.second.data();
#   71|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:69: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#   67|           // update scan properties from the ptree node
#   68|           pt::ptree scanNode = root.get_child("scan");
#   69|->         for (const pt::ptree::value_type &item : scanNode)
#   70|               props[item.first] = item.second.data();
#   71|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:70: misra_c_2012_rule_15_6_violation: The body of the "for" loop is not a compound statement.
#   68|           pt::ptree scanNode = root.get_child("scan");
#   69|           for (const pt::ptree::value_type &item : scanNode)
#   70|->             props[item.first] = item.second.data();
#   71|   
#   72|           // write the updated scan properties back to the writer

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:70: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   68|           pt::ptree scanNode = root.get_child("scan");
#   69|           for (const pt::ptree::value_type &item : scanNode)
#   70|->             props[item.first] = item.second.data();
#   71|   
#   72|           // write the updated scan properties back to the writer

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:70: misra_cpp_2008_rule_6_3_1_violation: The body of the "for" loop is not a compound statement.
#   68|           pt::ptree scanNode = root.get_child("scan");
#   69|           for (const pt::ptree::value_type &item : scanNode)
#   70|->             props[item.first] = item.second.data();
#   71|   
#   72|           // write the updated scan properties back to the writer

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:74: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   72|           // write the updated scan properties back to the writer
#   73|           writer.setScanProps(props);
#   74|->         return true;
#   75|       }
#   76|       catch (const InFileException &e) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:74: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   72|           // write the updated scan properties back to the writer
#   73|           writer.setScanProps(props);
#   74|->         return true;
#   75|       }
#   76|       catch (const InFileException &e) {

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:78: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   76|       catch (const InFileException &e) {
#   77|           printError(e);
#   78|->         return false;
#   79|       }
#   80|       catch (pt::file_parser_error &e) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:78: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   76|       catch (const InFileException &e) {
#   77|           printError(e);
#   78|->         return false;
#   79|       }
#   80|       catch (pt::file_parser_error &e) {

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:82: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   80|       catch (pt::file_parser_error &e) {
#   81|           parseError(e.message(), fName, e.line());
#   82|->         return false;
#   83|       }
#   84|       catch (pt::ptree_error &e) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:82: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   80|       catch (pt::file_parser_error &e) {
#   81|           parseError(e.message(), fName, e.line());
#   82|->         return false;
#   83|       }
#   84|       catch (pt::ptree_error &e) {

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:86: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   84|       catch (pt::ptree_error &e) {
#   85|           parseError(e.what(), fName);
#   86|->         return false;
#   87|       }
#   88|   }

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:86: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   84|       catch (pt::ptree_error &e) {
#   85|           parseError(e.what(), fName);
#   86|->         return false;
#   87|       }
#   88|   }

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:90: misra_cpp_2008_rule_3_4_1_violation: Symbol "ImpFlagDecorator" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:152: single_use: Symbol "ImpFlagDecorator" is only used in "main(int, char **)".
#   88|   }
#   89|   
#   90|-> class ImpFlagDecorator: public GenericAbstractFilter {
#   91|       public:
#   92|           ImpFlagDecorator(AbstractWriter *writer):

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:90: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "ImpFlagDecorator".
#   88|   }
#   89|   
#   90|-> class ImpFlagDecorator: public GenericAbstractFilter {
#   91|       public:
#   92|           ImpFlagDecorator(AbstractWriter *writer):

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:92: misra_cpp_2008_rule_7_1_1_violation: The variable "writer" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   90|   class ImpFlagDecorator: public GenericAbstractFilter {
#   91|       public:
#   92|->         ImpFlagDecorator(AbstractWriter *writer):
#   93|               GenericAbstractFilter(writer)
#   94|           {

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:97: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   95|           }
#   96|   
#   97|->         void hashImpDefect(const Defect &);
#   98|   
#   99|           virtual void handleDef(const Defect &def);

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:110: misra_c_2012_rule_8_3_violation: Declaration uses a different parameter name than "void ImpFlagDecorator::handleDef(const Defect &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:99: prev_declaration: (see previous declaration of "ImpFlagDecorator::handleDef" at line 99)
#  108|   }
#  109|   
#  110|-> void ImpFlagDecorator::handleDef(const Defect &defOrig)
#  111|   {
#  112|       if (impSet_.lookup(defOrig)) {

Error: MISRA C++-2008 Rule 8-4-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:110: misra_cpp_2008_rule_8_4_2_violation: Declaration uses a different parameter name than "void ImpFlagDecorator::handleDef(const Defect &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:99: prev_declaration: (see previous declaration of "ImpFlagDecorator::handleDef" at line 99)
#  108|   }
#  109|   
#  110|-> void ImpFlagDecorator::handleDef(const Defect &defOrig)
#  111|   {
#  112|       if (impSet_.lookup(defOrig)) {

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:123: misra_cpp_2008_rule_3_4_1_violation: Symbol "ParsingRulesDecorator" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:152: single_use: Symbol "ParsingRulesDecorator" is only used in "main(int, char **)".
#  121|   }
#  122|   
#  123|-> class ParsingRulesDecorator: public GenericAbstractFilter {
#  124|       public:
#  125|           ParsingRulesDecorator(AbstractWriter *writer):

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:123: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "ParsingRulesDecorator".
#  121|   }
#  122|   
#  123|-> class ParsingRulesDecorator: public GenericAbstractFilter {
#  124|       public:
#  125|           ParsingRulesDecorator(AbstractWriter *writer):

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:125: misra_cpp_2008_rule_7_1_1_violation: The variable "writer" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  123|   class ParsingRulesDecorator: public GenericAbstractFilter {
#  124|       public:
#  125|->         ParsingRulesDecorator(AbstractWriter *writer):
#  126|               GenericAbstractFilter(writer)
#  127|           {

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:136: misra_c_2012_rule_8_3_violation: Declaration uses a different parameter name than "void ParsingRulesDecorator::handleDef(const Defect &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:130: prev_declaration: (see previous declaration of "ParsingRulesDecorator::handleDef" at line 130)
#  134|   };
#  135|   
#  136|-> void ParsingRulesDecorator::handleDef(const Defect &defOrig)
#  137|   {
#  138|       Defect def = defOrig;

Error: MISRA C++-2008 Rule 8-4-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:136: misra_cpp_2008_rule_8_4_2_violation: Declaration uses a different parameter name than "void ParsingRulesDecorator::handleDef(const Defect &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:130: prev_declaration: (see previous declaration of "ParsingRulesDecorator::handleDef" at line 130)
#  134|   };
#  135|   
#  136|-> void ParsingRulesDecorator::handleDef(const Defect &defOrig)
#  137|   {
#  138|       Defect def = defOrig;

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:144: misra_c_2012_rule_5_8_violation: Identifier "valueOf" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-tree.hh:57: external_linkage_symbol: Declaring an external linkage function with identifier "valueOf".
#  142|   
#  143|   template <class TVal, class TVar>
#  144|-> inline TVal valueOf(const TVar &var)
#  145|   {
#  146|       if (var.empty())

Error: MISRA C-2012 Rule 8.10 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:144: misra_c_2012_rule_8_10_violation: The inline function "valueOf<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value>(boost::program_options::variable_value const &)" is not declared with a static scope.
#  142|   
#  143|   template <class TVal, class TVar>
#  144|-> inline TVal valueOf(const TVar &var)
#  145|   {
#  146|       if (var.empty())

Error: MISRA C-2012 Rule 8.10 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:144: misra_c_2012_rule_8_10_violation: The inline function "valueOf<typename T1, typename T2>(/*template param*/ const &)" is not declared with a static scope.
#  142|   
#  143|   template <class TVal, class TVar>
#  144|-> inline TVal valueOf(const TVar &var)
#  145|   {
#  146|       if (var.empty())

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:144: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  142|   
#  143|   template <class TVal, class TVar>
#  144|-> inline TVal valueOf(const TVar &var)
#  145|   {
#  146|       if (var.empty())

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:144: misra_c_2012_rule_8_7_violation: Function "valueOf" has external linkage but is only used in one translation unit.
#  142|   
#  143|   template <class TVal, class TVar>
#  144|-> inline TVal valueOf(const TVar &var)
#  145|   {
#  146|       if (var.empty())

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:144: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  142|   
#  143|   template <class TVal, class TVar>
#  144|-> inline TVal valueOf(const TVar &var)
#  145|   {
#  146|       if (var.empty())

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:144: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "valueOf".
#  142|   
#  143|   template <class TVal, class TVar>
#  144|-> inline TVal valueOf(const TVar &var)
#  145|   {
#  146|       if (var.empty())

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:147: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  145|   {
#  146|       if (var.empty())
#  147|->         return TVal();
#  148|       else
#  149|           return var.template as<TVal>();

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:147: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  145|   {
#  146|       if (var.empty())
#  147|->         return TVal();
#  148|       else
#  149|           return var.template as<TVal>();

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:147: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  145|   {
#  146|       if (var.empty())
#  147|->         return TVal();
#  148|       else
#  149|           return var.template as<TVal>();

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:147: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  145|   {
#  146|       if (var.empty())
#  147|->         return TVal();
#  148|       else
#  149|           return var.template as<TVal>();

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:149: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  147|           return TVal();
#  148|       else
#  149|->         return var.template as<TVal>();
#  150|   }
#  151|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:149: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  147|           return TVal();
#  148|       else
#  149|->         return var.template as<TVal>();
#  150|   }
#  151|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:149: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  147|           return TVal();
#  148|       else
#  149|->         return var.template as<TVal>();
#  150|   }
#  151|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:149: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  147|           return TVal();
#  148|       else
#  149|->         return var.template as<TVal>();
#  150|   }
#  151|   

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:152: misra_c_2012_rule_5_8_violation: Identifier "main" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: external_linkage_symbol: Declaring an external linkage function with identifier "main".
#  150|   }
#  151|   
#  152|-> int main(int argc, char *argv[])
#  153|   {
#  154|       using std::string;

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:152: misra_c_2012_rule_8_13_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  150|   }
#  151|   
#  152|-> int main(int argc, char *argv[])
#  153|   {
#  154|       using std::string;

Error: MISRA C++-2008 Rule 15-3-2 (CWE-703):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:152: misra_cpp_2008_rule_15_3_2_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block.
#  150|   }
#  151|   
#  152|-> int main(int argc, char *argv[])
#  153|   {
#  154|       using std::string;

Error: MISRA C++-2008 Rule 15-3-4 (CWE-755):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:152: misra_cpp_2008_rule_15_3_4_violation: In program root function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_any_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:209: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_any_cast>".
#  150|   }
#  151|   
#  152|-> int main(int argc, char *argv[])
#  153|   {
#  154|       using std::string;

Error: MISRA C++-2008 Rule 15-3-4 (CWE-755):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:152: misra_cpp_2008_rule_15_3_4_violation: In program root function "main(int, char **)" an exception of type "boost::wrapexcept<boost::escaped_list_error>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:237: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::escaped_list_error>".
#  150|   }
#  151|   
#  152|-> int main(int argc, char *argv[])
#  153|   {
#  154|       using std::string;

Error: MISRA C++-2008 Rule 15-3-4 (CWE-755):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:152: misra_cpp_2008_rule_15_3_4_violation: In program root function "main(int, char **)" an exception of type "boost::wrapexcept<std::logic_error>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:253: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<std::logic_error>".
#  150|   }
#  151|   
#  152|-> int main(int argc, char *argv[])
#  153|   {
#  154|       using std::string;

Error: MISRA C++-2008 Rule 15-5-3 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:152: misra_cpp_2008_rule_15_5_3_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block. terminate() could be called implicitly.
#  150|   }
#  151|   
#  152|-> int main(int argc, char *argv[])
#  153|   {
#  154|       using std::string;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:152: misra_cpp_2008_rule_7_1_1_violation: The variable "argc" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  150|   }
#  151|   
#  152|-> int main(int argc, char *argv[])
#  153|   {
#  154|       using std::string;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:152: misra_cpp_2008_rule_7_1_1_violation: The variable "argv" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  150|   }
#  151|   
#  152|-> int main(int argc, char *argv[])
#  153|   {
#  154|       using std::string;

Error: MISRA C++-2008 Rule 7-1-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:152: misra_cpp_2008_rule_7_1_2_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  150|   }
#  151|   
#  152|-> int main(int argc, char *argv[])
#  153|   {
#  154|       using std::string;

Error: UNCAUGHT_EXCEPT (CWE-248):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:152: root_function: In function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_any_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:209: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_any_cast>".
#  150|   }
#  151|   
#  152|-> int main(int argc, char *argv[])
#  153|   {
#  154|       using std::string;

Error: UNCAUGHT_EXCEPT (CWE-248):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:152: root_function: In function "main(int, char **)" an exception of type "boost::wrapexcept<boost::escaped_list_error>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:237: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::escaped_list_error>".
#  150|   }
#  151|   
#  152|-> int main(int argc, char *argv[])
#  153|   {
#  154|       using std::string;

Error: UNCAUGHT_EXCEPT (CWE-248):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:152: root_function: In function "main(int, char **)" an exception of type "boost::wrapexcept<std::logic_error>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:253: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<std::logic_error>".
#  150|   }
#  151|   
#  152|-> int main(int argc, char *argv[])
#  153|   {
#  154|       using std::string;

Error: MISRA C-2012 Rule 5.9 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:155: misra_c_2012_rule_5_9_violation: Identifier "name" is already used to represent an object with internal linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:452: internal_linkage_symbol: Declaring an internal linkage object with identifier "name".
#  153|   {
#  154|       using std::string;
#  155|->     const char *name = argv[0];
#  156|   
#  157|       namespace po = boost::program_options;

Error: MISRA C++-2008 Rule 2-10-5 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:155: misra_cpp_2008_rule_2_10_5_violation: Identifier "name" is already used to represent an object with static storage duration.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:452: static_storage_symbol: Declaring a static storage duration object with identifier "name".
#  153|   {
#  154|       using std::string;
#  155|->     const char *name = argv[0];
#  156|   
#  157|       namespace po = boost::program_options;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:155: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  153|   {
#  154|       using std::string;
#  155|->     const char *name = argv[0];
#  156|   
#  157|       namespace po = boost::program_options;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:155: misra_cpp_2008_rule_7_1_1_violation: The variable "name" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  153|   {
#  154|       using std::string;
#  155|->     const char *name = argv[0];
#  156|   
#  157|       namespace po = boost::program_options;

Error: MISRA C-2012 Rule 5.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:162: misra_c_2012_rule_5_6_violation: Identifier "TStringList" is already used to represent a typedef.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:40: typedef_declaration: Declaring a typedef with identifier "TStringList".
#  160|               + " [options] proj.err [...], where options are");
#  161|   
#  162|->     typedef std::vector<string> TStringList;
#  163|   
#  164|       try {

Error: MISRA C++-2008 Rule 2-10-3 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:162: misra_cpp_2008_rule_2_10_3_violation: Identifier "TStringList" is already used to represent a typedef.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:40: typedef_declaration: Declaring a typedef with identifier "TStringList".
#  160|               + " [options] proj.err [...], where options are");
#  161|   
#  162|->     typedef std::vector<string> TStringList;
#  163|   
#  164|       try {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:165: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#  163|   
#  164|       try {
#  165|->         desc.add_options()
#  166|               ("cwelist", po::value<string>(),
#  167|                "(re)assign CWE numbers to defects by the given CSV list")

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:179: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#  177|   
#  178|           po::options_description hidden("");
#  179|->         hidden.add_options()
#  180|               ("input-file", po::value<TStringList>(), "input file");
#  181|           po::positional_options_description p;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:182: misra_c_2012_rule_17_7_violation: The return value of a non-void function "add" is unused.
#  180|               ("input-file", po::value<TStringList>(), "input file");
#  181|           po::positional_options_description p;
#  182|->         p.add("input-file", -1);
#  183|   
#  184|           po::store(po::parse_command_line(argc, argv, desc), vm);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:182: misra_cpp_2008_rule_0_1_7_violation: The return value of function "p.add("input-file", -1)" is not used.
#  180|               ("input-file", po::value<TStringList>(), "input file");
#  181|           po::positional_options_description p;
#  182|->         p.add("input-file", -1);
#  183|   
#  184|           po::store(po::parse_command_line(argc, argv, desc), vm);

Error: MISRA C-2012 Rule 11.3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:184: misra_c_2012_rule_11_3_violation: The object pointer expression "argv" of type "char **" is cast to type "char const * const *".
#  182|           p.add("input-file", -1);
#  183|   
#  184|->         po::store(po::parse_command_line(argc, argv, desc), vm);
#  185|           po::notify(vm);    
#  186|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:188: misra_c_2012_rule_17_7_violation: The return value of a non-void function "add" is unused.
#  186|   
#  187|           po::options_description opts;
#  188|->         opts.add(desc).add(hidden);
#  189|           po::store(po::command_line_parser(argc, argv).
#  190|                   options(opts).positional(p).run(), vm);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:188: misra_cpp_2008_rule_0_1_7_violation: The return value of function "opts.add(desc)->add(hidden)" is not used.
#  186|   
#  187|           po::options_description opts;
#  188|->         opts.add(desc).add(hidden);
#  189|           po::store(po::command_line_parser(argc, argv).
#  190|                   options(opts).positional(p).run(), vm);

Error: MISRA C-2012 Rule 11.3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:189: misra_c_2012_rule_11_3_violation: The object pointer expression "argv" of type "char **" is cast to type "char const * const *".
#  187|           po::options_description opts;
#  188|           opts.add(desc).add(hidden);
#  189|->         po::store(po::command_line_parser(argc, argv).
#  190|                   options(opts).positional(p).run(), vm);
#  191|           po::notify(vm);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:194: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  192|       }
#  193|       catch (po::error &e) {
#  194|->         std::cerr << name << ": error: " << e.what() << "\n\n";
#  195|           desc.print(std::cerr);
#  196|           return 1;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:196: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  194|           std::cerr << name << ": error: " << e.what() << "\n\n";
#  195|           desc.print(std::cerr);
#  196|->         return 1;
#  197|       }
#  198|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:196: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  194|           std::cerr << name << ": error: " << e.what() << "\n\n";
#  195|           desc.print(std::cerr);
#  196|->         return 1;
#  197|       }
#  198|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:199: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("help", std::allocator<char>()))" does not have an essentially boolean type.
#  197|       }
#  198|   
#  199|->     if (vm.count("help")) {
#  200|           desc.print(std::cout);
#  201|           return 0;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:199: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("help", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  197|       }
#  198|   
#  199|->     if (vm.count("help")) {
#  200|           desc.print(std::cout);
#  201|           return 0;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:201: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  199|       if (vm.count("help")) {
#  200|           desc.print(std::cout);
#  201|->         return 0;
#  202|       }
#  203|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:201: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  199|       if (vm.count("help")) {
#  200|           desc.print(std::cout);
#  201|->         return 0;
#  202|       }
#  203|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:204: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("version", std::allocator<char>()))" does not have an essentially boolean type.
#  202|       }
#  203|   
#  204|->     if (vm.count("version")) {
#  205|           std::cout << CS_VERSION << "\n";
#  206|           return 0;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:204: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("version", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  202|       }
#  203|   
#  204|->     if (vm.count("version")) {
#  205|           std::cout << CS_VERSION << "\n";
#  206|           return 0;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:205: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  203|   
#  204|       if (vm.count("version")) {
#  205|->         std::cout << CS_VERSION << "\n";
#  206|           return 0;
#  207|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:206: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  204|       if (vm.count("version")) {
#  205|           std::cout << CS_VERSION << "\n";
#  206|->         return 0;
#  207|       }
#  208|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:206: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  204|       if (vm.count("version")) {
#  205|           std::cout << CS_VERSION << "\n";
#  206|->         return 0;
#  207|       }
#  208|   

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:212: misra_c_2012_rule_10_3_violation: Implicit conversion of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("quiet", std::allocator<char>()))" from essential type "non-essential type" to different or narrower essential type "boolean".
#  210|       const string fnImp = valueOf<string>(vm["implist"]);
#  211|       const string fnIni = valueOf<string>(vm["inifile"]);
#  212|->     const bool silent = vm.count("quiet");
#  213|   
#  214|       const po::variables_map::const_iterator it = vm.find("input-file");

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:212: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "silent" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:221: end_of_scope: Reached end of scope without using value stored in "silent".
#  210|       const string fnImp = valueOf<string>(vm["implist"]);
#  211|       const string fnIni = valueOf<string>(vm["inifile"]);
#  212|->     const bool silent = vm.count("quiet");
#  213|   
#  214|       const po::variables_map::const_iterator it = vm.find("input-file");

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:212: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("quiet", std::allocator<char>()))" is implicitly reduced from "64-bit unsigned long" to "bool".
#  210|       const string fnImp = valueOf<string>(vm["implist"]);
#  211|       const string fnIni = valueOf<string>(vm["inifile"]);
#  212|->     const bool silent = vm.count("quiet");
#  213|   
#  214|       const po::variables_map::const_iterator it = vm.find("input-file");

Error: MISRA C-2012 Rule 15.7 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:216: misra_c_2012_rule_15_7_violation: No non-empty terminating "else" statement.
#  214|       const po::variables_map::const_iterator it = vm.find("input-file");
#  215|       TStringList files;
#  216|->     if (it != vm.end())
#  217|           files = it->second.as<TStringList>();
#  218|       else if (fnIni.empty()) {

Error: MISRA C++-2008 Rule 6-4-2 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:216: misra_cpp_2008_rule_6_4_2_violation: No non-empty terminating "else" statement.
#  214|       const po::variables_map::const_iterator it = vm.find("input-file");
#  215|       TStringList files;
#  216|->     if (it != vm.end())
#  217|           files = it->second.as<TStringList>();
#  218|       else if (fnIni.empty()) {

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:217: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  215|       TStringList files;
#  216|       if (it != vm.end())
#  217|->         files = it->second.as<TStringList>();
#  218|       else if (fnIni.empty()) {
#  219|           // nor list of defects, neither ini-file was given, this looks bogus

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:217: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  215|       TStringList files;
#  216|       if (it != vm.end())
#  217|->         files = it->second.as<TStringList>();
#  218|       else if (fnIni.empty()) {
#  219|           // nor list of defects, neither ini-file was given, this looks bogus

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:217: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  215|       TStringList files;
#  216|       if (it != vm.end())
#  217|->         files = it->second.as<TStringList>();
#  218|       else if (fnIni.empty()) {
#  219|           // nor list of defects, neither ini-file was given, this looks bogus

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:221: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  219|           // nor list of defects, neither ini-file was given, this looks bogus
#  220|           desc.print(std::cerr);
#  221|->         return 1;
#  222|       }
#  223|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:221: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  219|           // nor list of defects, neither ini-file was given, this looks bogus
#  220|           desc.print(std::cerr);
#  221|->         return 1;
#  222|       }
#  223|   

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:224: misra_c_2012_directive_4_12_violation: A call to the function "operator new(72UL)" performs dynamic memory allocation.
#  222|       }
#  223|   
#  224|->     AbstractWriter *jsonWriter = new JsonWriter(std::cout);
#  225|       ImpFlagDecorator *impDec = new ImpFlagDecorator(jsonWriter);
#  226|       CweMapDecorator *cweDec = new CweMapDecorator(impDec, silent);

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:224: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  222|       }
#  223|   
#  224|->     AbstractWriter *jsonWriter = new JsonWriter(std::cout);
#  225|       ImpFlagDecorator *impDec = new ImpFlagDecorator(jsonWriter);
#  226|       CweMapDecorator *cweDec = new CweMapDecorator(impDec, silent);

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:224: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "jsonWriter" clashes with "JsonWriter"
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.hh:27: misra_typographically_ambiguous_orig: (Previously declared symbol "JsonWriter" at line 27 of "../../src/json-writer.hh")
#  222|       }
#  223|   
#  224|->     AbstractWriter *jsonWriter = new JsonWriter(std::cout);
#  225|       ImpFlagDecorator *impDec = new ImpFlagDecorator(jsonWriter);
#  226|       CweMapDecorator *cweDec = new CweMapDecorator(impDec, silent);

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:224: misra_cpp_2008_rule_7_1_1_violation: The variable "jsonWriter" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  222|       }
#  223|   
#  224|->     AbstractWriter *jsonWriter = new JsonWriter(std::cout);
#  225|       ImpFlagDecorator *impDec = new ImpFlagDecorator(jsonWriter);
#  226|       CweMapDecorator *cweDec = new CweMapDecorator(impDec, silent);

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:225: misra_c_2012_directive_4_12_violation: A call to the function "operator new(80UL)" performs dynamic memory allocation.
#  223|   
#  224|       AbstractWriter *jsonWriter = new JsonWriter(std::cout);
#  225|->     ImpFlagDecorator *impDec = new ImpFlagDecorator(jsonWriter);
#  226|       CweMapDecorator *cweDec = new CweMapDecorator(impDec, silent);
#  227|       AbstractWriter *writer = cweDec;

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:225: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  223|   
#  224|       AbstractWriter *jsonWriter = new JsonWriter(std::cout);
#  225|->     ImpFlagDecorator *impDec = new ImpFlagDecorator(jsonWriter);
#  226|       CweMapDecorator *cweDec = new CweMapDecorator(impDec, silent);
#  227|       AbstractWriter *writer = cweDec;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:225: misra_cpp_2008_rule_7_1_1_violation: The variable "impDec" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  223|   
#  224|       AbstractWriter *jsonWriter = new JsonWriter(std::cout);
#  225|->     ImpFlagDecorator *impDec = new ImpFlagDecorator(jsonWriter);
#  226|       CweMapDecorator *cweDec = new CweMapDecorator(impDec, silent);
#  227|       AbstractWriter *writer = cweDec;

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:226: misra_c_2012_directive_4_12_violation: A call to the function "operator new(80UL)" performs dynamic memory allocation.
#  224|       AbstractWriter *jsonWriter = new JsonWriter(std::cout);
#  225|       ImpFlagDecorator *impDec = new ImpFlagDecorator(jsonWriter);
#  226|->     CweMapDecorator *cweDec = new CweMapDecorator(impDec, silent);
#  227|       AbstractWriter *writer = cweDec;
#  228|       if (vm.count("reapply-parsing-rules"))

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:226: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  224|       AbstractWriter *jsonWriter = new JsonWriter(std::cout);
#  225|       ImpFlagDecorator *impDec = new ImpFlagDecorator(jsonWriter);
#  226|->     CweMapDecorator *cweDec = new CweMapDecorator(impDec, silent);
#  227|       AbstractWriter *writer = cweDec;
#  228|       if (vm.count("reapply-parsing-rules"))

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:226: misra_cpp_2008_rule_7_1_1_violation: The variable "cweDec" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  224|       AbstractWriter *jsonWriter = new JsonWriter(std::cout);
#  225|       ImpFlagDecorator *impDec = new ImpFlagDecorator(jsonWriter);
#  226|->     CweMapDecorator *cweDec = new CweMapDecorator(impDec, silent);
#  227|       AbstractWriter *writer = cweDec;
#  228|       if (vm.count("reapply-parsing-rules"))

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:228: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("reapply-parsing-rules", std::allocator<char>()))" does not have an essentially boolean type.
#  226|       CweMapDecorator *cweDec = new CweMapDecorator(impDec, silent);
#  227|       AbstractWriter *writer = cweDec;
#  228|->     if (vm.count("reapply-parsing-rules"))
#  229|           writer = new ParsingRulesDecorator(writer);
#  230|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:228: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("reapply-parsing-rules", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  226|       CweMapDecorator *cweDec = new CweMapDecorator(impDec, silent);
#  227|       AbstractWriter *writer = cweDec;
#  228|->     if (vm.count("reapply-parsing-rules"))
#  229|           writer = new ParsingRulesDecorator(writer);
#  230|   

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:229: misra_c_2012_directive_4_12_violation: A call to the function "operator new(80UL)" performs dynamic memory allocation.
#  227|       AbstractWriter *writer = cweDec;
#  228|       if (vm.count("reapply-parsing-rules"))
#  229|->         writer = new ParsingRulesDecorator(writer);
#  230|   
#  231|       bool hasError = false;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:229: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  227|       AbstractWriter *writer = cweDec;
#  228|       if (vm.count("reapply-parsing-rules"))
#  229|->         writer = new ParsingRulesDecorator(writer);
#  230|   
#  231|       bool hasError = false;

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:229: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  227|       AbstractWriter *writer = cweDec;
#  228|       if (vm.count("reapply-parsing-rules"))
#  229|->         writer = new ParsingRulesDecorator(writer);
#  230|   
#  231|       bool hasError = false;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:229: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  227|       AbstractWriter *writer = cweDec;
#  228|       if (vm.count("reapply-parsing-rules"))
#  229|->         writer = new ParsingRulesDecorator(writer);
#  230|   
#  231|       bool hasError = false;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:238: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  236|               InStream strCwe(fnCwe);
#  237|               if (!cweDec->cweMap().parse(strCwe))
#  238|->                 hasError = true;
#  239|           }
#  240|           catch (const InFileException &e) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:238: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  236|               InStream strCwe(fnCwe);
#  237|               if (!cweDec->cweMap().parse(strCwe))
#  238|->                 hasError = true;
#  239|           }
#  240|           catch (const InFileException &e) {

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:253: misra_c_2012_rule_15_6_violation: The body of the "while" loop is not a compound statement.
#  251|               Defect defImp;
#  252|               while (pImp.getNext(&defImp))
#  253|->                 impDec->hashImpDefect(defImp);
#  254|           }
#  255|           catch (const InFileException &e) {

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:253: misra_cpp_2008_rule_6_3_1_violation: The body of the "while" loop is not a compound statement.
#  251|               Defect defImp;
#  252|               while (pImp.getNext(&defImp))
#  253|->                 impDec->hashImpDefect(defImp);
#  254|           }
#  255|           catch (const InFileException &e) {

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:261: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  259|       }
#  260|   
#  261|->     const unsigned filesCnt = files.size();
#  262|       if (!filesCnt && !fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  263|           hasError = true;

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:261: misra_c_2012_rule_10_3_violation: Implicit conversion of "files.size()" from essential type "non-essential type" to different or narrower essential type "unsigned 32-bit int".
#  259|       }
#  260|   
#  261|->     const unsigned filesCnt = files.size();
#  262|       if (!filesCnt && !fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  263|           hasError = true;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:261: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  259|       }
#  260|   
#  261|->     const unsigned filesCnt = files.size();
#  262|       if (!filesCnt && !fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  263|           hasError = true;

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:261: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "files.size()" is implicitly reduced from "64-bit unsigned long" to "32-bit unsigned int".
#  259|       }
#  260|   
#  261|->     const unsigned filesCnt = files.size();
#  262|       if (!filesCnt && !fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  263|           hasError = true;

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:262: misra_c_2012_rule_10_1_violation: The expression "filesCnt" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  260|   
#  261|       const unsigned filesCnt = files.size();
#  262|->     if (!filesCnt && !fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  263|           hasError = true;
#  264|   

Error: MISRA C-2012 Rule 13.5 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:262: misra_c_2012_rule_13_5_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "loadPropsFromIniFile(writer, fnIni)".
#  260|   
#  261|       const unsigned filesCnt = files.size();
#  262|->     if (!filesCnt && !fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  263|           hasError = true;
#  264|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:262: misra_cpp_2008_rule_5_0_13_violation: The type of "filesCnt" is not bool in the condition of "if-statement".
#  260|   
#  261|       const unsigned filesCnt = files.size();
#  262|->     if (!filesCnt && !fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  263|           hasError = true;
#  264|   

Error: MISRA C++-2008 Rule 5-14-1 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:262: misra_cpp_2008_rule_5_14_1_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "loadPropsFromIniFile(writer, fnIni)".
#  260|   
#  261|       const unsigned filesCnt = files.size();
#  262|->     if (!filesCnt && !fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  263|           hasError = true;
#  264|   

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:262: misra_cpp_2008_rule_5_2_1_violation: Operand "!filesCnt" is not a postfix expression.
#  260|   
#  261|       const unsigned filesCnt = files.size();
#  262|->     if (!filesCnt && !fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  263|           hasError = true;
#  264|   

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:262: misra_cpp_2008_rule_5_2_1_violation: Operand "!fnIni.empty()" is not a postfix expression.
#  260|   
#  261|       const unsigned filesCnt = files.size();
#  262|->     if (!filesCnt && !fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  263|           hasError = true;
#  264|   

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:262: misra_cpp_2008_rule_5_2_1_violation: Operand "!loadPropsFromIniFile(writer, fnIni)" is not a postfix expression.
#  260|   
#  261|       const unsigned filesCnt = files.size();
#  262|->     if (!filesCnt && !fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  263|           hasError = true;
#  264|   

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:262: misra_cpp_2008_rule_5_3_1_violation: Operand "filesCnt" of the operator "!" is not bool type.
#  260|   
#  261|       const unsigned filesCnt = files.size();
#  262|->     if (!filesCnt && !fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  263|           hasError = true;
#  264|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:263: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  261|       const unsigned filesCnt = files.size();
#  262|       if (!filesCnt && !fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  263|->         hasError = true;
#  264|   
#  265|       for (unsigned i = 0U; i < filesCnt; ++i) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:263: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  261|       const unsigned filesCnt = files.size();
#  262|       if (!filesCnt && !fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  263|->         hasError = true;
#  264|   
#  265|       for (unsigned i = 0U; i < filesCnt; ++i) {

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:265: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  263|           hasError = true;
#  264|   
#  265|->     for (unsigned i = 0U; i < filesCnt; ++i) {
#  266|           const string &fnErr = files[i];
#  267|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:265: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  263|           hasError = true;
#  264|   
#  265|->     for (unsigned i = 0U; i < filesCnt; ++i) {
#  266|           const string &fnErr = files[i];
#  267|   

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:273: misra_c_2012_rule_10_1_violation: The expression "i" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  271|               Parser pErr(strErr);
#  272|   
#  273|->             if (!i) {
#  274|                   // try to load scan properties from the first input file
#  275|                   writer->setScanProps(pErr.getScanProps());

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:273: misra_cpp_2008_rule_5_0_13_violation: The type of "i" is not bool in the condition of "if-statement".
#  271|               Parser pErr(strErr);
#  272|   
#  273|->             if (!i) {
#  274|                   // try to load scan properties from the first input file
#  275|                   writer->setScanProps(pErr.getScanProps());

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:273: misra_cpp_2008_rule_5_3_1_violation: Operand "i" of the operator "!" is not bool type.
#  271|               Parser pErr(strErr);
#  272|   
#  273|->             if (!i) {
#  274|                   // try to load scan properties from the first input file
#  275|                   writer->setScanProps(pErr.getScanProps());

Error: MISRA C-2012 Rule 13.5 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:278: misra_c_2012_rule_13_5_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "loadPropsFromIniFile(writer, fnIni)".
#  276|   
#  277|                   // load .ini if available
#  278|->                 if (!fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  279|                       hasError = true;
#  280|               }

Error: MISRA C++-2008 Rule 5-14-1 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:278: misra_cpp_2008_rule_5_14_1_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "loadPropsFromIniFile(writer, fnIni)".
#  276|   
#  277|                   // load .ini if available
#  278|->                 if (!fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  279|                       hasError = true;
#  280|               }

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:278: misra_cpp_2008_rule_5_2_1_violation: Operand "!fnIni.empty()" is not a postfix expression.
#  276|   
#  277|                   // load .ini if available
#  278|->                 if (!fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  279|                       hasError = true;
#  280|               }

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:278: misra_cpp_2008_rule_5_2_1_violation: Operand "!loadPropsFromIniFile(writer, fnIni)" is not a postfix expression.
#  276|   
#  277|                   // load .ini if available
#  278|->                 if (!fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  279|                       hasError = true;
#  280|               }

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:279: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  277|                   // load .ini if available
#  278|                   if (!fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  279|->                     hasError = true;
#  280|               }
#  281|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:279: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  277|                   // load .ini if available
#  278|                   if (!fnIni.empty() && !loadPropsFromIniFile(*writer, fnIni))
#  279|->                     hasError = true;
#  280|               }
#  281|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:283: misra_c_2012_rule_17_7_violation: The return value of a non-void function "handleFile" is unused.
#  281|   
#  282|               // process a single input file
#  283|->             writer->handleFile(pErr);
#  284|   
#  285|               hasError |= pErr.hasError();

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:283: misra_cpp_2008_rule_0_1_7_violation: The return value of function "writer->handleFile(pErr)" is not used.
#  281|   
#  282|               // process a single input file
#  283|->             writer->handleFile(pErr);
#  284|   
#  285|               hasError |= pErr.hasError();

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:285: misra_c_2012_rule_10_1_violation: The expression "hasError" of essential type boolean is used as an operand to "|" where it is interpreted as a numerical value.
#  283|               writer->handleFile(pErr);
#  284|   
#  285|->             hasError |= pErr.hasError();
#  286|           }
#  287|           catch (const InFileException &e) {

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:285: misra_c_2012_rule_10_1_violation: The expression "pErr.hasError()" of essential type boolean is used as an operand to "|" where it is interpreted as a numerical value.
#  283|               writer->handleFile(pErr);
#  284|   
#  285|->             hasError |= pErr.hasError();
#  286|           }
#  287|           catch (const InFileException &e) {

Error: MISRA C++-2008 Rule 4-5-1 (CWE-480):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:285: misra_cpp_2008_rule_4_5_1_violation: "hasError" is used as an operand to the operator "|".
#  283|               writer->handleFile(pErr);
#  284|   
#  285|->             hasError |= pErr.hasError();
#  286|           }
#  287|           catch (const InFileException &e) {

Error: MISRA C++-2008 Rule 4-5-1 (CWE-480):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:285: misra_cpp_2008_rule_4_5_1_violation: "pErr.hasError()" is used as an operand to the operator "|".
#  283|               writer->handleFile(pErr);
#  284|   
#  285|->             hasError |= pErr.hasError();
#  286|           }
#  287|           catch (const InFileException &e) {

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:295: misra_c_2012_rule_10_3_violation: Implicit conversion of "hasError" from essential type "boolean" to different or narrower essential type "signed 32-bit int".
#  293|       writer->flush();
#  294|       delete writer;
#  295|->     return hasError;
#  296|   }

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:295: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "hasError" with underlying type "bool" is implicitly converted to a different underlying type "32-bit signed int".
#  293|       writer->flush();
#  294|       delete writer;
#  295|->     return hasError;
#  296|   }

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011-2013 Red Hat, Inc.
#    3|    *

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:43: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   41|           }
#   42|   
#   43|->         int lineNo() const {
#   44|               return lineNo_;
#   45|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:43: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   41|           }
#   42|   
#   43|->         int lineNo() const {
#   44|               return lineNo_;
#   45|           }

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:43: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   41|           }
#   42|   
#   43|->         int lineNo() const {
#   44|               return lineNo_;
#   45|           }

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:51: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   49|       private:
#   50|           std::istream               &input_;
#   51|->         int                         lineNo_ = 0;
#   52|   
#   53|           const RE reTrailLoc_ = RE("^(path:|/).*(:[0-9]+|<.*>):$");

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:51: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "lineNo_" clashes with "lineNo"
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:43: misra_typographically_ambiguous_orig: (Previously declared symbol "lineNo" at line 43)
#   49|       private:
#   50|           std::istream               &input_;
#   51|->         int                         lineNo_ = 0;
#   52|   
#   53|           const RE reTrailLoc_ = RE("^(path:|/).*(:[0-9]+|<.*>):$");

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:51: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   49|       private:
#   50|           std::istream               &input_;
#   51|->         int                         lineNo_ = 0;
#   52|   
#   53|           const RE reTrailLoc_ = RE("^(path:|/).*(:[0-9]+|<.*>):$");

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:59: misra_cpp_2008_rule_7_1_1_violation: The variable "pDst" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   57|   };
#   58|   
#   59|-> bool LineReader::getLinePriv(std::string *pDst)
#   60|   {
#   61|       if (!std::getline(input_, *pDst))

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:62: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   60|   {
#   61|       if (!std::getline(input_, *pDst))
#   62|->         return false;
#   63|   
#   64|       lineNo_++;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:62: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   60|   {
#   61|       if (!std::getline(input_, *pDst))
#   62|->         return false;
#   63|   
#   64|       lineNo_++;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:62: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   60|   {
#   61|       if (!std::getline(input_, *pDst))
#   62|->         return false;
#   63|   
#   64|       lineNo_++;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:62: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   60|   {
#   61|       if (!std::getline(input_, *pDst))
#   62|->         return false;
#   63|   
#   64|       lineNo_++;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:68: misra_cpp_2008_rule_7_1_1_violation: The variable "pDst" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   66|   }
#   67|   
#   68|-> bool LineReader::getLine(std::string *pDst)
#   69|   {
#   70|       std::string line;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:72: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   70|       std::string line;
#   71|       if (!this->getLinePriv(&line))
#   72|->         return false;
#   73|   
#   74|       std::string nextLine;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:72: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   70|       std::string line;
#   71|       if (!this->getLinePriv(&line))
#   72|->         return false;
#   73|   
#   74|       std::string nextLine;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:72: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   70|       std::string line;
#   71|       if (!this->getLinePriv(&line))
#   72|->         return false;
#   73|   
#   74|       std::string nextLine;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:72: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   70|       std::string line;
#   71|       if (!this->getLinePriv(&line))
#   72|->         return false;
#   73|   
#   74|       std::string nextLine;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:79: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#   77|       {
#   78|           // merge the current line with the next line
#   79|->         nextLine.insert(/* pos */ 0U, " ");
#   80|           line += nextLine;
#   81|       }

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:79: misra_cpp_2008_rule_0_1_7_violation: The return value of function "nextLine.insert(0UL, " ")" is not used.
#   77|       {
#   78|           // merge the current line with the next line
#   79|->         nextLine.insert(/* pos */ 0U, " ");
#   80|           line += nextLine;
#   81|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:80: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#   78|           // merge the current line with the next line
#   79|           nextLine.insert(/* pos */ 0U, " ");
#   80|->         line += nextLine;
#   81|       }
#   82|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:84: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   82|   
#   83|       // remove the "path:" prefix if matched
#   84|->     *pDst = boost::regex_replace(line, rePathPref_, "");
#   85|   
#   86|       return true;

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:98: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   96|   };
#   97|   
#   98|-> std::ostream& operator<<(std::ostream &str, EToken code)
#   99|   {
#  100|       switch (code) {

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:98: misra_c_2012_rule_8_7_violation: Function "operator <<" has external linkage but is only used in one translation unit.
#   96|   };
#   97|   
#   98|-> std::ostream& operator<<(std::ostream &str, EToken code)
#   99|   {
#  100|       switch (code) {

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:98: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   96|   };
#   97|   
#   98|-> std::ostream& operator<<(std::ostream &str, EToken code)
#   99|   {
#  100|       switch (code) {

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:98: misra_cpp_2008_rule_7_1_1_violation: The variable "code" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   96|   };
#   97|   
#   98|-> std::ostream& operator<<(std::ostream &str, EToken code)
#   99|   {
#  100|       switch (code) {

Error: MISRA C-2012 Rule 16.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:100: missing_default: No default case found for the switch statement "switch (code)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:100: misra_c_2012_rule_16_1_violation: The switch statement is not well formed.
#   98|   std::ostream& operator<<(std::ostream &str, EToken code)
#   99|   {
#  100|->     switch (code) {
#  101|           case T_NULL:    str << "T_NULL";    break;
#  102|           case T_EMPTY:   str << "T_EMPTY";   break;

Error: MISRA C-2012 Rule 16.4 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:100: misra_c_2012_rule_16_4_violation: The switch statement "switch (code)"does not have a non-empty default clause.
#   98|   std::ostream& operator<<(std::ostream &str, EToken code)
#   99|   {
#  100|->     switch (code) {
#  101|           case T_NULL:    str << "T_NULL";    break;
#  102|           case T_EMPTY:   str << "T_EMPTY";   break;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:101: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   99|   {
#  100|       switch (code) {
#  101|->         case T_NULL:    str << "T_NULL";    break;
#  102|           case T_EMPTY:   str << "T_EMPTY";   break;
#  103|           case T_COMMENT: str << "T_COMMENT"; break;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:102: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  100|       switch (code) {
#  101|           case T_NULL:    str << "T_NULL";    break;
#  102|->         case T_EMPTY:   str << "T_EMPTY";   break;
#  103|           case T_COMMENT: str << "T_COMMENT"; break;
#  104|           case T_UNKNOWN: str << "T_UNKNOWN"; break;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:103: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  101|           case T_NULL:    str << "T_NULL";    break;
#  102|           case T_EMPTY:   str << "T_EMPTY";   break;
#  103|->         case T_COMMENT: str << "T_COMMENT"; break;
#  104|           case T_UNKNOWN: str << "T_UNKNOWN"; break;
#  105|           case T_CHECKER: str << "T_CHECKER"; break;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:104: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  102|           case T_EMPTY:   str << "T_EMPTY";   break;
#  103|           case T_COMMENT: str << "T_COMMENT"; break;
#  104|->         case T_UNKNOWN: str << "T_UNKNOWN"; break;
#  105|           case T_CHECKER: str << "T_CHECKER"; break;
#  106|           case T_EVENT:   str << "T_EVENT";   break;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:105: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  103|           case T_COMMENT: str << "T_COMMENT"; break;
#  104|           case T_UNKNOWN: str << "T_UNKNOWN"; break;
#  105|->         case T_CHECKER: str << "T_CHECKER"; break;
#  106|           case T_EVENT:   str << "T_EVENT";   break;
#  107|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:106: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  104|           case T_UNKNOWN: str << "T_UNKNOWN"; break;
#  105|           case T_CHECKER: str << "T_CHECKER"; break;
#  106|->         case T_EVENT:   str << "T_EVENT";   break;
#  107|       }
#  108|   

Error: MISRA C++-2008 Rule 7-5-3 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:109: misra_cpp_2008_rule_7_5_3_violation: Function "CovParserImpl::operator <<(std::ostream &, CovParserImpl::EToken)" shall not return a reference or a pointer to "str", which is a parameter of the function and is passed by reference.
#  107|       }
#  108|   
#  109|->     return str;
#  110|   }
#  111|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:120: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  118|           }
#  119|   
#  120|->         bool hasError() const {
#  121|               return hasError_;
#  122|           }

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:124: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  122|           }
#  123|   
#  124|->         int lineNo() const {
#  125|               return lineReader_.lineNo();
#  126|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:124: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  122|           }
#  123|   
#  124|->         int lineNo() const {
#  125|               return lineReader_.lineNo();
#  126|           }

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:124: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  122|           }
#  123|   
#  124|->         int lineNo() const {
#  125|               return lineReader_.lineNo();
#  126|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:128: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  126|           }
#  127|   
#  128|->         const Defect& def() const {
#  129|               return def_;
#  130|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:132: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  130|           }
#  131|   
#  132|->         const DefEvent& evt() const {
#  133|               return evt_;
#  134|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:136: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  134|           }
#  135|   
#  136|->         EToken readNext();
#  137|   
#  138|       private:

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:139: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "lineReader_" clashes with "LineReader"
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:36: misra_typographically_ambiguous_orig: (Previously declared symbol "LineReader" at line 36)
#  137|   
#  138|       private:
#  139|->         LineReader                  lineReader_;
#  140|           bool                        hasError_;
#  141|           Defect                      def_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:140: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "hasError_" clashes with "hasError"
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:120: misra_typographically_ambiguous_orig: (Previously declared symbol "hasError" at line 120)
#  138|       private:
#  139|           LineReader                  lineReader_;
#  140|->         bool                        hasError_;
#  141|           Defect                      def_;
#  142|           DefEvent                    evt_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:141: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "def_" clashes with "def"
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:128: misra_typographically_ambiguous_orig: (Previously declared symbol "def" at line 128)
#  139|           LineReader                  lineReader_;
#  140|           bool                        hasError_;
#  141|->         Defect                      def_;
#  142|           DefEvent                    evt_;
#  143|   

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:142: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "evt_" clashes with "evt"
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:132: misra_typographically_ambiguous_orig: (Previously declared symbol "evt" at line 132)
#  140|           bool                        hasError_;
#  141|           Defect                      def_;
#  142|->         DefEvent                    evt_;
#  143|   
#  144|           const RE reEmpty_ =

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:153: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "reEvent_" clashes with "RE_EVENT"
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:29: misra_typographically_ambiguous_orig: (Previously declared symbol "RE_EVENT" at line 29 of "../../src/parser-common.hh")
#  151|               RE("^Error: *([A-Za-z][0-9A-Za-z_.]+)( *\\([^)]+\\))? *:$");
#  152|   
#  153|->         const RE reEvent_ =
#  154|               RE(/* location */ "^([^:]+)(?::([0-9]+|<unknown>))?(?::([0-9]+))?"
#  155|                  /* evt/mesg */ ": (" RE_EVENT "): (.*)$");

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:158: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  156|   };
#  157|   
#  158|-> EToken ErrFileLexer::readNext()
#  159|   {
#  160|       std::string line;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:162: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  160|       std::string line;
#  161|       if (!lineReader_.getLine(&line))
#  162|->         return T_NULL;
#  163|   
#  164|       if (boost::regex_match(line, reEmpty_))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:162: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  160|       std::string line;
#  161|       if (!lineReader_.getLine(&line))
#  162|->         return T_NULL;
#  163|   
#  164|       if (boost::regex_match(line, reEmpty_))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:162: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  160|       std::string line;
#  161|       if (!lineReader_.getLine(&line))
#  162|->         return T_NULL;
#  163|   
#  164|       if (boost::regex_match(line, reEmpty_))

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:162: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  160|       std::string line;
#  161|       if (!lineReader_.getLine(&line))
#  162|->         return T_NULL;
#  163|   
#  164|       if (boost::regex_match(line, reEmpty_))

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:165: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  163|   
#  164|       if (boost::regex_match(line, reEmpty_))
#  165|->         return T_EMPTY;
#  166|   
#  167|       boost::smatch sm;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:165: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  163|   
#  164|       if (boost::regex_match(line, reEmpty_))
#  165|->         return T_EMPTY;
#  166|   
#  167|       boost::smatch sm;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:165: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  163|   
#  164|       if (boost::regex_match(line, reEmpty_))
#  165|->         return T_EMPTY;
#  166|   
#  167|       boost::smatch sm;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:165: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  163|   
#  164|       if (boost::regex_match(line, reEmpty_))
#  165|->         return T_EMPTY;
#  166|   
#  167|       boost::smatch sm;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:170: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  168|   
#  169|       if (boost::regex_match(line, sm, reChecker_)) {
#  170|->         def_ = Defect(sm[/* checker */ 1]);
#  171|           def_.annotation = sm[/* annotation */ 2];
#  172|           return T_CHECKER;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:171: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  169|       if (boost::regex_match(line, sm, reChecker_)) {
#  170|           def_ = Defect(sm[/* checker */ 1]);
#  171|->         def_.annotation = sm[/* annotation */ 2];
#  172|           return T_CHECKER;
#  173|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:172: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  170|           def_ = Defect(sm[/* checker */ 1]);
#  171|           def_.annotation = sm[/* annotation */ 2];
#  172|->         return T_CHECKER;
#  173|       }
#  174|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:172: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  170|           def_ = Defect(sm[/* checker */ 1]);
#  171|           def_.annotation = sm[/* annotation */ 2];
#  172|->         return T_CHECKER;
#  173|       }
#  174|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:176: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  174|   
#  175|       if (boost::regex_match(line, sm, reComment_)) {
#  176|->         evt_ = DefEvent();
#  177|           evt_.event  = sm[/* #     */ 1];
#  178|           evt_.msg    = sm[/* msg   */ 2];

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:177: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  175|       if (boost::regex_match(line, sm, reComment_)) {
#  176|           evt_ = DefEvent();
#  177|->         evt_.event  = sm[/* #     */ 1];
#  178|           evt_.msg    = sm[/* msg   */ 2];
#  179|           return T_COMMENT;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:178: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  176|           evt_ = DefEvent();
#  177|           evt_.event  = sm[/* #     */ 1];
#  178|->         evt_.msg    = sm[/* msg   */ 2];
#  179|           return T_COMMENT;
#  180|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:179: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  177|           evt_.event  = sm[/* #     */ 1];
#  178|           evt_.msg    = sm[/* msg   */ 2];
#  179|->         return T_COMMENT;
#  180|       }
#  181|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:179: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  177|           evt_.event  = sm[/* #     */ 1];
#  178|           evt_.msg    = sm[/* msg   */ 2];
#  179|->         return T_COMMENT;
#  180|       }
#  181|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:183: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  181|   
#  182|       if (!boost::regex_match(line, sm, reEvent_)) {
#  183|->         evt_.msg = line;
#  184|           return T_UNKNOWN;
#  185|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:184: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  182|       if (!boost::regex_match(line, sm, reEvent_)) {
#  183|           evt_.msg = line;
#  184|->         return T_UNKNOWN;
#  185|       }
#  186|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:184: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  182|       if (!boost::regex_match(line, sm, reEvent_)) {
#  183|           evt_.msg = line;
#  184|->         return T_UNKNOWN;
#  185|       }
#  186|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:188: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  186|   
#  187|       // read file name, event, and msg
#  188|->     evt_.fileName   = sm[/* file  */ 1];
#  189|       evt_.event      = sm[/* event */ 4];
#  190|       evt_.msg        = sm[/* msg   */ 5];

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:189: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  187|       // read file name, event, and msg
#  188|       evt_.fileName   = sm[/* file  */ 1];
#  189|->     evt_.event      = sm[/* event */ 4];
#  190|       evt_.msg        = sm[/* msg   */ 5];
#  191|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:190: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  188|       evt_.fileName   = sm[/* file  */ 1];
#  189|       evt_.event      = sm[/* event */ 4];
#  190|->     evt_.msg        = sm[/* msg   */ 5];
#  191|   
#  192|       // parse line number

Error: MISRA C++-2008 Rule 7-3-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:203: misra_cpp_2008_rule_7_3_4_violation: Using a using-directive for namespace "CovParserImpl".
#  201|   } // namespace CovParserImpl
#  202|   
#  203|-> using namespace CovParserImpl;
#  204|   
#  205|   struct KeyEventDigger::Private {

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:208: misra_cpp_2008_rule_11_0_1_violation: Member "hMap" is not private but "KeyEventDigger::Private" is a non-POD type.
#  206|       typedef std::set<std::string>                   TSet;
#  207|       typedef std::map<std::string, TSet>             TMap;
#  208|->     TMap hMap;
#  209|       TSet denyList, traceEvts;
#  210|       const RE reEvtSuffix = RE("^(.*)\\[[^ \\]]+\\]$");

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:209: misra_cpp_2008_rule_11_0_1_violation: Member "denyList" is not private but "KeyEventDigger::Private" is a non-POD type.
#  207|       typedef std::map<std::string, TSet>             TMap;
#  208|       TMap hMap;
#  209|->     TSet denyList, traceEvts;
#  210|       const RE reEvtSuffix = RE("^(.*)\\[[^ \\]]+\\]$");
#  211|       const std::string stripEvtName(const std::string &) const;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:209: misra_cpp_2008_rule_11_0_1_violation: Member "traceEvts" is not private but "KeyEventDigger::Private" is a non-POD type.
#  207|       typedef std::map<std::string, TSet>             TMap;
#  208|       TMap hMap;
#  209|->     TSet denyList, traceEvts;
#  210|       const RE reEvtSuffix = RE("^(.*)\\[[^ \\]]+\\]$");
#  211|       const std::string stripEvtName(const std::string &) const;

Error: MISRA C++-2008 Rule 8-0-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:209: misra_cpp_2008_rule_8_0_1_violation: Declarator list has more than one declarator.
#  207|       typedef std::map<std::string, TSet>             TMap;
#  208|       TMap hMap;
#  209|->     TSet denyList, traceEvts;
#  210|       const RE reEvtSuffix = RE("^(.*)\\[[^ \\]]+\\]$");
#  211|       const std::string stripEvtName(const std::string &) const;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:210: misra_cpp_2008_rule_11_0_1_violation: Member "reEvtSuffix" is not private but "KeyEventDigger::Private" is a non-POD type.
#  208|       TMap hMap;
#  209|       TSet denyList, traceEvts;
#  210|->     const RE reEvtSuffix = RE("^(.*)\\[[^ \\]]+\\]$");
#  211|       const std::string stripEvtName(const std::string &) const;
#  212|   };

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:211: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#  209|       TSet denyList, traceEvts;
#  210|       const RE reEvtSuffix = RE("^(.*)\\[[^ \\]]+\\]$");
#  211|->     const std::string stripEvtName(const std::string &) const;
#  212|   };
#  213|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:220: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  218|       boost::smatch sm;
#  219|       if (boost::regex_match(evt, sm, this->reEvtSuffix))
#  220|->         return sm[/* bare evt */ 1];
#  221|   
#  222|       // no match

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:220: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  218|       boost::smatch sm;
#  219|       if (boost::regex_match(evt, sm, this->reEvtSuffix))
#  220|->         return sm[/* bare evt */ 1];
#  221|   
#  222|       // no match

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:220: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  218|       boost::smatch sm;
#  219|       if (boost::regex_match(evt, sm, this->reEvtSuffix))
#  220|->         return sm[/* bare evt */ 1];
#  221|   
#  222|       // no match

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:220: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  218|       boost::smatch sm;
#  219|       if (boost::regex_match(evt, sm, this->reEvtSuffix))
#  220|->         return sm[/* bare evt */ 1];
#  221|   
#  222|       // no match

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:226: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  224|   }
#  225|   
#  226|-> KeyEventDigger::KeyEventDigger():
#  227|       d(new Private)
#  228|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:227: misra_c_2012_directive_4_12_violation: A call to the function "operator new(160UL)" performs dynamic memory allocation.
#  225|   
#  226|   KeyEventDigger::KeyEventDigger():
#  227|->     d(new Private)
#  228|   {
#  229|       // register checker-specific key events

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:227: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  225|   
#  226|   KeyEventDigger::KeyEventDigger():
#  227|->     d(new Private)
#  228|   {
#  229|       // register checker-specific key events

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:230: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  228|   {
#  229|       // register checker-specific key events
#  230|->     d->hMap["BAD_CHECK_OF_WAIT_COND"].insert("wait_cond_improperly_checked");
#  231|       d->hMap["BAD_LOCK_OBJECT"]      .insert("boxed_lock");
#  232|       d->hMap["BAD_LOCK_OBJECT"]      .insert("lock_on_assigned_field");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:230: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("BAD_CHECK_OF_WAIT_COND", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("wait_cond_improperly_checked", std::allocator<char>()))" is not used.
#  228|   {
#  229|       // register checker-specific key events
#  230|->     d->hMap["BAD_CHECK_OF_WAIT_COND"].insert("wait_cond_improperly_checked");
#  231|       d->hMap["BAD_LOCK_OBJECT"]      .insert("boxed_lock");
#  232|       d->hMap["BAD_LOCK_OBJECT"]      .insert("lock_on_assigned_field");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:231: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  229|       // register checker-specific key events
#  230|       d->hMap["BAD_CHECK_OF_WAIT_COND"].insert("wait_cond_improperly_checked");
#  231|->     d->hMap["BAD_LOCK_OBJECT"]      .insert("boxed_lock");
#  232|       d->hMap["BAD_LOCK_OBJECT"]      .insert("lock_on_assigned_field");
#  233|       d->hMap["BAD_LOCK_OBJECT"]      .insert("single_thread_lock");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:231: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("BAD_LOCK_OBJECT", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("boxed_lock", std::allocator<char>()))" is not used.
#  229|       // register checker-specific key events
#  230|       d->hMap["BAD_CHECK_OF_WAIT_COND"].insert("wait_cond_improperly_checked");
#  231|->     d->hMap["BAD_LOCK_OBJECT"]      .insert("boxed_lock");
#  232|       d->hMap["BAD_LOCK_OBJECT"]      .insert("lock_on_assigned_field");
#  233|       d->hMap["BAD_LOCK_OBJECT"]      .insert("single_thread_lock");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:232: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  230|       d->hMap["BAD_CHECK_OF_WAIT_COND"].insert("wait_cond_improperly_checked");
#  231|       d->hMap["BAD_LOCK_OBJECT"]      .insert("boxed_lock");
#  232|->     d->hMap["BAD_LOCK_OBJECT"]      .insert("lock_on_assigned_field");
#  233|       d->hMap["BAD_LOCK_OBJECT"]      .insert("single_thread_lock");
#  234|       d->hMap["CALL_SUPER"]           .insert("missing_super_call");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:232: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("BAD_LOCK_OBJECT", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("lock_on_assigned_field", std::allocator<char>()))" is not used.
#  230|       d->hMap["BAD_CHECK_OF_WAIT_COND"].insert("wait_cond_improperly_checked");
#  231|       d->hMap["BAD_LOCK_OBJECT"]      .insert("boxed_lock");
#  232|->     d->hMap["BAD_LOCK_OBJECT"]      .insert("lock_on_assigned_field");
#  233|       d->hMap["BAD_LOCK_OBJECT"]      .insert("single_thread_lock");
#  234|       d->hMap["CALL_SUPER"]           .insert("missing_super_call");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:233: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  231|       d->hMap["BAD_LOCK_OBJECT"]      .insert("boxed_lock");
#  232|       d->hMap["BAD_LOCK_OBJECT"]      .insert("lock_on_assigned_field");
#  233|->     d->hMap["BAD_LOCK_OBJECT"]      .insert("single_thread_lock");
#  234|       d->hMap["CALL_SUPER"]           .insert("missing_super_call");
#  235|       d->hMap["CHECKED_RETURN"]       .insert("check_return");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:233: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("BAD_LOCK_OBJECT", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("single_thread_lock", std::allocator<char>()))" is not used.
#  231|       d->hMap["BAD_LOCK_OBJECT"]      .insert("boxed_lock");
#  232|       d->hMap["BAD_LOCK_OBJECT"]      .insert("lock_on_assigned_field");
#  233|->     d->hMap["BAD_LOCK_OBJECT"]      .insert("single_thread_lock");
#  234|       d->hMap["CALL_SUPER"]           .insert("missing_super_call");
#  235|       d->hMap["CHECKED_RETURN"]       .insert("check_return");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:234: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  232|       d->hMap["BAD_LOCK_OBJECT"]      .insert("lock_on_assigned_field");
#  233|       d->hMap["BAD_LOCK_OBJECT"]      .insert("single_thread_lock");
#  234|->     d->hMap["CALL_SUPER"]           .insert("missing_super_call");
#  235|       d->hMap["CHECKED_RETURN"]       .insert("check_return");
#  236|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("extra_high_bits");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:234: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("CALL_SUPER", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("missing_super_call", std::allocator<char>()))" is not used.
#  232|       d->hMap["BAD_LOCK_OBJECT"]      .insert("lock_on_assigned_field");
#  233|       d->hMap["BAD_LOCK_OBJECT"]      .insert("single_thread_lock");
#  234|->     d->hMap["CALL_SUPER"]           .insert("missing_super_call");
#  235|       d->hMap["CHECKED_RETURN"]       .insert("check_return");
#  236|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("extra_high_bits");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:235: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  233|       d->hMap["BAD_LOCK_OBJECT"]      .insert("single_thread_lock");
#  234|       d->hMap["CALL_SUPER"]           .insert("missing_super_call");
#  235|->     d->hMap["CHECKED_RETURN"]       .insert("check_return");
#  236|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("extra_high_bits");
#  237|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("logical_vs_bitwise");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:235: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("CHECKED_RETURN", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("check_return", std::allocator<char>()))" is not used.
#  233|       d->hMap["BAD_LOCK_OBJECT"]      .insert("single_thread_lock");
#  234|       d->hMap["CALL_SUPER"]           .insert("missing_super_call");
#  235|->     d->hMap["CHECKED_RETURN"]       .insert("check_return");
#  236|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("extra_high_bits");
#  237|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("logical_vs_bitwise");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:236: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  234|       d->hMap["CALL_SUPER"]           .insert("missing_super_call");
#  235|       d->hMap["CHECKED_RETURN"]       .insert("check_return");
#  236|->     d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("extra_high_bits");
#  237|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("logical_vs_bitwise");
#  238|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("missing_parentheses");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:236: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("CONSTANT_EXPRESSION_RESULT", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("extra_high_bits", std::allocator<char>()))" is not used.
#  234|       d->hMap["CALL_SUPER"]           .insert("missing_super_call");
#  235|       d->hMap["CHECKED_RETURN"]       .insert("check_return");
#  236|->     d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("extra_high_bits");
#  237|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("logical_vs_bitwise");
#  238|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("missing_parentheses");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:237: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  235|       d->hMap["CHECKED_RETURN"]       .insert("check_return");
#  236|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("extra_high_bits");
#  237|->     d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("logical_vs_bitwise");
#  238|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("missing_parentheses");
#  239|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("operator_confusion");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:237: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("CONSTANT_EXPRESSION_RESULT", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("logical_vs_bitwise", std::allocator<char>()))" is not used.
#  235|       d->hMap["CHECKED_RETURN"]       .insert("check_return");
#  236|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("extra_high_bits");
#  237|->     d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("logical_vs_bitwise");
#  238|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("missing_parentheses");
#  239|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("operator_confusion");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:238: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  236|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("extra_high_bits");
#  237|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("logical_vs_bitwise");
#  238|->     d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("missing_parentheses");
#  239|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("operator_confusion");
#  240|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("pointless_expression");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:238: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("CONSTANT_EXPRESSION_RESULT", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("missing_parentheses", std::allocator<char>()))" is not used.
#  236|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("extra_high_bits");
#  237|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("logical_vs_bitwise");
#  238|->     d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("missing_parentheses");
#  239|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("operator_confusion");
#  240|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("pointless_expression");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:239: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  237|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("logical_vs_bitwise");
#  238|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("missing_parentheses");
#  239|->     d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("operator_confusion");
#  240|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("pointless_expression");
#  241|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("result_independent_of_operands");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:239: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("CONSTANT_EXPRESSION_RESULT", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("operator_confusion", std::allocator<char>()))" is not used.
#  237|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("logical_vs_bitwise");
#  238|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("missing_parentheses");
#  239|->     d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("operator_confusion");
#  240|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("pointless_expression");
#  241|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("result_independent_of_operands");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:240: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  238|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("missing_parentheses");
#  239|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("operator_confusion");
#  240|->     d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("pointless_expression");
#  241|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("result_independent_of_operands");
#  242|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("same_on_both_sides");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:240: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("CONSTANT_EXPRESSION_RESULT", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("pointless_expression", std::allocator<char>()))" is not used.
#  238|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("missing_parentheses");
#  239|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("operator_confusion");
#  240|->     d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("pointless_expression");
#  241|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("result_independent_of_operands");
#  242|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("same_on_both_sides");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:241: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  239|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("operator_confusion");
#  240|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("pointless_expression");
#  241|->     d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("result_independent_of_operands");
#  242|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("same_on_both_sides");
#  243|       d->hMap["EXPLICIT_THIS_EXPECTED"].insert("implicit_this_used");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:241: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("CONSTANT_EXPRESSION_RESULT", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("result_independent_of_operands", std::allocator<char>()))" is not used.
#  239|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("operator_confusion");
#  240|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("pointless_expression");
#  241|->     d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("result_independent_of_operands");
#  242|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("same_on_both_sides");
#  243|       d->hMap["EXPLICIT_THIS_EXPECTED"].insert("implicit_this_used");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:242: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  240|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("pointless_expression");
#  241|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("result_independent_of_operands");
#  242|->     d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("same_on_both_sides");
#  243|       d->hMap["EXPLICIT_THIS_EXPECTED"].insert("implicit_this_used");
#  244|       d->hMap["FORWARD_NULL"]         .insert("deref_parm");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:242: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("CONSTANT_EXPRESSION_RESULT", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("same_on_both_sides", std::allocator<char>()))" is not used.
#  240|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("pointless_expression");
#  241|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("result_independent_of_operands");
#  242|->     d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("same_on_both_sides");
#  243|       d->hMap["EXPLICIT_THIS_EXPECTED"].insert("implicit_this_used");
#  244|       d->hMap["FORWARD_NULL"]         .insert("deref_parm");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:243: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  241|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("result_independent_of_operands");
#  242|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("same_on_both_sides");
#  243|->     d->hMap["EXPLICIT_THIS_EXPECTED"].insert("implicit_this_used");
#  244|       d->hMap["FORWARD_NULL"]         .insert("deref_parm");
#  245|       d->hMap["FORWARD_NULL"]         .insert("dereference");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:243: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("EXPLICIT_THIS_EXPECTED", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("implicit_this_used", std::allocator<char>()))" is not used.
#  241|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("result_independent_of_operands");
#  242|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("same_on_both_sides");
#  243|->     d->hMap["EXPLICIT_THIS_EXPECTED"].insert("implicit_this_used");
#  244|       d->hMap["FORWARD_NULL"]         .insert("deref_parm");
#  245|       d->hMap["FORWARD_NULL"]         .insert("dereference");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:244: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  242|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("same_on_both_sides");
#  243|       d->hMap["EXPLICIT_THIS_EXPECTED"].insert("implicit_this_used");
#  244|->     d->hMap["FORWARD_NULL"]         .insert("deref_parm");
#  245|       d->hMap["FORWARD_NULL"]         .insert("dereference");
#  246|       d->hMap["FORWARD_NULL"]         .insert("var_deref_op");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:244: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("FORWARD_NULL", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("deref_parm", std::allocator<char>()))" is not used.
#  242|       d->hMap["CONSTANT_EXPRESSION_RESULT"].insert("same_on_both_sides");
#  243|       d->hMap["EXPLICIT_THIS_EXPECTED"].insert("implicit_this_used");
#  244|->     d->hMap["FORWARD_NULL"]         .insert("deref_parm");
#  245|       d->hMap["FORWARD_NULL"]         .insert("dereference");
#  246|       d->hMap["FORWARD_NULL"]         .insert("var_deref_op");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:245: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  243|       d->hMap["EXPLICIT_THIS_EXPECTED"].insert("implicit_this_used");
#  244|       d->hMap["FORWARD_NULL"]         .insert("deref_parm");
#  245|->     d->hMap["FORWARD_NULL"]         .insert("dereference");
#  246|       d->hMap["FORWARD_NULL"]         .insert("var_deref_op");
#  247|       d->hMap["FORWARD_NULL"]         .insert("var_deref_model");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:245: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("FORWARD_NULL", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("dereference", std::allocator<char>()))" is not used.
#  243|       d->hMap["EXPLICIT_THIS_EXPECTED"].insert("implicit_this_used");
#  244|       d->hMap["FORWARD_NULL"]         .insert("deref_parm");
#  245|->     d->hMap["FORWARD_NULL"]         .insert("dereference");
#  246|       d->hMap["FORWARD_NULL"]         .insert("var_deref_op");
#  247|       d->hMap["FORWARD_NULL"]         .insert("var_deref_model");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:246: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  244|       d->hMap["FORWARD_NULL"]         .insert("deref_parm");
#  245|       d->hMap["FORWARD_NULL"]         .insert("dereference");
#  246|->     d->hMap["FORWARD_NULL"]         .insert("var_deref_op");
#  247|       d->hMap["FORWARD_NULL"]         .insert("var_deref_model");
#  248|       d->hMap["LOCK"]                 .insert("double_lock");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:246: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("FORWARD_NULL", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("var_deref_op", std::allocator<char>()))" is not used.
#  244|       d->hMap["FORWARD_NULL"]         .insert("deref_parm");
#  245|       d->hMap["FORWARD_NULL"]         .insert("dereference");
#  246|->     d->hMap["FORWARD_NULL"]         .insert("var_deref_op");
#  247|       d->hMap["FORWARD_NULL"]         .insert("var_deref_model");
#  248|       d->hMap["LOCK"]                 .insert("double_lock");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:247: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  245|       d->hMap["FORWARD_NULL"]         .insert("dereference");
#  246|       d->hMap["FORWARD_NULL"]         .insert("var_deref_op");
#  247|->     d->hMap["FORWARD_NULL"]         .insert("var_deref_model");
#  248|       d->hMap["LOCK"]                 .insert("double_lock");
#  249|       d->hMap["LOCK"]                 .insert("double_unlock");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:247: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("FORWARD_NULL", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("var_deref_model", std::allocator<char>()))" is not used.
#  245|       d->hMap["FORWARD_NULL"]         .insert("dereference");
#  246|       d->hMap["FORWARD_NULL"]         .insert("var_deref_op");
#  247|->     d->hMap["FORWARD_NULL"]         .insert("var_deref_model");
#  248|       d->hMap["LOCK"]                 .insert("double_lock");
#  249|       d->hMap["LOCK"]                 .insert("double_unlock");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:248: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  246|       d->hMap["FORWARD_NULL"]         .insert("var_deref_op");
#  247|       d->hMap["FORWARD_NULL"]         .insert("var_deref_model");
#  248|->     d->hMap["LOCK"]                 .insert("double_lock");
#  249|       d->hMap["LOCK"]                 .insert("double_unlock");
#  250|       d->hMap["MISSING_BREAK"]        .insert("unterminated_case");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:248: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("LOCK", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("double_lock", std::allocator<char>()))" is not used.
#  246|       d->hMap["FORWARD_NULL"]         .insert("var_deref_op");
#  247|       d->hMap["FORWARD_NULL"]         .insert("var_deref_model");
#  248|->     d->hMap["LOCK"]                 .insert("double_lock");
#  249|       d->hMap["LOCK"]                 .insert("double_unlock");
#  250|       d->hMap["MISSING_BREAK"]        .insert("unterminated_case");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:249: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  247|       d->hMap["FORWARD_NULL"]         .insert("var_deref_model");
#  248|       d->hMap["LOCK"]                 .insert("double_lock");
#  249|->     d->hMap["LOCK"]                 .insert("double_unlock");
#  250|       d->hMap["MISSING_BREAK"]        .insert("unterminated_case");
#  251|       d->hMap["NESTING_INDENT_MISMATCH"].insert("dangling_else");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:249: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("LOCK", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("double_unlock", std::allocator<char>()))" is not used.
#  247|       d->hMap["FORWARD_NULL"]         .insert("var_deref_model");
#  248|       d->hMap["LOCK"]                 .insert("double_lock");
#  249|->     d->hMap["LOCK"]                 .insert("double_unlock");
#  250|       d->hMap["MISSING_BREAK"]        .insert("unterminated_case");
#  251|       d->hMap["NESTING_INDENT_MISMATCH"].insert("dangling_else");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:250: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  248|       d->hMap["LOCK"]                 .insert("double_lock");
#  249|       d->hMap["LOCK"]                 .insert("double_unlock");
#  250|->     d->hMap["MISSING_BREAK"]        .insert("unterminated_case");
#  251|       d->hMap["NESTING_INDENT_MISMATCH"].insert("dangling_else");
#  252|       d->hMap["NESTING_INDENT_MISMATCH"].insert("multi_stmt_macro");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:250: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("MISSING_BREAK", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("unterminated_case", std::allocator<char>()))" is not used.
#  248|       d->hMap["LOCK"]                 .insert("double_lock");
#  249|       d->hMap["LOCK"]                 .insert("double_unlock");
#  250|->     d->hMap["MISSING_BREAK"]        .insert("unterminated_case");
#  251|       d->hMap["NESTING_INDENT_MISMATCH"].insert("dangling_else");
#  252|       d->hMap["NESTING_INDENT_MISMATCH"].insert("multi_stmt_macro");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:251: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  249|       d->hMap["LOCK"]                 .insert("double_unlock");
#  250|       d->hMap["MISSING_BREAK"]        .insert("unterminated_case");
#  251|->     d->hMap["NESTING_INDENT_MISMATCH"].insert("dangling_else");
#  252|       d->hMap["NESTING_INDENT_MISMATCH"].insert("multi_stmt_macro");
#  253|       d->hMap["NESTING_INDENT_MISMATCH"].insert("on_same_line");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:251: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("NESTING_INDENT_MISMATCH", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("dangling_else", std::allocator<char>()))" is not used.
#  249|       d->hMap["LOCK"]                 .insert("double_unlock");
#  250|       d->hMap["MISSING_BREAK"]        .insert("unterminated_case");
#  251|->     d->hMap["NESTING_INDENT_MISMATCH"].insert("dangling_else");
#  252|       d->hMap["NESTING_INDENT_MISMATCH"].insert("multi_stmt_macro");
#  253|       d->hMap["NESTING_INDENT_MISMATCH"].insert("on_same_line");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:252: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  250|       d->hMap["MISSING_BREAK"]        .insert("unterminated_case");
#  251|       d->hMap["NESTING_INDENT_MISMATCH"].insert("dangling_else");
#  252|->     d->hMap["NESTING_INDENT_MISMATCH"].insert("multi_stmt_macro");
#  253|       d->hMap["NESTING_INDENT_MISMATCH"].insert("on_same_line");
#  254|       d->hMap["NESTING_INDENT_MISMATCH"].insert("uncle");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:252: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("NESTING_INDENT_MISMATCH", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("multi_stmt_macro", std::allocator<char>()))" is not used.
#  250|       d->hMap["MISSING_BREAK"]        .insert("unterminated_case");
#  251|       d->hMap["NESTING_INDENT_MISMATCH"].insert("dangling_else");
#  252|->     d->hMap["NESTING_INDENT_MISMATCH"].insert("multi_stmt_macro");
#  253|       d->hMap["NESTING_INDENT_MISMATCH"].insert("on_same_line");
#  254|       d->hMap["NESTING_INDENT_MISMATCH"].insert("uncle");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:253: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  251|       d->hMap["NESTING_INDENT_MISMATCH"].insert("dangling_else");
#  252|       d->hMap["NESTING_INDENT_MISMATCH"].insert("multi_stmt_macro");
#  253|->     d->hMap["NESTING_INDENT_MISMATCH"].insert("on_same_line");
#  254|       d->hMap["NESTING_INDENT_MISMATCH"].insert("uncle");
#  255|       d->hMap["ORDER_REVERSAL"]       .insert("lock_acquire");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:253: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("NESTING_INDENT_MISMATCH", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("on_same_line", std::allocator<char>()))" is not used.
#  251|       d->hMap["NESTING_INDENT_MISMATCH"].insert("dangling_else");
#  252|       d->hMap["NESTING_INDENT_MISMATCH"].insert("multi_stmt_macro");
#  253|->     d->hMap["NESTING_INDENT_MISMATCH"].insert("on_same_line");
#  254|       d->hMap["NESTING_INDENT_MISMATCH"].insert("uncle");
#  255|       d->hMap["ORDER_REVERSAL"]       .insert("lock_acquire");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:254: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  252|       d->hMap["NESTING_INDENT_MISMATCH"].insert("multi_stmt_macro");
#  253|       d->hMap["NESTING_INDENT_MISMATCH"].insert("on_same_line");
#  254|->     d->hMap["NESTING_INDENT_MISMATCH"].insert("uncle");
#  255|       d->hMap["ORDER_REVERSAL"]       .insert("lock_acquire");
#  256|       d->hMap["OVERRUN_STATIC"]       .insert("index_parm");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:254: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("NESTING_INDENT_MISMATCH", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("uncle", std::allocator<char>()))" is not used.
#  252|       d->hMap["NESTING_INDENT_MISMATCH"].insert("multi_stmt_macro");
#  253|       d->hMap["NESTING_INDENT_MISMATCH"].insert("on_same_line");
#  254|->     d->hMap["NESTING_INDENT_MISMATCH"].insert("uncle");
#  255|       d->hMap["ORDER_REVERSAL"]       .insert("lock_acquire");
#  256|       d->hMap["OVERRUN_STATIC"]       .insert("index_parm");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:255: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  253|       d->hMap["NESTING_INDENT_MISMATCH"].insert("on_same_line");
#  254|       d->hMap["NESTING_INDENT_MISMATCH"].insert("uncle");
#  255|->     d->hMap["ORDER_REVERSAL"]       .insert("lock_acquire");
#  256|       d->hMap["OVERRUN_STATIC"]       .insert("index_parm");
#  257|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-buffer-arg");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:255: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("ORDER_REVERSAL", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("lock_acquire", std::allocator<char>()))" is not used.
#  253|       d->hMap["NESTING_INDENT_MISMATCH"].insert("on_same_line");
#  254|       d->hMap["NESTING_INDENT_MISMATCH"].insert("uncle");
#  255|->     d->hMap["ORDER_REVERSAL"]       .insert("lock_acquire");
#  256|       d->hMap["OVERRUN_STATIC"]       .insert("index_parm");
#  257|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-buffer-arg");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:256: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  254|       d->hMap["NESTING_INDENT_MISMATCH"].insert("uncle");
#  255|       d->hMap["ORDER_REVERSAL"]       .insert("lock_acquire");
#  256|->     d->hMap["OVERRUN_STATIC"]       .insert("index_parm");
#  257|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-buffer-arg");
#  258|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-local");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:256: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("OVERRUN_STATIC", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("index_parm", std::allocator<char>()))" is not used.
#  254|       d->hMap["NESTING_INDENT_MISMATCH"].insert("uncle");
#  255|       d->hMap["ORDER_REVERSAL"]       .insert("lock_acquire");
#  256|->     d->hMap["OVERRUN_STATIC"]       .insert("index_parm");
#  257|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-buffer-arg");
#  258|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-local");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:257: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  255|       d->hMap["ORDER_REVERSAL"]       .insert("lock_acquire");
#  256|       d->hMap["OVERRUN_STATIC"]       .insert("index_parm");
#  257|->     d->hMap["OVERRUN_STATIC"]       .insert("overrun-buffer-arg");
#  258|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-local");
#  259|       d->hMap["STREAM_FORMAT_STATE"]  .insert("format_changed");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:257: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("OVERRUN_STATIC", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("overrun-buffer-arg", std::allocator<char>()))" is not used.
#  255|       d->hMap["ORDER_REVERSAL"]       .insert("lock_acquire");
#  256|       d->hMap["OVERRUN_STATIC"]       .insert("index_parm");
#  257|->     d->hMap["OVERRUN_STATIC"]       .insert("overrun-buffer-arg");
#  258|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-local");
#  259|       d->hMap["STREAM_FORMAT_STATE"]  .insert("format_changed");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:258: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  256|       d->hMap["OVERRUN_STATIC"]       .insert("index_parm");
#  257|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-buffer-arg");
#  258|->     d->hMap["OVERRUN_STATIC"]       .insert("overrun-local");
#  259|       d->hMap["STREAM_FORMAT_STATE"]  .insert("format_changed");
#  260|       d->hMap["UNINIT"]               .insert("uninit_use");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:258: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("OVERRUN_STATIC", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("overrun-local", std::allocator<char>()))" is not used.
#  256|       d->hMap["OVERRUN_STATIC"]       .insert("index_parm");
#  257|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-buffer-arg");
#  258|->     d->hMap["OVERRUN_STATIC"]       .insert("overrun-local");
#  259|       d->hMap["STREAM_FORMAT_STATE"]  .insert("format_changed");
#  260|       d->hMap["UNINIT"]               .insert("uninit_use");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:259: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  257|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-buffer-arg");
#  258|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-local");
#  259|->     d->hMap["STREAM_FORMAT_STATE"]  .insert("format_changed");
#  260|       d->hMap["UNINIT"]               .insert("uninit_use");
#  261|       d->hMap["UNINIT"]               .insert("uninit_use_in_call");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:259: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("STREAM_FORMAT_STATE", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("format_changed", std::allocator<char>()))" is not used.
#  257|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-buffer-arg");
#  258|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-local");
#  259|->     d->hMap["STREAM_FORMAT_STATE"]  .insert("format_changed");
#  260|       d->hMap["UNINIT"]               .insert("uninit_use");
#  261|       d->hMap["UNINIT"]               .insert("uninit_use_in_call");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:260: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  258|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-local");
#  259|       d->hMap["STREAM_FORMAT_STATE"]  .insert("format_changed");
#  260|->     d->hMap["UNINIT"]               .insert("uninit_use");
#  261|       d->hMap["UNINIT"]               .insert("uninit_use_in_call");
#  262|       d->hMap["UNINIT_CTOR"]          .insert("uninit_member");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:260: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("UNINIT", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("uninit_use", std::allocator<char>()))" is not used.
#  258|       d->hMap["OVERRUN_STATIC"]       .insert("overrun-local");
#  259|       d->hMap["STREAM_FORMAT_STATE"]  .insert("format_changed");
#  260|->     d->hMap["UNINIT"]               .insert("uninit_use");
#  261|       d->hMap["UNINIT"]               .insert("uninit_use_in_call");
#  262|       d->hMap["UNINIT_CTOR"]          .insert("uninit_member");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:261: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  259|       d->hMap["STREAM_FORMAT_STATE"]  .insert("format_changed");
#  260|       d->hMap["UNINIT"]               .insert("uninit_use");
#  261|->     d->hMap["UNINIT"]               .insert("uninit_use_in_call");
#  262|       d->hMap["UNINIT_CTOR"]          .insert("uninit_member");
#  263|       d->hMap["USE_AFTER_FREE"]       .insert("deref_after_free");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:261: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("UNINIT", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("uninit_use_in_call", std::allocator<char>()))" is not used.
#  259|       d->hMap["STREAM_FORMAT_STATE"]  .insert("format_changed");
#  260|       d->hMap["UNINIT"]               .insert("uninit_use");
#  261|->     d->hMap["UNINIT"]               .insert("uninit_use_in_call");
#  262|       d->hMap["UNINIT_CTOR"]          .insert("uninit_member");
#  263|       d->hMap["USE_AFTER_FREE"]       .insert("deref_after_free");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:262: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  260|       d->hMap["UNINIT"]               .insert("uninit_use");
#  261|       d->hMap["UNINIT"]               .insert("uninit_use_in_call");
#  262|->     d->hMap["UNINIT_CTOR"]          .insert("uninit_member");
#  263|       d->hMap["USE_AFTER_FREE"]       .insert("deref_after_free");
#  264|       d->hMap["USE_AFTER_FREE"]       .insert("deref_arg");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:262: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("UNINIT_CTOR", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("uninit_member", std::allocator<char>()))" is not used.
#  260|       d->hMap["UNINIT"]               .insert("uninit_use");
#  261|       d->hMap["UNINIT"]               .insert("uninit_use_in_call");
#  262|->     d->hMap["UNINIT_CTOR"]          .insert("uninit_member");
#  263|       d->hMap["USE_AFTER_FREE"]       .insert("deref_after_free");
#  264|       d->hMap["USE_AFTER_FREE"]       .insert("deref_arg");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:263: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  261|       d->hMap["UNINIT"]               .insert("uninit_use_in_call");
#  262|       d->hMap["UNINIT_CTOR"]          .insert("uninit_member");
#  263|->     d->hMap["USE_AFTER_FREE"]       .insert("deref_after_free");
#  264|       d->hMap["USE_AFTER_FREE"]       .insert("deref_arg");
#  265|       d->hMap["USE_AFTER_FREE"]       .insert("double_free");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:263: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("USE_AFTER_FREE", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("deref_after_free", std::allocator<char>()))" is not used.
#  261|       d->hMap["UNINIT"]               .insert("uninit_use_in_call");
#  262|       d->hMap["UNINIT_CTOR"]          .insert("uninit_member");
#  263|->     d->hMap["USE_AFTER_FREE"]       .insert("deref_after_free");
#  264|       d->hMap["USE_AFTER_FREE"]       .insert("deref_arg");
#  265|       d->hMap["USE_AFTER_FREE"]       .insert("double_free");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:264: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  262|       d->hMap["UNINIT_CTOR"]          .insert("uninit_member");
#  263|       d->hMap["USE_AFTER_FREE"]       .insert("deref_after_free");
#  264|->     d->hMap["USE_AFTER_FREE"]       .insert("deref_arg");
#  265|       d->hMap["USE_AFTER_FREE"]       .insert("double_free");
#  266|       d->hMap["USE_AFTER_FREE"]       .insert("pass_freed_arg");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:264: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("USE_AFTER_FREE", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("deref_arg", std::allocator<char>()))" is not used.
#  262|       d->hMap["UNINIT_CTOR"]          .insert("uninit_member");
#  263|       d->hMap["USE_AFTER_FREE"]       .insert("deref_after_free");
#  264|->     d->hMap["USE_AFTER_FREE"]       .insert("deref_arg");
#  265|       d->hMap["USE_AFTER_FREE"]       .insert("double_free");
#  266|       d->hMap["USE_AFTER_FREE"]       .insert("pass_freed_arg");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:265: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  263|       d->hMap["USE_AFTER_FREE"]       .insert("deref_after_free");
#  264|       d->hMap["USE_AFTER_FREE"]       .insert("deref_arg");
#  265|->     d->hMap["USE_AFTER_FREE"]       .insert("double_free");
#  266|       d->hMap["USE_AFTER_FREE"]       .insert("pass_freed_arg");
#  267|       d->hMap["USE_AFTER_FREE"]       .insert("use_after_free");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:265: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("USE_AFTER_FREE", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("double_free", std::allocator<char>()))" is not used.
#  263|       d->hMap["USE_AFTER_FREE"]       .insert("deref_after_free");
#  264|       d->hMap["USE_AFTER_FREE"]       .insert("deref_arg");
#  265|->     d->hMap["USE_AFTER_FREE"]       .insert("double_free");
#  266|       d->hMap["USE_AFTER_FREE"]       .insert("pass_freed_arg");
#  267|       d->hMap["USE_AFTER_FREE"]       .insert("use_after_free");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:266: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  264|       d->hMap["USE_AFTER_FREE"]       .insert("deref_arg");
#  265|       d->hMap["USE_AFTER_FREE"]       .insert("double_free");
#  266|->     d->hMap["USE_AFTER_FREE"]       .insert("pass_freed_arg");
#  267|       d->hMap["USE_AFTER_FREE"]       .insert("use_after_free");
#  268|   

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:266: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("USE_AFTER_FREE", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("pass_freed_arg", std::allocator<char>()))" is not used.
#  264|       d->hMap["USE_AFTER_FREE"]       .insert("deref_arg");
#  265|       d->hMap["USE_AFTER_FREE"]       .insert("double_free");
#  266|->     d->hMap["USE_AFTER_FREE"]       .insert("pass_freed_arg");
#  267|       d->hMap["USE_AFTER_FREE"]       .insert("use_after_free");
#  268|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:267: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  265|       d->hMap["USE_AFTER_FREE"]       .insert("double_free");
#  266|       d->hMap["USE_AFTER_FREE"]       .insert("pass_freed_arg");
#  267|->     d->hMap["USE_AFTER_FREE"]       .insert("use_after_free");
#  268|   
#  269|       // we use COMPILER_WARNING as checker for compiler errors/warnings

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:267: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("USE_AFTER_FREE", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("use_after_free", std::allocator<char>()))" is not used.
#  265|       d->hMap["USE_AFTER_FREE"]       .insert("double_free");
#  266|       d->hMap["USE_AFTER_FREE"]       .insert("pass_freed_arg");
#  267|->     d->hMap["USE_AFTER_FREE"]       .insert("use_after_free");
#  268|   
#  269|       // we use COMPILER_WARNING as checker for compiler errors/warnings

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:270: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  268|   
#  269|       // we use COMPILER_WARNING as checker for compiler errors/warnings
#  270|->     d->hMap["COMPILER_WARNING"]     .insert("error");
#  271|       d->hMap["COMPILER_WARNING"]     .insert("warning");
#  272|       d->hMap["COMPILER_WARNING"]     .insert("fatal error");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:270: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("COMPILER_WARNING", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("error", std::allocator<char>()))" is not used.
#  268|   
#  269|       // we use COMPILER_WARNING as checker for compiler errors/warnings
#  270|->     d->hMap["COMPILER_WARNING"]     .insert("error");
#  271|       d->hMap["COMPILER_WARNING"]     .insert("warning");
#  272|       d->hMap["COMPILER_WARNING"]     .insert("fatal error");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:271: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  269|       // we use COMPILER_WARNING as checker for compiler errors/warnings
#  270|       d->hMap["COMPILER_WARNING"]     .insert("error");
#  271|->     d->hMap["COMPILER_WARNING"]     .insert("warning");
#  272|       d->hMap["COMPILER_WARNING"]     .insert("fatal error");
#  273|       // likewise for clang

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:271: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("COMPILER_WARNING", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("warning", std::allocator<char>()))" is not used.
#  269|       // we use COMPILER_WARNING as checker for compiler errors/warnings
#  270|       d->hMap["COMPILER_WARNING"]     .insert("error");
#  271|->     d->hMap["COMPILER_WARNING"]     .insert("warning");
#  272|       d->hMap["COMPILER_WARNING"]     .insert("fatal error");
#  273|       // likewise for clang

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:272: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  270|       d->hMap["COMPILER_WARNING"]     .insert("error");
#  271|       d->hMap["COMPILER_WARNING"]     .insert("warning");
#  272|->     d->hMap["COMPILER_WARNING"]     .insert("fatal error");
#  273|       // likewise for clang
#  274|       d->hMap["CLANG_WARNING"]        .insert("error");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:272: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("COMPILER_WARNING", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("fatal error", std::allocator<char>()))" is not used.
#  270|       d->hMap["COMPILER_WARNING"]     .insert("error");
#  271|       d->hMap["COMPILER_WARNING"]     .insert("warning");
#  272|->     d->hMap["COMPILER_WARNING"]     .insert("fatal error");
#  273|       // likewise for clang
#  274|       d->hMap["CLANG_WARNING"]        .insert("error");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:274: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  272|       d->hMap["COMPILER_WARNING"]     .insert("fatal error");
#  273|       // likewise for clang
#  274|->     d->hMap["CLANG_WARNING"]        .insert("error");
#  275|       d->hMap["CLANG_WARNING"]        .insert("warning");
#  276|       d->hMap["CLANG_WARNING"]        .insert("fatal error");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:274: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("CLANG_WARNING", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("error", std::allocator<char>()))" is not used.
#  272|       d->hMap["COMPILER_WARNING"]     .insert("fatal error");
#  273|       // likewise for clang
#  274|->     d->hMap["CLANG_WARNING"]        .insert("error");
#  275|       d->hMap["CLANG_WARNING"]        .insert("warning");
#  276|       d->hMap["CLANG_WARNING"]        .insert("fatal error");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:275: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  273|       // likewise for clang
#  274|       d->hMap["CLANG_WARNING"]        .insert("error");
#  275|->     d->hMap["CLANG_WARNING"]        .insert("warning");
#  276|       d->hMap["CLANG_WARNING"]        .insert("fatal error");
#  277|       // ... and `gcc -fanalyzer`

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:275: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("CLANG_WARNING", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("warning", std::allocator<char>()))" is not used.
#  273|       // likewise for clang
#  274|       d->hMap["CLANG_WARNING"]        .insert("error");
#  275|->     d->hMap["CLANG_WARNING"]        .insert("warning");
#  276|       d->hMap["CLANG_WARNING"]        .insert("fatal error");
#  277|       // ... and `gcc -fanalyzer`

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:276: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  274|       d->hMap["CLANG_WARNING"]        .insert("error");
#  275|       d->hMap["CLANG_WARNING"]        .insert("warning");
#  276|->     d->hMap["CLANG_WARNING"]        .insert("fatal error");
#  277|       // ... and `gcc -fanalyzer`
#  278|       d->hMap["GCC_ANALYZER_WARNING"] .insert("error");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:276: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("CLANG_WARNING", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("fatal error", std::allocator<char>()))" is not used.
#  274|       d->hMap["CLANG_WARNING"]        .insert("error");
#  275|       d->hMap["CLANG_WARNING"]        .insert("warning");
#  276|->     d->hMap["CLANG_WARNING"]        .insert("fatal error");
#  277|       // ... and `gcc -fanalyzer`
#  278|       d->hMap["GCC_ANALYZER_WARNING"] .insert("error");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:278: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  276|       d->hMap["CLANG_WARNING"]        .insert("fatal error");
#  277|       // ... and `gcc -fanalyzer`
#  278|->     d->hMap["GCC_ANALYZER_WARNING"] .insert("error");
#  279|       d->hMap["GCC_ANALYZER_WARNING"] .insert("warning");
#  280|       d->hMap["GCC_ANALYZER_WARNING"] .insert("fatal error");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:278: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("GCC_ANALYZER_WARNING", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("error", std::allocator<char>()))" is not used.
#  276|       d->hMap["CLANG_WARNING"]        .insert("fatal error");
#  277|       // ... and `gcc -fanalyzer`
#  278|->     d->hMap["GCC_ANALYZER_WARNING"] .insert("error");
#  279|       d->hMap["GCC_ANALYZER_WARNING"] .insert("warning");
#  280|       d->hMap["GCC_ANALYZER_WARNING"] .insert("fatal error");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:279: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  277|       // ... and `gcc -fanalyzer`
#  278|       d->hMap["GCC_ANALYZER_WARNING"] .insert("error");
#  279|->     d->hMap["GCC_ANALYZER_WARNING"] .insert("warning");
#  280|       d->hMap["GCC_ANALYZER_WARNING"] .insert("fatal error");
#  281|   

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:279: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("GCC_ANALYZER_WARNING", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("warning", std::allocator<char>()))" is not used.
#  277|       // ... and `gcc -fanalyzer`
#  278|       d->hMap["GCC_ANALYZER_WARNING"] .insert("error");
#  279|->     d->hMap["GCC_ANALYZER_WARNING"] .insert("warning");
#  280|       d->hMap["GCC_ANALYZER_WARNING"] .insert("fatal error");
#  281|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:280: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  278|       d->hMap["GCC_ANALYZER_WARNING"] .insert("error");
#  279|       d->hMap["GCC_ANALYZER_WARNING"] .insert("warning");
#  280|->     d->hMap["GCC_ANALYZER_WARNING"] .insert("fatal error");
#  281|   
#  282|       // events that should never be used as key events (excluding trace events)

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:280: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->hMap[std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::key_type("GCC_ANALYZER_WARNING", std::allocator<char>())]->insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("fatal error", std::allocator<char>()))" is not used.
#  278|       d->hMap["GCC_ANALYZER_WARNING"] .insert("error");
#  279|       d->hMap["GCC_ANALYZER_WARNING"] .insert("warning");
#  280|->     d->hMap["GCC_ANALYZER_WARNING"] .insert("fatal error");
#  281|   
#  282|       // events that should never be used as key events (excluding trace events)

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:283: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  281|   
#  282|       // events that should never be used as key events (excluding trace events)
#  283|->     d->denyList.insert("another_instance");
#  284|       d->denyList.insert("comparison_remediation");
#  285|       d->denyList.insert("example_access");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:283: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->denyList.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("another_instance", std::allocator<char>()))" is not used.
#  281|   
#  282|       // events that should never be used as key events (excluding trace events)
#  283|->     d->denyList.insert("another_instance");
#  284|       d->denyList.insert("comparison_remediation");
#  285|       d->denyList.insert("example_access");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:284: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  282|       // events that should never be used as key events (excluding trace events)
#  283|       d->denyList.insert("another_instance");
#  284|->     d->denyList.insert("comparison_remediation");
#  285|       d->denyList.insert("example_access");
#  286|       d->denyList.insert("example_assign");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:284: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->denyList.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("comparison_remediation", std::allocator<char>()))" is not used.
#  282|       // events that should never be used as key events (excluding trace events)
#  283|       d->denyList.insert("another_instance");
#  284|->     d->denyList.insert("comparison_remediation");
#  285|       d->denyList.insert("example_access");
#  286|       d->denyList.insert("example_assign");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:285: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  283|       d->denyList.insert("another_instance");
#  284|       d->denyList.insert("comparison_remediation");
#  285|->     d->denyList.insert("example_access");
#  286|       d->denyList.insert("example_assign");
#  287|       d->denyList.insert("example_checked");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:285: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->denyList.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("example_access", std::allocator<char>()))" is not used.
#  283|       d->denyList.insert("another_instance");
#  284|       d->denyList.insert("comparison_remediation");
#  285|->     d->denyList.insert("example_access");
#  286|       d->denyList.insert("example_assign");
#  287|       d->denyList.insert("example_checked");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:286: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  284|       d->denyList.insert("comparison_remediation");
#  285|       d->denyList.insert("example_access");
#  286|->     d->denyList.insert("example_assign");
#  287|       d->denyList.insert("example_checked");
#  288|       d->denyList.insert("example_comparison");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:286: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->denyList.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("example_assign", std::allocator<char>()))" is not used.
#  284|       d->denyList.insert("comparison_remediation");
#  285|       d->denyList.insert("example_access");
#  286|->     d->denyList.insert("example_assign");
#  287|       d->denyList.insert("example_checked");
#  288|       d->denyList.insert("example_comparison");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:287: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  285|       d->denyList.insert("example_access");
#  286|       d->denyList.insert("example_assign");
#  287|->     d->denyList.insert("example_checked");
#  288|       d->denyList.insert("example_comparison");
#  289|       d->denyList.insert("example_lock");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:287: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->denyList.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("example_checked", std::allocator<char>()))" is not used.
#  285|       d->denyList.insert("example_access");
#  286|       d->denyList.insert("example_assign");
#  287|->     d->denyList.insert("example_checked");
#  288|       d->denyList.insert("example_comparison");
#  289|       d->denyList.insert("example_lock");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:288: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  286|       d->denyList.insert("example_assign");
#  287|       d->denyList.insert("example_checked");
#  288|->     d->denyList.insert("example_comparison");
#  289|       d->denyList.insert("example_lock");
#  290|       d->denyList.insert("function_annotation");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:288: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->denyList.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("example_comparison", std::allocator<char>()))" is not used.
#  286|       d->denyList.insert("example_assign");
#  287|       d->denyList.insert("example_checked");
#  288|->     d->denyList.insert("example_comparison");
#  289|       d->denyList.insert("example_lock");
#  290|       d->denyList.insert("function_annotation");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:289: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  287|       d->denyList.insert("example_checked");
#  288|       d->denyList.insert("example_comparison");
#  289|->     d->denyList.insert("example_lock");
#  290|       d->denyList.insert("function_annotation");
#  291|       d->denyList.insert("included_from");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:289: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->denyList.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("example_lock", std::allocator<char>()))" is not used.
#  287|       d->denyList.insert("example_checked");
#  288|       d->denyList.insert("example_comparison");
#  289|->     d->denyList.insert("example_lock");
#  290|       d->denyList.insert("function_annotation");
#  291|       d->denyList.insert("included_from");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:290: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  288|       d->denyList.insert("example_comparison");
#  289|       d->denyList.insert("example_lock");
#  290|->     d->denyList.insert("function_annotation");
#  291|       d->denyList.insert("included_from");
#  292|       d->denyList.insert("note");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:290: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->denyList.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("function_annotation", std::allocator<char>()))" is not used.
#  288|       d->denyList.insert("example_comparison");
#  289|       d->denyList.insert("example_lock");
#  290|->     d->denyList.insert("function_annotation");
#  291|       d->denyList.insert("included_from");
#  292|       d->denyList.insert("note");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:291: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  289|       d->denyList.insert("example_lock");
#  290|       d->denyList.insert("function_annotation");
#  291|->     d->denyList.insert("included_from");
#  292|       d->denyList.insert("note");
#  293|       d->denyList.insert("remediation");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:291: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->denyList.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("included_from", std::allocator<char>()))" is not used.
#  289|       d->denyList.insert("example_lock");
#  290|       d->denyList.insert("function_annotation");
#  291|->     d->denyList.insert("included_from");
#  292|       d->denyList.insert("note");
#  293|       d->denyList.insert("remediation");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:292: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  290|       d->denyList.insert("function_annotation");
#  291|       d->denyList.insert("included_from");
#  292|->     d->denyList.insert("note");
#  293|       d->denyList.insert("remediation");
#  294|       d->denyList.insert("rounding_remediation");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:292: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->denyList.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("note", std::allocator<char>()))" is not used.
#  290|       d->denyList.insert("function_annotation");
#  291|       d->denyList.insert("included_from");
#  292|->     d->denyList.insert("note");
#  293|       d->denyList.insert("remediation");
#  294|       d->denyList.insert("rounding_remediation");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:293: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  291|       d->denyList.insert("included_from");
#  292|       d->denyList.insert("note");
#  293|->     d->denyList.insert("remediation");
#  294|       d->denyList.insert("rounding_remediation");
#  295|       d->denyList.insert("scope_hint");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:293: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->denyList.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("remediation", std::allocator<char>()))" is not used.
#  291|       d->denyList.insert("included_from");
#  292|       d->denyList.insert("note");
#  293|->     d->denyList.insert("remediation");
#  294|       d->denyList.insert("rounding_remediation");
#  295|       d->denyList.insert("scope_hint");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:294: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  292|       d->denyList.insert("note");
#  293|       d->denyList.insert("remediation");
#  294|->     d->denyList.insert("rounding_remediation");
#  295|       d->denyList.insert("scope_hint");
#  296|   

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:294: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->denyList.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("rounding_remediation", std::allocator<char>()))" is not used.
#  292|       d->denyList.insert("note");
#  293|       d->denyList.insert("remediation");
#  294|->     d->denyList.insert("rounding_remediation");
#  295|       d->denyList.insert("scope_hint");
#  296|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:295: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  293|       d->denyList.insert("remediation");
#  294|       d->denyList.insert("rounding_remediation");
#  295|->     d->denyList.insert("scope_hint");
#  296|   
#  297|       // trace events

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:295: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->denyList.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("scope_hint", std::allocator<char>()))" is not used.
#  293|       d->denyList.insert("remediation");
#  294|       d->denyList.insert("rounding_remediation");
#  295|->     d->denyList.insert("scope_hint");
#  296|   
#  297|       // trace events

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:298: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  296|   
#  297|       // trace events
#  298|->     d->traceEvts.insert("break");
#  299|       d->traceEvts.insert("caretline");
#  300|       d->traceEvts.insert("cond_false");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:298: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("break", std::allocator<char>()))" is not used.
#  296|   
#  297|       // trace events
#  298|->     d->traceEvts.insert("break");
#  299|       d->traceEvts.insert("caretline");
#  300|       d->traceEvts.insert("cond_false");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:299: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  297|       // trace events
#  298|       d->traceEvts.insert("break");
#  299|->     d->traceEvts.insert("caretline");
#  300|       d->traceEvts.insert("cond_false");
#  301|       d->traceEvts.insert("cond_true");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:299: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("caretline", std::allocator<char>()))" is not used.
#  297|       // trace events
#  298|       d->traceEvts.insert("break");
#  299|->     d->traceEvts.insert("caretline");
#  300|       d->traceEvts.insert("cond_false");
#  301|       d->traceEvts.insert("cond_true");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:300: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  298|       d->traceEvts.insert("break");
#  299|       d->traceEvts.insert("caretline");
#  300|->     d->traceEvts.insert("cond_false");
#  301|       d->traceEvts.insert("cond_true");
#  302|       d->traceEvts.insert("continue");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:300: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("cond_false", std::allocator<char>()))" is not used.
#  298|       d->traceEvts.insert("break");
#  299|       d->traceEvts.insert("caretline");
#  300|->     d->traceEvts.insert("cond_false");
#  301|       d->traceEvts.insert("cond_true");
#  302|       d->traceEvts.insert("continue");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:301: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  299|       d->traceEvts.insert("caretline");
#  300|       d->traceEvts.insert("cond_false");
#  301|->     d->traceEvts.insert("cond_true");
#  302|       d->traceEvts.insert("continue");
#  303|       d->traceEvts.insert("destructor");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:301: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("cond_true", std::allocator<char>()))" is not used.
#  299|       d->traceEvts.insert("caretline");
#  300|       d->traceEvts.insert("cond_false");
#  301|->     d->traceEvts.insert("cond_true");
#  302|       d->traceEvts.insert("continue");
#  303|       d->traceEvts.insert("destructor");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:302: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  300|       d->traceEvts.insert("cond_false");
#  301|       d->traceEvts.insert("cond_true");
#  302|->     d->traceEvts.insert("continue");
#  303|       d->traceEvts.insert("destructor");
#  304|       d->traceEvts.insert("else_branch");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:302: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("continue", std::allocator<char>()))" is not used.
#  300|       d->traceEvts.insert("cond_false");
#  301|       d->traceEvts.insert("cond_true");
#  302|->     d->traceEvts.insert("continue");
#  303|       d->traceEvts.insert("destructor");
#  304|       d->traceEvts.insert("else_branch");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:303: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  301|       d->traceEvts.insert("cond_true");
#  302|       d->traceEvts.insert("continue");
#  303|->     d->traceEvts.insert("destructor");
#  304|       d->traceEvts.insert("else_branch");
#  305|       d->traceEvts.insert("end_of_path");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:303: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("destructor", std::allocator<char>()))" is not used.
#  301|       d->traceEvts.insert("cond_true");
#  302|       d->traceEvts.insert("continue");
#  303|->     d->traceEvts.insert("destructor");
#  304|       d->traceEvts.insert("else_branch");
#  305|       d->traceEvts.insert("end_of_path");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:304: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  302|       d->traceEvts.insert("continue");
#  303|       d->traceEvts.insert("destructor");
#  304|->     d->traceEvts.insert("else_branch");
#  305|       d->traceEvts.insert("end_of_path");
#  306|       d->traceEvts.insert("finally");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:304: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("else_branch", std::allocator<char>()))" is not used.
#  302|       d->traceEvts.insert("continue");
#  303|       d->traceEvts.insert("destructor");
#  304|->     d->traceEvts.insert("else_branch");
#  305|       d->traceEvts.insert("end_of_path");
#  306|       d->traceEvts.insert("finally");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:305: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  303|       d->traceEvts.insert("destructor");
#  304|       d->traceEvts.insert("else_branch");
#  305|->     d->traceEvts.insert("end_of_path");
#  306|       d->traceEvts.insert("finally");
#  307|       d->traceEvts.insert("finally_jump");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:305: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("end_of_path", std::allocator<char>()))" is not used.
#  303|       d->traceEvts.insert("destructor");
#  304|       d->traceEvts.insert("else_branch");
#  305|->     d->traceEvts.insert("end_of_path");
#  306|       d->traceEvts.insert("finally");
#  307|       d->traceEvts.insert("finally_jump");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:306: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  304|       d->traceEvts.insert("else_branch");
#  305|       d->traceEvts.insert("end_of_path");
#  306|->     d->traceEvts.insert("finally");
#  307|       d->traceEvts.insert("finally_jump");
#  308|       d->traceEvts.insert("for_loop");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:306: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("finally", std::allocator<char>()))" is not used.
#  304|       d->traceEvts.insert("else_branch");
#  305|       d->traceEvts.insert("end_of_path");
#  306|->     d->traceEvts.insert("finally");
#  307|       d->traceEvts.insert("finally_jump");
#  308|       d->traceEvts.insert("for_loop");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:307: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  305|       d->traceEvts.insert("end_of_path");
#  306|       d->traceEvts.insert("finally");
#  307|->     d->traceEvts.insert("finally_jump");
#  308|       d->traceEvts.insert("for_loop");
#  309|       d->traceEvts.insert("goto");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:307: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("finally_jump", std::allocator<char>()))" is not used.
#  305|       d->traceEvts.insert("end_of_path");
#  306|       d->traceEvts.insert("finally");
#  307|->     d->traceEvts.insert("finally_jump");
#  308|       d->traceEvts.insert("for_loop");
#  309|       d->traceEvts.insert("goto");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:308: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  306|       d->traceEvts.insert("finally");
#  307|       d->traceEvts.insert("finally_jump");
#  308|->     d->traceEvts.insert("for_loop");
#  309|       d->traceEvts.insert("goto");
#  310|       d->traceEvts.insert("if_end");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:308: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("for_loop", std::allocator<char>()))" is not used.
#  306|       d->traceEvts.insert("finally");
#  307|       d->traceEvts.insert("finally_jump");
#  308|->     d->traceEvts.insert("for_loop");
#  309|       d->traceEvts.insert("goto");
#  310|       d->traceEvts.insert("if_end");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:309: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  307|       d->traceEvts.insert("finally_jump");
#  308|       d->traceEvts.insert("for_loop");
#  309|->     d->traceEvts.insert("goto");
#  310|       d->traceEvts.insert("if_end");
#  311|       d->traceEvts.insert("if_fallthrough");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:309: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("goto", std::allocator<char>()))" is not used.
#  307|       d->traceEvts.insert("finally_jump");
#  308|       d->traceEvts.insert("for_loop");
#  309|->     d->traceEvts.insert("goto");
#  310|       d->traceEvts.insert("if_end");
#  311|       d->traceEvts.insert("if_fallthrough");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:310: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  308|       d->traceEvts.insert("for_loop");
#  309|       d->traceEvts.insert("goto");
#  310|->     d->traceEvts.insert("if_end");
#  311|       d->traceEvts.insert("if_fallthrough");
#  312|       d->traceEvts.insert("label");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:310: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("if_end", std::allocator<char>()))" is not used.
#  308|       d->traceEvts.insert("for_loop");
#  309|       d->traceEvts.insert("goto");
#  310|->     d->traceEvts.insert("if_end");
#  311|       d->traceEvts.insert("if_fallthrough");
#  312|       d->traceEvts.insert("label");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:311: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  309|       d->traceEvts.insert("goto");
#  310|       d->traceEvts.insert("if_end");
#  311|->     d->traceEvts.insert("if_fallthrough");
#  312|       d->traceEvts.insert("label");
#  313|       d->traceEvts.insert("loop");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:311: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("if_fallthrough", std::allocator<char>()))" is not used.
#  309|       d->traceEvts.insert("goto");
#  310|       d->traceEvts.insert("if_end");
#  311|->     d->traceEvts.insert("if_fallthrough");
#  312|       d->traceEvts.insert("label");
#  313|       d->traceEvts.insert("loop");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:312: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  310|       d->traceEvts.insert("if_end");
#  311|       d->traceEvts.insert("if_fallthrough");
#  312|->     d->traceEvts.insert("label");
#  313|       d->traceEvts.insert("loop");
#  314|       d->traceEvts.insert("loop_begin");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:312: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("label", std::allocator<char>()))" is not used.
#  310|       d->traceEvts.insert("if_end");
#  311|       d->traceEvts.insert("if_fallthrough");
#  312|->     d->traceEvts.insert("label");
#  313|       d->traceEvts.insert("loop");
#  314|       d->traceEvts.insert("loop_begin");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:313: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  311|       d->traceEvts.insert("if_fallthrough");
#  312|       d->traceEvts.insert("label");
#  313|->     d->traceEvts.insert("loop");
#  314|       d->traceEvts.insert("loop_begin");
#  315|       d->traceEvts.insert("loop_end");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:313: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("loop", std::allocator<char>()))" is not used.
#  311|       d->traceEvts.insert("if_fallthrough");
#  312|       d->traceEvts.insert("label");
#  313|->     d->traceEvts.insert("loop");
#  314|       d->traceEvts.insert("loop_begin");
#  315|       d->traceEvts.insert("loop_end");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:314: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  312|       d->traceEvts.insert("label");
#  313|       d->traceEvts.insert("loop");
#  314|->     d->traceEvts.insert("loop_begin");
#  315|       d->traceEvts.insert("loop_end");
#  316|       d->traceEvts.insert("path");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:314: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("loop_begin", std::allocator<char>()))" is not used.
#  312|       d->traceEvts.insert("label");
#  313|       d->traceEvts.insert("loop");
#  314|->     d->traceEvts.insert("loop_begin");
#  315|       d->traceEvts.insert("loop_end");
#  316|       d->traceEvts.insert("path");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:315: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  313|       d->traceEvts.insert("loop");
#  314|       d->traceEvts.insert("loop_begin");
#  315|->     d->traceEvts.insert("loop_end");
#  316|       d->traceEvts.insert("path");
#  317|       d->traceEvts.insert("return");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:315: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("loop_end", std::allocator<char>()))" is not used.
#  313|       d->traceEvts.insert("loop");
#  314|       d->traceEvts.insert("loop_begin");
#  315|->     d->traceEvts.insert("loop_end");
#  316|       d->traceEvts.insert("path");
#  317|       d->traceEvts.insert("return");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:316: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  314|       d->traceEvts.insert("loop_begin");
#  315|       d->traceEvts.insert("loop_end");
#  316|->     d->traceEvts.insert("path");
#  317|       d->traceEvts.insert("return");
#  318|       d->traceEvts.insert("switch");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:316: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("path", std::allocator<char>()))" is not used.
#  314|       d->traceEvts.insert("loop_begin");
#  315|       d->traceEvts.insert("loop_end");
#  316|->     d->traceEvts.insert("path");
#  317|       d->traceEvts.insert("return");
#  318|       d->traceEvts.insert("switch");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:317: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  315|       d->traceEvts.insert("loop_end");
#  316|       d->traceEvts.insert("path");
#  317|->     d->traceEvts.insert("return");
#  318|       d->traceEvts.insert("switch");
#  319|       d->traceEvts.insert("switch_case");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:317: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("return", std::allocator<char>()))" is not used.
#  315|       d->traceEvts.insert("loop_end");
#  316|       d->traceEvts.insert("path");
#  317|->     d->traceEvts.insert("return");
#  318|       d->traceEvts.insert("switch");
#  319|       d->traceEvts.insert("switch_case");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:318: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  316|       d->traceEvts.insert("path");
#  317|       d->traceEvts.insert("return");
#  318|->     d->traceEvts.insert("switch");
#  319|       d->traceEvts.insert("switch_case");
#  320|       d->traceEvts.insert("switch_default");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:318: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("switch", std::allocator<char>()))" is not used.
#  316|       d->traceEvts.insert("path");
#  317|       d->traceEvts.insert("return");
#  318|->     d->traceEvts.insert("switch");
#  319|       d->traceEvts.insert("switch_case");
#  320|       d->traceEvts.insert("switch_default");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:319: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  317|       d->traceEvts.insert("return");
#  318|       d->traceEvts.insert("switch");
#  319|->     d->traceEvts.insert("switch_case");
#  320|       d->traceEvts.insert("switch_default");
#  321|       d->traceEvts.insert("switch_end");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:319: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("switch_case", std::allocator<char>()))" is not used.
#  317|       d->traceEvts.insert("return");
#  318|       d->traceEvts.insert("switch");
#  319|->     d->traceEvts.insert("switch_case");
#  320|       d->traceEvts.insert("switch_default");
#  321|       d->traceEvts.insert("switch_end");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:320: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  318|       d->traceEvts.insert("switch");
#  319|       d->traceEvts.insert("switch_case");
#  320|->     d->traceEvts.insert("switch_default");
#  321|       d->traceEvts.insert("switch_end");
#  322|       d->traceEvts.insert("try_end");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:320: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("switch_default", std::allocator<char>()))" is not used.
#  318|       d->traceEvts.insert("switch");
#  319|       d->traceEvts.insert("switch_case");
#  320|->     d->traceEvts.insert("switch_default");
#  321|       d->traceEvts.insert("switch_end");
#  322|       d->traceEvts.insert("try_end");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:321: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  319|       d->traceEvts.insert("switch_case");
#  320|       d->traceEvts.insert("switch_default");
#  321|->     d->traceEvts.insert("switch_end");
#  322|       d->traceEvts.insert("try_end");
#  323|       d->traceEvts.insert("try_fallthrough");

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:321: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("switch_end", std::allocator<char>()))" is not used.
#  319|       d->traceEvts.insert("switch_case");
#  320|       d->traceEvts.insert("switch_default");
#  321|->     d->traceEvts.insert("switch_end");
#  322|       d->traceEvts.insert("try_end");
#  323|       d->traceEvts.insert("try_fallthrough");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:322: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  320|       d->traceEvts.insert("switch_default");
#  321|       d->traceEvts.insert("switch_end");
#  322|->     d->traceEvts.insert("try_end");
#  323|       d->traceEvts.insert("try_fallthrough");
#  324|   }

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:322: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("try_end", std::allocator<char>()))" is not used.
#  320|       d->traceEvts.insert("switch_default");
#  321|       d->traceEvts.insert("switch_end");
#  322|->     d->traceEvts.insert("try_end");
#  323|       d->traceEvts.insert("try_fallthrough");
#  324|   }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:323: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  321|       d->traceEvts.insert("switch_end");
#  322|       d->traceEvts.insert("try_end");
#  323|->     d->traceEvts.insert("try_fallthrough");
#  324|   }
#  325|   

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:323: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->traceEvts.insert(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type("try_fallthrough", std::allocator<char>()))" is not used.
#  321|       d->traceEvts.insert("switch_end");
#  322|       d->traceEvts.insert("try_end");
#  323|->     d->traceEvts.insert("try_fallthrough");
#  324|   }
#  325|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:326: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  324|   }
#  325|   
#  326|-> KeyEventDigger::~KeyEventDigger()
#  327|   {
#  328|       delete d;

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:331: misra_c_2012_rule_8_13_violation: The member function "KeyEventDigger::guessKeyEvent(Defect *)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  329|   }
#  330|   
#  331|-> bool KeyEventDigger::guessKeyEvent(Defect *def)
#  332|   {
#  333|       const std::vector<DefEvent> &evtList = def->events;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:331: misra_cpp_2008_rule_7_1_1_violation: The variable "def" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  329|   }
#  330|   
#  331|-> bool KeyEventDigger::guessKeyEvent(Defect *def)
#  332|   {
#  333|       const std::vector<DefEvent> &evtList = def->events;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:335: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  333|       const std::vector<DefEvent> &evtList = def->events;
#  334|       if (evtList.empty())
#  335|->         return false;
#  336|   
#  337|       const unsigned evtCount = evtList.size();

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:335: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  333|       const std::vector<DefEvent> &evtList = def->events;
#  334|       if (evtList.empty())
#  335|->         return false;
#  336|   
#  337|       const unsigned evtCount = evtList.size();

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:335: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  333|       const std::vector<DefEvent> &evtList = def->events;
#  334|       if (evtList.empty())
#  335|->         return false;
#  336|   
#  337|       const unsigned evtCount = evtList.size();

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:335: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  333|       const std::vector<DefEvent> &evtList = def->events;
#  334|       if (evtList.empty())
#  335|->         return false;
#  336|   
#  337|       const unsigned evtCount = evtList.size();

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:337: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  335|           return false;
#  336|   
#  337|->     const unsigned evtCount = evtList.size();
#  338|       Private::TSet defKeyEvent;
#  339|       const Private::TSet *pKeyEvents = &defKeyEvent;

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:337: misra_c_2012_rule_10_3_violation: Implicit conversion of "evtList->size()" from essential type "non-essential type" to different or narrower essential type "unsigned 32-bit int".
#  335|           return false;
#  336|   
#  337|->     const unsigned evtCount = evtList.size();
#  338|       Private::TSet defKeyEvent;
#  339|       const Private::TSet *pKeyEvents = &defKeyEvent;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:337: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  335|           return false;
#  336|   
#  337|->     const unsigned evtCount = evtList.size();
#  338|       Private::TSet defKeyEvent;
#  339|       const Private::TSet *pKeyEvents = &defKeyEvent;

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:337: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "evtList->size()" is implicitly reduced from "64-bit unsigned long" to "32-bit unsigned int".
#  335|           return false;
#  336|   
#  337|->     const unsigned evtCount = evtList.size();
#  338|       Private::TSet defKeyEvent;
#  339|       const Private::TSet *pKeyEvents = &defKeyEvent;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:341: misra_cpp_2008_rule_7_1_1_violation: The variable "it" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  339|       const Private::TSet *pKeyEvents = &defKeyEvent;
#  340|   
#  341|->     Private::TMap::const_iterator it = d->hMap.find(def->checker);
#  342|       if (d->hMap.end() == it) {
#  343|           // no override for the checker -> match the lowered checker name

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:346: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  344|           std::string str(def->checker);
#  345|           boost::algorithm::to_lower(str);
#  346|->         defKeyEvent.insert(str);
#  347|       }
#  348|       else

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:346: misra_cpp_2008_rule_0_1_7_violation: The return value of function "defKeyEvent.insert(str)" is not used.
#  344|           std::string str(def->checker);
#  345|           boost::algorithm::to_lower(str);
#  346|->         defKeyEvent.insert(str);
#  347|       }
#  348|       else

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:350: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  348|       else
#  349|           // use the corresponding set of events from d->hMap
#  350|->         pKeyEvents = &it->second;
#  351|   
#  352|       for (int idx = evtCount - 1U; idx >= 0; --idx) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:350: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  348|       else
#  349|           // use the corresponding set of events from d->hMap
#  350|->         pKeyEvents = &it->second;
#  351|   
#  352|       for (int idx = evtCount - 1U; idx >= 0; --idx) {

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:352: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  350|           pKeyEvents = &it->second;
#  351|   
#  352|->     for (int idx = evtCount - 1U; idx >= 0; --idx) {
#  353|           const DefEvent &evt = evtList[idx];
#  354|           const std::string evtName = d->stripEvtName(evt.event);

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:352: misra_c_2012_rule_10_3_violation: Implicit conversion of "evtCount - 1U" from essential type "unsigned 32-bit int" to different or narrower essential type "signed 32-bit int".
#  350|           pKeyEvents = &it->second;
#  351|   
#  352|->     for (int idx = evtCount - 1U; idx >= 0; --idx) {
#  353|           const DefEvent &evt = evtList[idx];
#  354|           const std::string evtName = d->stripEvtName(evt.event);

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:352: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  350|           pKeyEvents = &it->second;
#  351|   
#  352|->     for (int idx = evtCount - 1U; idx >= 0; --idx) {
#  353|           const DefEvent &evt = evtList[idx];
#  354|           const std::string evtName = d->stripEvtName(evt.event);

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:352: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "evtCount - 1U" with underlying type "32-bit unsigned int" is implicitly converted to a different underlying type "32-bit signed int".
#  350|           pKeyEvents = &it->second;
#  351|   
#  352|->     for (int idx = evtCount - 1U; idx >= 0; --idx) {
#  353|           const DefEvent &evt = evtList[idx];
#  354|           const std::string evtName = d->stripEvtName(evt.event);

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:352: misra_cpp_2008_rule_5_0_4_violation: "evtCount - 1U" is implicitly converted from an unsigned value to a signed value.
#  350|           pKeyEvents = &it->second;
#  351|   
#  352|->     for (int idx = evtCount - 1U; idx >= 0; --idx) {
#  353|           const DefEvent &evt = evtList[idx];
#  354|           const std::string evtName = d->stripEvtName(evt.event);

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:355: misra_c_2012_rule_10_1_violation: The expression "pKeyEvents->count(evtName)" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  353|           const DefEvent &evt = evtList[idx];
#  354|           const std::string evtName = d->stripEvtName(evt.event);
#  355|->         if (!pKeyEvents->count(evtName))
#  356|               continue;
#  357|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:355: misra_cpp_2008_rule_5_0_13_violation: The type of "pKeyEvents->count(evtName)" is not bool in the condition of "if-statement".
#  353|           const DefEvent &evt = evtList[idx];
#  354|           const std::string evtName = d->stripEvtName(evt.event);
#  355|->         if (!pKeyEvents->count(evtName))
#  356|               continue;
#  357|   

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:355: misra_cpp_2008_rule_5_3_1_violation: Operand "pKeyEvents->count(evtName)" of the operator "!" is not bool type.
#  353|           const DefEvent &evt = evtList[idx];
#  354|           const std::string evtName = d->stripEvtName(evt.event);
#  355|->         if (!pKeyEvents->count(evtName))
#  356|               continue;
#  357|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:356: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  354|           const std::string evtName = d->stripEvtName(evt.event);
#  355|           if (!pKeyEvents->count(evtName))
#  356|->             continue;
#  357|   
#  358|           // matched

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:356: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  354|           const std::string evtName = d->stripEvtName(evt.event);
#  355|           if (!pKeyEvents->count(evtName))
#  356|->             continue;
#  357|   
#  358|           // matched

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:359: misra_c_2012_rule_10_3_violation: Implicit conversion of "idx" from essential type "signed 32-bit int" to different or narrower essential type "unsigned 32-bit int".
#  357|   
#  358|           // matched
#  359|->         def->keyEventIdx = idx;
#  360|           return true;
#  361|       }

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:359: misra_cpp_2008_rule_5_0_4_violation: "idx" is implicitly converted from a signed value to an unsigned value.
#  357|   
#  358|           // matched
#  359|->         def->keyEventIdx = idx;
#  360|           return true;
#  361|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:360: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  358|           // matched
#  359|           def->keyEventIdx = idx;
#  360|->         return true;
#  361|       }
#  362|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:360: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  358|           // matched
#  359|           def->keyEventIdx = idx;
#  360|->         return true;
#  361|       }
#  362|   

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:364: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  362|   
#  363|       // use the last event as key event by default (unless deny-listed)
#  364|->     for (int pass = 0; pass < 2; ++pass) {
#  365|           for (int idx = evtCount - 1U; idx >= 0; --idx) {
#  366|               const DefEvent &evt = evtList[idx];

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:364: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  362|   
#  363|       // use the last event as key event by default (unless deny-listed)
#  364|->     for (int pass = 0; pass < 2; ++pass) {
#  365|           for (int idx = evtCount - 1U; idx >= 0; --idx) {
#  366|               const DefEvent &evt = evtList[idx];

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:365: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  363|       // use the last event as key event by default (unless deny-listed)
#  364|       for (int pass = 0; pass < 2; ++pass) {
#  365|->         for (int idx = evtCount - 1U; idx >= 0; --idx) {
#  366|               const DefEvent &evt = evtList[idx];
#  367|               if (evt.event == "#")

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:365: misra_c_2012_rule_10_3_violation: Implicit conversion of "evtCount - 1U" from essential type "unsigned 32-bit int" to different or narrower essential type "signed 32-bit int".
#  363|       // use the last event as key event by default (unless deny-listed)
#  364|       for (int pass = 0; pass < 2; ++pass) {
#  365|->         for (int idx = evtCount - 1U; idx >= 0; --idx) {
#  366|               const DefEvent &evt = evtList[idx];
#  367|               if (evt.event == "#")

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:365: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  363|       // use the last event as key event by default (unless deny-listed)
#  364|       for (int pass = 0; pass < 2; ++pass) {
#  365|->         for (int idx = evtCount - 1U; idx >= 0; --idx) {
#  366|               const DefEvent &evt = evtList[idx];
#  367|               if (evt.event == "#")

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:365: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "evtCount - 1U" with underlying type "32-bit unsigned int" is implicitly converted to a different underlying type "32-bit signed int".
#  363|       // use the last event as key event by default (unless deny-listed)
#  364|       for (int pass = 0; pass < 2; ++pass) {
#  365|->         for (int idx = evtCount - 1U; idx >= 0; --idx) {
#  366|               const DefEvent &evt = evtList[idx];
#  367|               if (evt.event == "#")

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:365: misra_cpp_2008_rule_5_0_4_violation: "evtCount - 1U" is implicitly converted from an unsigned value to a signed value.
#  363|       // use the last event as key event by default (unless deny-listed)
#  364|       for (int pass = 0; pass < 2; ++pass) {
#  365|->         for (int idx = evtCount - 1U; idx >= 0; --idx) {
#  366|               const DefEvent &evt = evtList[idx];
#  367|               if (evt.event == "#")

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:369: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  367|               if (evt.event == "#")
#  368|                   // never use comment as the key event
#  369|->                 continue;
#  370|   
#  371|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:369: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  367|               if (evt.event == "#")
#  368|                   // never use comment as the key event
#  369|->                 continue;
#  370|   
#  371|   

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:374: misra_c_2012_rule_10_1_violation: The expression "pass" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  372|               // never use trace or deny-listed event as the key event
#  373|               // (but pick the last one of there are no other events)
#  374|->             if (!pass) {
#  375|                   const std::string &evtName = evt.event;
#  376|                   if (d->traceEvts.count(evtName) || d->denyList.count(evtName))

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:374: misra_cpp_2008_rule_5_0_13_violation: The type of "pass" is not bool in the condition of "if-statement".
#  372|               // never use trace or deny-listed event as the key event
#  373|               // (but pick the last one of there are no other events)
#  374|->             if (!pass) {
#  375|                   const std::string &evtName = evt.event;
#  376|                   if (d->traceEvts.count(evtName) || d->denyList.count(evtName))

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:374: misra_cpp_2008_rule_5_3_1_violation: Operand "pass" of the operator "!" is not bool type.
#  372|               // never use trace or deny-listed event as the key event
#  373|               // (but pick the last one of there are no other events)
#  374|->             if (!pass) {
#  375|                   const std::string &evtName = evt.event;
#  376|                   if (d->traceEvts.count(evtName) || d->denyList.count(evtName))

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:376: misra_c_2012_rule_10_1_violation: The expression "this->d->denyList.count(evtName)" of non-boolean essential type is being interpreted as a boolean value for the operator "||".
#  374|               if (!pass) {
#  375|                   const std::string &evtName = evt.event;
#  376|->                 if (d->traceEvts.count(evtName) || d->denyList.count(evtName))
#  377|                       continue;
#  378|               }

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:376: misra_c_2012_rule_10_1_violation: The expression "this->d->traceEvts.count(evtName)" of non-boolean essential type is being interpreted as a boolean value for the operator "||".
#  374|               if (!pass) {
#  375|                   const std::string &evtName = evt.event;
#  376|->                 if (d->traceEvts.count(evtName) || d->denyList.count(evtName))
#  377|                       continue;
#  378|               }

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:376: misra_cpp_2008_rule_5_0_13_violation: The type of "this->d->denyList.count(evtName)" is not bool in the condition of "if-statement".
#  374|               if (!pass) {
#  375|                   const std::string &evtName = evt.event;
#  376|->                 if (d->traceEvts.count(evtName) || d->denyList.count(evtName))
#  377|                       continue;
#  378|               }

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:376: misra_cpp_2008_rule_5_0_13_violation: The type of "this->d->traceEvts.count(evtName)" is not bool in the condition of "if-statement".
#  374|               if (!pass) {
#  375|                   const std::string &evtName = evt.event;
#  376|->                 if (d->traceEvts.count(evtName) || d->denyList.count(evtName))
#  377|                       continue;
#  378|               }

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:376: misra_cpp_2008_rule_5_3_1_violation: Operand "this->d->denyList.count(evtName)" of the operator "||" is not bool type.
#  374|               if (!pass) {
#  375|                   const std::string &evtName = evt.event;
#  376|->                 if (d->traceEvts.count(evtName) || d->denyList.count(evtName))
#  377|                       continue;
#  378|               }

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:376: misra_cpp_2008_rule_5_3_1_violation: Operand "this->d->traceEvts.count(evtName)" of the operator "||" is not bool type.
#  374|               if (!pass) {
#  375|                   const std::string &evtName = evt.event;
#  376|->                 if (d->traceEvts.count(evtName) || d->denyList.count(evtName))
#  377|                       continue;
#  378|               }

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:377: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  375|                   const std::string &evtName = evt.event;
#  376|                   if (d->traceEvts.count(evtName) || d->denyList.count(evtName))
#  377|->                     continue;
#  378|               }
#  379|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:377: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  375|                   const std::string &evtName = evt.event;
#  376|                   if (d->traceEvts.count(evtName) || d->denyList.count(evtName))
#  377|->                     continue;
#  378|               }
#  379|   

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:381: misra_c_2012_rule_10_3_violation: Implicit conversion of "idx" from essential type "signed 32-bit int" to different or narrower essential type "unsigned 32-bit int".
#  379|   
#  380|               // matched
#  381|->             def->keyEventIdx = idx;
#  382|               return true;
#  383|           }

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:381: misra_cpp_2008_rule_5_0_4_violation: "idx" is implicitly converted from a signed value to an unsigned value.
#  379|   
#  380|               // matched
#  381|->             def->keyEventIdx = idx;
#  382|               return true;
#  383|           }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:382: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  380|               // matched
#  381|               def->keyEventIdx = idx;
#  382|->             return true;
#  383|           }
#  384|       }

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:382: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  380|               // matched
#  381|               def->keyEventIdx = idx;
#  382|->             return true;
#  383|           }
#  384|       }

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:390: misra_c_2012_rule_8_13_violation: The member function "KeyEventDigger::initVerbosity(Defect *)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  388|   }
#  389|   
#  390|-> void KeyEventDigger::initVerbosity(Defect *def)
#  391|   {
#  392|       TEvtList &evtList = def->events;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:390: misra_cpp_2008_rule_7_1_1_violation: The variable "def" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  388|   }
#  389|   
#  390|-> void KeyEventDigger::initVerbosity(Defect *def)
#  391|   {
#  392|       TEvtList &evtList = def->events;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:393: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  391|   {
#  392|       TEvtList &evtList = def->events;
#  393|->     const unsigned evtCount = evtList.size();
#  394|       for (unsigned idx = 0U; idx < evtCount; ++idx) {
#  395|           DefEvent &evt = evtList[idx];

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:393: misra_c_2012_rule_10_3_violation: Implicit conversion of "evtList->size()" from essential type "non-essential type" to different or narrower essential type "unsigned 32-bit int".
#  391|   {
#  392|       TEvtList &evtList = def->events;
#  393|->     const unsigned evtCount = evtList.size();
#  394|       for (unsigned idx = 0U; idx < evtCount; ++idx) {
#  395|           DefEvent &evt = evtList[idx];

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:393: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  391|   {
#  392|       TEvtList &evtList = def->events;
#  393|->     const unsigned evtCount = evtList.size();
#  394|       for (unsigned idx = 0U; idx < evtCount; ++idx) {
#  395|           DefEvent &evt = evtList[idx];

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:393: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "evtList->size()" is implicitly reduced from "64-bit unsigned long" to "32-bit unsigned int".
#  391|   {
#  392|       TEvtList &evtList = def->events;
#  393|->     const unsigned evtCount = evtList.size();
#  394|       for (unsigned idx = 0U; idx < evtCount; ++idx) {
#  395|           DefEvent &evt = evtList[idx];

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:394: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  392|       TEvtList &evtList = def->events;
#  393|       const unsigned evtCount = evtList.size();
#  394|->     for (unsigned idx = 0U; idx < evtCount; ++idx) {
#  395|           DefEvent &evt = evtList[idx];
#  396|           evt.verbosityLevel = (idx == def->keyEventIdx)

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:394: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  392|       TEvtList &evtList = def->events;
#  393|       const unsigned evtCount = evtList.size();
#  394|->     for (unsigned idx = 0U; idx < evtCount; ++idx) {
#  395|           DefEvent &evt = evtList[idx];
#  396|           evt.verbosityLevel = (idx == def->keyEventIdx)

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:396: misra_c_2012_rule_12_1_violation: Missing explicit parentheses on sub-expression: "1 + !!this->d->traceEvts.count(evt.event)".
#  394|       for (unsigned idx = 0U; idx < evtCount; ++idx) {
#  395|           DefEvent &evt = evtList[idx];
#  396|->         evt.verbosityLevel = (idx == def->keyEventIdx)
#  397|               ? /* key event */ 0
#  398|               : 1 + /* trace event */ !!d->traceEvts.count(evt.event);

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:396: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "(idx == def->keyEventIdx) ? 0 : (1 + !!this->d->traceEvts.count(evt.event))" with underlying type "bool" is implicitly converted to a different underlying type "32-bit signed int".
#  394|       for (unsigned idx = 0U; idx < evtCount; ++idx) {
#  395|           DefEvent &evt = evtList[idx];
#  396|->         evt.verbosityLevel = (idx == def->keyEventIdx)
#  397|               ? /* key event */ 0
#  398|               : 1 + /* trace event */ !!d->traceEvts.count(evt.event);

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:397: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "0" is implicitly reduced from "8-bit signed char" to "bool".
#  395|           DefEvent &evt = evtList[idx];
#  396|           evt.verbosityLevel = (idx == def->keyEventIdx)
#  397|->             ? /* key event */ 0
#  398|               : 1 + /* trace event */ !!d->traceEvts.count(evt.event);
#  399|       }

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:398: misra_c_2012_rule_10_1_violation: The expression "!!this->d->traceEvts.count(evt.event)" of essential type boolean is used as an operand to "+" where it is interpreted as a numerical value.
#  396|           evt.verbosityLevel = (idx == def->keyEventIdx)
#  397|               ? /* key event */ 0
#  398|->             : 1 + /* trace event */ !!d->traceEvts.count(evt.event);
#  399|       }
#  400|   }

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:398: misra_c_2012_rule_10_1_violation: The expression "this->d->traceEvts.count(evt.event)" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  396|           evt.verbosityLevel = (idx == def->keyEventIdx)
#  397|               ? /* key event */ 0
#  398|->             : 1 + /* trace event */ !!d->traceEvts.count(evt.event);
#  399|       }
#  400|   }

Error: MISRA C-2012 Rule 10.4 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:398: misra_c_2012_rule_10_4_violation: Essential type of the left hand operand "1" (signed) is not the same as that of the right operand "!!this->d->traceEvts.count(evt.event)"(boolean).
#  396|           evt.verbosityLevel = (idx == def->keyEventIdx)
#  397|               ? /* key event */ 0
#  398|->             : 1 + /* trace event */ !!d->traceEvts.count(evt.event);
#  399|       }
#  400|   }

Error: MISRA C++-2008 Rule 4-5-1 (CWE-480):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:398: misra_cpp_2008_rule_4_5_1_violation: "!!this->d->traceEvts.count(evt.event)" is used as an operand to the operator "+".
#  396|           evt.verbosityLevel = (idx == def->keyEventIdx)
#  397|               ? /* key event */ 0
#  398|->             : 1 + /* trace event */ !!d->traceEvts.count(evt.event);
#  399|       }
#  400|   }

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:398: misra_cpp_2008_rule_5_0_2_violation: "1 + !!this->d->traceEvts.count(evt.event)" should be parenthesized.
#  396|           evt.verbosityLevel = (idx == def->keyEventIdx)
#  397|               ? /* key event */ 0
#  398|->             : 1 + /* trace event */ !!d->traceEvts.count(evt.event);
#  399|       }
#  400|   }

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:398: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "1" is implicitly reduced from "8-bit signed char" to "bool".
#  396|           evt.verbosityLevel = (idx == def->keyEventIdx)
#  397|               ? /* key event */ 0
#  398|->             : 1 + /* trace event */ !!d->traceEvts.count(evt.event);
#  399|       }
#  400|   }

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:398: misra_cpp_2008_rule_5_3_1_violation: Operand "this->d->traceEvts.count(evt.event)" of the operator "!" is not bool type.
#  396|           evt.verbosityLevel = (idx == def->keyEventIdx)
#  397|               ? /* key event */ 0
#  398|->             : 1 + /* trace event */ !!d->traceEvts.count(evt.event);
#  399|       }
#  400|   }

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:402: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "AnnotHandler".
#  400|   }
#  401|   
#  402|-> class AnnotHandler {
#  403|       public:
#  404|           void handleDef(Defect *);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:404: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#  402|   class AnnotHandler {
#  403|       public:
#  404|->         void handleDef(Defect *);
#  405|   
#  406|       private:

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:410: misra_c_2012_rule_8_13_violation: The member function "AnnotHandler::handleDef(Defect *)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  408|   };
#  409|   
#  410|-> void AnnotHandler::handleDef(Defect *pDef)
#  411|   {
#  412|       boost::smatch sm;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:410: misra_cpp_2008_rule_7_1_1_violation: The variable "pDef" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  408|   };
#  409|   
#  410|-> void AnnotHandler::handleDef(Defect *pDef)
#  411|   {
#  412|       boost::smatch sm;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:420: misra_cpp_2008_rule_11_0_1_violation: Member "lexer" is not private but "CovParser::Private" is a non-POD type.
#  418|   
#  419|   struct CovParser::Private {
#  420|->     ErrFileLexer            lexer;
#  421|       std::string             fileName;
#  422|       const bool              silent;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:421: misra_cpp_2008_rule_11_0_1_violation: Member "fileName" is not private but "CovParser::Private" is a non-POD type.
#  419|   struct CovParser::Private {
#  420|       ErrFileLexer            lexer;
#  421|->     std::string             fileName;
#  422|       const bool              silent;
#  423|       bool                    hasError;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:422: misra_cpp_2008_rule_11_0_1_violation: Member "silent" is not private but "CovParser::Private" is a non-POD type.
#  420|       ErrFileLexer            lexer;
#  421|       std::string             fileName;
#  422|->     const bool              silent;
#  423|       bool                    hasError;
#  424|       EToken                  code;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:423: misra_cpp_2008_rule_11_0_1_violation: Member "hasError" is not private but "CovParser::Private" is a non-POD type.
#  421|       std::string             fileName;
#  422|       const bool              silent;
#  423|->     bool                    hasError;
#  424|       EToken                  code;
#  425|       KeyEventDigger          keDigger;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:424: misra_cpp_2008_rule_11_0_1_violation: Member "code" is not private but "CovParser::Private" is a non-POD type.
#  422|       const bool              silent;
#  423|       bool                    hasError;
#  424|->     EToken                  code;
#  425|       KeyEventDigger          keDigger;
#  426|       AnnotHandler            annotHdl;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:425: misra_cpp_2008_rule_11_0_1_violation: Member "keDigger" is not private but "CovParser::Private" is a non-POD type.
#  423|       bool                    hasError;
#  424|       EToken                  code;
#  425|->     KeyEventDigger          keDigger;
#  426|       AnnotHandler            annotHdl;
#  427|       LangDetector            langDetector;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:426: misra_cpp_2008_rule_11_0_1_violation: Member "annotHdl" is not private but "CovParser::Private" is a non-POD type.
#  424|       EToken                  code;
#  425|       KeyEventDigger          keDigger;
#  426|->     AnnotHandler            annotHdl;
#  427|       LangDetector            langDetector;
#  428|   

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:427: misra_cpp_2008_rule_11_0_1_violation: Member "langDetector" is not private but "CovParser::Private" is a non-POD type.
#  425|       KeyEventDigger          keDigger;
#  426|       AnnotHandler            annotHdl;
#  427|->     LangDetector            langDetector;
#  428|   
#  429|       Private(InStream &input_):

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:427: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "langDetector" clashes with "LangDetector"
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:33: misra_typographically_ambiguous_orig: (Previously declared symbol "LangDetector" at line 33 of "../../src/parser-common.hh")
#  425|       KeyEventDigger          keDigger;
#  426|       AnnotHandler            annotHdl;
#  427|->     LangDetector            langDetector;
#  428|   
#  429|       Private(InStream &input_):

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:429: misra_c_2012_rule_8_13_violation: The pointer variable "input_" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  427|       LangDetector            langDetector;
#  428|   
#  429|->     Private(InStream &input_):
#  430|           lexer(input_.str()),
#  431|           fileName(input_.fileName()),

Error: MISRA C++-2008 Rule 7-1-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:429: misra_cpp_2008_rule_7_1_2_violation: The pointer variable "input_" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  427|       LangDetector            langDetector;
#  428|   
#  429|->     Private(InStream &input_):
#  430|           lexer(input_.str()),
#  431|           fileName(input_.fileName()),

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:440: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#  438|       void parseError(const std::string &msg);
#  439|       void wrongToken(EToken expected = T_NULL);
#  440|->     bool seekForToken(EToken, TEvtList *pEvtList);
#  441|       bool parseMsg(TEvtList *pEvtList);
#  442|       bool parseNext(Defect *);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:442: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#  440|       bool seekForToken(EToken, TEvtList *pEvtList);
#  441|       bool parseMsg(TEvtList *pEvtList);
#  442|->     bool parseNext(Defect *);
#  443|   };
#  444|   

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:445: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "AbstractParser" are not called in this constructor.
#  443|   };
#  444|   
#  445|-> CovParser::CovParser(InStream &input):
#  446|       d(new Private(input))
#  447|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:446: misra_c_2012_directive_4_12_violation: A call to the function "operator new(472UL)" performs dynamic memory allocation.
#  444|   
#  445|   CovParser::CovParser(InStream &input):
#  446|->     d(new Private(input))
#  447|   {
#  448|   }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:446: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  444|   
#  445|   CovParser::CovParser(InStream &input):
#  446|->     d(new Private(input))
#  447|   {
#  448|   }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:450: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  448|   }
#  449|   
#  450|-> CovParser::~CovParser()
#  451|   {
#  452|       delete d;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:455: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  453|   }
#  454|   
#  455|-> bool CovParser::hasError() const
#  456|   {
#  457|       return d->lexer.hasError()

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:461: misra_c_2012_rule_5_8_violation: Identifier "parseError" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:33: external_linkage_symbol: Declaring an external linkage function with identifier "parseError".
#  459|   }
#  460|   
#  461|-> void CovParser::Private::parseError(const std::string &msg)
#  462|   {
#  463|       this->hasError = true;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:465: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  463|       this->hasError = true;
#  464|       if (this->silent)
#  465|->         return;
#  466|   
#  467|       std::cerr << this->fileName

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:465: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  463|       this->hasError = true;
#  464|       if (this->silent)
#  465|->         return;
#  466|   
#  467|       std::cerr << this->fileName

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:465: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  463|       this->hasError = true;
#  464|       if (this->silent)
#  465|->         return;
#  466|   
#  467|       std::cerr << this->fileName

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:465: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  463|       this->hasError = true;
#  464|       if (this->silent)
#  465|->         return;
#  466|   
#  467|       std::cerr << this->fileName

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:467: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  465|           return;
#  466|   
#  467|->     std::cerr << this->fileName
#  468|           << ":" << this->lexer.lineNo()
#  469|           << ": parse error: " << msg << "\n";

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:472: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "void CovParser::Private::wrongToken(CovParserImpl::EToken)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:439: prev_declaration: (see previous declaration of "CovParser::Private::wrongToken" at line 439)
#  470|   }
#  471|   
#  472|-> void CovParser::Private::wrongToken(const EToken expected)
#  473|   {
#  474|       std::ostringstream str;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:475: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  473|   {
#  474|       std::ostringstream str;
#  475|->     str << "wrong token: " << this->code;
#  476|       if (T_NULL != expected)
#  477|           str << " (expected " << expected << ")";

Error: MISRA C++-2008 Rule 14-8-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:475: misra_cpp_2008_rule_14_8_2_violation: Overload resolution set contains both specialized and unspecialized functions.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:98: non_template_candidate_example: (example non-template candidate function "CovParserImpl::operator<<" at line 98)
/usr/include/c++/11/ostream:232: template_candidate_example: (example template candidate function "std::basic_ostream<_CharT, _Traits>::operator<<(long double)" at line 232 of "/usr/lib/gcc/x86_64-redhat-linux/11/../../../../include/c++/11/ostream")
#  473|   {
#  474|       std::ostringstream str;
#  475|->     str << "wrong token: " << this->code;
#  476|       if (T_NULL != expected)
#  477|           str << " (expected " << expected << ")";

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:477: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  475|       str << "wrong token: " << this->code;
#  476|       if (T_NULL != expected)
#  477|->         str << " (expected " << expected << ")";
#  478|       this->parseError(str.str());
#  479|   }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:477: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  475|       str << "wrong token: " << this->code;
#  476|       if (T_NULL != expected)
#  477|->         str << " (expected " << expected << ")";
#  478|       this->parseError(str.str());
#  479|   }

Error: MISRA C++-2008 Rule 14-8-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:477: misra_cpp_2008_rule_14_8_2_violation: Overload resolution set contains both specialized and unspecialized functions.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:98: non_template_candidate_example: (example non-template candidate function "CovParserImpl::operator<<" at line 98)
/usr/include/c++/11/ostream:232: template_candidate_example: (example template candidate function "std::basic_ostream<_CharT, _Traits>::operator<<(long double)" at line 232 of "/usr/lib/gcc/x86_64-redhat-linux/11/../../../../include/c++/11/ostream")
#  475|       str << "wrong token: " << this->code;
#  476|       if (T_NULL != expected)
#  477|->         str << " (expected " << expected << ")";
#  478|       this->parseError(str.str());
#  479|   }

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:477: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  475|       str << "wrong token: " << this->code;
#  476|       if (T_NULL != expected)
#  477|->         str << " (expected " << expected << ")";
#  478|       this->parseError(str.str());
#  479|   }

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:481: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "bool CovParser::Private::seekForToken(CovParserImpl::EToken, TEvtList *)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:440: prev_declaration: (see previous declaration of "CovParser::Private::seekForToken" at line 440)
#  479|   }
#  480|   
#  481|-> bool CovParser::Private::seekForToken(const EToken token, TEvtList *pEvtList)
#  482|   {
#  483|       for (;;) {

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:481: misra_cpp_2008_rule_7_1_1_violation: The variable "pEvtList" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  479|   }
#  480|   
#  481|-> bool CovParser::Private::seekForToken(const EToken token, TEvtList *pEvtList)
#  482|   {
#  483|       for (;;) {

Error: MISRA C++-2008 Rule 6-5-1 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:483: misra_cpp_2008_rule_6_5_1_violation: There is no loop counter.
#  481|   bool CovParser::Private::seekForToken(const EToken token, TEvtList *pEvtList)
#  482|   {
#  483|->     for (;;) {
#  484|           if (token == this->code)
#  485|               return true;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:485: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  483|       for (;;) {
#  484|           if (token == this->code)
#  485|->             return true;
#  486|   
#  487|           bool stopReached = false;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:485: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  483|       for (;;) {
#  484|           if (token == this->code)
#  485|->             return true;
#  486|   
#  487|           bool stopReached = false;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:485: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  483|       for (;;) {
#  484|           if (token == this->code)
#  485|->             return true;
#  486|   
#  487|           bool stopReached = false;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:485: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  483|       for (;;) {
#  484|           if (token == this->code)
#  485|->             return true;
#  486|   
#  487|           bool stopReached = false;

Error: MISRA C-2012 Rule 16.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:503: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:508: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:489: misra_c_2012_rule_16_1_violation: The switch statement is not well formed.
#  487|           bool stopReached = false;
#  488|   
#  489|->         switch (this->code) {
#  490|               case T_NULL:
#  491|                   // read the first defect from the input stream

Error: MISRA C++-2008 Rule 6-4-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:503: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:508: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:489: misra_cpp_2008_rule_6_4_3_violation: The switch statement is not well formed.
#  487|           bool stopReached = false;
#  488|   
#  489|->         switch (this->code) {
#  490|               case T_NULL:
#  491|                   // read the first defect from the input stream

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:503: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  501|                   break;
#  502|   
#  503|->             case T_CHECKER:
#  504|                   // stop the seek now (to allow recovery in higher levels)
#  505|                   stopReached = true;

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:503: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  501|                   break;
#  502|   
#  503|->             case T_CHECKER:
#  504|                   // stop the seek now (to allow recovery in higher levels)
#  505|                   stopReached = true;

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:508: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  506|                   // fall through!
#  507|   
#  508|->             default:
#  509|                   this->wrongToken(token);
#  510|           }

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:508: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  506|                   // fall through!
#  507|   
#  508|->             default:
#  509|                   this->wrongToken(token);
#  510|           }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:515: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  513|   
#  514|           if (stopReached || (T_NULL == this->code))
#  515|->             return false;
#  516|       }
#  517|   }

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:515: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  513|   
#  514|           if (stopReached || (T_NULL == this->code))
#  515|->             return false;
#  516|       }
#  517|   }

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:515: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  513|   
#  514|           if (stopReached || (T_NULL == this->code))
#  515|->             return false;
#  516|       }
#  517|   }

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:515: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  513|   
#  514|           if (stopReached || (T_NULL == this->code))
#  515|->             return false;
#  516|       }
#  517|   }

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:519: misra_cpp_2008_rule_7_1_1_violation: The variable "pEvtList" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  517|   }
#  518|   
#  519|-> bool CovParser::Private::parseMsg(TEvtList *pEvtList)
#  520|   {
#  521|       bool anyComment = false;

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:521: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "anyComment" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:526: end_of_scope: Reached end of scope without using value stored in "anyComment".
#  519|   bool CovParser::Private::parseMsg(TEvtList *pEvtList)
#  520|   {
#  521|->     bool anyComment = false;
#  522|   
#  523|       // parse event

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:526: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  524|       if (!this->seekForToken(T_EVENT, pEvtList)) {
#  525|           this->wrongToken(T_EVENT);
#  526|->         return false;
#  527|       }
#  528|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:526: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  524|       if (!this->seekForToken(T_EVENT, pEvtList)) {
#  525|           this->wrongToken(T_EVENT);
#  526|->         return false;
#  527|       }
#  528|   

Error: MISRA C-2012 Rule 15.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:551: goto_stmt: Goto statement with a target outside the loop.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:558: goto_stmt: Goto statement with a target outside the loop.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:532: misra_c_2012_rule_15_4_violation: The loop has more than one iteration terminating break or goto statements.
#  530|   
#  531|       // parse extra msg
#  532|->     for (;;) {
#  533|           this->code = this->lexer.readNext();
#  534|           switch (this->code) {

Error: MISRA C++-2008 Rule 6-5-1 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:532: misra_cpp_2008_rule_6_5_1_violation: There is no loop counter.
#  530|   
#  531|       // parse extra msg
#  532|->     for (;;) {
#  533|           this->code = this->lexer.readNext();
#  534|           switch (this->code) {

Error: MISRA C++-2008 Rule 6-6-4 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:551: misra_cpp_2008_rule_6_6_4_violation: Break or goto statement inside "for (; true; )" loop.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:558: misra_cpp_2008_rule_6_6_4_violation: Break or goto statement inside "for (; true; )" loop.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:532: misra_cpp_2008_rule_6_6_4_violation: This "for (; true; )" loop contains more than one break or goto statements used for loop termination.
#  530|   
#  531|       // parse extra msg
#  532|->     for (;;) {
#  533|           this->code = this->lexer.readNext();
#  534|           switch (this->code) {

Error: MISRA C-2012 Rule 16.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:535: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:542: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:548: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:557: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:534: misra_c_2012_rule_16_1_violation: The switch statement is not well formed.
#  532|       for (;;) {
#  533|           this->code = this->lexer.readNext();
#  534|->         switch (this->code) {
#  535|               case T_NULL:
#  536|               case T_EMPTY:

Error: MISRA C-2012 Rule 16.6 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:534: misra_c_2012_rule_16_6_violation: The switch statement "switch (this->code)" has no conforming switch clauses.
#  532|       for (;;) {
#  533|           this->code = this->lexer.readNext();
#  534|->         switch (this->code) {
#  535|               case T_NULL:
#  536|               case T_EMPTY:

Error: MISRA C++-2008 Rule 6-4-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:538: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:540: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:542: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:546: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:548: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:551: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:555: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:557: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:558: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:534: misra_cpp_2008_rule_6_4_3_violation: The switch statement is not well formed.
#  532|       for (;;) {
#  533|           this->code = this->lexer.readNext();
#  534|->         switch (this->code) {
#  535|               case T_NULL:
#  536|               case T_EMPTY:

Error: MISRA C++-2008 Rule 6-4-8 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:534: misra_cpp_2008_rule_6_4_8_violation: The switch statement has no case-clause.
#  532|       for (;;) {
#  533|           this->code = this->lexer.readNext();
#  534|->         switch (this->code) {
#  535|               case T_NULL:
#  536|               case T_EMPTY:

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:535: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  533|           this->code = this->lexer.readNext();
#  534|           switch (this->code) {
#  535|->             case T_NULL:
#  536|               case T_EMPTY:
#  537|               case T_CHECKER:

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:535: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  533|           this->code = this->lexer.readNext();
#  534|           switch (this->code) {
#  535|->             case T_NULL:
#  536|               case T_EMPTY:
#  537|               case T_CHECKER:

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:540: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  538|               case T_EVENT:
#  539|                   // all OK
#  540|->                 return true;
#  541|   
#  542|               case T_COMMENT:

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:540: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  538|               case T_EVENT:
#  539|                   // all OK
#  540|->                 return true;
#  541|   
#  542|               case T_COMMENT:

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:542: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  540|                   return true;
#  541|   
#  542|->             case T_COMMENT:
#  543|                   // capture a comment event
#  544|                   pEvtList->push_back(this->lexer.evt());

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:542: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  540|                   return true;
#  541|   
#  542|->             case T_COMMENT:
#  543|                   // capture a comment event
#  544|                   pEvtList->push_back(this->lexer.evt());

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:545: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "anyComment" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:540: end_of_scope: Reached end of scope without using value stored in "anyComment".
#  543|                   // capture a comment event
#  544|                   pEvtList->push_back(this->lexer.evt());
#  545|->                 anyComment = true;
#  546|                   continue;
#  547|   

Error: MISRA C++-2008 Rule 6-6-3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:546: misra_cpp_2008_rule_6_6_3_violation: "continue;" statement is not used in a well-formed for loop.
#  544|                   pEvtList->push_back(this->lexer.evt());
#  545|                   anyComment = true;
#  546|->                 continue;
#  547|   
#  548|               case T_UNKNOWN:

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:548: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  546|                   continue;
#  547|   
#  548|->             case T_UNKNOWN:
#  549|                   if (anyComment)
#  550|                       // interleaving of multi-line msgs with comments not allowed

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:548: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  546|                   continue;
#  547|   
#  548|->             case T_UNKNOWN:
#  549|                   if (anyComment)
#  550|                       // interleaving of multi-line msgs with comments not allowed

Error: MISRA C-2012 Rule 15.1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:551: misra_c_2012_rule_15_1_violation: Using "goto" statement.
#  549|                   if (anyComment)
#  550|                       // interleaving of multi-line msgs with comments not allowed
#  551|->                     goto fail;
#  552|   
#  553|                   pEvtList->back().msg += "\n";

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:551: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  549|                   if (anyComment)
#  550|                       // interleaving of multi-line msgs with comments not allowed
#  551|->                     goto fail;
#  552|   
#  553|                   pEvtList->back().msg += "\n";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:551: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  549|                   if (anyComment)
#  550|                       // interleaving of multi-line msgs with comments not allowed
#  551|->                     goto fail;
#  552|   
#  553|                   pEvtList->back().msg += "\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:553: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  551|                       goto fail;
#  552|   
#  553|->                 pEvtList->back().msg += "\n";
#  554|                   pEvtList->back().msg += this->lexer.evt().msg;
#  555|                   continue;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:554: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  552|   
#  553|                   pEvtList->back().msg += "\n";
#  554|->                 pEvtList->back().msg += this->lexer.evt().msg;
#  555|                   continue;
#  556|   

Error: MISRA C++-2008 Rule 6-6-3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:555: misra_cpp_2008_rule_6_6_3_violation: "continue;" statement is not used in a well-formed for loop.
#  553|                   pEvtList->back().msg += "\n";
#  554|                   pEvtList->back().msg += this->lexer.evt().msg;
#  555|->                 continue;
#  556|   
#  557|               default:

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:557: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  555|                   continue;
#  556|   
#  557|->             default:
#  558|                   goto fail;
#  559|           }

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:557: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  555|                   continue;
#  556|   
#  557|->             default:
#  558|                   goto fail;
#  559|           }

Error: MISRA C-2012 Rule 15.1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:558: misra_c_2012_rule_15_1_violation: Using "goto" statement.
#  556|   
#  557|               default:
#  558|->                 goto fail;
#  559|           }
#  560|       }

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:567: misra_cpp_2008_rule_7_1_1_violation: The variable "def" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  565|   }
#  566|   
#  567|-> bool CovParser::Private::parseNext(Defect *def)
#  568|   {
#  569|       // parse defect header

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:572: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  570|       TEvtList evtList;
#  571|       if (!this->seekForToken(T_CHECKER, &evtList))
#  572|->         return false;
#  573|   
#  574|       *def = this->lexer.def();

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:572: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  570|       TEvtList evtList;
#  571|       if (!this->seekForToken(T_CHECKER, &evtList))
#  572|->         return false;
#  573|   
#  574|       *def = this->lexer.def();

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:572: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  570|       TEvtList evtList;
#  571|       if (!this->seekForToken(T_CHECKER, &evtList))
#  572|->         return false;
#  573|   
#  574|       *def = this->lexer.def();

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:572: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  570|       TEvtList evtList;
#  571|       if (!this->seekForToken(T_CHECKER, &evtList))
#  572|->         return false;
#  573|   
#  574|       *def = this->lexer.def();

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:574: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  572|           return false;
#  573|   
#  574|->     *def = this->lexer.def();
#  575|       def->events.swap(evtList);
#  576|   

Error: MISRA C++-2008 Rule 6-5-1 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:579: misra_cpp_2008_rule_6_5_1_violation: There is no loop counter.
#  577|       // parse defect body
#  578|       this->code = this->lexer.readNext();
#  579|->     for (;;) {
#  580|           switch (this->code) {
#  581|               case T_EMPTY:

Error: MISRA C-2012 Rule 16.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:581: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:591: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:595: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:601: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:580: misra_c_2012_rule_16_1_violation: The switch statement is not well formed.
#  578|       this->code = this->lexer.readNext();
#  579|       for (;;) {
#  580|->         switch (this->code) {
#  581|               case T_EMPTY:
#  582|                   // unless T_EVENT follows, we are done with this defect

Error: MISRA C-2012 Rule 16.6 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:580: misra_c_2012_rule_16_6_violation: The switch statement "switch (this->code)" has no conforming switch clauses.
#  578|       this->code = this->lexer.readNext();
#  579|       for (;;) {
#  580|->         switch (this->code) {
#  581|               case T_EMPTY:
#  582|                   // unless T_EVENT follows, we are done with this defect

Error: MISRA C++-2008 Rule 6-4-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:581: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:588: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:592: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:593: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:595: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:599: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:601: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:580: misra_cpp_2008_rule_6_4_3_violation: The switch statement is not well formed.
#  578|       this->code = this->lexer.readNext();
#  579|       for (;;) {
#  580|->         switch (this->code) {
#  581|               case T_EMPTY:
#  582|                   // unless T_EVENT follows, we are done with this defect

Error: MISRA C++-2008 Rule 6-4-8 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:580: misra_cpp_2008_rule_6_4_8_violation: The switch statement has no case-clause.
#  578|       this->code = this->lexer.readNext();
#  579|       for (;;) {
#  580|->         switch (this->code) {
#  581|               case T_EMPTY:
#  582|                   // unless T_EVENT follows, we are done with this defect

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:581: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  579|       for (;;) {
#  580|           switch (this->code) {
#  581|->             case T_EMPTY:
#  582|                   // unless T_EVENT follows, we are done with this defect
#  583|                   do {

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:581: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  579|       for (;;) {
#  580|           switch (this->code) {
#  581|->             case T_EMPTY:
#  582|                   // unless T_EVENT follows, we are done with this defect
#  583|                   do {

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:588: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  586|                   while (T_EMPTY == this->code);
#  587|                   if (T_EVENT == this->code)
#  588|->                     continue;
#  589|                   // fall through!
#  590|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:588: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  586|                   while (T_EMPTY == this->code);
#  587|                   if (T_EVENT == this->code)
#  588|->                     continue;
#  589|                   // fall through!
#  590|   

Error: MISRA C++-2008 Rule 6-6-3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:588: misra_cpp_2008_rule_6_6_3_violation: "continue;" statement is not used in a well-formed for loop.
#  586|                   while (T_EMPTY == this->code);
#  587|                   if (T_EVENT == this->code)
#  588|->                     continue;
#  589|                   // fall through!
#  590|   

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:591: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  589|                   // fall through!
#  590|   
#  591|->             case T_NULL:
#  592|               case T_CHECKER:
#  593|                   goto done;

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:591: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  589|                   // fall through!
#  590|   
#  591|->             case T_NULL:
#  592|               case T_CHECKER:
#  593|                   goto done;

Error: MISRA C-2012 Rule 15.1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:593: misra_c_2012_rule_15_1_violation: Using "goto" statement.
#  591|               case T_NULL:
#  592|               case T_CHECKER:
#  593|->                 goto done;
#  594|   
#  595|               case T_COMMENT:

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:595: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  593|                   goto done;
#  594|   
#  595|->             case T_COMMENT:
#  596|                   // capture a comment event
#  597|                   def->events.push_back(this->lexer.evt());

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:595: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  593|                   goto done;
#  594|   
#  595|->             case T_COMMENT:
#  596|                   // capture a comment event
#  597|                   def->events.push_back(this->lexer.evt());

Error: MISRA C++-2008 Rule 6-6-3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:599: misra_cpp_2008_rule_6_6_3_violation: "continue;" statement is not used in a well-formed for loop.
#  597|                   def->events.push_back(this->lexer.evt());
#  598|                   this->code = this->lexer.readNext();
#  599|->                 continue;
#  600|   
#  601|               default:

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:601: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  599|                   continue;
#  600|   
#  601|->             default:
#  602|                   this->parseMsg(&def->events);
#  603|           }

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:601: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  599|                   continue;
#  600|   
#  601|->             default:
#  602|                   this->parseMsg(&def->events);
#  603|           }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:602: misra_c_2012_rule_17_7_violation: The return value of a non-void function "parseMsg" is unused.
#  600|   
#  601|               default:
#  602|->                 this->parseMsg(&def->events);
#  603|           }
#  604|       }

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:602: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->parseMsg(&def->events)" is not used.
#  600|   
#  601|               default:
#  602|->                 this->parseMsg(&def->events);
#  603|           }
#  604|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:609: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  607|       if (!this->keDigger.guessKeyEvent(def)) {
#  608|           this->parseError("failed to guess key event");
#  609|->         return false;
#  610|       }
#  611|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:609: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  607|       if (!this->keDigger.guessKeyEvent(def)) {
#  608|           this->parseError("failed to guess key event");
#  609|->         return false;
#  610|       }
#  611|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:620: misra_cpp_2008_rule_7_1_1_violation: The variable "def" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  618|   }
#  619|   
#  620|-> bool CovParser::getNext(Defect *def)
#  621|   {
#  622|       // error recovery loop

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:625: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  623|       do {
#  624|           if (d->parseNext(def))
#  625|->             return true;
#  626|       }
#  627|       while (T_NULL != d->code);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:625: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  623|       do {
#  624|           if (d->parseNext(def))
#  625|->             return true;
#  626|       }
#  627|       while (T_NULL != d->code);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:625: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  623|       do {
#  624|           if (d->parseNext(def))
#  625|->             return true;
#  626|       }
#  627|       while (T_NULL != d->code);

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.cc:625: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  623|       do {
#  624|           if (d->parseNext(def))
#  625|->             return true;
#  626|       }
#  627|       while (T_NULL != d->code);

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011-2012 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:25: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "CovParser".
#   23|   #include "abstract-parser.hh"
#   24|   
#   25|-> class CovParser: public AbstractParser {
#   26|       public:
#   27|           CovParser(InStream &input);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:29: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   27|           CovParser(InStream &input);
#   28|   
#   29|->         virtual ~CovParser();
#   30|           bool getNext(Defect *);
#   31|           bool hasError() const;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:30: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   28|   
#   29|           virtual ~CovParser();
#   30|->         bool getNext(Defect *);
#   31|           bool hasError() const;
#   32|   

Error: MISRA C++-2008 Rule 10-3-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:30: misra_cpp_2008_rule_10_3_2_violation: Virtual function "CovParser::getNext(Defect *)" is not explicitly declared 'virtual'.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:42: misra_implicitly_virtual_because: function "CovParser::getNext(Defect *)" overrides virtual function "AbstractParser::getNext(Defect *)" declared at line 42 of "../../src/abstract-parser.hh".
#   28|   
#   29|           virtual ~CovParser();
#   30|->         bool getNext(Defect *);
#   31|           bool hasError() const;
#   32|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:31: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   29|           virtual ~CovParser();
#   30|           bool getNext(Defect *);
#   31|->         bool hasError() const;
#   32|   
#   33|       private:

Error: MISRA C++-2008 Rule 10-3-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:31: misra_cpp_2008_rule_10_3_2_violation: Virtual function "CovParser::hasError() const" is not explicitly declared 'virtual'.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:43: misra_implicitly_virtual_because: function "CovParser::hasError() const" overrides virtual function "AbstractParser::hasError() const" declared at line 43 of "../../src/abstract-parser.hh".
#   29|           virtual ~CovParser();
#   30|           bool getNext(Defect *);
#   31|->         bool hasError() const;
#   32|   
#   33|       private:

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:34: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   32|   
#   33|       private:
#   34|->         CovParser(const Parser &);
#   35|           CovParser& operator=(const Parser &);
#   36|   

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:34: misra_c_2012_rule_8_6_violation: Function "CovParser" is declared but never defined.
#   32|   
#   33|       private:
#   34|->         CovParser(const Parser &);
#   35|           CovParser& operator=(const Parser &);
#   36|   

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:34: misra_cpp_2008_rule_3_2_2_violation: Function "CovParser" is declared but never defined.
#   32|   
#   33|       private:
#   34|->         CovParser(const Parser &);
#   35|           CovParser& operator=(const Parser &);
#   36|   

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:34: misra_cpp_2008_rule_3_2_4_violation: Function "CovParser" is declared but never defined.
#   32|   
#   33|       private:
#   34|->         CovParser(const Parser &);
#   35|           CovParser& operator=(const Parser &);
#   36|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:35: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   33|       private:
#   34|           CovParser(const Parser &);
#   35|->         CovParser& operator=(const Parser &);
#   36|   
#   37|           struct Private;

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:35: misra_c_2012_rule_8_6_violation: Function "operator =" is declared but never defined.
#   33|       private:
#   34|           CovParser(const Parser &);
#   35|->         CovParser& operator=(const Parser &);
#   36|   
#   37|           struct Private;

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:35: misra_cpp_2008_rule_3_2_2_violation: Function "operator =" is declared but never defined.
#   33|       private:
#   34|           CovParser(const Parser &);
#   35|->         CovParser& operator=(const Parser &);
#   36|   
#   37|           struct Private;

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:35: misra_cpp_2008_rule_3_2_4_violation: Function "operator =" is declared but never defined.
#   33|       private:
#   34|           CovParser(const Parser &);
#   35|->         CovParser& operator=(const Parser &);
#   36|   
#   37|           struct Private;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:41: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "KeyEventDigger".
#   39|   };
#   40|   
#   41|-> class KeyEventDigger {
#   42|       public:
#   43|           KeyEventDigger();

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:43: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   41|   class KeyEventDigger {
#   42|       public:
#   43|->         KeyEventDigger();
#   44|           ~KeyEventDigger();
#   45|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:44: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   42|       public:
#   43|           KeyEventDigger();
#   44|->         ~KeyEventDigger();
#   45|   
#   46|           /// initialize def->keyEventIdx, return true on success

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:53: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   51|   
#   52|       private:
#   53|->         KeyEventDigger(const KeyEventDigger &);
#   54|           KeyEventDigger& operator=(const KeyEventDigger &);
#   55|   

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:53: misra_c_2012_rule_8_6_violation: Function "KeyEventDigger" is declared but never defined.
#   51|   
#   52|       private:
#   53|->         KeyEventDigger(const KeyEventDigger &);
#   54|           KeyEventDigger& operator=(const KeyEventDigger &);
#   55|   

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:53: misra_cpp_2008_rule_3_2_2_violation: Function "KeyEventDigger" is declared but never defined.
#   51|   
#   52|       private:
#   53|->         KeyEventDigger(const KeyEventDigger &);
#   54|           KeyEventDigger& operator=(const KeyEventDigger &);
#   55|   

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:53: misra_cpp_2008_rule_3_2_4_violation: Function "KeyEventDigger" is declared but never defined.
#   51|   
#   52|       private:
#   53|->         KeyEventDigger(const KeyEventDigger &);
#   54|           KeyEventDigger& operator=(const KeyEventDigger &);
#   55|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:54: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   52|       private:
#   53|           KeyEventDigger(const KeyEventDigger &);
#   54|->         KeyEventDigger& operator=(const KeyEventDigger &);
#   55|   
#   56|           struct Private;

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:54: misra_c_2012_rule_8_6_violation: Function "operator =" is declared but never defined.
#   52|       private:
#   53|           KeyEventDigger(const KeyEventDigger &);
#   54|->         KeyEventDigger& operator=(const KeyEventDigger &);
#   55|   
#   56|           struct Private;

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:54: misra_cpp_2008_rule_3_2_2_violation: Function "operator =" is declared but never defined.
#   52|       private:
#   53|           KeyEventDigger(const KeyEventDigger &);
#   54|->         KeyEventDigger& operator=(const KeyEventDigger &);
#   55|   
#   56|           struct Private;

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csparser.hh:54: misra_cpp_2008_rule_3_2_4_violation: Function "operator =" is declared but never defined.
#   52|       private:
#   53|           KeyEventDigger(const KeyEventDigger &);
#   54|->         KeyEventDigger& operator=(const KeyEventDigger &);
#   55|   
#   56|           struct Private;

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2012 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:26: misra_cpp_2008_rule_3_4_1_violation: Symbol "SortFactory" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:161: single_use: Symbol "SortFactory" is only used in "main(int, char **)".
#   24|   #include <boost/program_options.hpp>
#   25|   
#   26|-> class SortFactory {
#   27|       public:
#   28|           AbstractWriter* create(const std::string &key, EColorMode cm);

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:26: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "SortFactory".
#   24|   #include <boost/program_options.hpp>
#   25|   
#   26|-> class SortFactory {
#   27|       public:
#   28|           AbstractWriter* create(const std::string &key, EColorMode cm);

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:41: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "AbstractWriter" are not called in this constructor.
#   39|   
#   40|       public:
#   41|->         GenericSort(const EColorMode cm):
#   42|               cm_(cm)
#   43|           {

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:41: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "cm" clashes with "cm_"
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:38: misra_typographically_ambiguous_orig: (Previously declared symbol "cm_" at line 38)
#   39|   
#   40|       public:
#   41|->         GenericSort(const EColorMode cm):
#   42|               cm_(cm)
#   43|           {

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:46: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   44|           }
#   45|   
#   46|->         virtual void flush() {
#   47|               // sort the container
#   48|               std::sort(cont_.begin(), cont_.end());

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:46: misra_cpp_2008_rule_10_3_1_violation: Virtual function "GenericSort<DefByChecker>::flush()" has already been defined in "AbstractWriter::flush()".
#   44|           }
#   45|   
#   46|->         virtual void flush() {
#   47|               // sort the container
#   48|               std::sort(cont_.begin(), cont_.end());

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:46: misra_cpp_2008_rule_10_3_1_violation: Virtual function "GenericSort<DefByPath>::flush()" has already been defined in "AbstractWriter::flush()".
#   44|           }
#   45|   
#   46|->         virtual void flush() {
#   47|               // sort the container
#   48|               std::sort(cont_.begin(), cont_.end());

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:51: misra_cpp_2008_rule_7_1_1_violation: The variable "writer" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   49|   
#   50|               // use the same output format is the input format
#   51|->             AbstractWriter *writer =
#   52|                   createWriter(std::cout, this->inputFormat(), cm_, scanProps_);
#   53|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:55: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#   53|   
#   54|               // write the data
#   55|->             for (const Defect &def : cont_)
#   56|                   writer->handleDef(def);
#   57|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:56: misra_c_2012_rule_15_6_violation: The body of the "for" loop is not a compound statement.
#   54|               // write the data
#   55|               for (const Defect &def : cont_)
#   56|->                 writer->handleDef(def);
#   57|   
#   58|               // flush data and destroy writer

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:56: misra_cpp_2008_rule_6_3_1_violation: The body of the "for" loop is not a compound statement.
#   54|               // write the data
#   55|               for (const Defect &def : cont_)
#   56|->                 writer->handleDef(def);
#   57|   
#   58|               // flush data and destroy writer

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:63: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   61|           }
#   62|   
#   63|->         virtual const TScanProps& getScanProps() const {
#   64|               return scanProps_;
#   65|           }

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:63: misra_cpp_2008_rule_10_3_1_violation: Virtual function "GenericSort<DefByChecker>::getScanProps[abi:cxx11]() const" has already been defined in "AbstractWriter::getScanProps[abi:cxx11]() const".
#   61|           }
#   62|   
#   63|->         virtual const TScanProps& getScanProps() const {
#   64|               return scanProps_;
#   65|           }

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:63: misra_cpp_2008_rule_10_3_1_violation: Virtual function "GenericSort<DefByPath>::getScanProps[abi:cxx11]() const" has already been defined in "AbstractWriter::getScanProps[abi:cxx11]() const".
#   61|           }
#   62|   
#   63|->         virtual const TScanProps& getScanProps() const {
#   64|               return scanProps_;
#   65|           }

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:67: misra_cpp_2008_rule_10_3_1_violation: Virtual function "GenericSort<DefByChecker>::setScanProps(TScanProps const &)" has already been defined in "AbstractWriter::setScanProps(TScanProps const &)".
#   65|           }
#   66|   
#   67|->         virtual void setScanProps(const TScanProps &scanProps) {
#   68|               scanProps_ = scanProps;
#   69|           }

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:67: misra_cpp_2008_rule_10_3_1_violation: Virtual function "GenericSort<DefByPath>::setScanProps(TScanProps const &)" has already been defined in "AbstractWriter::setScanProps(TScanProps const &)".
#   65|           }
#   66|   
#   67|->         virtual void setScanProps(const TScanProps &scanProps) {
#   68|               scanProps_ = scanProps;
#   69|           }

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:67: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "scanProps" clashes with "scanProps_"
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:37: misra_typographically_ambiguous_orig: (Previously declared symbol "scanProps_" at line 37)
#   65|           }
#   66|   
#   67|->         virtual void setScanProps(const TScanProps &scanProps) {
#   68|               scanProps_ = scanProps;
#   69|           }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:68: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   66|   
#   67|           virtual void setScanProps(const TScanProps &scanProps) {
#   68|->             scanProps_ = scanProps;
#   69|           }
#   70|   

Error: MISRA C-2012 Rule 8.10 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:77: misra_c_2012_rule_8_10_violation: The inline function "cmpFileNames(Defect const &, Defect const &)" is not declared with a static scope.
#   75|   };
#   76|   
#   77|-> inline bool cmpFileNames(const Defect &a, const Defect &b)
#   78|   {
#   79|       const TEvtList &ea = a.events;

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:77: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   75|   };
#   76|   
#   77|-> inline bool cmpFileNames(const Defect &a, const Defect &b)
#   78|   {
#   79|       const TEvtList &ea = a.events;

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:77: misra_c_2012_rule_8_7_violation: Function "cmpFileNames" has external linkage but is only used in one translation unit.
#   75|   };
#   76|   
#   77|-> inline bool cmpFileNames(const Defect &a, const Defect &b)
#   78|   {
#   79|       const TEvtList &ea = a.events;

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:77: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   75|   };
#   76|   
#   77|-> inline bool cmpFileNames(const Defect &a, const Defect &b)
#   78|   {
#   79|       const TEvtList &ea = a.events;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:77: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "cmpFileNames".
#   75|   };
#   76|   
#   77|-> inline bool cmpFileNames(const Defect &a, const Defect &b)
#   78|   {
#   79|       const TEvtList &ea = a.events;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:85: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   83|       bool result;
#   84|       if (cmpEvents(&result, ea[a.keyEventIdx], eb[b.keyEventIdx]))
#   85|->         return result;
#   86|   
#   87|       // the key events are incomparable, compare all events

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:85: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   83|       bool result;
#   84|       if (cmpEvents(&result, ea[a.keyEventIdx], eb[b.keyEventIdx]))
#   85|->         return result;
#   86|   
#   87|       // the key events are incomparable, compare all events

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:85: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   83|       bool result;
#   84|       if (cmpEvents(&result, ea[a.keyEventIdx], eb[b.keyEventIdx]))
#   85|->         return result;
#   86|   
#   87|       // the key events are incomparable, compare all events

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:85: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   83|       bool result;
#   84|       if (cmpEvents(&result, ea[a.keyEventIdx], eb[b.keyEventIdx]))
#   85|->         return result;
#   86|   
#   87|       // the key events are incomparable, compare all events

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:88: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   86|   
#   87|       // the key events are incomparable, compare all events
#   88|->     for (unsigned idx = 0;; ++idx) {
#   89|           if (eb.size() <= idx)
#   90|               // this includes the case where the events are equal

Error: MISRA C-2012 Rule 14.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:88: misra_c_2012_rule_14_2_violation: The condition clause of the for loop does not use the loop counter variable "idx".
#   86|   
#   87|       // the key events are incomparable, compare all events
#   88|->     for (unsigned idx = 0;; ++idx) {
#   89|           if (eb.size() <= idx)
#   90|               // this includes the case where the events are equal

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:88: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   86|   
#   87|       // the key events are incomparable, compare all events
#   88|->     for (unsigned idx = 0;; ++idx) {
#   89|           if (eb.size() <= idx)
#   90|               // this includes the case where the events are equal

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:88: misra_cpp_2008_rule_5_0_4_violation: "0" is implicitly converted from a signed value to an unsigned value.
#   86|   
#   87|       // the key events are incomparable, compare all events
#   88|->     for (unsigned idx = 0;; ++idx) {
#   89|           if (eb.size() <= idx)
#   90|               // this includes the case where the events are equal

Error: MISRA C++-2008 Rule 6-5-1 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:88: misra_cpp_2008_rule_6_5_1_violation: There is no loop counter.
#   86|   
#   87|       // the key events are incomparable, compare all events
#   88|->     for (unsigned idx = 0;; ++idx) {
#   89|           if (eb.size() <= idx)
#   90|               // this includes the case where the events are equal

Error: MISRA C++-2008 Rule 6-5-5 (CWE-1095):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:88: misra_cpp_2008_rule_6_5_5_violation: The non-loop-counter variable "idx" is modified in condition or expression clause of a for loop.
#   86|   
#   87|       // the key events are incomparable, compare all events
#   88|->     for (unsigned idx = 0;; ++idx) {
#   89|           if (eb.size() <= idx)
#   90|               // this includes the case where the events are equal

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:91: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   89|           if (eb.size() <= idx)
#   90|               // this includes the case where the events are equal
#   91|->             return false;
#   92|   
#   93|           if (ea.size() <= idx)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:91: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   89|           if (eb.size() <= idx)
#   90|               // this includes the case where the events are equal
#   91|->             return false;
#   92|   
#   93|           if (ea.size() <= idx)

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:91: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   89|           if (eb.size() <= idx)
#   90|               // this includes the case where the events are equal
#   91|->             return false;
#   92|   
#   93|           if (ea.size() <= idx)

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:91: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   89|           if (eb.size() <= idx)
#   90|               // this includes the case where the events are equal
#   91|->             return false;
#   92|   
#   93|           if (ea.size() <= idx)

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:94: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   92|   
#   93|           if (ea.size() <= idx)
#   94|->             return true;
#   95|   
#   96|           if (cmpEvents(&result, ea[idx], eb[idx]))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:94: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   92|   
#   93|           if (ea.size() <= idx)
#   94|->             return true;
#   95|   
#   96|           if (cmpEvents(&result, ea[idx], eb[idx]))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:94: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   92|   
#   93|           if (ea.size() <= idx)
#   94|->             return true;
#   95|   
#   96|           if (cmpEvents(&result, ea[idx], eb[idx]))

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:94: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   92|   
#   93|           if (ea.size() <= idx)
#   94|->             return true;
#   95|   
#   96|           if (cmpEvents(&result, ea[idx], eb[idx]))

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:97: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   95|   
#   96|           if (cmpEvents(&result, ea[idx], eb[idx]))
#   97|->             return result;
#   98|       }
#   99|   }

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:97: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   95|   
#   96|           if (cmpEvents(&result, ea[idx], eb[idx]))
#   97|->             return result;
#   98|       }
#   99|   }

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:97: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   95|   
#   96|           if (cmpEvents(&result, ea[idx], eb[idx]))
#   97|->             return result;
#   98|       }
#   99|   }

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:97: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   95|   
#   96|           if (cmpEvents(&result, ea[idx], eb[idx]))
#   97|->             return result;
#   98|       }
#   99|   }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:101: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   99|   }
#  100|   
#  101|-> struct DefByChecker: public Defect { };
#  102|   bool operator<(const DefByChecker &a, const DefByChecker &b)
#  103|   {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:101: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "DefByChecker".
#   99|   }
#  100|   
#  101|-> struct DefByChecker: public Defect { };
#  102|   bool operator<(const DefByChecker &a, const DefByChecker &b)
#  103|   {

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:102: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  100|   
#  101|   struct DefByChecker: public Defect { };
#  102|-> bool operator<(const DefByChecker &a, const DefByChecker &b)
#  103|   {
#  104|       // compare checker names

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:102: misra_c_2012_rule_8_7_violation: Function "operator <" has external linkage but is only used in one translation unit.
#  100|   
#  101|   struct DefByChecker: public Defect { };
#  102|-> bool operator<(const DefByChecker &a, const DefByChecker &b)
#  103|   {
#  104|       // compare checker names

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:102: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  100|   
#  101|   struct DefByChecker: public Defect { };
#  102|-> bool operator<(const DefByChecker &a, const DefByChecker &b)
#  103|   {
#  104|       // compare checker names

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:102: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "operator <".
#  100|   
#  101|   struct DefByChecker: public Defect { };
#  102|-> bool operator<(const DefByChecker &a, const DefByChecker &b)
#  103|   {
#  104|       // compare checker names

Error: MISRA C-2012 Directive 4.9 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:105: misra_c_2012_directive_4_9_violation: Function-like macro is used.
#  103|   {
#  104|       // compare checker names
#  105|->     RETURN_IF_COMPARED(a, b, checker);
#  106|   
#  107|       // resolve key events

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:105: misra_c_2012_rule_14_4_violation: The condition expression "false" does not have an essentially boolean type.
#  103|   {
#  104|       // compare checker names
#  105|->     RETURN_IF_COMPARED(a, b, checker);
#  106|   
#  107|       // resolve key events

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:105: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  103|   {
#  104|       // compare checker names
#  105|->     RETURN_IF_COMPARED(a, b, checker);
#  106|   
#  107|       // resolve key events

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:105: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  103|   {
#  104|       // compare checker names
#  105|->     RETURN_IF_COMPARED(a, b, checker);
#  106|   
#  107|       // resolve key events

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:105: misra_cpp_2008_rule_5_0_13_violation: The type of "0" is not bool in the condition of "doWhile-statement".
#  103|   {
#  104|       // compare checker names
#  105|->     RETURN_IF_COMPARED(a, b, checker);
#  106|   
#  107|       // resolve key events

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:105: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  103|   {
#  104|       // compare checker names
#  105|->     RETURN_IF_COMPARED(a, b, checker);
#  106|   
#  107|       // resolve key events

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:105: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  103|   {
#  104|       // compare checker names
#  105|->     RETURN_IF_COMPARED(a, b, checker);
#  106|   
#  107|       // resolve key events

Error: MISRA C++-2008 Rule 8-0-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:114: misra_cpp_2008_rule_8_0_1_violation: Declarator list has more than one declarator.
#  112|           // sort ShellCheck warnings by the [SC1234] suffixes
#  113|           const RE reCode("^.* \\[SC([0-9]+)\\]$");
#  114|->         std::string aCode, bCode;
#  115|           boost::smatch sm;
#  116|           if (boost::regex_match(ea.msg, sm, reCode))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:117: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  115|           boost::smatch sm;
#  116|           if (boost::regex_match(ea.msg, sm, reCode))
#  117|->             aCode = sm[1];
#  118|           if (boost::regex_match(eb.msg, sm, reCode))
#  119|               bCode = sm[1];

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:117: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  115|           boost::smatch sm;
#  116|           if (boost::regex_match(ea.msg, sm, reCode))
#  117|->             aCode = sm[1];
#  118|           if (boost::regex_match(eb.msg, sm, reCode))
#  119|               bCode = sm[1];

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:117: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  115|           boost::smatch sm;
#  116|           if (boost::regex_match(ea.msg, sm, reCode))
#  117|->             aCode = sm[1];
#  118|           if (boost::regex_match(eb.msg, sm, reCode))
#  119|               bCode = sm[1];

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:119: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  117|               aCode = sm[1];
#  118|           if (boost::regex_match(eb.msg, sm, reCode))
#  119|->             bCode = sm[1];
#  120|           if (aCode < bCode)
#  121|               return true;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:119: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  117|               aCode = sm[1];
#  118|           if (boost::regex_match(eb.msg, sm, reCode))
#  119|->             bCode = sm[1];
#  120|           if (aCode < bCode)
#  121|               return true;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:119: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  117|               aCode = sm[1];
#  118|           if (boost::regex_match(eb.msg, sm, reCode))
#  119|->             bCode = sm[1];
#  120|           if (aCode < bCode)
#  121|               return true;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:121: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  119|               bCode = sm[1];
#  120|           if (aCode < bCode)
#  121|->             return true;
#  122|           if (bCode < aCode)
#  123|               return false;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:121: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  119|               bCode = sm[1];
#  120|           if (aCode < bCode)
#  121|->             return true;
#  122|           if (bCode < aCode)
#  123|               return false;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:121: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  119|               bCode = sm[1];
#  120|           if (aCode < bCode)
#  121|->             return true;
#  122|           if (bCode < aCode)
#  123|               return false;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:121: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  119|               bCode = sm[1];
#  120|           if (aCode < bCode)
#  121|->             return true;
#  122|           if (bCode < aCode)
#  123|               return false;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:123: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  121|               return true;
#  122|           if (bCode < aCode)
#  123|->             return false;
#  124|       }
#  125|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:123: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  121|               return true;
#  122|           if (bCode < aCode)
#  123|->             return false;
#  124|       }
#  125|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:123: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  121|               return true;
#  122|           if (bCode < aCode)
#  123|->             return false;
#  124|       }
#  125|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:123: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  121|               return true;
#  122|           if (bCode < aCode)
#  123|->             return false;
#  124|       }
#  125|   

Error: MISRA C-2012 Directive 4.9 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:127: misra_c_2012_directive_4_9_violation: Function-like macro is used.
#  125|   
#  126|       // compare name of the key events
#  127|->     RETURN_IF_COMPARED(ea, eb, event);
#  128|   
#  129|       return cmpFileNames(a, b);

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:127: misra_c_2012_rule_14_4_violation: The condition expression "false" does not have an essentially boolean type.
#  125|   
#  126|       // compare name of the key events
#  127|->     RETURN_IF_COMPARED(ea, eb, event);
#  128|   
#  129|       return cmpFileNames(a, b);

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:127: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  125|   
#  126|       // compare name of the key events
#  127|->     RETURN_IF_COMPARED(ea, eb, event);
#  128|   
#  129|       return cmpFileNames(a, b);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:127: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  125|   
#  126|       // compare name of the key events
#  127|->     RETURN_IF_COMPARED(ea, eb, event);
#  128|   
#  129|       return cmpFileNames(a, b);

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:127: misra_cpp_2008_rule_5_0_13_violation: The type of "0" is not bool in the condition of "doWhile-statement".
#  125|   
#  126|       // compare name of the key events
#  127|->     RETURN_IF_COMPARED(ea, eb, event);
#  128|   
#  129|       return cmpFileNames(a, b);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:127: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  125|   
#  126|       // compare name of the key events
#  127|->     RETURN_IF_COMPARED(ea, eb, event);
#  128|   
#  129|       return cmpFileNames(a, b);

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:127: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  125|   
#  126|       // compare name of the key events
#  127|->     RETURN_IF_COMPARED(ea, eb, event);
#  128|   
#  129|       return cmpFileNames(a, b);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:132: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  130|   }
#  131|   
#  132|-> struct DefByPath: public Defect { };
#  133|   bool operator<(const DefByPath &a, const DefByPath &b)
#  134|   {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:132: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "DefByPath".
#  130|   }
#  131|   
#  132|-> struct DefByPath: public Defect { };
#  133|   bool operator<(const DefByPath &a, const DefByPath &b)
#  134|   {

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:133: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  131|   
#  132|   struct DefByPath: public Defect { };
#  133|-> bool operator<(const DefByPath &a, const DefByPath &b)
#  134|   {
#  135|       return cmpFileNames(a, b);

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:133: misra_c_2012_rule_8_7_violation: Function "operator <" has external linkage but is only used in one translation unit.
#  131|   
#  132|   struct DefByPath: public Defect { };
#  133|-> bool operator<(const DefByPath &a, const DefByPath &b)
#  134|   {
#  135|       return cmpFileNames(a, b);

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:133: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  131|   
#  132|   struct DefByPath: public Defect { };
#  133|-> bool operator<(const DefByPath &a, const DefByPath &b)
#  134|   {
#  135|       return cmpFileNames(a, b);

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:133: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "operator <".
#  131|   
#  132|   struct DefByPath: public Defect { };
#  133|-> bool operator<(const DefByPath &a, const DefByPath &b)
#  134|   {
#  135|       return cmpFileNames(a, b);

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:138: misra_c_2012_rule_8_13_violation: The member function "SortFactory::create(std::string const &, EColorMode)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  136|   }
#  137|   
#  138|-> AbstractWriter* SortFactory::create(const std::string &key, const EColorMode cm)
#  139|   {
#  140|       if (!key.compare("checker"))

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:138: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "AbstractWriter *SortFactory::create(const std::string &, EColorMode)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:28: prev_declaration: (see previous declaration of "SortFactory::create" at line 28)
#  136|   }
#  137|   
#  138|-> AbstractWriter* SortFactory::create(const std::string &key, const EColorMode cm)
#  139|   {
#  140|       if (!key.compare("checker"))

Error: MISRA C++-2008 Rule 9-3-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:138: misra_cpp_2008_rule_9_3_3_violation: Member function "create" does not reference members, so can be made static.
#  136|   }
#  137|   
#  138|-> AbstractWriter* SortFactory::create(const std::string &key, const EColorMode cm)
#  139|   {
#  140|       if (!key.compare("checker"))

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:140: misra_c_2012_rule_10_1_violation: The expression "key->compare("checker")" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  138|   AbstractWriter* SortFactory::create(const std::string &key, const EColorMode cm)
#  139|   {
#  140|->     if (!key.compare("checker"))
#  141|           return new GenericSort<DefByChecker>(cm);
#  142|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:140: misra_cpp_2008_rule_5_0_13_violation: The type of "key->compare("checker")" is not bool in the condition of "if-statement".
#  138|   AbstractWriter* SortFactory::create(const std::string &key, const EColorMode cm)
#  139|   {
#  140|->     if (!key.compare("checker"))
#  141|           return new GenericSort<DefByChecker>(cm);
#  142|   

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:140: misra_cpp_2008_rule_5_3_1_violation: Operand "key->compare("checker")" of the operator "!" is not bool type.
#  138|   AbstractWriter* SortFactory::create(const std::string &key, const EColorMode cm)
#  139|   {
#  140|->     if (!key.compare("checker"))
#  141|           return new GenericSort<DefByChecker>(cm);
#  142|   

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:141: misra_c_2012_directive_4_12_violation: A call to the function "operator new(144UL)" performs dynamic memory allocation.
#  139|   {
#  140|       if (!key.compare("checker"))
#  141|->         return new GenericSort<DefByChecker>(cm);
#  142|   
#  143|       if (!key.compare("path"))

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:141: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  139|   {
#  140|       if (!key.compare("checker"))
#  141|->         return new GenericSort<DefByChecker>(cm);
#  142|   
#  143|       if (!key.compare("path"))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:141: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  139|   {
#  140|       if (!key.compare("checker"))
#  141|->         return new GenericSort<DefByChecker>(cm);
#  142|   
#  143|       if (!key.compare("path"))

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:141: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  139|   {
#  140|       if (!key.compare("checker"))
#  141|->         return new GenericSort<DefByChecker>(cm);
#  142|   
#  143|       if (!key.compare("path"))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:141: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  139|   {
#  140|       if (!key.compare("checker"))
#  141|->         return new GenericSort<DefByChecker>(cm);
#  142|   
#  143|       if (!key.compare("path"))

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:141: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  139|   {
#  140|       if (!key.compare("checker"))
#  141|->         return new GenericSort<DefByChecker>(cm);
#  142|   
#  143|       if (!key.compare("path"))

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:143: misra_c_2012_rule_10_1_violation: The expression "key->compare("path")" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  141|           return new GenericSort<DefByChecker>(cm);
#  142|   
#  143|->     if (!key.compare("path"))
#  144|           return new GenericSort<DefByPath>(cm);
#  145|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:143: misra_cpp_2008_rule_5_0_13_violation: The type of "key->compare("path")" is not bool in the condition of "if-statement".
#  141|           return new GenericSort<DefByChecker>(cm);
#  142|   
#  143|->     if (!key.compare("path"))
#  144|           return new GenericSort<DefByPath>(cm);
#  145|   

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:143: misra_cpp_2008_rule_5_3_1_violation: Operand "key->compare("path")" of the operator "!" is not bool type.
#  141|           return new GenericSort<DefByChecker>(cm);
#  142|   
#  143|->     if (!key.compare("path"))
#  144|           return new GenericSort<DefByPath>(cm);
#  145|   

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:144: misra_c_2012_directive_4_12_violation: A call to the function "operator new(144UL)" performs dynamic memory allocation.
#  142|   
#  143|       if (!key.compare("path"))
#  144|->         return new GenericSort<DefByPath>(cm);
#  145|   
#  146|       // no comparator matched

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:144: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  142|   
#  143|       if (!key.compare("path"))
#  144|->         return new GenericSort<DefByPath>(cm);
#  145|   
#  146|       // no comparator matched

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:144: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  142|   
#  143|       if (!key.compare("path"))
#  144|->         return new GenericSort<DefByPath>(cm);
#  145|   
#  146|       // no comparator matched

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:144: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  142|   
#  143|       if (!key.compare("path"))
#  144|->         return new GenericSort<DefByPath>(cm);
#  145|   
#  146|       // no comparator matched

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:144: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  142|   
#  143|       if (!key.compare("path"))
#  144|->         return new GenericSort<DefByPath>(cm);
#  145|   
#  146|       // no comparator matched

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:144: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  142|   
#  143|       if (!key.compare("path"))
#  144|->         return new GenericSort<DefByPath>(cm);
#  145|   
#  146|       // no comparator matched

Error: MISRA C++-2008 Rule 4-10-2 (CWE-547):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:147: misra_cpp_2008_rule_4_10_2_violation: Literal zero (0) is used as the null-pointer-constant.
#  145|   
#  146|       // no comparator matched
#  147|->     return 0;
#  148|   }
#  149|   

Error: MISRA C-2012 Rule 5.9 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:150: misra_c_2012_rule_5_9_violation: Identifier "name" is already used to represent an object with internal linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:452: internal_linkage_symbol: Declaring an internal linkage object with identifier "name".
#  148|   }
#  149|   
#  150|-> static std::string name;
#  151|   
#  152|   namespace po = boost::program_options;

Error: MISRA C-2012 Rule 8.9 (CWE-1126):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:150: misra_c_2012_rule_8_9_violation: Symbol "name" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:161: single_use: Symbol "name" is only used in "main(int, char **)".
#  148|   }
#  149|   
#  150|-> static std::string name;
#  151|   
#  152|   namespace po = boost::program_options;

Error: MISRA C++-2008 Rule 2-10-5 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:150: misra_cpp_2008_rule_2_10_5_violation: Identifier "name" is already used to represent an object with static storage duration.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:452: static_storage_symbol: Declaring a static storage duration object with identifier "name".
#  148|   }
#  149|   
#  150|-> static std::string name;
#  151|   
#  152|   namespace po = boost::program_options;

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:150: misra_cpp_2008_rule_3_4_1_violation: Symbol "name" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:161: single_use: Symbol "name" is only used in "main(int, char **)".
#  148|   }
#  149|   
#  150|-> static std::string name;
#  151|   
#  152|   namespace po = boost::program_options;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:150: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "name".
#  148|   }
#  149|   
#  150|-> static std::string name;
#  151|   
#  152|   namespace po = boost::program_options;

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:155: misra_c_2012_rule_5_8_violation: Identifier "printUsage" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:529: external_linkage_symbol: Declaring an external linkage function with identifier "printUsage".
#  153|   
#  154|   template <class TDesc, class TStream>
#  155|-> void printUsage(TStream &str, const TDesc &desc)
#  156|   {
#  157|       desc.print(str);

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:155: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  153|   
#  154|   template <class TDesc, class TStream>
#  155|-> void printUsage(TStream &str, const TDesc &desc)
#  156|   {
#  157|       desc.print(str);

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:155: misra_c_2012_rule_8_7_violation: Function "printUsage" has external linkage but is only used in one translation unit.
#  153|   
#  154|   template <class TDesc, class TStream>
#  155|-> void printUsage(TStream &str, const TDesc &desc)
#  156|   {
#  157|       desc.print(str);

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:155: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  153|   
#  154|   template <class TDesc, class TStream>
#  155|-> void printUsage(TStream &str, const TDesc &desc)
#  156|   {
#  157|       desc.print(str);

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:155: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "printUsage".
#  153|   
#  154|   template <class TDesc, class TStream>
#  155|-> void printUsage(TStream &str, const TDesc &desc)
#  156|   {
#  157|       desc.print(str);

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:161: misra_c_2012_rule_5_8_violation: Identifier "main" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: external_linkage_symbol: Declaring an external linkage function with identifier "main".
#  159|   }
#  160|   
#  161|-> int main(int argc, char *argv[])
#  162|   {
#  163|       using std::string;

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:161: misra_c_2012_rule_8_13_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  159|   }
#  160|   
#  161|-> int main(int argc, char *argv[])
#  162|   {
#  163|       using std::string;

Error: MISRA C++-2008 Rule 15-3-2 (CWE-703):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:161: misra_cpp_2008_rule_15_3_2_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block.
#  159|   }
#  160|   
#  161|-> int main(int argc, char *argv[])
#  162|   {
#  163|       using std::string;

Error: MISRA C++-2008 Rule 15-3-4 (CWE-755):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:161: misra_cpp_2008_rule_15_3_4_violation: In program root function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_any_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:239: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_any_cast>".
#  159|   }
#  160|   
#  161|-> int main(int argc, char *argv[])
#  162|   {
#  163|       using std::string;

Error: MISRA C++-2008 Rule 15-3-4 (CWE-755):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:161: misra_cpp_2008_rule_15_3_4_violation: In program root function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_lexical_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:175: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_lexical_cast>".
#  159|   }
#  160|   
#  161|-> int main(int argc, char *argv[])
#  162|   {
#  163|       using std::string;

Error: MISRA C++-2008 Rule 15-5-3 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:161: misra_cpp_2008_rule_15_5_3_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block. terminate() could be called implicitly.
#  159|   }
#  160|   
#  161|-> int main(int argc, char *argv[])
#  162|   {
#  163|       using std::string;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:161: misra_cpp_2008_rule_7_1_1_violation: The variable "argc" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  159|   }
#  160|   
#  161|-> int main(int argc, char *argv[])
#  162|   {
#  163|       using std::string;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:161: misra_cpp_2008_rule_7_1_1_violation: The variable "argv" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  159|   }
#  160|   
#  161|-> int main(int argc, char *argv[])
#  162|   {
#  163|       using std::string;

Error: MISRA C++-2008 Rule 7-1-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:161: misra_cpp_2008_rule_7_1_2_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  159|   }
#  160|   
#  161|-> int main(int argc, char *argv[])
#  162|   {
#  163|       using std::string;

Error: UNCAUGHT_EXCEPT (CWE-248):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:161: root_function: In function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_any_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:239: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_any_cast>".
#  159|   }
#  160|   
#  161|-> int main(int argc, char *argv[])
#  162|   {
#  163|       using std::string;

Error: UNCAUGHT_EXCEPT (CWE-248):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:161: root_function: In function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_lexical_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:175: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_lexical_cast>".
#  159|   }
#  160|   
#  161|-> int main(int argc, char *argv[])
#  162|   {
#  163|       using std::string;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:165: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  163|       using std::string;
#  164|   
#  165|->     ::name = argv[0];
#  166|   
#  167|       po::variables_map vm;

Error: MISRA C-2012 Rule 5.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:171: misra_c_2012_rule_5_6_violation: Identifier "TStringList" is already used to represent a typedef.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:40: typedef_declaration: Declaring a typedef with identifier "TStringList".
#  169|               + " [options] [file1.err [...]], where options are");
#  170|   
#  171|->     typedef std::vector<string> TStringList;
#  172|       string key;
#  173|   

Error: MISRA C++-2008 Rule 2-10-3 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:171: misra_cpp_2008_rule_2_10_3_violation: Identifier "TStringList" is already used to represent a typedef.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:40: typedef_declaration: Declaring a typedef with identifier "TStringList".
#  169|               + " [options] [file1.err [...]], where options are");
#  170|   
#  171|->     typedef std::vector<string> TStringList;
#  172|       string key;
#  173|   

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:171: misra_cpp_2008_rule_3_4_1_violation: Declaration of "TStringList" could be made in an inner scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:238: inner_scope: Declaration could be moved to this block.
#  169|               + " [options] [file1.err [...]], where options are");
#  170|   
#  171|->     typedef std::vector<string> TStringList;
#  172|       string key;
#  173|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:175: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#  173|   
#  174|       try {
#  175|->         desc.add_options()
#  176|               ("key", po::value<string>(&key)->default_value("path"),
#  177|                "checker, path")

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:182: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#  180|           addColorOptions(&desc);
#  181|   
#  182|->         desc.add_options()
#  183|               ("help", "produce help message")
#  184|               ("version", "print version");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:187: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#  185|   
#  186|           po::options_description hidden("");
#  187|->         hidden.add_options()
#  188|               ("input-file", po::value<TStringList>(), "input file");
#  189|           po::positional_options_description p;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:190: misra_c_2012_rule_17_7_violation: The return value of a non-void function "add" is unused.
#  188|               ("input-file", po::value<TStringList>(), "input file");
#  189|           po::positional_options_description p;
#  190|->         p.add("input-file", -1);
#  191|   
#  192|           po::store(po::parse_command_line(argc, argv, desc), vm);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:190: misra_cpp_2008_rule_0_1_7_violation: The return value of function "p.add("input-file", -1)" is not used.
#  188|               ("input-file", po::value<TStringList>(), "input file");
#  189|           po::positional_options_description p;
#  190|->         p.add("input-file", -1);
#  191|   
#  192|           po::store(po::parse_command_line(argc, argv, desc), vm);

Error: MISRA C-2012 Rule 11.3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:192: misra_c_2012_rule_11_3_violation: The object pointer expression "argv" of type "char **" is cast to type "char const * const *".
#  190|           p.add("input-file", -1);
#  191|   
#  192|->         po::store(po::parse_command_line(argc, argv, desc), vm);
#  193|           po::notify(vm);
#  194|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:196: misra_c_2012_rule_17_7_violation: The return value of a non-void function "add" is unused.
#  194|   
#  195|           po::options_description opts;
#  196|->         opts.add(desc).add(hidden);
#  197|           po::store(po::command_line_parser(argc, argv).
#  198|                   options(opts).positional(p).run(), vm);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:196: misra_cpp_2008_rule_0_1_7_violation: The return value of function "opts.add(desc)->add(hidden)" is not used.
#  194|   
#  195|           po::options_description opts;
#  196|->         opts.add(desc).add(hidden);
#  197|           po::store(po::command_line_parser(argc, argv).
#  198|                   options(opts).positional(p).run(), vm);

Error: MISRA C-2012 Rule 11.3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:197: misra_c_2012_rule_11_3_violation: The object pointer expression "argv" of type "char **" is cast to type "char const * const *".
#  195|           po::options_description opts;
#  196|           opts.add(desc).add(hidden);
#  197|->         po::store(po::command_line_parser(argc, argv).
#  198|                   options(opts).positional(p).run(), vm);
#  199|           po::notify(vm);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:202: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  200|       }
#  201|       catch (po::error &e) {
#  202|->         std::cerr << name << ": error: " << e.what() << "\n\n";
#  203|           printUsage(std::cerr, desc);
#  204|           return 1;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:204: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  202|           std::cerr << name << ": error: " << e.what() << "\n\n";
#  203|           printUsage(std::cerr, desc);
#  204|->         return 1;
#  205|       }
#  206|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:204: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  202|           std::cerr << name << ": error: " << e.what() << "\n\n";
#  203|           printUsage(std::cerr, desc);
#  204|->         return 1;
#  205|       }
#  206|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:207: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("help", std::allocator<char>()))" does not have an essentially boolean type.
#  205|       }
#  206|   
#  207|->     if (vm.count("help")) {
#  208|           printUsage(std::cout, desc);
#  209|           return 0;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:207: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("help", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  205|       }
#  206|   
#  207|->     if (vm.count("help")) {
#  208|           printUsage(std::cout, desc);
#  209|           return 0;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:209: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  207|       if (vm.count("help")) {
#  208|           printUsage(std::cout, desc);
#  209|->         return 0;
#  210|       }
#  211|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:209: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  207|       if (vm.count("help")) {
#  208|           printUsage(std::cout, desc);
#  209|->         return 0;
#  210|       }
#  211|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:212: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("version", std::allocator<char>()))" does not have an essentially boolean type.
#  210|       }
#  211|   
#  212|->     if (vm.count("version")) {
#  213|           std::cout << CS_VERSION << "\n";
#  214|           return 0;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:212: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("version", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  210|       }
#  211|   
#  212|->     if (vm.count("version")) {
#  213|           std::cout << CS_VERSION << "\n";
#  214|           return 0;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:213: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  211|   
#  212|       if (vm.count("version")) {
#  213|->         std::cout << CS_VERSION << "\n";
#  214|           return 0;
#  215|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:214: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  212|       if (vm.count("version")) {
#  213|           std::cout << CS_VERSION << "\n";
#  214|->         return 0;
#  215|       }
#  216|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:214: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  212|       if (vm.count("version")) {
#  213|           std::cout << CS_VERSION << "\n";
#  214|->         return 0;
#  215|       }
#  216|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:218: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  216|   
#  217|       EColorMode cm;
#  218|->     const char *err;
#  219|       if (!readColorOptions(&cm, &err, vm)) {
#  220|           std::cerr << name << ": error: " << err << std::endl;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:220: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  218|       const char *err;
#  219|       if (!readColorOptions(&cm, &err, vm)) {
#  220|->         std::cerr << name << ": error: " << err << std::endl;
#  221|           return 1;
#  222|       }

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:220: misra_cpp_2008_rule_8_4_4_violation: Function identifier "endl" is not used to call the function or preceded by &.
#  218|       const char *err;
#  219|       if (!readColorOptions(&cm, &err, vm)) {
#  220|->         std::cerr << name << ": error: " << err << std::endl;
#  221|           return 1;
#  222|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:221: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  219|       if (!readColorOptions(&cm, &err, vm)) {
#  220|           std::cerr << name << ": error: " << err << std::endl;
#  221|->         return 1;
#  222|       }
#  223|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:221: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  219|       if (!readColorOptions(&cm, &err, vm)) {
#  220|           std::cerr << name << ": error: " << err << std::endl;
#  221|->         return 1;
#  222|       }
#  223|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:225: misra_cpp_2008_rule_7_1_1_violation: The variable "eng" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  223|   
#  224|       SortFactory factory;
#  225|->     AbstractWriter *eng = factory.create(key, cm);
#  226|       if (!eng) {
#  227|           std::cerr << name << ": error: unknown key: " << key << "\n\n";

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:226: misra_c_2012_rule_10_1_violation: The expression "eng" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  224|       SortFactory factory;
#  225|       AbstractWriter *eng = factory.create(key, cm);
#  226|->     if (!eng) {
#  227|           std::cerr << name << ": error: unknown key: " << key << "\n\n";
#  228|           printUsage(std::cerr, desc);

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:226: misra_cpp_2008_rule_5_0_13_violation: The type of "eng" is not bool in the condition of "if-statement".
#  224|       SortFactory factory;
#  225|       AbstractWriter *eng = factory.create(key, cm);
#  226|->     if (!eng) {
#  227|           std::cerr << name << ": error: unknown key: " << key << "\n\n";
#  228|           printUsage(std::cerr, desc);

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:226: misra_cpp_2008_rule_5_3_1_violation: Operand "eng" of the operator "!" is not bool type.
#  224|       SortFactory factory;
#  225|       AbstractWriter *eng = factory.create(key, cm);
#  226|->     if (!eng) {
#  227|           std::cerr << name << ": error: unknown key: " << key << "\n\n";
#  228|           printUsage(std::cerr, desc);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:227: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  225|       AbstractWriter *eng = factory.create(key, cm);
#  226|       if (!eng) {
#  227|->         std::cerr << name << ": error: unknown key: " << key << "\n\n";
#  228|           printUsage(std::cerr, desc);
#  229|           return 1;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:229: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  227|           std::cerr << name << ": error: unknown key: " << key << "\n\n";
#  228|           printUsage(std::cerr, desc);
#  229|->         return 1;
#  230|       }
#  231|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:229: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  227|           std::cerr << name << ": error: unknown key: " << key << "\n\n";
#  228|           printUsage(std::cerr, desc);
#  229|->         return 1;
#  230|       }
#  231|   

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:232: misra_c_2012_rule_10_3_violation: Implicit conversion of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("quiet", std::allocator<char>()))" from essential type "non-essential type" to different or narrower essential type "boolean".
#  230|       }
#  231|   
#  232|->     const bool silent = vm.count("quiet");
#  233|       bool hasError = false;
#  234|   

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:232: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "silent" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:248: end_of_scope: Reached end of scope without using value stored in "silent".
#  230|       }
#  231|   
#  232|->     const bool silent = vm.count("quiet");
#  233|       bool hasError = false;
#  234|   

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:232: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("quiet", std::allocator<char>()))" is implicitly reduced from "64-bit unsigned long" to "bool".
#  230|       }
#  231|   
#  232|->     const bool silent = vm.count("quiet");
#  233|       bool hasError = false;
#  234|   

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:235: misra_c_2012_rule_10_1_violation: The expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("input-file", std::allocator<char>()))" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  233|       bool hasError = false;
#  234|   
#  235|->     if (!vm.count("input-file")) {
#  236|           hasError = !eng->handleFile("-", silent);
#  237|       }

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:235: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("input-file", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  233|       bool hasError = false;
#  234|   
#  235|->     if (!vm.count("input-file")) {
#  236|           hasError = !eng->handleFile("-", silent);
#  237|       }

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:235: misra_cpp_2008_rule_5_3_1_violation: Operand "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("input-file", std::allocator<char>()))" of the operator "!" is not bool type.
#  233|       bool hasError = false;
#  234|   
#  235|->     if (!vm.count("input-file")) {
#  236|           hasError = !eng->handleFile("-", silent);
#  237|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:240: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  238|       else {
#  239|           const TStringList &files = vm["input-file"].as<TStringList>();
#  240|->         for (const string &fileName : files) {
#  241|               if (!eng->handleFile(fileName, silent))
#  242|                   hasError = true;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:242: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  240|           for (const string &fileName : files) {
#  241|               if (!eng->handleFile(fileName, silent))
#  242|->                 hasError = true;
#  243|           }
#  244|       }

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:242: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  240|           for (const string &fileName : files) {
#  241|               if (!eng->handleFile(fileName, silent))
#  242|->                 hasError = true;
#  243|           }
#  244|       }

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:248: misra_c_2012_rule_10_3_violation: Implicit conversion of "hasError" from essential type "boolean" to different or narrower essential type "signed 32-bit int".
#  246|       eng->flush();
#  247|       delete eng;
#  248|->     return hasError;
#  249|   }

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cssort.cc:248: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "hasError" with underlying type "bool" is implicitly converted to a different underlying type "32-bit signed int".
#  246|       eng->flush();
#  247|       delete eng;
#  248|->     return hasError;
#  249|   }

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2019 Red Hat, Inc.
#    3|    *

Error: MISRA C-2012 Rule 5.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:32: misra_c_2012_rule_5_6_violation: Identifier "TStringList" is already used to represent a typedef.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:40: typedef_declaration: Declaring a typedef with identifier "TStringList".
#   30|   #include <iostream>
#   31|   
#   32|-> typedef std::vector<std::string> TStringList;
#   33|   
#   34|   const char *prog_name;

Error: MISRA C++-2008 Rule 2-10-3 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:32: misra_cpp_2008_rule_2_10_3_violation: Identifier "TStringList" is already used to represent a typedef.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:40: typedef_declaration: Declaring a typedef with identifier "TStringList".
#   30|   #include <iostream>
#   31|   
#   32|-> typedef std::vector<std::string> TStringList;
#   33|   
#   34|   const char *prog_name;

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:34: misra_c_2012_rule_8_4_violation: Object definition does not have a visible prototype.
#   32|   typedef std::vector<std::string> TStringList;
#   33|   
#   34|-> const char *prog_name;
#   35|   
#   36|   class DockerFileTransformer {

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:34: misra_c_2012_rule_8_7_violation: Object "prog_name" has external linkage but is only used in one translation unit.
#   32|   typedef std::vector<std::string> TStringList;
#   33|   
#   34|-> const char *prog_name;
#   35|   
#   36|   class DockerFileTransformer {

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:34: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   32|   typedef std::vector<std::string> TStringList;
#   33|   
#   34|-> const char *prog_name;
#   35|   
#   36|   class DockerFileTransformer {

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:34: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#   32|   typedef std::vector<std::string> TStringList;
#   33|   
#   34|-> const char *prog_name;
#   35|   
#   36|   class DockerFileTransformer {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:34: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "prog_name".
#   32|   typedef std::vector<std::string> TStringList;
#   33|   
#   34|-> const char *prog_name;
#   35|   
#   36|   class DockerFileTransformer {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:36: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "DockerFileTransformer".
#   34|   const char *prog_name;
#   35|   
#   36|-> class DockerFileTransformer {
#   37|       public:
#   38|           DockerFileTransformer(const TStringList &prefixCmd, const bool verbose):

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:51: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   49|           const TStringList   prefixCmd_;         ///< cmd-line operands
#   50|           const bool          verbose_;           ///< --verbose on cmd-line
#   51|->         int                 lineNum_;           ///< line number being read
#   52|   
#   53|           bool transformRunLine(std::string *);

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:51: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   49|           const TStringList   prefixCmd_;         ///< cmd-line operands
#   50|           const bool          verbose_;           ///< --verbose on cmd-line
#   51|->         int                 lineNum_;           ///< line number being read
#   52|   
#   53|           bool transformRunLine(std::string *);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:53: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   51|           int                 lineNum_;           ///< line number being read
#   52|   
#   53|->         bool transformRunLine(std::string *);
#   54|   
#   55|           /// match ... in RUN ...

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:69: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   67|   
#   68|   /// parse serialized list in the form: "item1", "item2", ...
#   69|-> void appendExecArgs(TStringList *pExecList, const std::string &str)
#   70|   {
#   71|       enum EState {

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:69: misra_c_2012_rule_8_7_violation: Function "appendExecArgs" has external linkage but is only used in one translation unit.
#   67|   
#   68|   /// parse serialized list in the form: "item1", "item2", ...
#   69|-> void appendExecArgs(TStringList *pExecList, const std::string &str)
#   70|   {
#   71|       enum EState {

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:69: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   67|   
#   68|   /// parse serialized list in the form: "item1", "item2", ...
#   69|-> void appendExecArgs(TStringList *pExecList, const std::string &str)
#   70|   {
#   71|       enum EState {

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:69: misra_cpp_2008_rule_7_1_1_violation: The variable "pExecList" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   67|   
#   68|   /// parse serialized list in the form: "item1", "item2", ...
#   69|-> void appendExecArgs(TStringList *pExecList, const std::string &str)
#   70|   {
#   71|       enum EState {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:69: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "appendExecArgs".
#   67|   
#   68|   /// parse serialized list in the form: "item1", "item2", ...
#   69|-> void appendExecArgs(TStringList *pExecList, const std::string &str)
#   70|   {
#   71|       enum EState {

Error: MISRA C-2012 Rule 2.4 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:71: misra_c_2012_rule_2_4_violation: Type has tag "EState" but that tag is never used.
#   69|   void appendExecArgs(TStringList *pExecList, const std::string &str)
#   70|   {
#   71|->     enum EState {
#   72|           ES_SEEK_QUOT_OPEN,
#   73|           ES_BACK_SLASH,

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:81: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned char" rather than a typedef that includes size and signedness information.
#   79|   
#   80|       // process the given string char by char
#   81|->     for (const unsigned char c : str) {
#   82|           switch (state) {
#   83|               case ES_SEEK_QUOT_OPEN:

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:81: misra_c_2012_rule_10_3_violation: Implicit conversion of "*<anonymous>" from essential type "character" to different or narrower essential type "unsigned 8-bit int".
#   79|   
#   80|       // process the given string char by char
#   81|->     for (const unsigned char c : str) {
#   82|           switch (state) {
#   83|               case ES_SEEK_QUOT_OPEN:

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:81: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#   79|   
#   80|       // process the given string char by char
#   81|->     for (const unsigned char c : str) {
#   82|           switch (state) {
#   83|               case ES_SEEK_QUOT_OPEN:

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:81: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned char" rather than a typedef that includes size and signedness information.
#   79|   
#   80|       // process the given string char by char
#   81|->     for (const unsigned char c : str) {
#   82|           switch (state) {
#   83|               case ES_SEEK_QUOT_OPEN:

Error: MISRA C++-2008 Rule 5-0-12 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:81: misra_cpp_2008_rule_5_0_12_violation: Storing character value as "unsigned char".
#   79|   
#   80|       // process the given string char by char
#   81|->     for (const unsigned char c : str) {
#   82|           switch (state) {
#   83|               case ES_SEEK_QUOT_OPEN:

Error: MISRA C-2012 Rule 16.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:82: missing_default: No default case found for the switch statement "switch (state)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:83: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:91: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:103: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:119: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:82: misra_c_2012_rule_16_1_violation: The switch statement is not well formed.
#   80|       // process the given string char by char
#   81|       for (const unsigned char c : str) {
#   82|->         switch (state) {
#   83|               case ES_SEEK_QUOT_OPEN:
#   84|                   if ('\"' == c)

Error: MISRA C-2012 Rule 16.4 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:82: misra_c_2012_rule_16_4_violation: The switch statement "switch (state)"does not have a non-empty default clause.
#   80|       // process the given string char by char
#   81|       for (const unsigned char c : str) {
#   82|->         switch (state) {
#   83|               case ES_SEEK_QUOT_OPEN:
#   84|                   if ('\"' == c)

Error: MISRA C-2012 Rule 16.6 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:82: misra_c_2012_rule_16_6_violation: The switch statement "switch (state)" has no conforming switch clauses.
#   80|       // process the given string char by char
#   81|       for (const unsigned char c : str) {
#   82|->         switch (state) {
#   83|               case ES_SEEK_QUOT_OPEN:
#   84|                   if ('\"' == c)

Error: MISRA C++-2008 Rule 6-4-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:83: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:89: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:91: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:101: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:103: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:117: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:119: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:125: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:82: misra_cpp_2008_rule_6_4_3_violation: The switch statement is not well formed.
#   80|       // process the given string char by char
#   81|       for (const unsigned char c : str) {
#   82|->         switch (state) {
#   83|               case ES_SEEK_QUOT_OPEN:
#   84|                   if ('\"' == c)

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:83: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#   81|       for (const unsigned char c : str) {
#   82|           switch (state) {
#   83|->             case ES_SEEK_QUOT_OPEN:
#   84|                   if ('\"' == c)
#   85|                       // found opening quote

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:83: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#   81|       for (const unsigned char c : str) {
#   82|           switch (state) {
#   83|->             case ES_SEEK_QUOT_OPEN:
#   84|                   if ('\"' == c)
#   85|                       // found opening quote

Error: MISRA C-2012 Rule 10.4 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:84: misra_c_2012_rule_10_4_violation: Essential type of the left hand operand "34" (char) is not the same as that of the right operand "c"(unsigned).
#   82|           switch (state) {
#   83|               case ES_SEEK_QUOT_OPEN:
#   84|->                 if ('\"' == c)
#   85|                       // found opening quote
#   86|                       state = ES_SEEK_QUOT_CLOSE;

Error: MISRA C-2012 Rule 15.7 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:84: misra_c_2012_rule_15_7_violation: No non-empty terminating "else" statement.
#   82|           switch (state) {
#   83|               case ES_SEEK_QUOT_OPEN:
#   84|->                 if ('\"' == c)
#   85|                       // found opening quote
#   86|                       state = ES_SEEK_QUOT_CLOSE;

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:84: misra_cpp_2008_rule_5_0_11_violation: Object "'"'" with plain char type is used with its non-character values.
#   82|           switch (state) {
#   83|               case ES_SEEK_QUOT_OPEN:
#   84|->                 if ('\"' == c)
#   85|                       // found opening quote
#   86|                       state = ES_SEEK_QUOT_CLOSE;

Error: MISRA C++-2008 Rule 5-0-12 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:84: misra_cpp_2008_rule_5_0_12_violation: Storing character value as "unsigned char".
#   82|           switch (state) {
#   83|               case ES_SEEK_QUOT_OPEN:
#   84|->                 if ('\"' == c)
#   85|                       // found opening quote
#   86|                       state = ES_SEEK_QUOT_CLOSE;

Error: MISRA C++-2008 Rule 6-4-2 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:84: misra_cpp_2008_rule_6_4_2_violation: No non-empty terminating "else" statement.
#   82|           switch (state) {
#   83|               case ES_SEEK_QUOT_OPEN:
#   84|->                 if ('\"' == c)
#   85|                       // found opening quote
#   86|                       state = ES_SEEK_QUOT_CLOSE;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:86: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   84|                   if ('\"' == c)
#   85|                       // found opening quote
#   86|->                     state = ES_SEEK_QUOT_CLOSE;
#   87|                   else if (!isspace(c))
#   88|                       throw std::runtime_error("quote expected");

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:86: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   84|                   if ('\"' == c)
#   85|                       // found opening quote
#   86|->                     state = ES_SEEK_QUOT_CLOSE;
#   87|                   else if (!isspace(c))
#   88|                       throw std::runtime_error("quote expected");

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:87: misra_c_2012_rule_10_1_violation: The expression "isspace(c)" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#   85|                       // found opening quote
#   86|                       state = ES_SEEK_QUOT_CLOSE;
#   87|->                 else if (!isspace(c))
#   88|                       throw std::runtime_error("quote expected");
#   89|                   continue;

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:87: misra_c_2012_rule_10_3_violation: Implicit conversion of "c" from essential type "unsigned 8-bit int" to different or narrower essential type "signed 32-bit int".
#   85|                       // found opening quote
#   86|                       state = ES_SEEK_QUOT_CLOSE;
#   87|->                 else if (!isspace(c))
#   88|                       throw std::runtime_error("quote expected");
#   89|                   continue;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:87: misra_cpp_2008_rule_5_0_13_violation: The type of "isspace(c)" is not bool in the condition of "if-statement".
#   85|                       // found opening quote
#   86|                       state = ES_SEEK_QUOT_CLOSE;
#   87|->                 else if (!isspace(c))
#   88|                       throw std::runtime_error("quote expected");
#   89|                   continue;

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:87: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "c" with underlying type "8-bit unsigned char" is implicitly converted to a different underlying type "32-bit signed int".
#   85|                       // found opening quote
#   86|                       state = ES_SEEK_QUOT_CLOSE;
#   87|->                 else if (!isspace(c))
#   88|                       throw std::runtime_error("quote expected");
#   89|                   continue;

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:87: misra_cpp_2008_rule_5_0_4_violation: "c" is implicitly converted from an unsigned value to a signed value.
#   85|                       // found opening quote
#   86|                       state = ES_SEEK_QUOT_CLOSE;
#   87|->                 else if (!isspace(c))
#   88|                       throw std::runtime_error("quote expected");
#   89|                   continue;

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:87: misra_cpp_2008_rule_5_3_1_violation: Operand "isspace(c)" of the operator "!" is not bool type.
#   85|                       // found opening quote
#   86|                       state = ES_SEEK_QUOT_CLOSE;
#   87|->                 else if (!isspace(c))
#   88|                       throw std::runtime_error("quote expected");
#   89|                   continue;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:88: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   86|                       state = ES_SEEK_QUOT_CLOSE;
#   87|                   else if (!isspace(c))
#   88|->                     throw std::runtime_error("quote expected");
#   89|                   continue;
#   90|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:88: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   86|                       state = ES_SEEK_QUOT_CLOSE;
#   87|                   else if (!isspace(c))
#   88|->                     throw std::runtime_error("quote expected");
#   89|                   continue;
#   90|   

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:91: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#   89|                   continue;
#   90|   
#   91|->             case ES_BACK_SLASH:
#   92|                   // one back-slash has been consumed
#   93|                   if ('n' == c)

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:91: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#   89|                   continue;
#   90|   
#   91|->             case ES_BACK_SLASH:
#   92|                   // one back-slash has been consumed
#   93|                   if ('n' == c)

Error: MISRA C-2012 Rule 10.4 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:93: misra_c_2012_rule_10_4_violation: Essential type of the left hand operand "110" (char) is not the same as that of the right operand "c"(unsigned).
#   91|               case ES_BACK_SLASH:
#   92|                   // one back-slash has been consumed
#   93|->                 if ('n' == c)
#   94|                       arg.push_back('\n');
#   95|                   else if ('t' == c)

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:93: misra_cpp_2008_rule_5_0_11_violation: Object "'n'" with plain char type is used with its non-character values.
#   91|               case ES_BACK_SLASH:
#   92|                   // one back-slash has been consumed
#   93|->                 if ('n' == c)
#   94|                       arg.push_back('\n');
#   95|                   else if ('t' == c)

Error: MISRA C++-2008 Rule 5-0-12 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:93: misra_cpp_2008_rule_5_0_12_violation: Storing character value as "unsigned char".
#   91|               case ES_BACK_SLASH:
#   92|                   // one back-slash has been consumed
#   93|->                 if ('n' == c)
#   94|                       arg.push_back('\n');
#   95|                   else if ('t' == c)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:94: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   92|                   // one back-slash has been consumed
#   93|                   if ('n' == c)
#   94|->                     arg.push_back('\n');
#   95|                   else if ('t' == c)
#   96|                       arg.push_back('\t');

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:94: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   92|                   // one back-slash has been consumed
#   93|                   if ('n' == c)
#   94|->                     arg.push_back('\n');
#   95|                   else if ('t' == c)
#   96|                       arg.push_back('\t');

Error: MISRA C-2012 Rule 10.4 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:95: misra_c_2012_rule_10_4_violation: Essential type of the left hand operand "116" (char) is not the same as that of the right operand "c"(unsigned).
#   93|                   if ('n' == c)
#   94|                       arg.push_back('\n');
#   95|->                 else if ('t' == c)
#   96|                       arg.push_back('\t');
#   97|                   else

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:95: misra_cpp_2008_rule_5_0_11_violation: Object "'t'" with plain char type is used with its non-character values.
#   93|                   if ('n' == c)
#   94|                       arg.push_back('\n');
#   95|->                 else if ('t' == c)
#   96|                       arg.push_back('\t');
#   97|                   else

Error: MISRA C++-2008 Rule 5-0-12 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:95: misra_cpp_2008_rule_5_0_12_violation: Storing character value as "unsigned char".
#   93|                   if ('n' == c)
#   94|                       arg.push_back('\n');
#   95|->                 else if ('t' == c)
#   96|                       arg.push_back('\t');
#   97|                   else

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:96: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   94|                       arg.push_back('\n');
#   95|                   else if ('t' == c)
#   96|->                     arg.push_back('\t');
#   97|                   else
#   98|                       // FIXME: this works for back-slash and quote only

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:96: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   94|                       arg.push_back('\n');
#   95|                   else if ('t' == c)
#   96|->                     arg.push_back('\t');
#   97|                   else
#   98|                       // FIXME: this works for back-slash and quote only

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:99: misra_c_2012_rule_10_3_violation: Implicit conversion of "c" from essential type "unsigned 8-bit int" to different or narrower essential type "character".
#   97|                   else
#   98|                       // FIXME: this works for back-slash and quote only
#   99|->                     arg.push_back(c);
#  100|                   state = ES_SEEK_QUOT_CLOSE;
#  101|                   continue;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:99: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   97|                   else
#   98|                       // FIXME: this works for back-slash and quote only
#   99|->                     arg.push_back(c);
#  100|                   state = ES_SEEK_QUOT_CLOSE;
#  101|                   continue;

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:99: misra_cpp_2008_rule_5_0_11_violation: Plain char type is used for storage of non-character values of "c".
#   97|                   else
#   98|                       // FIXME: this works for back-slash and quote only
#   99|->                     arg.push_back(c);
#  100|                   state = ES_SEEK_QUOT_CLOSE;
#  101|                   continue;

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:99: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "c" with underlying type "8-bit unsigned char" is implicitly converted to a different underlying type "char".
#   97|                   else
#   98|                       // FIXME: this works for back-slash and quote only
#   99|->                     arg.push_back(c);
#  100|                   state = ES_SEEK_QUOT_CLOSE;
#  101|                   continue;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:99: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   97|                   else
#   98|                       // FIXME: this works for back-slash and quote only
#   99|->                     arg.push_back(c);
#  100|                   state = ES_SEEK_QUOT_CLOSE;
#  101|                   continue;

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:103: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  101|                   continue;
#  102|   
#  103|->             case ES_SEEK_QUOT_CLOSE:
#  104|                   if ('\"' == c) {
#  105|                       // found closing quote -> append the string

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:103: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  101|                   continue;
#  102|   
#  103|->             case ES_SEEK_QUOT_CLOSE:
#  104|                   if ('\"' == c) {
#  105|                       // found closing quote -> append the string

Error: MISRA C-2012 Rule 10.4 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:104: misra_c_2012_rule_10_4_violation: Essential type of the left hand operand "34" (char) is not the same as that of the right operand "c"(unsigned).
#  102|   
#  103|               case ES_SEEK_QUOT_CLOSE:
#  104|->                 if ('\"' == c) {
#  105|                       // found closing quote -> append the string
#  106|                       pExecList->push_back(arg);

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:104: misra_cpp_2008_rule_5_0_11_violation: Object "'"'" with plain char type is used with its non-character values.
#  102|   
#  103|               case ES_SEEK_QUOT_CLOSE:
#  104|->                 if ('\"' == c) {
#  105|                       // found closing quote -> append the string
#  106|                       pExecList->push_back(arg);

Error: MISRA C++-2008 Rule 5-0-12 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:104: misra_cpp_2008_rule_5_0_12_violation: Storing character value as "unsigned char".
#  102|   
#  103|               case ES_SEEK_QUOT_CLOSE:
#  104|->                 if ('\"' == c) {
#  105|                       // found closing quote -> append the string
#  106|                       pExecList->push_back(arg);

Error: MISRA C-2012 Rule 10.4 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:111: misra_c_2012_rule_10_4_violation: Essential type of the left hand operand "92" (char) is not the same as that of the right operand "c"(unsigned).
#  109|                       continue;
#  110|                   }
#  111|->                 else if ('\\' == c)
#  112|                       // consume one back-slash
#  113|                       state = ES_BACK_SLASH;

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:111: misra_cpp_2008_rule_5_0_11_violation: Object "'\\'" with plain char type is used with its non-character values.
#  109|                       continue;
#  110|                   }
#  111|->                 else if ('\\' == c)
#  112|                       // consume one back-slash
#  113|                       state = ES_BACK_SLASH;

Error: MISRA C++-2008 Rule 5-0-12 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:111: misra_cpp_2008_rule_5_0_12_violation: Storing character value as "unsigned char".
#  109|                       continue;
#  110|                   }
#  111|->                 else if ('\\' == c)
#  112|                       // consume one back-slash
#  113|                       state = ES_BACK_SLASH;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:113: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  111|                   else if ('\\' == c)
#  112|                       // consume one back-slash
#  113|->                     state = ES_BACK_SLASH;
#  114|                   else
#  115|                       // pick one char

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:113: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  111|                   else if ('\\' == c)
#  112|                       // consume one back-slash
#  113|->                     state = ES_BACK_SLASH;
#  114|                   else
#  115|                       // pick one char

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:116: misra_c_2012_rule_10_3_violation: Implicit conversion of "c" from essential type "unsigned 8-bit int" to different or narrower essential type "character".
#  114|                   else
#  115|                       // pick one char
#  116|->                     arg.push_back(c);
#  117|                   continue;
#  118|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:116: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  114|                   else
#  115|                       // pick one char
#  116|->                     arg.push_back(c);
#  117|                   continue;
#  118|   

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:116: misra_cpp_2008_rule_5_0_11_violation: Plain char type is used for storage of non-character values of "c".
#  114|                   else
#  115|                       // pick one char
#  116|->                     arg.push_back(c);
#  117|                   continue;
#  118|   

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:116: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "c" with underlying type "8-bit unsigned char" is implicitly converted to a different underlying type "char".
#  114|                   else
#  115|                       // pick one char
#  116|->                     arg.push_back(c);
#  117|                   continue;
#  118|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:116: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  114|                   else
#  115|                       // pick one char
#  116|->                     arg.push_back(c);
#  117|                   continue;
#  118|   

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:119: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  117|                   continue;
#  118|   
#  119|->             case ES_SEEK_COMMA:
#  120|                   if (',' == c)
#  121|                       // comma found -> look for opening quote

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:119: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  117|                   continue;
#  118|   
#  119|->             case ES_SEEK_COMMA:
#  120|                   if (',' == c)
#  121|                       // comma found -> look for opening quote

Error: MISRA C-2012 Rule 10.4 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:120: misra_c_2012_rule_10_4_violation: Essential type of the left hand operand "44" (char) is not the same as that of the right operand "c"(unsigned).
#  118|   
#  119|               case ES_SEEK_COMMA:
#  120|->                 if (',' == c)
#  121|                       // comma found -> look for opening quote
#  122|                       state = ES_SEEK_QUOT_OPEN;

Error: MISRA C-2012 Rule 15.7 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:120: misra_c_2012_rule_15_7_violation: No non-empty terminating "else" statement.
#  118|   
#  119|               case ES_SEEK_COMMA:
#  120|->                 if (',' == c)
#  121|                       // comma found -> look for opening quote
#  122|                       state = ES_SEEK_QUOT_OPEN;

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:120: misra_cpp_2008_rule_5_0_11_violation: Object "','" with plain char type is used with its non-character values.
#  118|   
#  119|               case ES_SEEK_COMMA:
#  120|->                 if (',' == c)
#  121|                       // comma found -> look for opening quote
#  122|                       state = ES_SEEK_QUOT_OPEN;

Error: MISRA C++-2008 Rule 5-0-12 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:120: misra_cpp_2008_rule_5_0_12_violation: Storing character value as "unsigned char".
#  118|   
#  119|               case ES_SEEK_COMMA:
#  120|->                 if (',' == c)
#  121|                       // comma found -> look for opening quote
#  122|                       state = ES_SEEK_QUOT_OPEN;

Error: MISRA C++-2008 Rule 6-4-2 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:120: misra_cpp_2008_rule_6_4_2_violation: No non-empty terminating "else" statement.
#  118|   
#  119|               case ES_SEEK_COMMA:
#  120|->                 if (',' == c)
#  121|                       // comma found -> look for opening quote
#  122|                       state = ES_SEEK_QUOT_OPEN;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:122: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  120|                   if (',' == c)
#  121|                       // comma found -> look for opening quote
#  122|->                     state = ES_SEEK_QUOT_OPEN;
#  123|                   else if (!isspace(c))
#  124|                       throw std::runtime_error("comma expected");

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:122: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  120|                   if (',' == c)
#  121|                       // comma found -> look for opening quote
#  122|->                     state = ES_SEEK_QUOT_OPEN;
#  123|                   else if (!isspace(c))
#  124|                       throw std::runtime_error("comma expected");

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:123: misra_c_2012_rule_10_1_violation: The expression "isspace(c)" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  121|                       // comma found -> look for opening quote
#  122|                       state = ES_SEEK_QUOT_OPEN;
#  123|->                 else if (!isspace(c))
#  124|                       throw std::runtime_error("comma expected");
#  125|                   continue;

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:123: misra_c_2012_rule_10_3_violation: Implicit conversion of "c" from essential type "unsigned 8-bit int" to different or narrower essential type "signed 32-bit int".
#  121|                       // comma found -> look for opening quote
#  122|                       state = ES_SEEK_QUOT_OPEN;
#  123|->                 else if (!isspace(c))
#  124|                       throw std::runtime_error("comma expected");
#  125|                   continue;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:123: misra_cpp_2008_rule_5_0_13_violation: The type of "isspace(c)" is not bool in the condition of "if-statement".
#  121|                       // comma found -> look for opening quote
#  122|                       state = ES_SEEK_QUOT_OPEN;
#  123|->                 else if (!isspace(c))
#  124|                       throw std::runtime_error("comma expected");
#  125|                   continue;

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:123: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "c" with underlying type "8-bit unsigned char" is implicitly converted to a different underlying type "32-bit signed int".
#  121|                       // comma found -> look for opening quote
#  122|                       state = ES_SEEK_QUOT_OPEN;
#  123|->                 else if (!isspace(c))
#  124|                       throw std::runtime_error("comma expected");
#  125|                   continue;

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:123: misra_cpp_2008_rule_5_0_4_violation: "c" is implicitly converted from an unsigned value to a signed value.
#  121|                       // comma found -> look for opening quote
#  122|                       state = ES_SEEK_QUOT_OPEN;
#  123|->                 else if (!isspace(c))
#  124|                       throw std::runtime_error("comma expected");
#  125|                   continue;

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:123: misra_cpp_2008_rule_5_3_1_violation: Operand "isspace(c)" of the operator "!" is not bool type.
#  121|                       // comma found -> look for opening quote
#  122|                       state = ES_SEEK_QUOT_OPEN;
#  123|->                 else if (!isspace(c))
#  124|                       throw std::runtime_error("comma expected");
#  125|                   continue;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:124: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  122|                       state = ES_SEEK_QUOT_OPEN;
#  123|                   else if (!isspace(c))
#  124|->                     throw std::runtime_error("comma expected");
#  125|                   continue;
#  126|           }

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:124: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  122|                       state = ES_SEEK_QUOT_OPEN;
#  123|                   else if (!isspace(c))
#  124|->                     throw std::runtime_error("comma expected");
#  125|                   continue;
#  126|           }

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:130: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  128|   
#  129|       if (ES_SEEK_COMMA != state)
#  130|->         throw std::runtime_error("unexpected end of input while parsing list");
#  131|   }
#  132|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:130: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  128|   
#  129|       if (ES_SEEK_COMMA != state)
#  130|->         throw std::runtime_error("unexpected end of input while parsing list");
#  131|   }
#  132|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:134: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  132|   
#  133|   /// invoke shell interpreter explicitly in case the wrapper uses exec()
#  134|-> void appendShellExec(TStringList *pExecList, const std::string &str)
#  135|   {
#  136|       pExecList->push_back("sh");

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:134: misra_c_2012_rule_8_7_violation: Function "appendShellExec" has external linkage but is only used in one translation unit.
#  132|   
#  133|   /// invoke shell interpreter explicitly in case the wrapper uses exec()
#  134|-> void appendShellExec(TStringList *pExecList, const std::string &str)
#  135|   {
#  136|       pExecList->push_back("sh");

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:134: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  132|   
#  133|   /// invoke shell interpreter explicitly in case the wrapper uses exec()
#  134|-> void appendShellExec(TStringList *pExecList, const std::string &str)
#  135|   {
#  136|       pExecList->push_back("sh");

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:134: misra_cpp_2008_rule_7_1_1_violation: The variable "pExecList" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  132|   
#  133|   /// invoke shell interpreter explicitly in case the wrapper uses exec()
#  134|-> void appendShellExec(TStringList *pExecList, const std::string &str)
#  135|   {
#  136|       pExecList->push_back("sh");

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:134: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "appendShellExec".
#  132|   
#  133|   /// invoke shell interpreter explicitly in case the wrapper uses exec()
#  134|-> void appendShellExec(TStringList *pExecList, const std::string &str)
#  135|   {
#  136|       pExecList->push_back("sh");

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:142: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  140|   
#  141|   /// precede each back-slash and each quote by back-slash
#  142|-> std::string runQuoteArg(std::string arg)
#  143|   {
#  144|       boost::algorithm::replace_all(arg, "\\", "\\\\");

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:142: misra_c_2012_rule_8_7_violation: Function "runQuoteArg" has external linkage but is only used in one translation unit.
#  140|   
#  141|   /// precede each back-slash and each quote by back-slash
#  142|-> std::string runQuoteArg(std::string arg)
#  143|   {
#  144|       boost::algorithm::replace_all(arg, "\\", "\\\\");

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:142: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  140|   
#  141|   /// precede each back-slash and each quote by back-slash
#  142|-> std::string runQuoteArg(std::string arg)
#  143|   {
#  144|       boost::algorithm::replace_all(arg, "\\", "\\\\");

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:142: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "runQuoteArg".
#  140|   
#  141|   /// precede each back-slash and each quote by back-slash
#  142|-> std::string runQuoteArg(std::string arg)
#  143|   {
#  144|       boost::algorithm::replace_all(arg, "\\", "\\\\");

Error: MISRA C-2012 Rule 17.8 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:142: param_declaration: Declaration of parameter "arg".
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:144: misra_c_2012_rule_17_8_violation: Modifying parameter "arg" in call to "replace_all".
#  142|   std::string runQuoteArg(std::string arg)
#  143|   {
#  144|->     boost::algorithm::replace_all(arg, "\\", "\\\\");
#  145|       boost::algorithm::replace_all(arg, "\"", "\\\"");
#  146|       boost::algorithm::replace_all(arg, "\n", "\\n");

Error: MISRA C-2012 Rule 17.8 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:142: param_declaration: Declaration of parameter "arg".
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:145: misra_c_2012_rule_17_8_violation: Modifying parameter "arg" in call to "replace_all".
#  143|   {
#  144|       boost::algorithm::replace_all(arg, "\\", "\\\\");
#  145|->     boost::algorithm::replace_all(arg, "\"", "\\\"");
#  146|       boost::algorithm::replace_all(arg, "\n", "\\n");
#  147|       boost::algorithm::replace_all(arg, "\t", "\\t");

Error: MISRA C-2012 Rule 17.8 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:142: param_declaration: Declaration of parameter "arg".
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:146: misra_c_2012_rule_17_8_violation: Modifying parameter "arg" in call to "replace_all".
#  144|       boost::algorithm::replace_all(arg, "\\", "\\\\");
#  145|       boost::algorithm::replace_all(arg, "\"", "\\\"");
#  146|->     boost::algorithm::replace_all(arg, "\n", "\\n");
#  147|       boost::algorithm::replace_all(arg, "\t", "\\t");
#  148|       return arg;

Error: MISRA C-2012 Rule 17.8 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:142: param_declaration: Declaration of parameter "arg".
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:147: misra_c_2012_rule_17_8_violation: Modifying parameter "arg" in call to "replace_all".
#  145|       boost::algorithm::replace_all(arg, "\"", "\\\"");
#  146|       boost::algorithm::replace_all(arg, "\n", "\\n");
#  147|->     boost::algorithm::replace_all(arg, "\t", "\\t");
#  148|       return arg;
#  149|   }

Error: MISRA C-2012 Rule 17.8 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:142: param_declaration: Declaration of parameter "arg".
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:148: misra_c_2012_rule_17_8_violation: Modifying parameter "arg" in call to "basic_string".
#  146|       boost::algorithm::replace_all(arg, "\n", "\\n");
#  147|       boost::algorithm::replace_all(arg, "\t", "\\t");
#  148|->     return arg;
#  149|   }
#  150|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:151: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  149|   }
#  150|   
#  151|-> std::string runLineFromExecList(const TStringList &execList)
#  152|   {
#  153|       // construct RUN ["cmd", "arg1", "arg2", ...] from execList

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:151: misra_c_2012_rule_8_7_violation: Function "runLineFromExecList" has external linkage but is only used in one translation unit.
#  149|   }
#  150|   
#  151|-> std::string runLineFromExecList(const TStringList &execList)
#  152|   {
#  153|       // construct RUN ["cmd", "arg1", "arg2", ...] from execList

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:151: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  149|   }
#  150|   
#  151|-> std::string runLineFromExecList(const TStringList &execList)
#  152|   {
#  153|       // construct RUN ["cmd", "arg1", "arg2", ...] from execList

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:151: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "runLineFromExecList".
#  149|   }
#  150|   
#  151|-> std::string runLineFromExecList(const TStringList &execList)
#  152|   {
#  153|       // construct RUN ["cmd", "arg1", "arg2", ...] from execList

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:155: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  153|       // construct RUN ["cmd", "arg1", "arg2", ...] from execList
#  154|       std::string runLine = "RUN [";
#  155|->     int i = 0;
#  156|       for (const std::string &arg : execList) {
#  157|           if (i++)

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:155: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "i" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:163: end_of_scope: Reached end of scope without using value stored in "i".
#  153|       // construct RUN ["cmd", "arg1", "arg2", ...] from execList
#  154|       std::string runLine = "RUN [";
#  155|->     int i = 0;
#  156|       for (const std::string &arg : execList) {
#  157|           if (i++)

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:155: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  153|       // construct RUN ["cmd", "arg1", "arg2", ...] from execList
#  154|       std::string runLine = "RUN [";
#  155|->     int i = 0;
#  156|       for (const std::string &arg : execList) {
#  157|           if (i++)

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:156: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  154|       std::string runLine = "RUN [";
#  155|       int i = 0;
#  156|->     for (const std::string &arg : execList) {
#  157|           if (i++)
#  158|               runLine += ", ";

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:157: misra_c_2012_rule_14_4_violation: The condition expression "i++" does not have an essentially boolean type.
#  155|       int i = 0;
#  156|       for (const std::string &arg : execList) {
#  157|->         if (i++)
#  158|               runLine += ", ";
#  159|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:157: misra_cpp_2008_rule_5_0_13_violation: The type of "i++" is not bool in the condition of "if-statement".
#  155|       int i = 0;
#  156|       for (const std::string &arg : execList) {
#  157|->         if (i++)
#  158|               runLine += ", ";
#  159|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:158: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  156|       for (const std::string &arg : execList) {
#  157|           if (i++)
#  158|->             runLine += ", ";
#  159|   
#  160|           runLine += "\"" + runQuoteArg(arg) + "\"";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:158: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  156|       for (const std::string &arg : execList) {
#  157|           if (i++)
#  158|->             runLine += ", ";
#  159|   
#  160|           runLine += "\"" + runQuoteArg(arg) + "\"";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:158: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  156|       for (const std::string &arg : execList) {
#  157|           if (i++)
#  158|->             runLine += ", ";
#  159|   
#  160|           runLine += "\"" + runQuoteArg(arg) + "\"";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:160: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  158|               runLine += ", ";
#  159|   
#  160|->         runLine += "\"" + runQuoteArg(arg) + "\"";
#  161|       }
#  162|       runLine += "]";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:162: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  160|           runLine += "\"" + runQuoteArg(arg) + "\"";
#  161|       }
#  162|->     runLine += "]";
#  163|       return runLine;
#  164|   }

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:166: misra_c_2012_rule_8_13_violation: The member function "DockerFileTransformer::transformRunLine(std::string *)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  164|   }
#  165|   
#  166|-> bool DockerFileTransformer::transformRunLine(std::string *pRunLine)
#  167|   {
#  168|       // start with the prefix specified on cmd-line

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:166: misra_cpp_2008_rule_7_1_1_violation: The variable "pRunLine" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  164|   }
#  165|   
#  166|-> bool DockerFileTransformer::transformRunLine(std::string *pRunLine)
#  167|   {
#  168|       // start with the prefix specified on cmd-line

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:175: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  173|           if (boost::regex_match(*pRunLine, sm, reLineRunExec_))
#  174|               // RUN ["cmd", "arg1", "arg2", ...]
#  175|->             appendExecArgs(&execList, sm[1]);
#  176|   
#  177|           else if (boost::regex_match(*pRunLine, sm, reLineRun_))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:175: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  173|           if (boost::regex_match(*pRunLine, sm, reLineRunExec_))
#  174|               // RUN ["cmd", "arg1", "arg2", ...]
#  175|->             appendExecArgs(&execList, sm[1]);
#  176|   
#  177|           else if (boost::regex_match(*pRunLine, sm, reLineRun_))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:179: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  177|           else if (boost::regex_match(*pRunLine, sm, reLineRun_))
#  178|               // RUN arbitrary shell code...
#  179|->             appendShellExec(&execList, sm[1]);
#  180|   
#  181|           else

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:179: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  177|           else if (boost::regex_match(*pRunLine, sm, reLineRun_))
#  178|               // RUN arbitrary shell code...
#  179|->             appendShellExec(&execList, sm[1]);
#  180|   
#  181|           else

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:183: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  181|           else
#  182|               // should never happen
#  183|->             throw std::runtime_error("internal error");
#  184|       }
#  185|       catch (const std::runtime_error &e) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:183: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  181|           else
#  182|               // should never happen
#  183|->             throw std::runtime_error("internal error");
#  184|       }
#  185|       catch (const std::runtime_error &e) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:186: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  184|       }
#  185|       catch (const std::runtime_error &e) {
#  186|->         std::cerr << prog_name << "error: parsing error on line "
#  187|               << lineNum_ << ": " << e.what() << std::endl;
#  188|           return false;

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:187: misra_cpp_2008_rule_8_4_4_violation: Function identifier "endl" is not used to call the function or preceded by &.
#  185|       catch (const std::runtime_error &e) {
#  186|           std::cerr << prog_name << "error: parsing error on line "
#  187|->             << lineNum_ << ": " << e.what() << std::endl;
#  188|           return false;
#  189|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:188: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  186|           std::cerr << prog_name << "error: parsing error on line "
#  187|               << lineNum_ << ": " << e.what() << std::endl;
#  188|->         return false;
#  189|       }
#  190|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:188: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  186|           std::cerr << prog_name << "error: parsing error on line "
#  187|               << lineNum_ << ": " << e.what() << std::endl;
#  188|->         return false;
#  189|       }
#  190|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:194: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  192|       if (verbose_) {
#  193|           // diagnostic output printed with --verbose
#  194|->         std::cerr << prog_name << " <<< " << *pRunLine << std::endl;
#  195|           std::cerr << prog_name << " >>> " << newRunLine << std::endl;
#  196|       }

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:194: misra_cpp_2008_rule_8_4_4_violation: Function identifier "endl" is not used to call the function or preceded by &.
#  192|       if (verbose_) {
#  193|           // diagnostic output printed with --verbose
#  194|->         std::cerr << prog_name << " <<< " << *pRunLine << std::endl;
#  195|           std::cerr << prog_name << " >>> " << newRunLine << std::endl;
#  196|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:195: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  193|           // diagnostic output printed with --verbose
#  194|           std::cerr << prog_name << " <<< " << *pRunLine << std::endl;
#  195|->         std::cerr << prog_name << " >>> " << newRunLine << std::endl;
#  196|       }
#  197|   

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:195: misra_cpp_2008_rule_8_4_4_violation: Function identifier "endl" is not used to call the function or preceded by &.
#  193|           // diagnostic output printed with --verbose
#  194|           std::cerr << prog_name << " <<< " << *pRunLine << std::endl;
#  195|->         std::cerr << prog_name << " >>> " << newRunLine << std::endl;
#  196|       }
#  197|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:199: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  197|   
#  198|       // return the result of a successful transformation
#  199|->     *pRunLine = newRunLine;
#  200|       return true;
#  201|   }

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:207: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "readingRunLine" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:255: end_of_scope: Reached end of scope without using value stored in "readingRunLine".
#  205|       bool anyError = false;
#  206|       bool anyRunLine = false;        ///< true if any RUN line was transformed
#  207|->     bool readingRunLine = false;    ///< true if multi-line RUN is being read
#  208|       std::string line;
#  209|       std::string runLine;

Error: MISRA C-2012 Rule 15.7 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:216: misra_c_2012_rule_15_7_violation: No non-empty terminating "else" statement.
#  214|           lineNum_++;
#  215|   
#  216|->         if (readingRunLine) {
#  217|               // check for comment because it does not need to end with back-slash
#  218|               if (boost::regex_match(line, reComment_))

Error: MISRA C++-2008 Rule 6-4-2 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:216: misra_cpp_2008_rule_6_4_2_violation: No non-empty terminating "else" statement.
#  214|           lineNum_++;
#  215|   
#  216|->         if (readingRunLine) {
#  217|               // check for comment because it does not need to end with back-slash
#  218|               if (boost::regex_match(line, reComment_))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:219: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  217|               // check for comment because it does not need to end with back-slash
#  218|               if (boost::regex_match(line, reComment_))
#  219|->                 continue;
#  220|           }
#  221|           else if (!boost::regex_match(line, reLineRun_)) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:219: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  217|               // check for comment because it does not need to end with back-slash
#  218|               if (boost::regex_match(line, reComment_))
#  219|->                 continue;
#  220|           }
#  221|           else if (!boost::regex_match(line, reLineRun_)) {

Error: MISRA C++-2008 Rule 6-6-3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:219: misra_cpp_2008_rule_6_6_3_violation: "continue;" statement is not used in a well-formed for loop.
#  217|               // check for comment because it does not need to end with back-slash
#  218|               if (boost::regex_match(line, reComment_))
#  219|->                 continue;
#  220|           }
#  221|           else if (!boost::regex_match(line, reLineRun_)) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:223: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  221|           else if (!boost::regex_match(line, reLineRun_)) {
#  222|               // pass unrelated contents of Dockerfile unchanged
#  223|->             out << line << std::endl;
#  224|               continue;
#  225|           }

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:223: misra_cpp_2008_rule_8_4_4_violation: Function identifier "endl" is not used to call the function or preceded by &.
#  221|           else if (!boost::regex_match(line, reLineRun_)) {
#  222|               // pass unrelated contents of Dockerfile unchanged
#  223|->             out << line << std::endl;
#  224|               continue;
#  225|           }

Error: MISRA C++-2008 Rule 6-6-3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:224: misra_cpp_2008_rule_6_6_3_violation: "continue;" statement is not used in a well-formed for loop.
#  222|               // pass unrelated contents of Dockerfile unchanged
#  223|               out << line << std::endl;
#  224|->             continue;
#  225|           }
#  226|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:231: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  229|           const bool lineCont = boost::regex_match(line, sm, reLineCont_);
#  230|           if (lineCont)
#  231|->             line = sm[1];
#  232|   
#  233|           // append the current line to our linearized RUN line

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:231: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  229|           const bool lineCont = boost::regex_match(line, sm, reLineCont_);
#  230|           if (lineCont)
#  231|->             line = sm[1];
#  232|   
#  233|           // append the current line to our linearized RUN line

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:231: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  229|           const bool lineCont = boost::regex_match(line, sm, reLineCont_);
#  230|           if (lineCont)
#  231|->             line = sm[1];
#  232|   
#  233|           // append the current line to our linearized RUN line

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:234: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  232|   
#  233|           // append the current line to our linearized RUN line
#  234|->         runLine += line;
#  235|           readingRunLine = lineCont;
#  236|           if (readingRunLine)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:237: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  235|           readingRunLine = lineCont;
#  236|           if (readingRunLine)
#  237|->             continue;
#  238|   
#  239|           // transform the linearized RUN line

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:237: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  235|           readingRunLine = lineCont;
#  236|           if (readingRunLine)
#  237|->             continue;
#  238|   
#  239|           // transform the linearized RUN line

Error: MISRA C++-2008 Rule 6-6-3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:237: misra_cpp_2008_rule_6_6_3_violation: "continue;" statement is not used in a well-formed for loop.
#  235|           readingRunLine = lineCont;
#  236|           if (readingRunLine)
#  237|->             continue;
#  238|   
#  239|           // transform the linearized RUN line

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:241: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  239|           // transform the linearized RUN line
#  240|           if (!this->transformRunLine(&runLine))
#  241|->             anyError = true;
#  242|   
#  243|           // write the transformed RUN line and update state

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:241: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  239|           // transform the linearized RUN line
#  240|           if (!this->transformRunLine(&runLine))
#  241|->             anyError = true;
#  242|   
#  243|           // write the transformed RUN line and update state

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:244: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  242|   
#  243|           // write the transformed RUN line and update state
#  244|->         out << runLine << std::endl;
#  245|           runLine.clear();
#  246|           anyRunLine = true;

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:244: misra_cpp_2008_rule_8_4_4_violation: Function identifier "endl" is not used to call the function or preceded by &.
#  242|   
#  243|           // write the transformed RUN line and update state
#  244|->         out << runLine << std::endl;
#  245|           runLine.clear();
#  246|           anyRunLine = true;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:251: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  249|       if (!anyRunLine) {
#  250|           // no match is treated as error
#  251|->         std::cerr << prog_name << ": error: no RUN line found\n";
#  252|           anyError = true;
#  253|       }

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:258: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  256|   }
#  257|   
#  258|-> void printOpenError(const char *msg, const std::string &fileName)
#  259|   {
#  260|       std::cerr << prog_name << ": error: "

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:258: misra_c_2012_rule_8_7_violation: Function "printOpenError" has external linkage but is only used in one translation unit.
#  256|   }
#  257|   
#  258|-> void printOpenError(const char *msg, const std::string &fileName)
#  259|   {
#  260|       std::cerr << prog_name << ": error: "

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:258: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  256|   }
#  257|   
#  258|-> void printOpenError(const char *msg, const std::string &fileName)
#  259|   {
#  260|       std::cerr << prog_name << ": error: "

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:258: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  256|   }
#  257|   
#  258|-> void printOpenError(const char *msg, const std::string &fileName)
#  259|   {
#  260|       std::cerr << prog_name << ": error: "

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:258: misra_cpp_2008_rule_7_1_1_violation: The variable "msg" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  256|   }
#  257|   
#  258|-> void printOpenError(const char *msg, const std::string &fileName)
#  259|   {
#  260|       std::cerr << prog_name << ": error: "

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:258: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "printOpenError".
#  256|   }
#  257|   
#  258|-> void printOpenError(const char *msg, const std::string &fileName)
#  259|   {
#  260|       std::cerr << prog_name << ": error: "

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:260: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  258|   void printOpenError(const char *msg, const std::string &fileName)
#  259|   {
#  260|->     std::cerr << prog_name << ": error: "
#  261|           << msg << ": " << fileName
#  262|           << " (" << std::strerror(errno) << ")\n";

Error: MISRA C++-2008 Rule 19-3-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:262: misra_cpp_2008_rule_19_3_1_violation: The error indicator "errno" used here.
#  260|       std::cerr << prog_name << ": error: "
#  261|           << msg << ": " << fileName
#  262|->         << " (" << std::strerror(errno) << ")\n";
#  263|   }
#  264|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:265: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  263|   }
#  264|   
#  265|-> bool transformInPlace(DockerFileTransformer &dft, const std::string &fileName)
#  266|   {
#  267|       using namespace boost::filesystem;

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:265: misra_c_2012_rule_8_7_violation: Function "transformInPlace" has external linkage but is only used in one translation unit.
#  263|   }
#  264|   
#  265|-> bool transformInPlace(DockerFileTransformer &dft, const std::string &fileName)
#  266|   {
#  267|       using namespace boost::filesystem;

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:265: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  263|   }
#  264|   
#  265|-> bool transformInPlace(DockerFileTransformer &dft, const std::string &fileName)
#  266|   {
#  267|       using namespace boost::filesystem;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:265: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "transformInPlace".
#  263|   }
#  264|   
#  265|-> bool transformInPlace(DockerFileTransformer &dft, const std::string &fileName)
#  266|   {
#  267|       using namespace boost::filesystem;

Error: MISRA C++-2008 Rule 7-3-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:267: misra_cpp_2008_rule_7_3_4_violation: Using a using-directive for namespace "boost::filesystem".
#  265|   bool transformInPlace(DockerFileTransformer &dft, const std::string &fileName)
#  266|   {
#  267|->     using namespace boost::filesystem;
#  268|   
#  269|       // open input file and temporary output file

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:273: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  271|       if (!fin) {
#  272|           printOpenError("failed to open input file", fileName);
#  273|->         return false;
#  274|       }
#  275|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:273: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  271|       if (!fin) {
#  272|           printOpenError("failed to open input file", fileName);
#  273|->         return false;
#  274|       }
#  275|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:282: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  280|           printOpenError("failed to create temporary file", tmpFileName);
#  281|           fin.close();
#  282|->         return false;
#  283|       }
#  284|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:282: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  280|           printOpenError("failed to create temporary file", tmpFileName);
#  281|           fin.close();
#  282|->         return false;
#  283|       }
#  284|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:292: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  290|       if (ok)
#  291|           // rewrite input file by the temporary file
#  292|->         rename(tmpFileName, fileName);
#  293|       else
#  294|           // something failed, drop the temporary file

Error: MISRA C-2012 Rule 21.6 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:292: misra_c_2012_rule_21_6_violation: Using function "rename".
#  290|       if (ok)
#  291|           // rewrite input file by the temporary file
#  292|->         rename(tmpFileName, fileName);
#  293|       else
#  294|           // something failed, drop the temporary file

Error: MISRA C++-2008 Rule 14-8-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:292: misra_cpp_2008_rule_14_8_2_violation: Overload resolution set contains both specialized and unspecialized functions.
/usr/include/boost/filesystem/path.hpp:173: non_template_candidate_example: (example non-template candidate function "boost::filesystem::path::path(const boost::filesystem::path::string_type &)" at line 173 of "/usr/include/boost/filesystem/path.hpp")
/usr/include/boost/filesystem/path.hpp:164: template_candidate_example: (example template candidate function template "boost::filesystem::path::path(const Source &, boost::enable_if<boost::filesystem::path_traits::is_pathable<boost::decay<Source>::type>, void>::type *)" at line 164 of "/usr/include/boost/filesystem/path.hpp")
#  290|       if (ok)
#  291|           // rewrite input file by the temporary file
#  292|->         rename(tmpFileName, fileName);
#  293|       else
#  294|           // something failed, drop the temporary file

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:292: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  290|       if (ok)
#  291|           // rewrite input file by the temporary file
#  292|->         rename(tmpFileName, fileName);
#  293|       else
#  294|           // something failed, drop the temporary file

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:295: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  293|       else
#  294|           // something failed, drop the temporary file
#  295|->         remove(tmpFileName);
#  296|   
#  297|       return ok;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:295: misra_c_2012_rule_17_7_violation: The return value of a non-void function "remove" is unused.
#  293|       else
#  294|           // something failed, drop the temporary file
#  295|->         remove(tmpFileName);
#  296|   
#  297|       return ok;

Error: MISRA C-2012 Rule 21.6 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:295: misra_c_2012_rule_21_6_violation: Using function "remove".
#  293|       else
#  294|           // something failed, drop the temporary file
#  295|->         remove(tmpFileName);
#  296|   
#  297|       return ok;

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:295: misra_cpp_2008_rule_0_1_7_violation: The return value of function "boost::filesystem::remove(boost::filesystem::path const(tmpFileName))" is not used.
#  293|       else
#  294|           // something failed, drop the temporary file
#  295|->         remove(tmpFileName);
#  296|   
#  297|       return ok;

Error: MISRA C++-2008 Rule 14-8-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:295: misra_cpp_2008_rule_14_8_2_violation: Overload resolution set contains both specialized and unspecialized functions.
/usr/include/boost/filesystem/path.hpp:173: non_template_candidate_example: (example non-template candidate function "boost::filesystem::path::path(const boost::filesystem::path::string_type &)" at line 173 of "/usr/include/boost/filesystem/path.hpp")
/usr/include/boost/filesystem/path.hpp:164: template_candidate_example: (example template candidate function template "boost::filesystem::path::path(const Source &, boost::enable_if<boost::filesystem::path_traits::is_pathable<boost::decay<Source>::type>, void>::type *)" at line 164 of "/usr/include/boost/filesystem/path.hpp")
#  293|       else
#  294|           // something failed, drop the temporary file
#  295|->         remove(tmpFileName);
#  296|   
#  297|       return ok;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:295: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  293|       else
#  294|           // something failed, drop the temporary file
#  295|->         remove(tmpFileName);
#  296|   
#  297|       return ok;

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:300: misra_c_2012_rule_5_8_violation: Identifier "main" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: external_linkage_symbol: Declaring an external linkage function with identifier "main".
#  298|   }
#  299|   
#  300|-> int main(int argc, char *argv[])
#  301|   {
#  302|       // used also in diagnostic messages

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:300: misra_c_2012_rule_8_13_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  298|   }
#  299|   
#  300|-> int main(int argc, char *argv[])
#  301|   {
#  302|       // used also in diagnostic messages

Error: MISRA C++-2008 Rule 15-3-2 (CWE-703):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:300: misra_cpp_2008_rule_15_3_2_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block.
#  298|   }
#  299|   
#  300|-> int main(int argc, char *argv[])
#  301|   {
#  302|       // used also in diagnostic messages

Error: MISRA C++-2008 Rule 15-3-4 (CWE-755):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:300: misra_cpp_2008_rule_15_3_4_violation: In program root function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_any_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:358: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_any_cast>".
#  298|   }
#  299|   
#  300|-> int main(int argc, char *argv[])
#  301|   {
#  302|       // used also in diagnostic messages

Error: MISRA C++-2008 Rule 15-3-4 (CWE-755):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:300: misra_cpp_2008_rule_15_3_4_violation: In program root function "main(int, char **)" an exception of type "boost::wrapexcept<std::logic_error>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:369: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<std::logic_error>".
#  298|   }
#  299|   
#  300|-> int main(int argc, char *argv[])
#  301|   {
#  302|       // used also in diagnostic messages

Error: MISRA C++-2008 Rule 15-5-3 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:300: misra_cpp_2008_rule_15_5_3_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block. terminate() could be called implicitly.
#  298|   }
#  299|   
#  300|-> int main(int argc, char *argv[])
#  301|   {
#  302|       // used also in diagnostic messages

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:300: misra_cpp_2008_rule_7_1_1_violation: The variable "argc" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  298|   }
#  299|   
#  300|-> int main(int argc, char *argv[])
#  301|   {
#  302|       // used also in diagnostic messages

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:300: misra_cpp_2008_rule_7_1_1_violation: The variable "argv" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  298|   }
#  299|   
#  300|-> int main(int argc, char *argv[])
#  301|   {
#  302|       // used also in diagnostic messages

Error: MISRA C++-2008 Rule 7-1-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:300: misra_cpp_2008_rule_7_1_2_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  298|   }
#  299|   
#  300|-> int main(int argc, char *argv[])
#  301|   {
#  302|       // used also in diagnostic messages

Error: UNCAUGHT_EXCEPT (CWE-248):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:300: root_function: In function "main(int, char **)" an exception of type "boost::wrapexcept<boost::bad_any_cast>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:358: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<boost::bad_any_cast>".
#  298|   }
#  299|   
#  300|-> int main(int argc, char *argv[])
#  301|   {
#  302|       // used also in diagnostic messages

Error: UNCAUGHT_EXCEPT (CWE-248):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:300: root_function: In function "main(int, char **)" an exception of type "boost::wrapexcept<std::logic_error>" is thrown and never caught.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:369: fun_call_w_exception: Called function throws an exception of type "boost::wrapexcept<std::logic_error>".
#  298|   }
#  299|   
#  300|-> int main(int argc, char *argv[])
#  301|   {
#  302|       // used also in diagnostic messages

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:311: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#  309|   
#  310|       try {
#  311|->         desc.add_options()
#  312|               ("in-place,i", po::value<std::string>(),
#  313|                "modify the specified file in-place")

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:316: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#  314|               ("verbose", "print transformations to standard error output");
#  315|   
#  316|->         desc.add_options()
#  317|               ("help", "produce help message")
#  318|               ("version", "print version");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:321: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ()" is unused.
#  319|   
#  320|           po::options_description hidden("");
#  321|->         hidden.add_options()
#  322|               ("prefix-cmd", po::value<TStringList>(), "cmd [arg1 [arg2 [...]]]");
#  323|           po::positional_options_description p;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:324: misra_c_2012_rule_17_7_violation: The return value of a non-void function "add" is unused.
#  322|               ("prefix-cmd", po::value<TStringList>(), "cmd [arg1 [arg2 [...]]]");
#  323|           po::positional_options_description p;
#  324|->         p.add("prefix-cmd", -1);
#  325|   
#  326|           po::store(po::parse_command_line(argc, argv, desc), vm);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:324: misra_cpp_2008_rule_0_1_7_violation: The return value of function "p.add("prefix-cmd", -1)" is not used.
#  322|               ("prefix-cmd", po::value<TStringList>(), "cmd [arg1 [arg2 [...]]]");
#  323|           po::positional_options_description p;
#  324|->         p.add("prefix-cmd", -1);
#  325|   
#  326|           po::store(po::parse_command_line(argc, argv, desc), vm);

Error: MISRA C-2012 Rule 11.3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:326: misra_c_2012_rule_11_3_violation: The object pointer expression "argv" of type "char **" is cast to type "char const * const *".
#  324|           p.add("prefix-cmd", -1);
#  325|   
#  326|->         po::store(po::parse_command_line(argc, argv, desc), vm);
#  327|           po::notify(vm);
#  328|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:330: misra_c_2012_rule_17_7_violation: The return value of a non-void function "add" is unused.
#  328|   
#  329|           po::options_description opts;
#  330|->         opts.add(desc).add(hidden);
#  331|           po::store(po::command_line_parser(argc, argv).
#  332|                   options(opts).positional(p).run(), vm);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:330: misra_cpp_2008_rule_0_1_7_violation: The return value of function "opts.add(desc)->add(hidden)" is not used.
#  328|   
#  329|           po::options_description opts;
#  330|->         opts.add(desc).add(hidden);
#  331|           po::store(po::command_line_parser(argc, argv).
#  332|                   options(opts).positional(p).run(), vm);

Error: MISRA C-2012 Rule 11.3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:331: misra_c_2012_rule_11_3_violation: The object pointer expression "argv" of type "char **" is cast to type "char const * const *".
#  329|           po::options_description opts;
#  330|           opts.add(desc).add(hidden);
#  331|->         po::store(po::command_line_parser(argc, argv).
#  332|                   options(opts).positional(p).run(), vm);
#  333|           po::notify(vm);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:336: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  334|       }
#  335|       catch (po::error &e) {
#  336|->         std::cerr << prog_name << ": error: " << e.what() << "\n\n";
#  337|           desc.print(std::cerr);
#  338|           return 1;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:338: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  336|           std::cerr << prog_name << ": error: " << e.what() << "\n\n";
#  337|           desc.print(std::cerr);
#  338|->         return 1;
#  339|       }
#  340|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:338: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  336|           std::cerr << prog_name << ": error: " << e.what() << "\n\n";
#  337|           desc.print(std::cerr);
#  338|->         return 1;
#  339|       }
#  340|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:341: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("help", std::allocator<char>()))" does not have an essentially boolean type.
#  339|       }
#  340|   
#  341|->     if (vm.count("help")) {
#  342|           desc.print(std::cout);
#  343|           return 0;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:341: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("help", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  339|       }
#  340|   
#  341|->     if (vm.count("help")) {
#  342|           desc.print(std::cout);
#  343|           return 0;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:343: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  341|       if (vm.count("help")) {
#  342|           desc.print(std::cout);
#  343|->         return 0;
#  344|       }
#  345|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:343: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  341|       if (vm.count("help")) {
#  342|           desc.print(std::cout);
#  343|->         return 0;
#  344|       }
#  345|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:346: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("version", std::allocator<char>()))" does not have an essentially boolean type.
#  344|       }
#  345|   
#  346|->     if (vm.count("version")) {
#  347|           std::cout << CS_VERSION << "\n";
#  348|           return 0;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:346: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("version", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  344|       }
#  345|   
#  346|->     if (vm.count("version")) {
#  347|           std::cout << CS_VERSION << "\n";
#  348|           return 0;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:347: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  345|   
#  346|       if (vm.count("version")) {
#  347|->         std::cout << CS_VERSION << "\n";
#  348|           return 0;
#  349|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:348: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  346|       if (vm.count("version")) {
#  347|           std::cout << CS_VERSION << "\n";
#  348|->         return 0;
#  349|       }
#  350|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:348: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  346|       if (vm.count("version")) {
#  347|           std::cout << CS_VERSION << "\n";
#  348|->         return 0;
#  349|       }
#  350|   

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:351: misra_c_2012_rule_10_1_violation: The expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("verbose", std::allocator<char>()))" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  349|       }
#  350|   
#  351|->     const bool verbose = !!vm.count("verbose");
#  352|   
#  353|       if (!vm.count("prefix-cmd")) {

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:351: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "verbose" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:355: end_of_scope: Reached end of scope without using value stored in "verbose".
#  349|       }
#  350|   
#  351|->     const bool verbose = !!vm.count("verbose");
#  352|   
#  353|       if (!vm.count("prefix-cmd")) {

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:351: misra_cpp_2008_rule_5_3_1_violation: Operand "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("verbose", std::allocator<char>()))" of the operator "!" is not bool type.
#  349|       }
#  350|   
#  351|->     const bool verbose = !!vm.count("verbose");
#  352|   
#  353|       if (!vm.count("prefix-cmd")) {

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:353: misra_c_2012_rule_10_1_violation: The expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("prefix-cmd", std::allocator<char>()))" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  351|       const bool verbose = !!vm.count("verbose");
#  352|   
#  353|->     if (!vm.count("prefix-cmd")) {
#  354|           desc.print(std::cerr);
#  355|           return 1;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:353: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("prefix-cmd", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  351|       const bool verbose = !!vm.count("verbose");
#  352|   
#  353|->     if (!vm.count("prefix-cmd")) {
#  354|           desc.print(std::cerr);
#  355|           return 1;

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:353: misra_cpp_2008_rule_5_3_1_violation: Operand "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("prefix-cmd", std::allocator<char>()))" of the operator "!" is not bool type.
#  351|       const bool verbose = !!vm.count("verbose");
#  352|   
#  353|->     if (!vm.count("prefix-cmd")) {
#  354|           desc.print(std::cerr);
#  355|           return 1;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:355: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  353|       if (!vm.count("prefix-cmd")) {
#  354|           desc.print(std::cerr);
#  355|->         return 1;
#  356|       }
#  357|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:355: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  353|       if (!vm.count("prefix-cmd")) {
#  354|           desc.print(std::cerr);
#  355|->         return 1;
#  356|       }
#  357|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:361: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  359|       if (prefixCmd.empty()) {
#  360|           desc.print(std::cerr);
#  361|->         return 1;
#  362|       }
#  363|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:361: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  359|       if (prefixCmd.empty()) {
#  360|           desc.print(std::cerr);
#  361|->         return 1;
#  362|       }
#  363|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:367: misra_c_2012_rule_14_4_violation: The condition expression "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("in-place", std::allocator<char>()))" does not have an essentially boolean type.
#  365|       DockerFileTransformer dft(prefixCmd, verbose);
#  366|   
#  367|->     if (vm.count("in-place"))
#  368|           // transform Dockerfile in-place
#  369|           return !transformInPlace(dft, vm["in-place"].as<std::string>());

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:367: misra_cpp_2008_rule_5_0_13_violation: The type of "vm.count(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::program_options::variable_value, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::program_options::variable_value> > >::key_type const("in-place", std::allocator<char>()))" is not bool in the condition of "if-statement".
#  365|       DockerFileTransformer dft(prefixCmd, verbose);
#  366|   
#  367|->     if (vm.count("in-place"))
#  368|           // transform Dockerfile in-place
#  369|           return !transformInPlace(dft, vm["in-place"].as<std::string>());

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:369: misra_c_2012_rule_10_3_violation: Implicit conversion of "!transformInPlace(dft, vm[std::string const("in-place", std::allocator<char>())]->as())" from essential type "boolean" to different or narrower essential type "signed 32-bit int".
#  367|       if (vm.count("in-place"))
#  368|           // transform Dockerfile in-place
#  369|->         return !transformInPlace(dft, vm["in-place"].as<std::string>());
#  370|   
#  371|       // transform Dockerfile on stdin and write to stdout

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:369: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  367|       if (vm.count("in-place"))
#  368|           // transform Dockerfile in-place
#  369|->         return !transformInPlace(dft, vm["in-place"].as<std::string>());
#  370|   
#  371|       // transform Dockerfile on stdin and write to stdout

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:369: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  367|       if (vm.count("in-place"))
#  368|           // transform Dockerfile in-place
#  369|->         return !transformInPlace(dft, vm["in-place"].as<std::string>());
#  370|   
#  371|       // transform Dockerfile on stdin and write to stdout

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:369: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "!transformInPlace(dft, vm[std::string const("in-place", std::allocator<char>())]->as())" with underlying type "bool" is implicitly converted to a different underlying type "32-bit signed int".
#  367|       if (vm.count("in-place"))
#  368|           // transform Dockerfile in-place
#  369|->         return !transformInPlace(dft, vm["in-place"].as<std::string>());
#  370|   
#  371|       // transform Dockerfile on stdin and write to stdout

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:369: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  367|       if (vm.count("in-place"))
#  368|           // transform Dockerfile in-place
#  369|->         return !transformInPlace(dft, vm["in-place"].as<std::string>());
#  370|   
#  371|       // transform Dockerfile on stdin and write to stdout

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:369: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  367|       if (vm.count("in-place"))
#  368|           // transform Dockerfile in-place
#  369|->         return !transformInPlace(dft, vm["in-place"].as<std::string>());
#  370|   
#  371|       // transform Dockerfile on stdin and write to stdout

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:372: misra_c_2012_rule_10_3_violation: Implicit conversion of "!dft.transform(std::cin, std::cout)" from essential type "boolean" to different or narrower essential type "signed 32-bit int".
#  370|   
#  371|       // transform Dockerfile on stdin and write to stdout
#  372|->     return !dft.transform(std::cin, std::cout);
#  373|   }

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cstrans-df-run.cc:372: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "!dft.transform(std::cin, std::cout)" with underlying type "bool" is implicitly converted to a different underlying type "32-bit signed int".
#  370|   
#  371|       // transform Dockerfile on stdin and write to stdout
#  372|->     return !dft.transform(std::cin, std::cout);
#  373|   }

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2020 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:27: misra_cpp_2008_rule_11_0_1_violation: Member "pFileName" is not private but "AbstractCsvParser::Private" is a non-POD type.
#   25|   
#   26|   struct AbstractCsvParser::Private {
#   27|->     const std::string      *pFileName   = nullptr;
#   28|       int                     lineno      = 0;
#   29|       bool                    silent      = false;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:28: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   26|   struct AbstractCsvParser::Private {
#   27|       const std::string      *pFileName   = nullptr;
#   28|->     int                     lineno      = 0;
#   29|       bool                    silent      = false;
#   30|       bool                    hasError    = false;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:28: misra_cpp_2008_rule_11_0_1_violation: Member "lineno" is not private but "AbstractCsvParser::Private" is a non-POD type.
#   26|   struct AbstractCsvParser::Private {
#   27|       const std::string      *pFileName   = nullptr;
#   28|->     int                     lineno      = 0;
#   29|       bool                    silent      = false;
#   30|       bool                    hasError    = false;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:28: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   26|   struct AbstractCsvParser::Private {
#   27|       const std::string      *pFileName   = nullptr;
#   28|->     int                     lineno      = 0;
#   29|       bool                    silent      = false;
#   30|       bool                    hasError    = false;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:29: misra_cpp_2008_rule_11_0_1_violation: Member "silent" is not private but "AbstractCsvParser::Private" is a non-POD type.
#   27|       const std::string      *pFileName   = nullptr;
#   28|       int                     lineno      = 0;
#   29|->     bool                    silent      = false;
#   30|       bool                    hasError    = false;
#   31|   };

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:30: misra_cpp_2008_rule_11_0_1_violation: Member "hasError" is not private but "AbstractCsvParser::Private" is a non-POD type.
#   28|       int                     lineno      = 0;
#   29|       bool                    silent      = false;
#   30|->     bool                    hasError    = false;
#   31|   };
#   32|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:33: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   31|   };
#   32|   
#   33|-> AbstractCsvParser::AbstractCsvParser():
#   34|       d(new Private)
#   35|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:34: misra_c_2012_directive_4_12_violation: A call to the function "operator new(16UL)" performs dynamic memory allocation.
#   32|   
#   33|   AbstractCsvParser::AbstractCsvParser():
#   34|->     d(new Private)
#   35|   {
#   36|   }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:34: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   32|   
#   33|   AbstractCsvParser::AbstractCsvParser():
#   34|->     d(new Private)
#   35|   {
#   36|   }

Error: MISRA C++-2008 Rule 8-5-1 (CWE-456):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.hh:44: member_decl: Class member declaration for "silent".
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:36: misra_cpp_2008_rule_8_5_1_violation: Non-static class member "silent" is not initialized in this constructor nor in any functions that it calls.
#   34|       d(new Private)
#   35|   {
#   36|-> }
#   37|   
#   38|   AbstractCsvParser::~AbstractCsvParser()

Error: UNINIT_CTOR (CWE-456):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.hh:44: member_decl: Class member declaration for "silent".
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:36: uninit_member: Non-static class member "silent" is not initialized in this constructor nor in any functions that it calls.
#   34|       d(new Private)
#   35|   {
#   36|-> }
#   37|   
#   38|   AbstractCsvParser::~AbstractCsvParser()

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:38: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   36|   }
#   37|   
#   38|-> AbstractCsvParser::~AbstractCsvParser()
#   39|   {
#   40|       delete d;

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:43: misra_c_2012_rule_8_13_violation: The pointer variable "ins" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#   41|   }
#   42|   
#   43|-> bool AbstractCsvParser::parse(InStream &ins)
#   44|   {
#   45|       assert(!d->pFileName);

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:43: misra_c_2012_rule_8_3_violation: Declaration uses a different parameter name than "bool AbstractCsvParser::parse(InStream &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.hh:32: prev_declaration: (see previous declaration of "AbstractCsvParser::parse" at line 32 of "../../src/csv-parser.hh")
#   41|   }
#   42|   
#   43|-> bool AbstractCsvParser::parse(InStream &ins)
#   44|   {
#   45|       assert(!d->pFileName);

Error: MISRA C++-2008 Rule 7-1-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:43: misra_cpp_2008_rule_7_1_2_violation: The pointer variable "ins" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#   41|   }
#   42|   
#   43|-> bool AbstractCsvParser::parse(InStream &ins)
#   44|   {
#   45|       assert(!d->pFileName);

Error: MISRA C++-2008 Rule 8-4-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:43: misra_cpp_2008_rule_8_4_2_violation: Declaration uses a different parameter name than "bool AbstractCsvParser::parse(InStream &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.hh:32: prev_declaration: (see previous declaration of "AbstractCsvParser::parse" at line 32 of "../../src/csv-parser.hh")
#   41|   }
#   42|   
#   43|-> bool AbstractCsvParser::parse(InStream &ins)
#   44|   {
#   45|       assert(!d->pFileName);

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:45: misra_c_2012_rule_10_1_violation: The expression "this->d->pFileName" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#   43|   bool AbstractCsvParser::parse(InStream &ins)
#   44|   {
#   45|->     assert(!d->pFileName);
#   46|       d->pFileName = &ins.fileName();
#   47|       d->hasError = false;

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:45: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "<anonymous>" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:66: end_of_scope: Reached end of scope without using value stored in "<anonymous>".
#   43|   bool AbstractCsvParser::parse(InStream &ins)
#   44|   {
#   45|->     assert(!d->pFileName);
#   46|       d->pFileName = &ins.fileName();
#   47|       d->hasError = false;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:45: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#   43|   bool AbstractCsvParser::parse(InStream &ins)
#   44|   {
#   45|->     assert(!d->pFileName);
#   46|       d->pFileName = &ins.fileName();
#   47|       d->hasError = false;

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:45: misra_cpp_2008_rule_5_0_4_violation: "45" is implicitly converted from a signed value to an unsigned value.
#   43|   bool AbstractCsvParser::parse(InStream &ins)
#   44|   {
#   45|->     assert(!d->pFileName);
#   46|       d->pFileName = &ins.fileName();
#   47|       d->hasError = false;

Error: MISRA C++-2008 Rule 5-2-12 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:45: misra_cpp_2008_rule_5_2_12_violation: Array "<anonymous>" decays to a pointer when used as a function argument.
#   43|   bool AbstractCsvParser::parse(InStream &ins)
#   44|   {
#   45|->     assert(!d->pFileName);
#   46|       d->pFileName = &ins.fileName();
#   47|       d->hasError = false;

Error: MISRA C++-2008 Rule 5-2-4 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:45: misra_cpp_2008_rule_5_2_4_violation: C-style casts or functional notation casts "(bool)!this->d->pFileName" is used.
#   43|   bool AbstractCsvParser::parse(InStream &ins)
#   44|   {
#   45|->     assert(!d->pFileName);
#   46|       d->pFileName = &ins.fileName();
#   47|       d->hasError = false;

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:45: misra_cpp_2008_rule_5_3_1_violation: Operand "this->d->pFileName" of the operator "!" is not bool type.
#   43|   bool AbstractCsvParser::parse(InStream &ins)
#   44|   {
#   45|->     assert(!d->pFileName);
#   46|       d->pFileName = &ins.fileName();
#   47|       d->hasError = false;

Error: MISRA C-2012 Rule 14.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:51: misra_c_2012_rule_14_2_violation: The condition clause of the for loop does not use the loop counter variable "this->d->lineno".
#   49|       std::istream &str = ins.str();
#   50|       std::string line;
#   51|->     for (d->lineno = 1; std::getline(str, line); d->lineno++) {
#   52|           // initialize tokenizer
#   53|           typedef boost::escaped_list_separator<char>     TSeparator;

Error: MISRA C++-2008 Rule 6-5-1 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:51: misra_cpp_2008_rule_6_5_1_violation: There is no loop counter.
#   49|       std::istream &str = ins.str();
#   50|       std::string line;
#   51|->     for (d->lineno = 1; std::getline(str, line); d->lineno++) {
#   52|           // initialize tokenizer
#   53|           typedef boost::escaped_list_separator<char>     TSeparator;

Error: MISRA C++-2008 Rule 6-5-5 (CWE-1095):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:51: misra_cpp_2008_rule_6_5_5_violation: The non-loop-counter variable "this->d->lineno" is modified in condition or expression clause of a for loop.
#   49|       std::istream &str = ins.str();
#   50|       std::string line;
#   51|->     for (d->lineno = 1; std::getline(str, line); d->lineno++) {
#   52|           // initialize tokenizer
#   53|           typedef boost::escaped_list_separator<char>     TSeparator;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:55: misra_cpp_2008_rule_7_1_1_violation: The variable "tok" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   53|           typedef boost::escaped_list_separator<char>     TSeparator;
#   54|           typedef boost::tokenizer<TSeparator>            TTokenizer;
#   55|->         TTokenizer tok(line);
#   56|   
#   57|           // break the current line into fields

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:62: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   60|           // call the template method
#   61|           if (!/* continue */this->handleLine(fields))
#   62|->             break;
#   63|       }
#   64|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:62: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   60|           // call the template method
#   61|           if (!/* continue */this->handleLine(fields))
#   62|->             break;
#   63|       }
#   64|   

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:69: misra_c_2012_rule_5_8_violation: Identifier "parseError" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:33: external_linkage_symbol: Declaring an external linkage function with identifier "parseError".
#   67|   }
#   68|   
#   69|-> void AbstractCsvParser::parseError(const std::string &msg)
#   70|   {
#   71|       assert(d->pFileName);

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:69: misra_c_2012_rule_8_13_violation: The member function "AbstractCsvParser::parseError(std::string const &)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#   67|   }
#   68|   
#   69|-> void AbstractCsvParser::parseError(const std::string &msg)
#   70|   {
#   71|       assert(d->pFileName);

Error: MISRA C-2012 Rule 11.7 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:71: misra_c_2012_rule_11_7_violation: The expression "this->d->pFileName" of type "std::string const *" is cast to an object pointer type "bool".
#   69|   void AbstractCsvParser::parseError(const std::string &msg)
#   70|   {
#   71|->     assert(d->pFileName);
#   72|       d->hasError = true;
#   73|       if (d->silent)

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:71: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "<anonymous>" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:80: end_of_scope: Reached end of scope without using value stored in "<anonymous>".
#   69|   void AbstractCsvParser::parseError(const std::string &msg)
#   70|   {
#   71|->     assert(d->pFileName);
#   72|       d->hasError = true;
#   73|       if (d->silent)

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:71: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#   69|   void AbstractCsvParser::parseError(const std::string &msg)
#   70|   {
#   71|->     assert(d->pFileName);
#   72|       d->hasError = true;
#   73|       if (d->silent)

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:71: misra_cpp_2008_rule_5_0_4_violation: "71" is implicitly converted from a signed value to an unsigned value.
#   69|   void AbstractCsvParser::parseError(const std::string &msg)
#   70|   {
#   71|->     assert(d->pFileName);
#   72|       d->hasError = true;
#   73|       if (d->silent)

Error: MISRA C++-2008 Rule 5-2-12 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:71: misra_cpp_2008_rule_5_2_12_violation: Array "<anonymous>" decays to a pointer when used as a function argument.
#   69|   void AbstractCsvParser::parseError(const std::string &msg)
#   70|   {
#   71|->     assert(d->pFileName);
#   72|       d->hasError = true;
#   73|       if (d->silent)

Error: MISRA C++-2008 Rule 5-2-4 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:71: misra_cpp_2008_rule_5_2_4_violation: C-style casts or functional notation casts "(bool)this->d->pFileName" is used.
#   69|   void AbstractCsvParser::parseError(const std::string &msg)
#   70|   {
#   71|->     assert(d->pFileName);
#   72|       d->hasError = true;
#   73|       if (d->silent)

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:74: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   72|       d->hasError = true;
#   73|       if (d->silent)
#   74|->         return;
#   75|   
#   76|       std::cerr

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:74: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   72|       d->hasError = true;
#   73|       if (d->silent)
#   74|->         return;
#   75|   
#   76|       std::cerr

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:74: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   72|       d->hasError = true;
#   73|       if (d->silent)
#   74|->         return;
#   75|   
#   76|       std::cerr

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:74: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   72|       d->hasError = true;
#   73|       if (d->silent)
#   74|->         return;
#   75|   
#   76|       std::cerr

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.cc:76: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   74|           return;
#   75|   
#   76|->     std::cerr
#   77|           << *(d->pFileName) << ":"
#   78|           << d->lineno << ": error: "

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2020 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.hh:28: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "AbstractCsvParser".
#   26|   #include <string>
#   27|   
#   28|-> class AbstractCsvParser {
#   29|       public:
#   30|           AbstractCsvParser();

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.hh:30: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   28|   class AbstractCsvParser {
#   29|       public:
#   30|->         AbstractCsvParser();
#   31|           virtual ~AbstractCsvParser();
#   32|           bool parse(InStream &str);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.hh:31: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   29|       public:
#   30|           AbstractCsvParser();
#   31|->         virtual ~AbstractCsvParser();
#   32|           bool parse(InStream &str);
#   33|   

Error: MISRA C++-2008 Rule 2-10-2 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.hh:34: misra_cpp_2008_rule_2_10_2_violation: declaration hides member "AbstractCsvParser::silent" (declared at line 44)
#   32|           bool parse(InStream &str);
#   33|   
#   34|->         void setSilent(const bool silent) {
#   35|               this->silent = silent;
#   36|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.hh:41: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   39|           typedef std::vector<std::string> TStringList;
#   40|   
#   41|->         virtual bool /* continue */ handleLine(const TStringList &) = 0;
#   42|           void parseError(const std::string &msg);
#   43|   

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.hh:42: misra_c_2012_rule_5_8_violation: Identifier "parseError" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cslinker.cc:33: external_linkage_symbol: Declaring an external linkage function with identifier "parseError".
#   40|   
#   41|           virtual bool /* continue */ handleLine(const TStringList &) = 0;
#   42|->         void parseError(const std::string &msg);
#   43|   
#   44|           bool silent;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.hh:44: misra_cpp_2008_rule_11_0_1_violation: Member "silent" is not private but "AbstractCsvParser" is a non-POD type.
#   42|           void parseError(const std::string &msg);
#   43|   
#   44|->         bool silent;
#   45|   
#   46|       private:

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2012 - 2014 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:23: misra_cpp_2008_rule_11_0_1_violation: Member "str" is not private but "CovWriter::Private" is a non-POD type.
#   21|   
#   22|   struct CovWriter::Private {
#   23|->     std::ostream       &str;
#   24|       ColorWriter         cw;
#   25|       bool                writing;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:24: misra_cpp_2008_rule_11_0_1_violation: Member "cw" is not private but "CovWriter::Private" is a non-POD type.
#   22|   struct CovWriter::Private {
#   23|       std::ostream       &str;
#   24|->     ColorWriter         cw;
#   25|       bool                writing;
#   26|   

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:25: misra_cpp_2008_rule_11_0_1_violation: Member "writing" is not private but "CovWriter::Private" is a non-POD type.
#   23|       std::ostream       &str;
#   24|       ColorWriter         cw;
#   25|->     bool                writing;
#   26|   
#   27|       Private(std::ostream &str_, const EColorMode cm_):

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:27: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "str_" clashes with "str"
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:23: misra_typographically_ambiguous_orig: (Previously declared symbol "str" at line 23)
#   25|       bool                writing;
#   26|   
#   27|->     Private(std::ostream &str_, const EColorMode cm_):
#   28|           str(str_),
#   29|           cw(str_, cm_),

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:35: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "AbstractWriter" are not called in this constructor.
#   33|   };
#   34|   
#   35|-> CovWriter::CovWriter(std::ostream &str, const EColorMode cm):
#   36|       d(new Private(str, cm))
#   37|   {

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:35: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "CovWriter::CovWriter(std::ostream &, EColorMode)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.hh:27: prev_declaration: (see previous declaration of "CovWriter::CovWriter" at line 27 of "../../src/cswriter.hh")
#   33|   };
#   34|   
#   35|-> CovWriter::CovWriter(std::ostream &str, const EColorMode cm):
#   36|       d(new Private(str, cm))
#   37|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:36: misra_c_2012_directive_4_12_violation: A call to the function "operator new(16UL)" performs dynamic memory allocation.
#   34|   
#   35|   CovWriter::CovWriter(std::ostream &str, const EColorMode cm):
#   36|->     d(new Private(str, cm))
#   37|   {
#   38|   }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:36: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   34|   
#   35|   CovWriter::CovWriter(std::ostream &str, const EColorMode cm):
#   36|->     d(new Private(str, cm))
#   37|   {
#   38|   }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:40: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   38|   }
#   39|   
#   40|-> CovWriter::~CovWriter()
#   41|   {
#   42|       delete d;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:50: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   48|   
#   49|       if (d->writing)
#   50|->         str << std::endl;
#   51|       else
#   52|           d->writing = true;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:50: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   48|   
#   49|       if (d->writing)
#   50|->         str << std::endl;
#   51|       else
#   52|           d->writing = true;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:50: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   48|   
#   49|       if (d->writing)
#   50|->         str << std::endl;
#   51|       else
#   52|           d->writing = true;

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:50: misra_cpp_2008_rule_8_4_4_violation: Function identifier "endl" is not used to call the function or preceded by &.
#   48|   
#   49|       if (d->writing)
#   50|->         str << std::endl;
#   51|       else
#   52|           d->writing = true;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:52: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   50|           str << std::endl;
#   51|       else
#   52|->         d->writing = true;
#   53|   
#   54|       str << d->cw.setColor(C_WHITE) << "Error: "

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:52: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   50|           str << std::endl;
#   51|       else
#   52|->         d->writing = true;
#   53|   
#   54|       str << d->cw.setColor(C_WHITE) << "Error: "

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:54: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   52|           d->writing = true;
#   53|   
#   54|->     str << d->cw.setColor(C_WHITE) << "Error: "
#   55|           << d->cw.setColor(C_LIGHT_GREEN) << def.checker
#   56|           << d->cw.setColor(C_WHITE);

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:57: misra_c_2012_rule_14_4_violation: The condition expression "def.cwe" does not have an essentially boolean type.
#   55|           << d->cw.setColor(C_LIGHT_GREEN) << def.checker
#   56|           << d->cw.setColor(C_WHITE);
#   57|->     if (def.cwe)
#   58|           str << " (CWE-" << def.cwe << ")";
#   59|       else

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:57: misra_cpp_2008_rule_5_0_13_violation: The type of "def.cwe" is not bool in the condition of "if-statement".
#   55|           << d->cw.setColor(C_LIGHT_GREEN) << def.checker
#   56|           << d->cw.setColor(C_WHITE);
#   57|->     if (def.cwe)
#   58|           str << " (CWE-" << def.cwe << ")";
#   59|       else

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:58: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   56|           << d->cw.setColor(C_WHITE);
#   57|       if (def.cwe)
#   58|->         str << " (CWE-" << def.cwe << ")";
#   59|       else
#   60|           str << def.annotation;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:58: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   56|           << d->cw.setColor(C_WHITE);
#   57|       if (def.cwe)
#   58|->         str << " (CWE-" << def.cwe << ")";
#   59|       else
#   60|           str << def.annotation;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:58: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   56|           << d->cw.setColor(C_WHITE);
#   57|       if (def.cwe)
#   58|->         str << " (CWE-" << def.cwe << ")";
#   59|       else
#   60|           str << def.annotation;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:60: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   58|           str << " (CWE-" << def.cwe << ")";
#   59|       else
#   60|->         str << def.annotation;
#   61|       str << d->cw.setColor(C_NO_COLOR) << ":\n";
#   62|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:60: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   58|           str << " (CWE-" << def.cwe << ")";
#   59|       else
#   60|->         str << def.annotation;
#   61|       str << d->cw.setColor(C_NO_COLOR) << ":\n";
#   62|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:60: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   58|           str << " (CWE-" << def.cwe << ")";
#   59|       else
#   60|->         str << def.annotation;
#   61|       str << d->cw.setColor(C_NO_COLOR) << ":\n";
#   62|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:61: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   59|       else
#   60|           str << def.annotation;
#   61|->     str << d->cw.setColor(C_NO_COLOR) << ":\n";
#   62|   
#   63|       for (const DefEvent &evt : def.events) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:63: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#   61|       str << d->cw.setColor(C_NO_COLOR) << ":\n";
#   62|   
#   63|->     for (const DefEvent &evt : def.events) {
#   64|           const bool isKeyEvt = !evt.verbosityLevel;
#   65|           if (!isKeyEvt)

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:64: misra_c_2012_rule_10_1_violation: The expression "evt.verbosityLevel" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#   62|   
#   63|       for (const DefEvent &evt : def.events) {
#   64|->         const bool isKeyEvt = !evt.verbosityLevel;
#   65|           if (!isKeyEvt)
#   66|               str << d->cw.setColor(C_DARK_GRAY);

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:64: misra_cpp_2008_rule_5_3_1_violation: Operand "evt.verbosityLevel" of the operator "!" is not bool type.
#   62|   
#   63|       for (const DefEvent &evt : def.events) {
#   64|->         const bool isKeyEvt = !evt.verbosityLevel;
#   65|           if (!isKeyEvt)
#   66|               str << d->cw.setColor(C_DARK_GRAY);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:66: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   64|           const bool isKeyEvt = !evt.verbosityLevel;
#   65|           if (!isKeyEvt)
#   66|->             str << d->cw.setColor(C_DARK_GRAY);
#   67|   
#   68|           if (!evt.fileName.empty())

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:66: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   64|           const bool isKeyEvt = !evt.verbosityLevel;
#   65|           if (!isKeyEvt)
#   66|->             str << d->cw.setColor(C_DARK_GRAY);
#   67|   
#   68|           if (!evt.fileName.empty())

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:66: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   64|           const bool isKeyEvt = !evt.verbosityLevel;
#   65|           if (!isKeyEvt)
#   66|->             str << d->cw.setColor(C_DARK_GRAY);
#   67|   
#   68|           if (!evt.fileName.empty())

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:69: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   67|   
#   68|           if (!evt.fileName.empty())
#   69|->             str << evt.fileName << ":";
#   70|           
#   71|           if (0 < evt.line)

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:69: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   67|   
#   68|           if (!evt.fileName.empty())
#   69|->             str << evt.fileName << ":";
#   70|           
#   71|           if (0 < evt.line)

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:69: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   67|   
#   68|           if (!evt.fileName.empty())
#   69|->             str << evt.fileName << ":";
#   70|           
#   71|           if (0 < evt.line)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:72: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   70|           
#   71|           if (0 < evt.line)
#   72|->             str << evt.line << ":";
#   73|   
#   74|           if (0 < evt.column)

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:72: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   70|           
#   71|           if (0 < evt.line)
#   72|->             str << evt.line << ":";
#   73|   
#   74|           if (0 < evt.column)

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:72: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   70|           
#   71|           if (0 < evt.line)
#   72|->             str << evt.line << ":";
#   73|   
#   74|           if (0 < evt.column)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:75: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   73|   
#   74|           if (0 < evt.column)
#   75|->             str << evt.column << ":";
#   76|   
#   77|           if (evt.event == "#") {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:75: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   73|   
#   74|           if (0 < evt.column)
#   75|->             str << evt.column << ":";
#   76|   
#   77|           if (evt.event == "#") {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:75: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   73|   
#   74|           if (0 < evt.column)
#   75|->             str << evt.column << ":";
#   76|   
#   77|           if (evt.event == "#") {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:78: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   76|   
#   77|           if (evt.event == "#") {
#   78|->             str << d->cw.setColor(C_LIGHT_CYAN) << "#";
#   79|   
#   80|               static CtxEventDetector detector;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:80: misra_cpp_2008_rule_7_1_1_violation: The variable "detector" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   78|               str << d->cw.setColor(C_LIGHT_CYAN) << "#";
#   79|   
#   80|->             static CtxEventDetector detector;
#   81|               if (detector.isAnyCtxLine(evt)) {
#   82|                   const EColor color = detector.isKeyCtxLine(evt)

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:85: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   83|                       ? C_WHITE
#   84|                       : C_DARK_GRAY;
#   85|->                 str << d->cw.setColor(color);
#   86|               }
#   87|           }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:89: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   87|           }
#   88|           else {
#   89|->             str << " ";
#   90|               if (!evt.event.empty())
#   91|                   str << d->cw.setColorIf(isKeyEvt, C_WHITE) << evt.event

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:91: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   89|               str << " ";
#   90|               if (!evt.event.empty())
#   91|->                 str << d->cw.setColorIf(isKeyEvt, C_WHITE) << evt.event
#   92|                       << d->cw.setColorIf(isKeyEvt, C_NO_COLOR) << ": ";
#   93|           }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:91: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   89|               str << " ";
#   90|               if (!evt.event.empty())
#   91|->                 str << d->cw.setColorIf(isKeyEvt, C_WHITE) << evt.event
#   92|                       << d->cw.setColorIf(isKeyEvt, C_NO_COLOR) << ": ";
#   93|           }

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:91: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   89|               str << " ";
#   90|               if (!evt.event.empty())
#   91|->                 str << d->cw.setColorIf(isKeyEvt, C_WHITE) << evt.event
#   92|                       << d->cw.setColorIf(isKeyEvt, C_NO_COLOR) << ": ";
#   93|           }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:95: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   93|           }
#   94|   
#   95|->         str << evt.msg << d->cw.setColor(C_NO_COLOR) << "\n";
#   96|       }
#   97|   }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:99: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   97|   }
#   98|   
#   99|-> void CovWriter::flush()
#  100|   {
#  101|       d->str.flush();

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:99: misra_cpp_2008_rule_10_3_1_violation: Virtual function "CovWriter::flush()" has already been defined in "AbstractWriter::flush()".
#   97|   }
#   98|   
#   99|-> void CovWriter::flush()
#  100|   {
#  101|       d->str.flush();

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:101: misra_c_2012_rule_17_7_violation: The return value of a non-void function "flush" is unused.
#   99|   void CovWriter::flush()
#  100|   {
#  101|->     d->str.flush();
#  102|   }
#  103|   

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:101: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->str->flush()" is not used.
#   99|   void CovWriter::flush()
#  100|   {
#  101|->     d->str.flush();
#  102|   }
#  103|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:105: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#  103|   
#  104|   // only to prevent AbstractWriter::setScanProps() from printing a warning
#  105|-> void CovWriter::setScanProps(const TScanProps &)
#  106|   {
#  107|   }

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:105: misra_cpp_2008_rule_10_3_1_violation: Virtual function "CovWriter::setScanProps(TScanProps const &)" has already been defined in "AbstractWriter::setScanProps(TScanProps const &)".
#  103|   
#  104|   // only to prevent AbstractWriter::setScanProps() from printing a warning
#  105|-> void CovWriter::setScanProps(const TScanProps &)
#  106|   {
#  107|   }

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2012 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.hh:25: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "CovWriter".
#   23|   #include "abstract-filter.hh"
#   24|   
#   25|-> class CovWriter: public AbstractWriter {
#   26|       public:
#   27|           CovWriter(std::ostream &, EColorMode cm = CM_AUTO);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.hh:27: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   25|   class CovWriter: public AbstractWriter {
#   26|       public:
#   27|->         CovWriter(std::ostream &, EColorMode cm = CM_AUTO);
#   28|           virtual ~CovWriter();
#   29|   

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.hh:27: misra_c_2012_rule_8_3_violation: Symbol "CovWriter" is declared more than once and with types that are not identical.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.cc:35: definition: Definition for "CovWriter".
#   25|   class CovWriter: public AbstractWriter {
#   26|       public:
#   27|->         CovWriter(std::ostream &, EColorMode cm = CM_AUTO);
#   28|           virtual ~CovWriter();
#   29|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.hh:28: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   26|       public:
#   27|           CovWriter(std::ostream &, EColorMode cm = CM_AUTO);
#   28|->         virtual ~CovWriter();
#   29|   
#   30|           virtual void handleDef(const Defect &def);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.hh:31: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   29|   
#   30|           virtual void handleDef(const Defect &def);
#   31|->         virtual void flush();
#   32|           virtual void setScanProps(const TScanProps &);
#   33|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cswriter.hh:32: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   30|           virtual void handleDef(const Defect &def);
#   31|           virtual void flush();
#   32|->         virtual void setScanProps(const TScanProps &);
#   33|   
#   34|       private:

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2013 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 27-0-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:22: misra_cpp_2008_rule_27_0_1_violation: Included standard library header cstdio.
#   20|   #include "cwe-mapper.hh"
#   21|   
#   22|-> #include <cstdio>
#   23|   
#   24|   // /////////////////////////////////////////////////////////////////////////////

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:30: misra_cpp_2008_rule_11_0_1_violation: Member "mapByChk" is not private but "CweMap::Private" is a non-POD type.
#   28|       typedef std::map<std::string, TNumByEvent>      TMapByChk;
#   29|   
#   30|->     TMapByChk           mapByChk;
#   31|   };
#   32|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:33: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   31|   };
#   32|   
#   33|-> CweMap::CweMap():
#   34|       d(new Private)
#   35|   {

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:33: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "AbstractCsvParser" are not called in this constructor.
#   31|   };
#   32|   
#   33|-> CweMap::CweMap():
#   34|       d(new Private)
#   35|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:34: misra_c_2012_directive_4_12_violation: A call to the function "operator new(48UL)" performs dynamic memory allocation.
#   32|   
#   33|   CweMap::CweMap():
#   34|->     d(new Private)
#   35|   {
#   36|   }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:34: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   32|   
#   33|   CweMap::CweMap():
#   34|->     d(new Private)
#   35|   {
#   36|   }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:38: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   36|   }
#   37|   
#   38|-> CweMap::~CweMap()
#   39|   {
#   40|       delete d;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:43: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   41|   }
#   42|   
#   43|-> bool CweMap::empty() const
#   44|   {
#   45|       return d->mapByChk.empty();

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:52: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   50|       if (3U != fields.size()) {
#   51|           this->parseError("invalid count of fields");
#   52|->         return /* continue */ true;
#   53|       }
#   54|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:52: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   50|       if (3U != fields.size()) {
#   51|           this->parseError("invalid count of fields");
#   52|->         return /* continue */ true;
#   53|       }
#   54|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:56: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#   54|   
#   55|       // parse CWE number
#   56|->     char c;
#   57|       unsigned cwe;
#   58|       if (1 != sscanf(fields[/* CWE */ 2].c_str(), "CWE-%u%c", &cwe, &c) || !cwe)

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:57: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   55|       // parse CWE number
#   56|       char c;
#   57|->     unsigned cwe;
#   58|       if (1 != sscanf(fields[/* CWE */ 2].c_str(), "CWE-%u%c", &cwe, &c) || !cwe)
#   59|       {

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:57: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   55|       // parse CWE number
#   56|       char c;
#   57|->     unsigned cwe;
#   58|       if (1 != sscanf(fields[/* CWE */ 2].c_str(), "CWE-%u%c", &cwe, &c) || !cwe)
#   59|       {

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:58: misra_c_2012_rule_10_1_violation: The expression "cwe" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#   56|       char c;
#   57|       unsigned cwe;
#   58|->     if (1 != sscanf(fields[/* CWE */ 2].c_str(), "CWE-%u%c", &cwe, &c) || !cwe)
#   59|       {
#   60|           this->parseError("invalid CWE ID");

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:58: misra_c_2012_rule_12_1_violation: Missing explicit parentheses on sub-expression: "1 != sscanf(fields[2UL]->c_str(), "CWE-%u%c", &cwe, &c)".
#   56|       char c;
#   57|       unsigned cwe;
#   58|->     if (1 != sscanf(fields[/* CWE */ 2].c_str(), "CWE-%u%c", &cwe, &c) || !cwe)
#   59|       {
#   60|           this->parseError("invalid CWE ID");

Error: MISRA C-2012 Rule 21.6 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:58: misra_c_2012_rule_21_6_violation: Using function "sscanf".
#   56|       char c;
#   57|       unsigned cwe;
#   58|->     if (1 != sscanf(fields[/* CWE */ 2].c_str(), "CWE-%u%c", &cwe, &c) || !cwe)
#   59|       {
#   60|           this->parseError("invalid CWE ID");

Error: MISRA C++-2008 Rule 0-1-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:56: declare_variable_without_init: Declaring variable "c" without initialization.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:58: misra_cpp_2008_rule_0_1_4_violation: Using variable "c" only once.
#   56|       char c;
#   57|       unsigned cwe;
#   58|->     if (1 != sscanf(fields[/* CWE */ 2].c_str(), "CWE-%u%c", &cwe, &c) || !cwe)
#   59|       {
#   60|           this->parseError("invalid CWE ID");

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:58: misra_cpp_2008_rule_5_0_13_violation: The type of "cwe" is not bool in the condition of "if-statement".
#   56|       char c;
#   57|       unsigned cwe;
#   58|->     if (1 != sscanf(fields[/* CWE */ 2].c_str(), "CWE-%u%c", &cwe, &c) || !cwe)
#   59|       {
#   60|           this->parseError("invalid CWE ID");

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:58: misra_cpp_2008_rule_5_0_2_violation: "1 != sscanf(fields[2UL]->c_str(), "CWE-%u%c", &cwe, &c)" should be parenthesized.
#   56|       char c;
#   57|       unsigned cwe;
#   58|->     if (1 != sscanf(fields[/* CWE */ 2].c_str(), "CWE-%u%c", &cwe, &c) || !cwe)
#   59|       {
#   60|           this->parseError("invalid CWE ID");

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:58: misra_cpp_2008_rule_5_2_1_violation: Operand "!cwe" is not a postfix expression.
#   56|       char c;
#   57|       unsigned cwe;
#   58|->     if (1 != sscanf(fields[/* CWE */ 2].c_str(), "CWE-%u%c", &cwe, &c) || !cwe)
#   59|       {
#   60|           this->parseError("invalid CWE ID");

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:58: misra_cpp_2008_rule_5_2_1_violation: Operand "1 != sscanf(fields[2UL]->c_str(), "CWE-%u%c", &cwe, &c)" is not a postfix expression.
#   56|       char c;
#   57|       unsigned cwe;
#   58|->     if (1 != sscanf(fields[/* CWE */ 2].c_str(), "CWE-%u%c", &cwe, &c) || !cwe)
#   59|       {
#   60|           this->parseError("invalid CWE ID");

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:58: misra_cpp_2008_rule_5_3_1_violation: Operand "cwe" of the operator "!" is not bool type.
#   56|       char c;
#   57|       unsigned cwe;
#   58|->     if (1 != sscanf(fields[/* CWE */ 2].c_str(), "CWE-%u%c", &cwe, &c) || !cwe)
#   59|       {
#   60|           this->parseError("invalid CWE ID");

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:61: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   59|       {
#   60|           this->parseError("invalid CWE ID");
#   61|->         return /* continue */ true;
#   62|       }
#   63|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:61: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   59|       {
#   60|           this->parseError("invalid CWE ID");
#   61|->         return /* continue */ true;
#   62|       }
#   63|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:70: misra_c_2012_rule_14_4_violation: The condition expression "row->count(evt)" does not have an essentially boolean type.
#   68|       // lookup by event
#   69|       const std::string &evt = fields[/* evt */ 1];
#   70|->     if (row.count(evt))
#   71|           this->parseError("CWE redefinition");
#   72|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:70: misra_cpp_2008_rule_5_0_13_violation: The type of "row->count(evt)" is not bool in the condition of "if-statement".
#   68|       // lookup by event
#   69|       const std::string &evt = fields[/* evt */ 1];
#   70|->     if (row.count(evt))
#   71|           this->parseError("CWE redefinition");
#   72|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:71: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   69|       const std::string &evt = fields[/* evt */ 1];
#   70|       if (row.count(evt))
#   71|->         this->parseError("CWE redefinition");
#   72|   
#   73|       // store the mapping

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:71: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   69|       const std::string &evt = fields[/* evt */ 1];
#   70|       if (row.count(evt))
#   71|->         this->parseError("CWE redefinition");
#   72|   
#   73|       // store the mapping

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:74: misra_cpp_2008_rule_5_0_4_violation: "cwe" is implicitly converted from an unsigned value to a signed value.
#   72|   
#   73|       // store the mapping
#   74|->     row[evt] = cwe;
#   75|   
#   76|       return /* continue */ true;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:81: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   79|   bool CweMap::assignCwe(Defect &def) const
#   80|   {
#   81|->     int &cweDst = def.cwe;
#   82|   
#   83|       // lookup by checker

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:81: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   79|   bool CweMap::assignCwe(Defect &def) const
#   80|   {
#   81|->     int &cweDst = def.cwe;
#   82|   
#   83|       // lookup by checker

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:84: misra_cpp_2008_rule_7_1_1_violation: The variable "rowIt" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   82|   
#   83|       // lookup by checker
#   84|->     Private::TMapByChk::const_iterator rowIt = d->mapByChk.find(def.checker);
#   85|       if (d->mapByChk.end() == rowIt) {
#   86|           if (cweDst)

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:86: misra_c_2012_rule_14_4_violation: The condition expression "cweDst" does not have an essentially boolean type.
#   84|       Private::TMapByChk::const_iterator rowIt = d->mapByChk.find(def.checker);
#   85|       if (d->mapByChk.end() == rowIt) {
#   86|->         if (cweDst)
#   87|               // CWE already assigned, stay silent
#   88|               return true;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:86: misra_cpp_2008_rule_5_0_13_violation: The type of "cweDst" is not bool in the condition of "if-statement".
#   84|       Private::TMapByChk::const_iterator rowIt = d->mapByChk.find(def.checker);
#   85|       if (d->mapByChk.end() == rowIt) {
#   86|->         if (cweDst)
#   87|               // CWE already assigned, stay silent
#   88|               return true;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:88: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   86|           if (cweDst)
#   87|               // CWE already assigned, stay silent
#   88|->             return true;
#   89|   
#   90|           if (!this->silent)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:88: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   86|           if (cweDst)
#   87|               // CWE already assigned, stay silent
#   88|->             return true;
#   89|   
#   90|           if (!this->silent)

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:88: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   86|           if (cweDst)
#   87|               // CWE already assigned, stay silent
#   88|->             return true;
#   89|   
#   90|           if (!this->silent)

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:88: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   86|           if (cweDst)
#   87|               // CWE already assigned, stay silent
#   88|->             return true;
#   89|   
#   90|           if (!this->silent)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:91: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   89|   
#   90|           if (!this->silent)
#   91|->             std::cerr << "warning: CWE not found: checker = "
#   92|                   << def.checker <<"\n";
#   93|           return false;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:91: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   89|   
#   90|           if (!this->silent)
#   91|->             std::cerr << "warning: CWE not found: checker = "
#   92|                   << def.checker <<"\n";
#   93|           return false;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:91: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   89|   
#   90|           if (!this->silent)
#   91|->             std::cerr << "warning: CWE not found: checker = "
#   92|                   << def.checker <<"\n";
#   93|           return false;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:93: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   91|               std::cerr << "warning: CWE not found: checker = "
#   92|                   << def.checker <<"\n";
#   93|->         return false;
#   94|       }
#   95|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:93: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   91|               std::cerr << "warning: CWE not found: checker = "
#   92|                   << def.checker <<"\n";
#   93|->         return false;
#   94|       }
#   95|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:101: misra_c_2012_rule_14_4_violation: The condition expression "cweDst" does not have an essentially boolean type.
#   99|       Private::TNumByEvent::const_iterator cweIt = row.find(evt.event);
#  100|       if (row.end() == cweIt) {
#  101|->         if (cweDst)
#  102|               // CWE already assigned, stay silent
#  103|               return true;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:101: misra_cpp_2008_rule_5_0_13_violation: The type of "cweDst" is not bool in the condition of "if-statement".
#   99|       Private::TNumByEvent::const_iterator cweIt = row.find(evt.event);
#  100|       if (row.end() == cweIt) {
#  101|->         if (cweDst)
#  102|               // CWE already assigned, stay silent
#  103|               return true;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:103: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  101|           if (cweDst)
#  102|               // CWE already assigned, stay silent
#  103|->             return true;
#  104|   
#  105|           if (!this->silent)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:103: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  101|           if (cweDst)
#  102|               // CWE already assigned, stay silent
#  103|->             return true;
#  104|   
#  105|           if (!this->silent)

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:103: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  101|           if (cweDst)
#  102|               // CWE already assigned, stay silent
#  103|->             return true;
#  104|   
#  105|           if (!this->silent)

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:103: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  101|           if (cweDst)
#  102|               // CWE already assigned, stay silent
#  103|->             return true;
#  104|   
#  105|           if (!this->silent)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:106: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  104|   
#  105|           if (!this->silent)
#  106|->             std::cerr << "warning: CWE not found: checker = " << def.checker
#  107|                   << ", event = " << evt.event << "\n";
#  108|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:106: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  104|   
#  105|           if (!this->silent)
#  106|->             std::cerr << "warning: CWE not found: checker = " << def.checker
#  107|                   << ", event = " << evt.event << "\n";
#  108|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:106: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  104|   
#  105|           if (!this->silent)
#  106|->             std::cerr << "warning: CWE not found: checker = " << def.checker
#  107|                   << ", event = " << evt.event << "\n";
#  108|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:112: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  110|               // we cannot fallback to a random CWE that Cppcheck has mapping for
#  111|               cweDst = 0;
#  112|->             return false;
#  113|           }
#  114|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:112: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  110|               // we cannot fallback to a random CWE that Cppcheck has mapping for
#  111|               cweDst = 0;
#  112|->             return false;
#  113|           }
#  114|   

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:118: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  116|       }
#  117|   
#  118|->     const int cweSrc = cweIt->second;
#  119|       if (cweSrc == cweDst)
#  120|           // already assigned to the requested value

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:118: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  116|       }
#  117|   
#  118|->     const int cweSrc = cweIt->second;
#  119|       if (cweSrc == cweDst)
#  120|           // already assigned to the requested value

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:121: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  119|       if (cweSrc == cweDst)
#  120|           // already assigned to the requested value
#  121|->         return true;
#  122|   
#  123|       if (cweDst && !this->silent)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:121: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  119|       if (cweSrc == cweDst)
#  120|           // already assigned to the requested value
#  121|->         return true;
#  122|   
#  123|       if (cweDst && !this->silent)

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:121: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  119|       if (cweSrc == cweDst)
#  120|           // already assigned to the requested value
#  121|->         return true;
#  122|   
#  123|       if (cweDst && !this->silent)

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:121: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  119|       if (cweSrc == cweDst)
#  120|           // already assigned to the requested value
#  121|->         return true;
#  122|   
#  123|       if (cweDst && !this->silent)

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:123: misra_c_2012_rule_10_1_violation: The expression "cweDst" of non-boolean essential type is being interpreted as a boolean value for the operator "&&".
#  121|           return true;
#  122|   
#  123|->     if (cweDst && !this->silent)
#  124|           // we are rewriting the CWE
#  125|           std::cerr << "warning: CWE overriden: "

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:123: misra_cpp_2008_rule_5_0_13_violation: The type of "cweDst" is not bool in the condition of "if-statement".
#  121|           return true;
#  122|   
#  123|->     if (cweDst && !this->silent)
#  124|           // we are rewriting the CWE
#  125|           std::cerr << "warning: CWE overriden: "

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:123: misra_cpp_2008_rule_5_2_1_violation: Operand "!this->silent" is not a postfix expression.
#  121|           return true;
#  122|   
#  123|->     if (cweDst && !this->silent)
#  124|           // we are rewriting the CWE
#  125|           std::cerr << "warning: CWE overriden: "

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:123: misra_cpp_2008_rule_5_3_1_violation: Operand "cweDst" of the operator "&&" is not bool type.
#  121|           return true;
#  122|   
#  123|->     if (cweDst && !this->silent)
#  124|           // we are rewriting the CWE
#  125|           std::cerr << "warning: CWE overriden: "

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:125: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  123|       if (cweDst && !this->silent)
#  124|           // we are rewriting the CWE
#  125|->         std::cerr << "warning: CWE overriden: "
#  126|               << cweSrc << " -> "
#  127|               << cweDst << "\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:125: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  123|       if (cweDst && !this->silent)
#  124|           // we are rewriting the CWE
#  125|->         std::cerr << "warning: CWE overriden: "
#  126|               << cweSrc << " -> "
#  127|               << cweDst << "\n";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:125: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  123|       if (cweDst && !this->silent)
#  124|           // we are rewriting the CWE
#  125|->         std::cerr << "warning: CWE overriden: "
#  126|               << cweSrc << " -> "
#  127|               << cweDst << "\n";

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:138: misra_cpp_2008_rule_11_0_1_violation: Member "cweMap" is not private but "CweMapDecorator::Private" is a non-POD type.
#  136|   // implementation of CweMapDecorator
#  137|   struct CweMapDecorator::Private {
#  138|->     CweMap              cweMap;
#  139|   };
#  140|   

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:138: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "cweMap" clashes with "CweMap"
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.hh:28: misra_typographically_ambiguous_orig: (Previously declared symbol "CweMap" at line 28 of "../../src/cwe-mapper.hh")
#  136|   // implementation of CweMapDecorator
#  137|   struct CweMapDecorator::Private {
#  138|->     CweMap              cweMap;
#  139|   };
#  140|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:141: misra_cpp_2008_rule_7_1_1_violation: The variable "silent" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  139|   };
#  140|   
#  141|-> CweMapDecorator::CweMapDecorator(AbstractWriter *writer, bool silent):
#  142|       GenericAbstractFilter(writer),
#  143|       d(new Private)

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:141: misra_cpp_2008_rule_7_1_1_violation: The variable "writer" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  139|   };
#  140|   
#  141|-> CweMapDecorator::CweMapDecorator(AbstractWriter *writer, bool silent):
#  142|       GenericAbstractFilter(writer),
#  143|       d(new Private)

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:143: misra_c_2012_directive_4_12_violation: A call to the function "operator new(32UL)" performs dynamic memory allocation.
#  141|   CweMapDecorator::CweMapDecorator(AbstractWriter *writer, bool silent):
#  142|       GenericAbstractFilter(writer),
#  143|->     d(new Private)
#  144|   {
#  145|       d->cweMap.setSilent(silent);

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:143: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  141|   CweMapDecorator::CweMapDecorator(AbstractWriter *writer, bool silent):
#  142|       GenericAbstractFilter(writer),
#  143|->     d(new Private)
#  144|   {
#  145|       d->cweMap.setSilent(silent);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:148: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  146|   }
#  147|   
#  148|-> CweMapDecorator::~CweMapDecorator()
#  149|   {
#  150|       delete d;

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:153: misra_c_2012_rule_8_3_violation: Declaration uses a different parameter name than "void CweMapDecorator::handleDef(const Defect &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.hh:50: prev_declaration: (see previous declaration of "CweMapDecorator::handleDef" at line 50 of "../../src/cwe-mapper.hh")
#  151|   }
#  152|   
#  153|-> void CweMapDecorator::handleDef(const Defect &orig)
#  154|   {
#  155|       if (d->cweMap.empty()) {

Error: MISRA C++-2008 Rule 8-4-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:153: misra_cpp_2008_rule_8_4_2_violation: Declaration uses a different parameter name than "void CweMapDecorator::handleDef(const Defect &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.hh:50: prev_declaration: (see previous declaration of "CweMapDecorator::handleDef" at line 50 of "../../src/cwe-mapper.hh")
#  151|   }
#  152|   
#  153|-> void CweMapDecorator::handleDef(const Defect &orig)
#  154|   {
#  155|       if (d->cweMap.empty()) {

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:158: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  156|           // CweMap not populated
#  157|           agent_->handleDef(orig);
#  158|->         return;
#  159|       }
#  160|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:158: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  156|           // CweMap not populated
#  157|           agent_->handleDef(orig);
#  158|->         return;
#  159|       }
#  160|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:162: misra_c_2012_rule_17_7_violation: The return value of a non-void function "assignCwe" is unused.
#  160|   
#  161|       Defect def(orig);
#  162|->     d->cweMap.assignCwe(def);
#  163|       agent_->handleDef(def);
#  164|   }

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:162: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->d->cweMap.assignCwe(def)" is not used.
#  160|   
#  161|       Defect def(orig);
#  162|->     d->cweMap.assignCwe(def);
#  163|       agent_->handleDef(def);
#  164|   }

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:166: misra_c_2012_rule_8_13_violation: The member function "CweMapDecorator::cweMap()" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  164|   }
#  165|   
#  166|-> CweMap& CweMapDecorator::cweMap()
#  167|   {
#  168|       return d->cweMap;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:166: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  164|   }
#  165|   
#  166|-> CweMap& CweMapDecorator::cweMap()
#  167|   {
#  168|       return d->cweMap;

Error: MISRA C++-2008 Rule 9-3-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:168: misra_cpp_2008_rule_9_3_2_violation: Returning a handle to class-data from a method breaks encapsulation.
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.cc:143: class_data_via_ctor: Example 1: Class member "d" is allocated in constructor or initialization list. This is now class data.
#  166|   CweMap& CweMapDecorator::cweMap()
#  167|   {
#  168|->     return d->cweMap;
#  169|   }

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2013 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.hh:28: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "CweMap".
#   26|   #include <iostream>
#   27|   
#   28|-> class CweMap: public AbstractCsvParser {
#   29|       public:
#   30|           CweMap();

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.hh:30: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   28|   class CweMap: public AbstractCsvParser {
#   29|       public:
#   30|->         CweMap();
#   31|           ~CweMap();
#   32|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.hh:31: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   29|       public:
#   30|           CweMap();
#   31|->         ~CweMap();
#   32|   
#   33|           bool assignCwe(Defect &def) const;

Error: MISRA C++-2008 Rule 10-3-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.hh:31: misra_cpp_2008_rule_10_3_2_violation: Virtual function "CweMap::~CweMap()" is not explicitly declared 'virtual'.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csv-parser.hh:31: misra_implicitly_virtual_because: function "CweMap::~CweMap()" overrides virtual function "AbstractCsvParser::~AbstractCsvParser()" declared at line 31 of "../../src/csv-parser.hh".
#   29|       public:
#   30|           CweMap();
#   31|->         ~CweMap();
#   32|   
#   33|           bool assignCwe(Defect &def) const;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.hh:34: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   32|   
#   33|           bool assignCwe(Defect &def) const;
#   34|->         bool empty() const;
#   35|   
#   36|       protected:

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.hh:37: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   35|   
#   36|       protected:
#   37|->         virtual bool /* continue */ handleLine(const TStringList &);
#   38|   
#   39|       private:

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.hh:44: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "CweMapDecorator".
#   42|   };
#   43|   
#   44|-> class CweMapDecorator: public GenericAbstractFilter {
#   45|       public:
#   46|           /// @param writer the instance will be deleted on destruction

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.hh:48: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   46|           /// @param writer the instance will be deleted on destruction
#   47|           CweMapDecorator(AbstractWriter *writer, bool silent);
#   48|->         virtual ~CweMapDecorator();
#   49|   
#   50|           virtual void handleDef(const Defect &def);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.hh:52: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   50|           virtual void handleDef(const Defect &def);
#   51|   
#   52|->         CweMap& cweMap();
#   53|   
#   54|       private:

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.hh:52: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "cweMap" clashes with "CweMap"
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-mapper.hh:28: misra_typographically_ambiguous_orig: (Previously declared symbol "CweMap" at line 28)
#   50|           virtual void handleDef(const Defect &def);
#   51|   
#   52|->         CweMap& cweMap();
#   53|   
#   54|       private:

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2020 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:28: misra_cpp_2008_rule_11_0_1_violation: Member "nameByCwe" is not private but "CweNameLookup::Private" is a non-POD type.
#   26|   struct CweNameLookup::Private {
#   27|       typedef std::map<int, std::string> TMap;
#   28|->     TMap nameByCwe;
#   29|       const std::string emp;
#   30|   };

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:29: misra_cpp_2008_rule_11_0_1_violation: Member "emp" is not private but "CweNameLookup::Private" is a non-POD type.
#   27|       typedef std::map<int, std::string> TMap;
#   28|       TMap nameByCwe;
#   29|->     const std::string emp;
#   30|   };
#   31|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:32: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   30|   };
#   31|   
#   32|-> CweNameLookup::CweNameLookup():
#   33|       d(new Private)
#   34|   {

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:32: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "AbstractCsvParser" are not called in this constructor.
#   30|   };
#   31|   
#   32|-> CweNameLookup::CweNameLookup():
#   33|       d(new Private)
#   34|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:33: misra_c_2012_directive_4_12_violation: A call to the function "operator new(80UL)" performs dynamic memory allocation.
#   31|   
#   32|   CweNameLookup::CweNameLookup():
#   33|->     d(new Private)
#   34|   {
#   35|   }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:33: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   31|   
#   32|   CweNameLookup::CweNameLookup():
#   33|->     d(new Private)
#   34|   {
#   35|   }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:37: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   35|   }
#   36|   
#   37|-> CweNameLookup::~CweNameLookup()
#   38|   {
#   39|       delete d;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:46: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   44|       if (2U != fields.size()) {
#   45|           this->parseError("invalid count of fields");
#   46|->         return /* continue */ true;
#   47|       }
#   48|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:46: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   44|       if (2U != fields.size()) {
#   45|           this->parseError("invalid count of fields");
#   46|->         return /* continue */ true;
#   47|       }
#   48|   

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:51: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   49|       // parse CWE number
#   50|       const std::string &cweId = fields[/* CWE */ 0];
#   51|->     const int cwe = parse_int(cweId, -1);
#   52|       if (cwe < 0) {
#   53|           this->parseError("invalid CWE ID");

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:51: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   49|       // parse CWE number
#   50|       const std::string &cweId = fields[/* CWE */ 0];
#   51|->     const int cwe = parse_int(cweId, -1);
#   52|       if (cwe < 0) {
#   53|           this->parseError("invalid CWE ID");

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:54: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   52|       if (cwe < 0) {
#   53|           this->parseError("invalid CWE ID");
#   54|->         return /* continue */ true;
#   55|       }
#   56|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:54: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   52|       if (cwe < 0) {
#   53|           this->parseError("invalid CWE ID");
#   54|->         return /* continue */ true;
#   55|       }
#   56|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:58: misra_c_2012_rule_14_4_violation: The condition expression "this->d->nameByCwe.count(cwe)" does not have an essentially boolean type.
#   56|   
#   57|       // lookup by CWE number
#   58|->     if (d->nameByCwe.count(cwe))
#   59|           this->parseError("CWE name redefinition");
#   60|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:58: misra_cpp_2008_rule_5_0_13_violation: The type of "this->d->nameByCwe.count(cwe)" is not bool in the condition of "if-statement".
#   56|   
#   57|       // lookup by CWE number
#   58|->     if (d->nameByCwe.count(cwe))
#   59|           this->parseError("CWE name redefinition");
#   60|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:59: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   57|       // lookup by CWE number
#   58|       if (d->nameByCwe.count(cwe))
#   59|->         this->parseError("CWE name redefinition");
#   60|   
#   61|       // define the mapping

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:59: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   57|       // lookup by CWE number
#   58|       if (d->nameByCwe.count(cwe))
#   59|->         this->parseError("CWE name redefinition");
#   60|   
#   61|       // define the mapping

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:63: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   61|       // define the mapping
#   62|       const std::string &cweName = fields[/* name */ 1];
#   63|->     d->nameByCwe[cwe] = cweName;
#   64|   
#   65|       return /* continue */ true;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:68: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   66|   }
#   67|   
#   68|-> const std::string& CweNameLookup::lookup(const int cwe) const
#   69|   {
#   70|       const Private::TMap::const_iterator it = d->nameByCwe.find(cwe);

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.cc:68: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   66|   }
#   67|   
#   68|-> const std::string& CweNameLookup::lookup(const int cwe) const
#   69|   {
#   70|       const Private::TMap::const_iterator it = d->nameByCwe.find(cwe);

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2020 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.hh:28: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "CweNameLookup".
#   26|   #include <iostream>
#   27|   
#   28|-> class CweNameLookup: public AbstractCsvParser {
#   29|       public:
#   30|           CweNameLookup();

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.hh:30: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   28|   class CweNameLookup: public AbstractCsvParser {
#   29|       public:
#   30|->         CweNameLookup();
#   31|           virtual ~CweNameLookup();
#   32|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.hh:31: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   29|       public:
#   30|           CweNameLookup();
#   31|->         virtual ~CweNameLookup();
#   32|   
#   33|           /// return name of the given CWE ID, or an empty string if not found

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.hh:34: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   32|   
#   33|           /// return name of the given CWE ID, or an empty string if not found
#   34|->         const std::string& lookup(const int cwe) const;
#   35|   
#   36|       protected:

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.hh:34: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   32|   
#   33|           /// return name of the given CWE ID, or an empty string if not found
#   34|->         const std::string& lookup(const int cwe) const;
#   35|   
#   36|       protected:

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/cwe-name-lookup.hh:37: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   35|   
#   36|       protected:
#   37|->         virtual bool /* continue */ handleLine(const TStringList &);
#   38|   
#   39|       private:

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011-2013 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 16-0-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:28: misra_cpp_2008_rule_16_0_4_violation: Function-like macro "RETURN_IF_COMPARED" is defined.
#   26|   
#   27|   // FIXME: move this to a separate header file?
#   28|-> #define RETURN_IF_COMPARED(a, b, member) do {   \
#   29|       if (a.member < b.member)                    \
#   30|           return true;                            \

Error: MISRA C++-2008 Rule 16-0-6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:28: misra_cpp_2008_rule_16_0_6_violation: Parameter a is not enclosed in parentheses or used as the operand of # or ##.
#   26|   
#   27|   // FIXME: move this to a separate header file?
#   28|-> #define RETURN_IF_COMPARED(a, b, member) do {   \
#   29|       if (a.member < b.member)                    \
#   30|           return true;                            \

Error: MISRA C++-2008 Rule 16-0-6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:28: misra_cpp_2008_rule_16_0_6_violation: Parameter b is not enclosed in parentheses or used as the operand of # or ##.
#   26|   
#   27|   // FIXME: move this to a separate header file?
#   28|-> #define RETURN_IF_COMPARED(a, b, member) do {   \
#   29|       if (a.member < b.member)                    \
#   30|           return true;                            \

Error: MISRA C++-2008 Rule 16-0-6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:28: misra_cpp_2008_rule_16_0_6_violation: Parameter member is not enclosed in parentheses or used as the operand of # or ##.
#   26|   
#   27|   // FIXME: move this to a separate header file?
#   28|-> #define RETURN_IF_COMPARED(a, b, member) do {   \
#   29|       if (a.member < b.member)                    \
#   30|           return true;                            \

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:28: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   26|   
#   27|   // FIXME: move this to a separate header file?
#   28|-> #define RETURN_IF_COMPARED(a, b, member) do {   \
#   29|       if (a.member < b.member)                    \
#   30|           return true;                            \

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:28: misra_cpp_2008_rule_16_2_2_violation: Macro "RETURN_IF_COMPARED" is used other than include guards, type qualifiers, or storage class specifiers.
#   26|   
#   27|   // FIXME: move this to a separate header file?
#   28|-> #define RETURN_IF_COMPARED(a, b, member) do {   \
#   29|       if (a.member < b.member)                    \
#   30|           return true;                            \

Error: MISRA C++-2008 Rule 16-0-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:36: misra_cpp_2008_rule_16_0_4_violation: Function-like macro "RETURN_BY_REF_IF_COMPARED" is defined.
#   34|   
#   35|   // FIXME: move this to a separate header file?
#   36|-> #define RETURN_BY_REF_IF_COMPARED(a, b, member) do {    \
#   37|       if (a.member < b.member)                            \
#   38|           *pResult = true;                                \

Error: MISRA C++-2008 Rule 16-0-6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:36: misra_cpp_2008_rule_16_0_6_violation: Parameter a is not enclosed in parentheses or used as the operand of # or ##.
#   34|   
#   35|   // FIXME: move this to a separate header file?
#   36|-> #define RETURN_BY_REF_IF_COMPARED(a, b, member) do {    \
#   37|       if (a.member < b.member)                            \
#   38|           *pResult = true;                                \

Error: MISRA C++-2008 Rule 16-0-6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:36: misra_cpp_2008_rule_16_0_6_violation: Parameter b is not enclosed in parentheses or used as the operand of # or ##.
#   34|   
#   35|   // FIXME: move this to a separate header file?
#   36|-> #define RETURN_BY_REF_IF_COMPARED(a, b, member) do {    \
#   37|       if (a.member < b.member)                            \
#   38|           *pResult = true;                                \

Error: MISRA C++-2008 Rule 16-0-6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:36: misra_cpp_2008_rule_16_0_6_violation: Parameter member is not enclosed in parentheses or used as the operand of # or ##.
#   34|   
#   35|   // FIXME: move this to a separate header file?
#   36|-> #define RETURN_BY_REF_IF_COMPARED(a, b, member) do {    \
#   37|       if (a.member < b.member)                            \
#   38|           *pResult = true;                                \

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:36: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   34|   
#   35|   // FIXME: move this to a separate header file?
#   36|-> #define RETURN_BY_REF_IF_COMPARED(a, b, member) do {    \
#   37|       if (a.member < b.member)                            \
#   38|           *pResult = true;                                \

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:36: misra_cpp_2008_rule_16_2_2_violation: Macro "RETURN_BY_REF_IF_COMPARED" is used other than include guards, type qualifiers, or storage class specifiers.
#   34|   
#   35|   // FIXME: move this to a separate header file?
#   36|-> #define RETURN_BY_REF_IF_COMPARED(a, b, member) do {    \
#   37|       if (a.member < b.member)                            \
#   38|           *pResult = true;                                \

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:47: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   45|   
#   46|   
#   47|-> struct DefEvent {
#   48|       std::string         fileName;
#   49|       int                 line            = 0;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:47: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "DefEvent".
#   45|   
#   46|   
#   47|-> struct DefEvent {
#   48|       std::string         fileName;
#   49|       int                 line            = 0;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:48: misra_cpp_2008_rule_11_0_1_violation: Member "fileName" is not private but "DefEvent" is a non-POD type.
#   46|   
#   47|   struct DefEvent {
#   48|->     std::string         fileName;
#   49|       int                 line            = 0;
#   50|       int                 column          = 0;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:49: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   47|   struct DefEvent {
#   48|       std::string         fileName;
#   49|->     int                 line            = 0;
#   50|       int                 column          = 0;
#   51|       std::string         event;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:49: misra_cpp_2008_rule_11_0_1_violation: Member "line" is not private but "DefEvent" is a non-POD type.
#   47|   struct DefEvent {
#   48|       std::string         fileName;
#   49|->     int                 line            = 0;
#   50|       int                 column          = 0;
#   51|       std::string         event;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:49: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   47|   struct DefEvent {
#   48|       std::string         fileName;
#   49|->     int                 line            = 0;
#   50|       int                 column          = 0;
#   51|       std::string         event;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:50: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   48|       std::string         fileName;
#   49|       int                 line            = 0;
#   50|->     int                 column          = 0;
#   51|       std::string         event;
#   52|       std::string         msg;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:50: misra_cpp_2008_rule_11_0_1_violation: Member "column" is not private but "DefEvent" is a non-POD type.
#   48|       std::string         fileName;
#   49|       int                 line            = 0;
#   50|->     int                 column          = 0;
#   51|       std::string         event;
#   52|       std::string         msg;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:50: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   48|       std::string         fileName;
#   49|       int                 line            = 0;
#   50|->     int                 column          = 0;
#   51|       std::string         event;
#   52|       std::string         msg;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:51: misra_cpp_2008_rule_11_0_1_violation: Member "event" is not private but "DefEvent" is a non-POD type.
#   49|       int                 line            = 0;
#   50|       int                 column          = 0;
#   51|->     std::string         event;
#   52|       std::string         msg;
#   53|   

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:52: misra_cpp_2008_rule_11_0_1_violation: Member "msg" is not private but "DefEvent" is a non-POD type.
#   50|       int                 column          = 0;
#   51|       std::string         event;
#   52|->     std::string         msg;
#   53|   
#   54|       /// 0 = key event,  1 = info event,  2 = trace event

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:55: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   53|   
#   54|       /// 0 = key event,  1 = info event,  2 = trace event
#   55|->     int                 verbosityLevel  = 0;
#   56|   
#   57|       DefEvent() { }

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:55: misra_cpp_2008_rule_11_0_1_violation: Member "verbosityLevel" is not private but "DefEvent" is a non-POD type.
#   53|   
#   54|       /// 0 = key event,  1 = info event,  2 = trace event
#   55|->     int                 verbosityLevel  = 0;
#   56|   
#   57|       DefEvent() { }

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:55: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   53|   
#   54|       /// 0 = key event,  1 = info event,  2 = trace event
#   55|->     int                 verbosityLevel  = 0;
#   56|   
#   57|       DefEvent() { }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:57: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   55|       int                 verbosityLevel  = 0;
#   56|   
#   57|->     DefEvent() { }
#   58|   
#   59|       explicit DefEvent(const std::string &event):

Error: MISRA C++-2008 Rule 2-10-2 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:59: misra_cpp_2008_rule_2_10_2_violation: declaration hides member "DefEvent::event" (declared at line 51)
#   57|       DefEvent() { }
#   58|   
#   59|->     explicit DefEvent(const std::string &event):
#   60|           event(event)
#   61|       {

Error: MISRA C-2012 Rule 8.10 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:65: misra_c_2012_rule_8_10_violation: The inline function "cmpEvents(bool *, DefEvent const &, DefEvent const &)" is not declared with a static scope.
#   63|   };
#   64|   
#   65|-> inline bool cmpEvents(bool *pResult, const DefEvent &a, const DefEvent &b)
#   66|   {
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:65: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   63|   };
#   64|   
#   65|-> inline bool cmpEvents(bool *pResult, const DefEvent &a, const DefEvent &b)
#   66|   {
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:65: misra_cpp_2008_rule_7_1_1_violation: The variable "pResult" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   63|   };
#   64|   
#   65|-> inline bool cmpEvents(bool *pResult, const DefEvent &a, const DefEvent &b)
#   66|   {
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:65: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "cmpEvents".
#   63|   };
#   64|   
#   65|-> inline bool cmpEvents(bool *pResult, const DefEvent &a, const DefEvent &b)
#   66|   {
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);

Error: MISRA C-2012 Directive 4.9 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:67: misra_c_2012_directive_4_9_violation: Function-like macro is used.
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:67: det_during_template_function_declaration_context: detected during instantiation of "std::operator<" based on template arguments <char, std::char_traits<char>, std::allocator<char>> at line 67
#   65|   inline bool cmpEvents(bool *pResult, const DefEvent &a, const DefEvent &b)
#   66|   {
#   67|->     RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:67: misra_c_2012_rule_14_4_violation: The condition expression "false" does not have an essentially boolean type.
#   65|   inline bool cmpEvents(bool *pResult, const DefEvent &a, const DefEvent &b)
#   66|   {
#   67|->     RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:67: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   65|   inline bool cmpEvents(bool *pResult, const DefEvent &a, const DefEvent &b)
#   66|   {
#   67|->     RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:67: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   65|   inline bool cmpEvents(bool *pResult, const DefEvent &a, const DefEvent &b)
#   66|   {
#   67|->     RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:67: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   65|   inline bool cmpEvents(bool *pResult, const DefEvent &a, const DefEvent &b)
#   66|   {
#   67|->     RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:67: misra_cpp_2008_rule_5_0_13_violation: The type of "0" is not bool in the condition of "doWhile-statement".
#   65|   inline bool cmpEvents(bool *pResult, const DefEvent &a, const DefEvent &b)
#   66|   {
#   67|->     RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:67: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   65|   inline bool cmpEvents(bool *pResult, const DefEvent &a, const DefEvent &b)
#   66|   {
#   67|->     RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:67: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   65|   inline bool cmpEvents(bool *pResult, const DefEvent &a, const DefEvent &b)
#   66|   {
#   67|->     RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:67: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   65|   inline bool cmpEvents(bool *pResult, const DefEvent &a, const DefEvent &b)
#   66|   {
#   67|->     RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);

Error: MISRA C-2012 Directive 4.9 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:68: misra_c_2012_directive_4_9_violation: Function-like macro is used.
#   66|   {
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|->     RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:68: misra_c_2012_rule_14_4_violation: The condition expression "false" does not have an essentially boolean type.
#   66|   {
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|->     RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:68: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   66|   {
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|->     RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:68: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   66|   {
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|->     RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:68: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   66|   {
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|->     RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:68: misra_cpp_2008_rule_5_0_13_violation: The type of "0" is not bool in the condition of "doWhile-statement".
#   66|   {
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|->     RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:68: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   66|   {
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|->     RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:68: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   66|   {
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|->     RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:68: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   66|   {
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|->     RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);

Error: MISRA C-2012 Directive 4.9 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:69: misra_c_2012_directive_4_9_violation: Function-like macro is used.
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|->     RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:69: misra_c_2012_rule_14_4_violation: The condition expression "false" does not have an essentially boolean type.
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|->     RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:69: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|->     RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:69: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|->     RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:69: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|->     RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:69: misra_cpp_2008_rule_5_0_13_violation: The type of "0" is not bool in the condition of "doWhile-statement".
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|->     RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:69: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|->     RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:69: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|->     RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:69: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   67|       RETURN_BY_REF_IF_COMPARED(a, b, fileName);
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|->     RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);

Error: MISRA C-2012 Directive 4.9 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:70: misra_c_2012_directive_4_9_violation: Function-like macro is used.
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|->     RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:70: misra_c_2012_rule_14_4_violation: The condition expression "false" does not have an essentially boolean type.
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|->     RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:70: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|->     RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:70: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|->     RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:70: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|->     RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:70: misra_cpp_2008_rule_5_0_13_violation: The type of "0" is not bool in the condition of "doWhile-statement".
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|->     RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:70: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|->     RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:70: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|->     RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:70: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   68|       RETURN_BY_REF_IF_COMPARED(a, b, line);
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|->     RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);

Error: MISRA C-2012 Directive 4.9 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:71: misra_c_2012_directive_4_9_violation: Function-like macro is used.
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|->     RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:71: misra_c_2012_rule_14_4_violation: The condition expression "false" does not have an essentially boolean type.
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|->     RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:71: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|->     RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:71: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|->     RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:71: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|->     RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:71: misra_cpp_2008_rule_5_0_13_violation: The type of "0" is not bool in the condition of "doWhile-statement".
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|->     RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:71: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|->     RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:71: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|->     RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:71: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   69|       RETURN_BY_REF_IF_COMPARED(a, b, column);
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|->     RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|       RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   

Error: MISRA C-2012 Directive 4.9 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:72: misra_c_2012_directive_4_9_violation: Function-like macro is used.
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|->     RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   
#   74|       // incomparable events

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:72: misra_c_2012_rule_14_4_violation: The condition expression "false" does not have an essentially boolean type.
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|->     RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   
#   74|       // incomparable events

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:72: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|->     RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   
#   74|       // incomparable events

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:72: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|->     RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   
#   74|       // incomparable events

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:72: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|->     RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   
#   74|       // incomparable events

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:72: misra_cpp_2008_rule_5_0_13_violation: The type of "0" is not bool in the condition of "doWhile-statement".
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|->     RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   
#   74|       // incomparable events

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:72: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|->     RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   
#   74|       // incomparable events

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:72: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|->     RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   
#   74|       // incomparable events

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:72: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   70|       RETURN_BY_REF_IF_COMPARED(a, b, event);
#   71|       RETURN_BY_REF_IF_COMPARED(a, b, msg);
#   72|->     RETURN_BY_REF_IF_COMPARED(a, b, verbosityLevel);
#   73|   
#   74|       // incomparable events

Error: MISRA C-2012 Rule 8.10 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:78: misra_c_2012_rule_8_10_violation: The inline function "operator <(DefEvent const &, DefEvent const &)" is not declared with a static scope.
#   76|   }
#   77|   
#   78|-> inline bool operator<(const DefEvent &a, const DefEvent &b)
#   79|   {
#   80|       bool result;

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:78: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   76|   }
#   77|   
#   78|-> inline bool operator<(const DefEvent &a, const DefEvent &b)
#   79|   {
#   80|       bool result;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:78: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "operator <".
#   76|   }
#   77|   
#   78|-> inline bool operator<(const DefEvent &a, const DefEvent &b)
#   79|   {
#   80|       bool result;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:87: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   85|   typedef std::vector<DefEvent> TEvtList;
#   86|   
#   87|-> struct Defect {
#   88|       std::string         checker;
#   89|       std::string         annotation;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:87: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "Defect".
#   85|   typedef std::vector<DefEvent> TEvtList;
#   86|   
#   87|-> struct Defect {
#   88|       std::string         checker;
#   89|       std::string         annotation;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:88: misra_cpp_2008_rule_11_0_1_violation: Member "checker" is not private but "Defect" is a non-POD type.
#   86|   
#   87|   struct Defect {
#   88|->     std::string         checker;
#   89|       std::string         annotation;
#   90|       TEvtList            events;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:89: misra_cpp_2008_rule_11_0_1_violation: Member "annotation" is not private but "Defect" is a non-POD type.
#   87|   struct Defect {
#   88|       std::string         checker;
#   89|->     std::string         annotation;
#   90|       TEvtList            events;
#   91|       unsigned            keyEventIdx = 0U;   ///< in range 0..(events.size()-1)

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:90: misra_cpp_2008_rule_11_0_1_violation: Member "events" is not private but "Defect" is a non-POD type.
#   88|       std::string         checker;
#   89|       std::string         annotation;
#   90|->     TEvtList            events;
#   91|       unsigned            keyEventIdx = 0U;   ///< in range 0..(events.size()-1)
#   92|       int                 cwe         = 0;    ///< CWE number, 0 means unused

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:91: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   89|       std::string         annotation;
#   90|       TEvtList            events;
#   91|->     unsigned            keyEventIdx = 0U;   ///< in range 0..(events.size()-1)
#   92|       int                 cwe         = 0;    ///< CWE number, 0 means unused
#   93|       int                 imp         = 0;    ///< "important" flag, bool for now

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:91: misra_cpp_2008_rule_11_0_1_violation: Member "keyEventIdx" is not private but "Defect" is a non-POD type.
#   89|       std::string         annotation;
#   90|       TEvtList            events;
#   91|->     unsigned            keyEventIdx = 0U;   ///< in range 0..(events.size()-1)
#   92|       int                 cwe         = 0;    ///< CWE number, 0 means unused
#   93|       int                 imp         = 0;    ///< "important" flag, bool for now

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:91: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   89|       std::string         annotation;
#   90|       TEvtList            events;
#   91|->     unsigned            keyEventIdx = 0U;   ///< in range 0..(events.size()-1)
#   92|       int                 cwe         = 0;    ///< CWE number, 0 means unused
#   93|       int                 imp         = 0;    ///< "important" flag, bool for now

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:92: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   90|       TEvtList            events;
#   91|       unsigned            keyEventIdx = 0U;   ///< in range 0..(events.size()-1)
#   92|->     int                 cwe         = 0;    ///< CWE number, 0 means unused
#   93|       int                 imp         = 0;    ///< "important" flag, bool for now
#   94|       int                 defectId    = 0;    ///< used only by the JSON format

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:92: misra_cpp_2008_rule_11_0_1_violation: Member "cwe" is not private but "Defect" is a non-POD type.
#   90|       TEvtList            events;
#   91|       unsigned            keyEventIdx = 0U;   ///< in range 0..(events.size()-1)
#   92|->     int                 cwe         = 0;    ///< CWE number, 0 means unused
#   93|       int                 imp         = 0;    ///< "important" flag, bool for now
#   94|       int                 defectId    = 0;    ///< used only by the JSON format

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:92: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   90|       TEvtList            events;
#   91|       unsigned            keyEventIdx = 0U;   ///< in range 0..(events.size()-1)
#   92|->     int                 cwe         = 0;    ///< CWE number, 0 means unused
#   93|       int                 imp         = 0;    ///< "important" flag, bool for now
#   94|       int                 defectId    = 0;    ///< used only by the JSON format

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:93: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   91|       unsigned            keyEventIdx = 0U;   ///< in range 0..(events.size()-1)
#   92|       int                 cwe         = 0;    ///< CWE number, 0 means unused
#   93|->     int                 imp         = 0;    ///< "important" flag, bool for now
#   94|       int                 defectId    = 0;    ///< used only by the JSON format
#   95|       std::string         function;           ///< used only by the JSON format

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:93: misra_cpp_2008_rule_11_0_1_violation: Member "imp" is not private but "Defect" is a non-POD type.
#   91|       unsigned            keyEventIdx = 0U;   ///< in range 0..(events.size()-1)
#   92|       int                 cwe         = 0;    ///< CWE number, 0 means unused
#   93|->     int                 imp         = 0;    ///< "important" flag, bool for now
#   94|       int                 defectId    = 0;    ///< used only by the JSON format
#   95|       std::string         function;           ///< used only by the JSON format

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:93: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   91|       unsigned            keyEventIdx = 0U;   ///< in range 0..(events.size()-1)
#   92|       int                 cwe         = 0;    ///< CWE number, 0 means unused
#   93|->     int                 imp         = 0;    ///< "important" flag, bool for now
#   94|       int                 defectId    = 0;    ///< used only by the JSON format
#   95|       std::string         function;           ///< used only by the JSON format

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:94: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   92|       int                 cwe         = 0;    ///< CWE number, 0 means unused
#   93|       int                 imp         = 0;    ///< "important" flag, bool for now
#   94|->     int                 defectId    = 0;    ///< used only by the JSON format
#   95|       std::string         function;           ///< used only by the JSON format
#   96|       std::string         language;           ///< used only by the JSON format

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:94: misra_cpp_2008_rule_11_0_1_violation: Member "defectId" is not private but "Defect" is a non-POD type.
#   92|       int                 cwe         = 0;    ///< CWE number, 0 means unused
#   93|       int                 imp         = 0;    ///< "important" flag, bool for now
#   94|->     int                 defectId    = 0;    ///< used only by the JSON format
#   95|       std::string         function;           ///< used only by the JSON format
#   96|       std::string         language;           ///< used only by the JSON format

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:94: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   92|       int                 cwe         = 0;    ///< CWE number, 0 means unused
#   93|       int                 imp         = 0;    ///< "important" flag, bool for now
#   94|->     int                 defectId    = 0;    ///< used only by the JSON format
#   95|       std::string         function;           ///< used only by the JSON format
#   96|       std::string         language;           ///< used only by the JSON format

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:95: misra_cpp_2008_rule_11_0_1_violation: Member "function" is not private but "Defect" is a non-POD type.
#   93|       int                 imp         = 0;    ///< "important" flag, bool for now
#   94|       int                 defectId    = 0;    ///< used only by the JSON format
#   95|->     std::string         function;           ///< used only by the JSON format
#   96|       std::string         language;           ///< used only by the JSON format
#   97|   

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:96: misra_cpp_2008_rule_11_0_1_violation: Member "language" is not private but "Defect" is a non-POD type.
#   94|       int                 defectId    = 0;    ///< used only by the JSON format
#   95|       std::string         function;           ///< used only by the JSON format
#   96|->     std::string         language;           ///< used only by the JSON format
#   97|   
#   98|       Defect() { }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:98: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   96|       std::string         language;           ///< used only by the JSON format
#   97|   
#   98|->     Defect() { }
#   99|   
#  100|       explicit Defect(const std::string &checker):

Error: MISRA C++-2008 Rule 2-10-2 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/defect.hh:100: misra_cpp_2008_rule_2_10_2_violation: declaration hides member "Defect::checker" (declared at line 88)
#   98|       Defect() { }
#   99|   
#  100|->     explicit Defect(const std::string &checker):
#  101|           checker(checker)
#  102|       {

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:34: misra_cpp_2008_rule_11_0_1_violation: Member "stor" is not private but "DefLookup::Private" is a non-POD type.
#   32|   
#   33|   struct DefLookup::Private {
#   34|->     TDefByChecker                    stor;
#   35|       bool                             usePartialResults;
#   36|   };

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:35: misra_cpp_2008_rule_11_0_1_violation: Member "usePartialResults" is not private but "DefLookup::Private" is a non-POD type.
#   33|   struct DefLookup::Private {
#   34|       TDefByChecker                    stor;
#   35|->     bool                             usePartialResults;
#   36|   };
#   37|   

Error: MISRA C++-2008 Rule 12-1-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:38: misra_cpp_2008_rule_12_1_3_violation: The constructor "DefLookup::DefLookup(bool)" is declared without "explicit".
#   36|   };
#   37|   
#   38|-> DefLookup::DefLookup(const bool usePartialResults):
#   39|       d(new Private)
#   40|   {

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:38: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "DefLookup::DefLookup(bool)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.hh:27: prev_declaration: (see previous declaration of "DefLookup::DefLookup" at line 27 of "../../src/deflookup.hh")
#   36|   };
#   37|   
#   38|-> DefLookup::DefLookup(const bool usePartialResults):
#   39|       d(new Private)
#   40|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:39: misra_c_2012_directive_4_12_violation: A call to the function "operator new(56UL)" performs dynamic memory allocation.
#   37|   
#   38|   DefLookup::DefLookup(const bool usePartialResults):
#   39|->     d(new Private)
#   40|   {
#   41|       d->usePartialResults = usePartialResults;

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:39: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   37|   
#   38|   DefLookup::DefLookup(const bool usePartialResults):
#   39|->     d(new Private)
#   40|   {
#   41|       d->usePartialResults = usePartialResults;

Error: MISRA C++-2008 Rule 0-1-10 (CWE-561):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:44: misra_cpp_2008_rule_0_1_10_violation: Function "DefLookup::DefLookup(DefLookup const &)" is defined but never called.
#   42|   }
#   43|   
#   44|-> DefLookup::DefLookup(const DefLookup &ref):
#   45|       d(new Private(*ref.d))
#   46|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:45: misra_c_2012_directive_4_12_violation: A call to the function "operator new(56UL)" performs dynamic memory allocation.
#   43|   
#   44|   DefLookup::DefLookup(const DefLookup &ref):
#   45|->     d(new Private(*ref.d))
#   46|   {
#   47|   }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:45: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   43|   
#   44|   DefLookup::DefLookup(const DefLookup &ref):
#   45|->     d(new Private(*ref.d))
#   46|   {
#   47|   }

Error: MISRA C++-2008 Rule 0-1-10 (CWE-561):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:49: misra_cpp_2008_rule_0_1_10_violation: Function "DefLookup::operator =(DefLookup const &)" is defined but never called.
#   47|   }
#   48|   
#   49|-> DefLookup& DefLookup::operator=(const DefLookup &ref)
#   50|   {
#   51|       if (&ref == this)

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:52: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   50|   {
#   51|       if (&ref == this)
#   52|->         return *this;
#   53|   
#   54|       delete d;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:52: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   50|   {
#   51|       if (&ref == this)
#   52|->         return *this;
#   53|   
#   54|       delete d;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:52: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   50|   {
#   51|       if (&ref == this)
#   52|->         return *this;
#   53|   
#   54|       delete d;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:52: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   50|   {
#   51|       if (&ref == this)
#   52|->         return *this;
#   53|   
#   54|       delete d;

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:55: misra_c_2012_directive_4_12_violation: A call to the function "operator new(56UL)" performs dynamic memory allocation.
#   53|   
#   54|       delete d;
#   55|->     d = new Private(*ref.d);
#   56|       return *this;
#   57|   }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:55: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   53|   
#   54|       delete d;
#   55|->     d = new Private(*ref.d);
#   56|       return *this;
#   57|   }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:59: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   57|   }
#   58|   
#   59|-> DefLookup::~DefLookup()
#   60|   {
#   61|       delete d;

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:64: misra_c_2012_rule_8_13_violation: The member function "DefLookup::hashDefect(Defect const &)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#   62|   }
#   63|   
#   64|-> void DefLookup::hashDefect(const Defect &def)
#   65|   {
#   66|       TDefByFile &row = d->stor[def.checker];

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:69: misra_cpp_2008_rule_7_1_1_violation: The variable "filter" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   67|   
#   68|       const DefEvent &evt = def.events[def.keyEventIdx];
#   69|->     MsgFilter *filter = MsgFilter::inst();
#   70|       TDefByEvt &col = row[filter->filterPath(evt.fileName)];
#   71|       TDefByMsg &zCol = col[evt.event];

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:77: misra_c_2012_rule_8_13_violation: The member function "DefLookup::lookup(Defect const &)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#   75|   }
#   76|   
#   77|-> bool DefLookup::lookup(const Defect &def)
#   78|   {
#   79|       // look for defect class

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:80: misra_cpp_2008_rule_7_1_1_violation: The variable "iRow" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   78|   {
#   79|       // look for defect class
#   80|->     TDefByChecker::iterator iRow = d->stor.find(def.checker);
#   81|       if (d->stor.end() == iRow)
#   82|           return false;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:82: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   80|       TDefByChecker::iterator iRow = d->stor.find(def.checker);
#   81|       if (d->stor.end() == iRow)
#   82|->         return false;
#   83|   
#   84|       // simplify path

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:82: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   80|       TDefByChecker::iterator iRow = d->stor.find(def.checker);
#   81|       if (d->stor.end() == iRow)
#   82|->         return false;
#   83|   
#   84|       // simplify path

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:82: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   80|       TDefByChecker::iterator iRow = d->stor.find(def.checker);
#   81|       if (d->stor.end() == iRow)
#   82|->         return false;
#   83|   
#   84|       // simplify path

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:82: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   80|       TDefByChecker::iterator iRow = d->stor.find(def.checker);
#   81|       if (d->stor.end() == iRow)
#   82|->         return false;
#   83|   
#   84|       // simplify path

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:85: misra_cpp_2008_rule_7_1_1_violation: The variable "filter" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   83|   
#   84|       // simplify path
#   85|->     MsgFilter *filter = MsgFilter::inst();
#   86|       const DefEvent &evt = def.events[def.keyEventIdx];
#   87|       const std::string path(filter->filterPath(evt.fileName));

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:91: misra_cpp_2008_rule_7_1_1_violation: The variable "iCol" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   89|       // look for file name
#   90|       TDefByFile &row = iRow->second;
#   91|->     TDefByFile::iterator iCol = row.find(path);
#   92|       if (row.end() == iCol)
#   93|           return false;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:93: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   91|       TDefByFile::iterator iCol = row.find(path);
#   92|       if (row.end() == iCol)
#   93|->         return false;
#   94|   
#   95|       TDefByEvt &col = iCol->second;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:93: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   91|       TDefByFile::iterator iCol = row.find(path);
#   92|       if (row.end() == iCol)
#   93|->         return false;
#   94|   
#   95|       TDefByEvt &col = iCol->second;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:93: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   91|       TDefByFile::iterator iCol = row.find(path);
#   92|       if (row.end() == iCol)
#   93|->         return false;
#   94|   
#   95|       TDefByEvt &col = iCol->second;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:93: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   91|       TDefByFile::iterator iCol = row.find(path);
#   92|       if (row.end() == iCol)
#   93|->         return false;
#   94|   
#   95|       TDefByEvt &col = iCol->second;

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:96: misra_cpp_2008_rule_5_0_2_violation: "std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Defect, std::allocator<Defect> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<Defect, std::allocator<Defect> > > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Defect, std::allocator<Defect> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<Defect, std::allocator<Defect> > > > > > > >::iterator(col->end()) != std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Defect, std::allocator<Defect> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<Defect, std::allocator<Defect> > > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Defect, std::allocator<Defect> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<Defect, std::allocator<Defect> > > > > > > >::iterator(col->find(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Defect, std::allocator<Defect> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<Defect, std::allocator<Defect> > > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<Defect, std::allocator<Defect> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<Defect, std::allocator<Defect> > > > > > > >::key_type const("internal warning", std::allocator<char>())))" should be parenthesized.
#   94|   
#   95|       TDefByEvt &col = iCol->second;
#   96|->     if (!d->usePartialResults && col.end() != col.find("internal warning"))
#   97|           // if the analyzer produced an "internal warning" diagnostic message,
#   98|           // we assume partial results, which cannot be reliably used for

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:96: misra_cpp_2008_rule_5_2_1_violation: Operand "!this->d->usePartialResults" is not a postfix expression.
#   94|   
#   95|       TDefByEvt &col = iCol->second;
#   96|->     if (!d->usePartialResults && col.end() != col.find("internal warning"))
#   97|           // if the analyzer produced an "internal warning" diagnostic message,
#   98|           // we assume partial results, which cannot be reliably used for

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:101: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   99|           // differential scan ==> pretend we found what we had been looking
#  100|           // for, but do not remove anything from the store
#  101|->         return true;
#  102|   
#  103|       // look by key event

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:101: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   99|           // differential scan ==> pretend we found what we had been looking
#  100|           // for, but do not remove anything from the store
#  101|->         return true;
#  102|   
#  103|       // look by key event

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:101: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   99|           // differential scan ==> pretend we found what we had been looking
#  100|           // for, but do not remove anything from the store
#  101|->         return true;
#  102|   
#  103|       // look by key event

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:101: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   99|           // differential scan ==> pretend we found what we had been looking
#  100|           // for, but do not remove anything from the store
#  101|->         return true;
#  102|   
#  103|       // look by key event

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:104: misra_cpp_2008_rule_7_1_1_violation: The variable "iZCol" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  102|   
#  103|       // look by key event
#  104|->     TDefByEvt::iterator iZCol = col.find(evt.event);
#  105|       if (col.end() == iZCol)
#  106|           return false;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:106: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  104|       TDefByEvt::iterator iZCol = col.find(evt.event);
#  105|       if (col.end() == iZCol)
#  106|->         return false;
#  107|   
#  108|       // look by msg

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:106: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  104|       TDefByEvt::iterator iZCol = col.find(evt.event);
#  105|       if (col.end() == iZCol)
#  106|->         return false;
#  107|   
#  108|       // look by msg

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:106: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  104|       TDefByEvt::iterator iZCol = col.find(evt.event);
#  105|       if (col.end() == iZCol)
#  106|->         return false;
#  107|   
#  108|       // look by msg

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:106: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  104|       TDefByEvt::iterator iZCol = col.find(evt.event);
#  105|       if (col.end() == iZCol)
#  106|->         return false;
#  107|   
#  108|       // look by msg

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:110: misra_cpp_2008_rule_7_1_1_violation: The variable "iCell" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  108|       // look by msg
#  109|       TDefByMsg &zCol = iZCol->second;
#  110|->     TDefByMsg::iterator iCell = zCol.find(
#  111|               filter->filterMsg(evt.msg, def.checker));
#  112|       if (zCol.end() == iCell)

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:113: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  111|               filter->filterMsg(evt.msg, def.checker));
#  112|       if (zCol.end() == iCell)
#  113|->         return false;
#  114|   
#  115|       // FIXME: nasty over-approximation

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:113: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  111|               filter->filterMsg(evt.msg, def.checker));
#  112|       if (zCol.end() == iCell)
#  113|->         return false;
#  114|   
#  115|       // FIXME: nasty over-approximation

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:113: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  111|               filter->filterMsg(evt.msg, def.checker));
#  112|       if (zCol.end() == iCell)
#  113|->         return false;
#  114|   
#  115|       // FIXME: nasty over-approximation

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:113: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  111|               filter->filterMsg(evt.msg, def.checker));
#  112|       if (zCol.end() == iCell)
#  113|->         return false;
#  114|   
#  115|       // FIXME: nasty over-approximation

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:117: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  115|       // FIXME: nasty over-approximation
#  116|       TDefList &defs = iCell->second;
#  117|->     unsigned cnt = defs.size();
#  118|       if (cnt)
#  119|           // just remove an arbitrary one

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:117: misra_c_2012_rule_10_3_violation: Implicit conversion of "defs->size()" from essential type "non-essential type" to different or narrower essential type "unsigned 32-bit int".
#  115|       // FIXME: nasty over-approximation
#  116|       TDefList &defs = iCell->second;
#  117|->     unsigned cnt = defs.size();
#  118|       if (cnt)
#  119|           // just remove an arbitrary one

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:117: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  115|       // FIXME: nasty over-approximation
#  116|       TDefList &defs = iCell->second;
#  117|->     unsigned cnt = defs.size();
#  118|       if (cnt)
#  119|           // just remove an arbitrary one

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:117: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "defs->size()" is implicitly reduced from "64-bit unsigned long" to "32-bit unsigned int".
#  115|       // FIXME: nasty over-approximation
#  116|       TDefList &defs = iCell->second;
#  117|->     unsigned cnt = defs.size();
#  118|       if (cnt)
#  119|           // just remove an arbitrary one

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:117: misra_cpp_2008_rule_7_1_1_violation: The variable "cnt" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  115|       // FIXME: nasty over-approximation
#  116|       TDefList &defs = iCell->second;
#  117|->     unsigned cnt = defs.size();
#  118|       if (cnt)
#  119|           // just remove an arbitrary one

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:118: misra_c_2012_rule_14_4_violation: The condition expression "cnt" does not have an essentially boolean type.
#  116|       TDefList &defs = iCell->second;
#  117|       unsigned cnt = defs.size();
#  118|->     if (cnt)
#  119|           // just remove an arbitrary one
#  120|           defs.resize(cnt - 1);

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:118: misra_cpp_2008_rule_5_0_13_violation: The type of "cnt" is not bool in the condition of "if-statement".
#  116|       TDefList &defs = iCell->second;
#  117|       unsigned cnt = defs.size();
#  118|->     if (cnt)
#  119|           // just remove an arbitrary one
#  120|           defs.resize(cnt - 1);

Error: MISRA C-2012 Rule 10.4 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:120: misra_c_2012_rule_10_4_violation: Essential type of the left hand operand "cnt" (unsigned) is not the same as that of the right operand "1"(signed).
#  118|       if (cnt)
#  119|           // just remove an arbitrary one
#  120|->         defs.resize(cnt - 1);
#  121|       else
#  122|           return false;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:120: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  118|       if (cnt)
#  119|           // just remove an arbitrary one
#  120|->         defs.resize(cnt - 1);
#  121|       else
#  122|           return false;

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:120: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "cnt - 1U" with underlying type "32-bit unsigned int" is implicitly converted to a different underlying type "64-bit unsigned long".
#  118|       if (cnt)
#  119|           // just remove an arbitrary one
#  120|->         defs.resize(cnt - 1);
#  121|       else
#  122|           return false;

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:120: misra_cpp_2008_rule_5_0_4_violation: "1" is implicitly converted from a signed value to an unsigned value.
#  118|       if (cnt)
#  119|           // just remove an arbitrary one
#  120|->         defs.resize(cnt - 1);
#  121|       else
#  122|           return false;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:120: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  118|       if (cnt)
#  119|           // just remove an arbitrary one
#  120|->         defs.resize(cnt - 1);
#  121|       else
#  122|           return false;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:122: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  120|           defs.resize(cnt - 1);
#  121|       else
#  122|->         return false;
#  123|   
#  124|       // TODO: add some other criteria in order to make the match more precise

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:122: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  120|           defs.resize(cnt - 1);
#  121|       else
#  122|->         return false;
#  123|   
#  124|       // TODO: add some other criteria in order to make the match more precise

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:122: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  120|           defs.resize(cnt - 1);
#  121|       else
#  122|->         return false;
#  123|   
#  124|       // TODO: add some other criteria in order to make the match more precise

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.cc:122: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  120|           defs.resize(cnt - 1);
#  121|       else
#  122|->         return false;
#  123|   
#  124|       // TODO: add some other criteria in order to make the match more precise

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.hh:23: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "Defect".
#   21|   #define H_GUARD_DEFLOOKUP_H
#   22|   
#   23|-> struct Defect;
#   24|   
#   25|   class DefLookup {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.hh:25: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "DefLookup".
#   23|   struct Defect;
#   24|   
#   25|-> class DefLookup {
#   26|       public:
#   27|           DefLookup(bool usePartialResults = false);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.hh:28: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   26|       public:
#   27|           DefLookup(bool usePartialResults = false);
#   28|->         ~DefLookup();
#   29|   
#   30|           DefLookup(const DefLookup &);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.hh:30: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   28|           ~DefLookup();
#   29|   
#   30|->         DefLookup(const DefLookup &);
#   31|           DefLookup& operator=(const DefLookup &);
#   32|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.hh:31: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   29|   
#   30|           DefLookup(const DefLookup &);
#   31|->         DefLookup& operator=(const DefLookup &);
#   32|   
#   33|           void hashDefect(const Defect &);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.hh:33: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   31|           DefLookup& operator=(const DefLookup &);
#   32|   
#   33|->         void hashDefect(const Defect &);
#   34|           bool lookup(const Defect &);
#   35|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/deflookup.hh:34: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   32|   
#   33|           void hashDefect(const Defect &);
#   34|->         bool lookup(const Defect &);
#   35|   
#   36|       private:

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2013 Red Hat, Inc.
#    3|    *

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:42: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   40|   class ITokenizer {
#   41|       public:
#   42|->         virtual ~ITokenizer() { }
#   43|           virtual EToken readNext(DefEvent *pEvt) = 0;
#   44|           virtual int lineNo() const = 0;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:44: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   42|           virtual ~ITokenizer() { }
#   43|           virtual EToken readNext(DefEvent *pEvt) = 0;
#   44|->         virtual int lineNo() const = 0;
#   45|   };
#   46|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:44: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   42|           virtual ~ITokenizer() { }
#   43|           virtual EToken readNext(DefEvent *pEvt) = 0;
#   44|->         virtual int lineNo() const = 0;
#   45|   };
#   46|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:44: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   42|           virtual ~ITokenizer() { }
#   43|           virtual EToken readNext(DefEvent *pEvt) = 0;
#   44|->         virtual int lineNo() const = 0;
#   45|   };
#   46|   

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:49: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   47|   class AbstractTokenFilter: public ITokenizer {
#   48|       public:
#   49|->         virtual int lineNo() const {
#   50|               return agent_->lineNo();
#   51|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:49: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   47|   class AbstractTokenFilter: public ITokenizer {
#   48|       public:
#   49|->         virtual int lineNo() const {
#   50|               return agent_->lineNo();
#   51|           }

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:49: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   47|   class AbstractTokenFilter: public ITokenizer {
#   48|       public:
#   49|->         virtual int lineNo() const {
#   50|               return agent_->lineNo();
#   51|           }

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:55: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "ITokenizer" are not called in this constructor.
#   53|       protected:
#   54|           /// @param agent the object will NOT be deleted on destruction
#   55|->         AbstractTokenFilter(ITokenizer *agent):
#   56|               agent_(agent)
#   57|           {

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:55: misra_cpp_2008_rule_7_1_1_violation: The variable "agent" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   53|       protected:
#   54|           /// @param agent the object will NOT be deleted on destruction
#   55|->         AbstractTokenFilter(ITokenizer *agent):
#   56|               agent_(agent)
#   57|           {

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:60: misra_cpp_2008_rule_11_0_1_violation: Member "agent_" is not private but "GccParserImpl::AbstractTokenFilter" is a non-POD type.
#   58|           }
#   59|   
#   60|->         ITokenizer *agent_;
#   61|   };
#   62|   

Error: MISRA C++-2008 Rule 16-0-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:63: misra_cpp_2008_rule_16_0_2_violation: Placing "#define" within a block misleadingly implies it is scoped.
#   61|   };
#   62|   
#   63|-> #define RE_LOCATION "([^ #:\"][^:\"]+)(?::([0-9]+))?(?::([0-9]+))?"
#   64|   #define RE_TOOL_SUFFIX "(?: <--\\[[^\\]]+\\])?$"
#   65|   #define RE_FNC_SMATCH "(\\(null\\)|[_A-Za-z][_A-Za-z0-9]*)\\(\\)"

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:63: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   61|   };
#   62|   
#   63|-> #define RE_LOCATION "([^ #:\"][^:\"]+)(?::([0-9]+))?(?::([0-9]+))?"
#   64|   #define RE_TOOL_SUFFIX "(?: <--\\[[^\\]]+\\])?$"
#   65|   #define RE_FNC_SMATCH "(\\(null\\)|[_A-Za-z][_A-Za-z0-9]*)\\(\\)"

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:63: misra_cpp_2008_rule_16_2_2_violation: Macro "RE_LOCATION" is used other than include guards, type qualifiers, or storage class specifiers.
#   61|   };
#   62|   
#   63|-> #define RE_LOCATION "([^ #:\"][^:\"]+)(?::([0-9]+))?(?::([0-9]+))?"
#   64|   #define RE_TOOL_SUFFIX "(?: <--\\[[^\\]]+\\])?$"
#   65|   #define RE_FNC_SMATCH "(\\(null\\)|[_A-Za-z][_A-Za-z0-9]*)\\(\\)"

Error: MISRA C++-2008 Rule 16-0-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:64: misra_cpp_2008_rule_16_0_2_violation: Placing "#define" within a block misleadingly implies it is scoped.
#   62|   
#   63|   #define RE_LOCATION "([^ #:\"][^:\"]+)(?::([0-9]+))?(?::([0-9]+))?"
#   64|-> #define RE_TOOL_SUFFIX "(?: <--\\[[^\\]]+\\])?$"
#   65|   #define RE_FNC_SMATCH "(\\(null\\)|[_A-Za-z][_A-Za-z0-9]*)\\(\\)"
#   66|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:64: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   62|   
#   63|   #define RE_LOCATION "([^ #:\"][^:\"]+)(?::([0-9]+))?(?::([0-9]+))?"
#   64|-> #define RE_TOOL_SUFFIX "(?: <--\\[[^\\]]+\\])?$"
#   65|   #define RE_FNC_SMATCH "(\\(null\\)|[_A-Za-z][_A-Za-z0-9]*)\\(\\)"
#   66|   

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:64: misra_cpp_2008_rule_16_2_2_violation: Macro "RE_TOOL_SUFFIX" is used other than include guards, type qualifiers, or storage class specifiers.
#   62|   
#   63|   #define RE_LOCATION "([^ #:\"][^:\"]+)(?::([0-9]+))?(?::([0-9]+))?"
#   64|-> #define RE_TOOL_SUFFIX "(?: <--\\[[^\\]]+\\])?$"
#   65|   #define RE_FNC_SMATCH "(\\(null\\)|[_A-Za-z][_A-Za-z0-9]*)\\(\\)"
#   66|   

Error: MISRA C++-2008 Rule 16-0-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:65: misra_cpp_2008_rule_16_0_2_violation: Placing "#define" within a block misleadingly implies it is scoped.
#   63|   #define RE_LOCATION "([^ #:\"][^:\"]+)(?::([0-9]+))?(?::([0-9]+))?"
#   64|   #define RE_TOOL_SUFFIX "(?: <--\\[[^\\]]+\\])?$"
#   65|-> #define RE_FNC_SMATCH "(\\(null\\)|[_A-Za-z][_A-Za-z0-9]*)\\(\\)"
#   66|   
#   67|   class Tokenizer: public ITokenizer {

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:65: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   63|   #define RE_LOCATION "([^ #:\"][^:\"]+)(?::([0-9]+))?(?::([0-9]+))?"
#   64|   #define RE_TOOL_SUFFIX "(?: <--\\[[^\\]]+\\])?$"
#   65|-> #define RE_FNC_SMATCH "(\\(null\\)|[_A-Za-z][_A-Za-z0-9]*)\\(\\)"
#   66|   
#   67|   class Tokenizer: public ITokenizer {

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:65: misra_cpp_2008_rule_16_2_2_violation: Macro "RE_FNC_SMATCH" is used other than include guards, type qualifiers, or storage class specifiers.
#   63|   #define RE_LOCATION "([^ #:\"][^:\"]+)(?::([0-9]+))?(?::([0-9]+))?"
#   64|   #define RE_TOOL_SUFFIX "(?: <--\\[[^\\]]+\\])?$"
#   65|-> #define RE_FNC_SMATCH "(\\(null\\)|[_A-Za-z][_A-Za-z0-9]*)\\(\\)"
#   66|   
#   67|   class Tokenizer: public ITokenizer {

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:69: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "ITokenizer" are not called in this constructor.
#   67|   class Tokenizer: public ITokenizer {
#   68|       public:
#   69|->         Tokenizer(std::istream &input):
#   70|               input_(input),
#   71|               lineNo_(0)

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:75: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   73|           }
#   74|   
#   75|->         virtual int lineNo() const {
#   76|               return lineNo_;
#   77|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:75: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   73|           }
#   74|   
#   75|->         virtual int lineNo() const {
#   76|               return lineNo_;
#   77|           }

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:75: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   73|           }
#   74|   
#   75|->         virtual int lineNo() const {
#   76|               return lineNo_;
#   77|           }

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:83: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   81|       private:
#   82|           std::istream           &input_;
#   83|->         int                     lineNo_;
#   84|   
#   85|           const RE reSideBar_ =

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:83: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "lineNo_" clashes with "lineNo"
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:75: misra_typographically_ambiguous_orig: (Previously declared symbol "lineNo" at line 75)
#   81|       private:
#   82|           std::istream           &input_;
#   83|->         int                     lineNo_;
#   84|   
#   85|           const RE reSideBar_ =

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:83: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   81|       private:
#   82|           std::istream           &input_;
#   83|->         int                     lineNo_;
#   84|   
#   85|           const RE reSideBar_ =

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:107: misra_cpp_2008_rule_7_1_1_violation: The variable "pEvt" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  105|   };
#  106|   
#  107|-> EToken Tokenizer::readNext(DefEvent *pEvt)
#  108|   {
#  109|       std::string line;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:111: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  109|       std::string line;
#  110|       if (!std::getline(input_, line))
#  111|->         return T_NULL;
#  112|   
#  113|       // drop CR at end of the line, coming from GCC in source code snippets

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:111: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  109|       std::string line;
#  110|       if (!std::getline(input_, line))
#  111|->         return T_NULL;
#  112|   
#  113|       // drop CR at end of the line, coming from GCC in source code snippets

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:111: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  109|       std::string line;
#  110|       if (!std::getline(input_, line))
#  111|->         return T_NULL;
#  112|   
#  113|       // drop CR at end of the line, coming from GCC in source code snippets

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:111: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  109|       std::string line;
#  110|       if (!std::getline(input_, line))
#  111|->         return T_NULL;
#  112|   
#  113|       // drop CR at end of the line, coming from GCC in source code snippets

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:115: misra_c_2012_rule_12_1_violation: Missing explicit parentheses on sub-expression: "13 == *std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reverse_iterator(line.rbegin())".
#  113|       // drop CR at end of the line, coming from GCC in source code snippets
#  114|       // NOTE: std::string::back/pop_back() would look better but requires C++11
#  115|->     if (!line.empty() && '\r' == *line.rbegin())
#  116|           line.resize(line.size() - 1U);
#  117|   

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:115: misra_cpp_2008_rule_5_0_2_violation: "13 == *std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reverse_iterator(line.rbegin())" should be parenthesized.
#  113|       // drop CR at end of the line, coming from GCC in source code snippets
#  114|       // NOTE: std::string::back/pop_back() would look better but requires C++11
#  115|->     if (!line.empty() && '\r' == *line.rbegin())
#  116|           line.resize(line.size() - 1U);
#  117|   

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:115: misra_cpp_2008_rule_5_2_1_violation: Operand "!line.empty()" is not a postfix expression.
#  113|       // drop CR at end of the line, coming from GCC in source code snippets
#  114|       // NOTE: std::string::back/pop_back() would look better but requires C++11
#  115|->     if (!line.empty() && '\r' == *line.rbegin())
#  116|           line.resize(line.size() - 1U);
#  117|   

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:115: misra_cpp_2008_rule_5_2_1_violation: Operand "13 == *std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reverse_iterator(line.rbegin())" is not a postfix expression.
#  113|       // drop CR at end of the line, coming from GCC in source code snippets
#  114|       // NOTE: std::string::back/pop_back() would look better but requires C++11
#  115|->     if (!line.empty() && '\r' == *line.rbegin())
#  116|           line.resize(line.size() - 1U);
#  117|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:116: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  114|       // NOTE: std::string::back/pop_back() would look better but requires C++11
#  115|       if (!line.empty() && '\r' == *line.rbegin())
#  116|->         line.resize(line.size() - 1U);
#  117|   
#  118|       lineNo_++;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:116: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  114|       // NOTE: std::string::back/pop_back() would look better but requires C++11
#  115|       if (!line.empty() && '\r' == *line.rbegin())
#  116|->         line.resize(line.size() - 1U);
#  117|   
#  118|       lineNo_++;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:120: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  118|       lineNo_++;
#  119|   
#  120|->     *pEvt = DefEvent();
#  121|       pEvt->msg = line;
#  122|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:121: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  119|   
#  120|       *pEvt = DefEvent();
#  121|->     pEvt->msg = line;
#  122|   
#  123|       // check for line markers produced by gcc-9.2.1 (a.k.a. sidebar)

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:129: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  127|           //  +++ |+#include <stdlib.h>
#  128|           //    2 |
#  129|->         return T_SIDEBAR;
#  130|   
#  131|       if (boost::regex_match(line, reMarker_))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:129: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  127|           //  +++ |+#include <stdlib.h>
#  128|           //    2 |
#  129|->         return T_SIDEBAR;
#  130|   
#  131|       if (boost::regex_match(line, reMarker_))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:129: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  127|           //  +++ |+#include <stdlib.h>
#  128|           //    2 |
#  129|->         return T_SIDEBAR;
#  130|   
#  131|       if (boost::regex_match(line, reMarker_))

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:129: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  127|           //  +++ |+#include <stdlib.h>
#  128|           //    2 |
#  129|->         return T_SIDEBAR;
#  130|   
#  131|       if (boost::regex_match(line, reMarker_))

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:132: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  130|   
#  131|       if (boost::regex_match(line, reMarker_))
#  132|->         return T_MARKER;
#  133|   
#  134|       EToken tok;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:132: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  130|   
#  131|       if (boost::regex_match(line, reMarker_))
#  132|->         return T_MARKER;
#  133|   
#  134|       EToken tok;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:132: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  130|   
#  131|       if (boost::regex_match(line, reMarker_))
#  132|->         return T_MARKER;
#  133|   
#  134|       EToken tok;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:132: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  130|   
#  131|       if (boost::regex_match(line, reMarker_))
#  132|->         return T_MARKER;
#  133|   
#  134|       EToken tok;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:139: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  137|       if (boost::regex_match(line, sm, reMsg_)) {
#  138|           tok = T_MSG;
#  139|->         pEvt->event = sm[/* evt  */ 4];
#  140|           pEvt->msg   = sm[/* msg  */ 5];
#  141|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:140: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  138|           tok = T_MSG;
#  139|           pEvt->event = sm[/* evt  */ 4];
#  140|->         pEvt->msg   = sm[/* msg  */ 5];
#  141|       }
#  142|       else if (boost::regex_match(line, sm, reScope_)) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:144: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  142|       else if (boost::regex_match(line, sm, reScope_)) {
#  143|           tok = T_SCOPE;
#  144|->         pEvt->event = "scope_hint";
#  145|           pEvt->msg   = sm[/* msg  */ 4];
#  146|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:145: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  143|           tok = T_SCOPE;
#  144|           pEvt->event = "scope_hint";
#  145|->         pEvt->msg   = sm[/* msg  */ 4];
#  146|       }
#  147|       else if (boost::regex_match(line, sm, reInc_)) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:149: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  147|       else if (boost::regex_match(line, sm, reInc_)) {
#  148|           tok = T_INC;
#  149|->         pEvt->event = "included_from";
#  150|           pEvt->msg   = "Included from here.";
#  151|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:150: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  148|           tok = T_INC;
#  149|           pEvt->event = "included_from";
#  150|->         pEvt->msg   = "Included from here.";
#  151|       }
#  152|       else if (boost::regex_match(line, sm, reSmatch_)) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:154: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  152|       else if (boost::regex_match(line, sm, reSmatch_)) {
#  153|           tok = T_MSG;
#  154|->         pEvt->event = sm[/* evt */ 5];
#  155|           pEvt->msg   = sm[/* fnc */ 4] + "(): ";
#  156|           pEvt->msg  += sm[/* msg */ 6];

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:155: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  153|           tok = T_MSG;
#  154|           pEvt->event = sm[/* evt */ 5];
#  155|->         pEvt->msg   = sm[/* fnc */ 4] + "(): ";
#  156|           pEvt->msg  += sm[/* msg */ 6];
#  157|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:156: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  154|           pEvt->event = sm[/* evt */ 5];
#  155|           pEvt->msg   = sm[/* fnc */ 4] + "(): ";
#  156|->         pEvt->msg  += sm[/* msg */ 6];
#  157|       }
#  158|       else

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:159: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  157|       }
#  158|       else
#  159|->         return T_UNKNOWN;
#  160|   
#  161|       // read file name, event, and msg

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:159: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  157|       }
#  158|       else
#  159|->         return T_UNKNOWN;
#  160|   
#  161|       // read file name, event, and msg

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:159: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  157|       }
#  158|       else
#  159|->         return T_UNKNOWN;
#  160|   
#  161|       // read file name, event, and msg

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:159: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  157|       }
#  158|       else
#  159|->         return T_UNKNOWN;
#  160|   
#  161|       // read file name, event, and msg

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:162: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  160|   
#  161|       // read file name, event, and msg
#  162|->     pEvt->fileName    = sm[/* file */ 1];
#  163|   
#  164|       // parse line number

Error: MISRA C++-2008 Rule 16-0-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:173: misra_cpp_2008_rule_16_0_2_violation: Placing "#define" within a block misleadingly implies it is scoped.
#  171|   }
#  172|   
#  173|-> #define RE_CLANG_EVT "(?:error|warning)"
#  174|   #define RE_CLANG_CNT_EVTS "(?:(?:1 " RE_CLANG_EVT \
#  175|       ")|(?:[0-9]+ " RE_CLANG_EVT "s))"

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:173: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  171|   }
#  172|   
#  173|-> #define RE_CLANG_EVT "(?:error|warning)"
#  174|   #define RE_CLANG_CNT_EVTS "(?:(?:1 " RE_CLANG_EVT \
#  175|       ")|(?:[0-9]+ " RE_CLANG_EVT "s))"

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:173: misra_cpp_2008_rule_16_2_2_violation: Macro "RE_CLANG_EVT" is used other than include guards, type qualifiers, or storage class specifiers.
#  171|   }
#  172|   
#  173|-> #define RE_CLANG_EVT "(?:error|warning)"
#  174|   #define RE_CLANG_CNT_EVTS "(?:(?:1 " RE_CLANG_EVT \
#  175|       ")|(?:[0-9]+ " RE_CLANG_EVT "s))"

Error: MISRA C++-2008 Rule 16-0-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:174: misra_cpp_2008_rule_16_0_2_violation: Placing "#define" within a block misleadingly implies it is scoped.
#  172|   
#  173|   #define RE_CLANG_EVT "(?:error|warning)"
#  174|-> #define RE_CLANG_CNT_EVTS "(?:(?:1 " RE_CLANG_EVT \
#  175|       ")|(?:[0-9]+ " RE_CLANG_EVT "s))"
#  176|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:174: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  172|   
#  173|   #define RE_CLANG_EVT "(?:error|warning)"
#  174|-> #define RE_CLANG_CNT_EVTS "(?:(?:1 " RE_CLANG_EVT \
#  175|       ")|(?:[0-9]+ " RE_CLANG_EVT "s))"
#  176|   

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:174: misra_cpp_2008_rule_16_2_2_violation: Macro "RE_CLANG_CNT_EVTS" is used other than include guards, type qualifiers, or storage class specifiers.
#  172|   
#  173|   #define RE_CLANG_EVT "(?:error|warning)"
#  174|-> #define RE_CLANG_CNT_EVTS "(?:(?:1 " RE_CLANG_EVT \
#  175|       ")|(?:[0-9]+ " RE_CLANG_EVT "s))"
#  176|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:179: misra_cpp_2008_rule_7_1_1_violation: The variable "agent" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  177|   class NoiseFilter: public AbstractTokenFilter {
#  178|       public:
#  179|->         NoiseFilter(ITokenizer *agent):
#  180|               AbstractTokenFilter(agent)
#  181|           {

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:184: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#  182|           }
#  183|   
#  184|->         virtual EToken readNext(DefEvent *);
#  185|   
#  186|       private:

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:191: misra_cpp_2008_rule_7_1_1_violation: The variable "pEvt" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  189|   };
#  190|   
#  191|-> EToken NoiseFilter::readNext(DefEvent *pEvt)
#  192|   {
#  193|       for (;;) {

Error: MISRA C++-2008 Rule 6-5-1 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:193: misra_cpp_2008_rule_6_5_1_violation: There is no loop counter.
#  191|   EToken NoiseFilter::readNext(DefEvent *pEvt)
#  192|   {
#  193|->     for (;;) {
#  194|           const EToken tok = agent_->readNext(pEvt);
#  195|           if (T_UNKNOWN != tok)

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:196: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  194|           const EToken tok = agent_->readNext(pEvt);
#  195|           if (T_UNKNOWN != tok)
#  196|->             return tok;
#  197|   
#  198|           if (!boost::regex_match(pEvt->msg, reClangWarnCnt_))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:196: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  194|           const EToken tok = agent_->readNext(pEvt);
#  195|           if (T_UNKNOWN != tok)
#  196|->             return tok;
#  197|   
#  198|           if (!boost::regex_match(pEvt->msg, reClangWarnCnt_))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:196: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  194|           const EToken tok = agent_->readNext(pEvt);
#  195|           if (T_UNKNOWN != tok)
#  196|->             return tok;
#  197|   
#  198|           if (!boost::regex_match(pEvt->msg, reClangWarnCnt_))

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:196: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  194|           const EToken tok = agent_->readNext(pEvt);
#  195|           if (T_UNKNOWN != tok)
#  196|->             return tok;
#  197|   
#  198|           if (!boost::regex_match(pEvt->msg, reClangWarnCnt_))

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:199: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  197|   
#  198|           if (!boost::regex_match(pEvt->msg, reClangWarnCnt_))
#  199|->             return tok;
#  200|       }
#  201|   }

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:199: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  197|   
#  198|           if (!boost::regex_match(pEvt->msg, reClangWarnCnt_))
#  199|->             return tok;
#  200|       }
#  201|   }

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:199: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  197|   
#  198|           if (!boost::regex_match(pEvt->msg, reClangWarnCnt_))
#  199|->             return tok;
#  200|       }
#  201|   }

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:199: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  197|   
#  198|           if (!boost::regex_match(pEvt->msg, reClangWarnCnt_))
#  199|->             return tok;
#  200|       }
#  201|   }

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:205: misra_cpp_2008_rule_7_1_1_violation: The variable "agent" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  203|   class MarkerConverter: public AbstractTokenFilter {
#  204|       public:
#  205|->         MarkerConverter(ITokenizer *agent):
#  206|               AbstractTokenFilter(agent),
#  207|               lastTok_(T_NULL),

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:212: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  210|           }
#  211|   
#  212|->         virtual int lineNo() const {
#  213|               return lineNo_;
#  214|           }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:212: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  210|           }
#  211|   
#  212|->         virtual int lineNo() const {
#  213|               return lineNo_;
#  214|           }

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:212: misra_cpp_2008_rule_10_3_1_violation: Virtual function "GccParserImpl::MarkerConverter::lineNo() const" has already been defined in "GccParserImpl::AbstractTokenFilter::lineNo() const".
#  210|           }
#  211|   
#  212|->         virtual int lineNo() const {
#  213|               return lineNo_;
#  214|           }

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:212: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  210|           }
#  211|   
#  212|->         virtual int lineNo() const {
#  213|               return lineNo_;
#  214|           }

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:221: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  219|           EToken                  lastTok_;
#  220|           DefEvent                lastEvt_;
#  221|->         int                     lineNo_;
#  222|   };
#  223|   

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:221: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "lineNo_" clashes with "lineNo"
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:212: misra_typographically_ambiguous_orig: (Previously declared symbol "lineNo" at line 212)
#  219|           EToken                  lastTok_;
#  220|           DefEvent                lastEvt_;
#  221|->         int                     lineNo_;
#  222|   };
#  223|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:221: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  219|           EToken                  lastTok_;
#  220|           DefEvent                lastEvt_;
#  221|->         int                     lineNo_;
#  222|   };
#  223|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:224: misra_cpp_2008_rule_7_1_1_violation: The variable "pEvt" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  222|   };
#  223|   
#  224|-> EToken MarkerConverter::readNext(DefEvent *pEvt)
#  225|   {
#  226|       EToken tok = lastTok_;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:228: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  226|       EToken tok = lastTok_;
#  227|       if (T_NULL != tok) {
#  228|->         *pEvt = lastEvt_;
#  229|           lineNo_ = agent_->lineNo();
#  230|           lastTok_ = T_NULL;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:231: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  229|           lineNo_ = agent_->lineNo();
#  230|           lastTok_ = T_NULL;
#  231|->         return tok;
#  232|       }
#  233|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:231: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  229|           lineNo_ = agent_->lineNo();
#  230|           lastTok_ = T_NULL;
#  231|->         return tok;
#  232|       }
#  233|   

Error: MISRA C-2012 Rule 16.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:245: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:236: misra_c_2012_rule_16_1_violation: The switch statement is not well formed.
#  234|       tok = agent_->readNext(pEvt);
#  235|       lineNo_ = agent_->lineNo();
#  236|->     switch (tok) {
#  237|           case T_SIDEBAR:
#  238|               pEvt->event = "#";

Error: MISRA C++-2008 Rule 6-4-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:245: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:246: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:236: misra_cpp_2008_rule_6_4_3_violation: The switch statement is not well formed.
#  234|       tok = agent_->readNext(pEvt);
#  235|       lineNo_ = agent_->lineNo();
#  236|->     switch (tok) {
#  237|           case T_SIDEBAR:
#  238|               pEvt->event = "#";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:238: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  236|       switch (tok) {
#  237|           case T_SIDEBAR:
#  238|->             pEvt->event = "#";
#  239|               tok = T_MSG;
#  240|               break;

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:236: most_recent_use: Last time a value stored in "tok" was used.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:239: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "tok" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:264: end_of_scope: Reached end of scope without using value stored in "tok".
#  237|           case T_SIDEBAR:
#  238|               pEvt->event = "#";
#  239|->             tok = T_MSG;
#  240|               break;
#  241|   

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:245: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  243|               break;
#  244|   
#  245|->         default:
#  246|               return tok;
#  247|       }

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:245: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  243|               break;
#  244|   
#  245|->         default:
#  246|               return tok;
#  247|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:246: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  244|   
#  245|           default:
#  246|->             return tok;
#  247|       }
#  248|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:246: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  244|   
#  245|           default:
#  246|->             return tok;
#  247|       }
#  248|   

Error: MISRA C-2012 Rule 16.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:255: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:250: misra_c_2012_rule_16_1_violation: The switch statement is not well formed.
#  248|   
#  249|       lastTok_ = agent_->readNext(&lastEvt_);
#  250|->     switch (lastTok_) {
#  251|           case T_SIDEBAR:
#  252|           case T_MARKER:

Error: MISRA C-2012 Rule 16.6 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:250: misra_c_2012_rule_16_6_violation: The switch statement "switch (this->lastTok_)" has only one conforming switch clause.
#  248|   
#  249|       lastTok_ = agent_->readNext(&lastEvt_);
#  250|->     switch (lastTok_) {
#  251|           case T_SIDEBAR:
#  252|           case T_MARKER:

Error: MISRA C++-2008 Rule 6-4-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:255: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:256: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:250: misra_cpp_2008_rule_6_4_3_violation: The switch statement is not well formed.
#  248|   
#  249|       lastTok_ = agent_->readNext(&lastEvt_);
#  250|->     switch (lastTok_) {
#  251|           case T_SIDEBAR:
#  252|           case T_MARKER:

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:255: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  253|               break;
#  254|   
#  255|->         default:
#  256|               return tok;
#  257|       }

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:255: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  253|               break;
#  254|   
#  255|->         default:
#  256|               return tok;
#  257|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:256: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  254|   
#  255|           default:
#  256|->             return tok;
#  257|       }
#  258|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:256: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  254|   
#  255|           default:
#  256|->             return tok;
#  257|       }
#  258|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:260: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  258|   
#  259|       // translate both events to comments
#  260|->     lastEvt_.event = pEvt->event = "#";
#  261|   
#  262|       // translate both tokens to T_MSG

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:260: misra_cpp_2008_rule_5_0_2_violation: "(pEvt->event) = ("#")" should be parenthesized.
#  258|   
#  259|       // translate both events to comments
#  260|->     lastEvt_.event = pEvt->event = "#";
#  261|   
#  262|       // translate both tokens to T_MSG

Error: MISRA C++-2008 Rule 6-2-1 (CWE-481):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:260: misra_cpp_2008_rule_6_2_1_violation: Assignment operator "operator =" is used in sub-expression "(pEvt->event) = ("#")".
#  258|   
#  259|       // translate both events to comments
#  260|->     lastEvt_.event = pEvt->event = "#";
#  261|   
#  262|       // translate both tokens to T_MSG

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:269: misra_cpp_2008_rule_7_1_1_violation: The variable "agent" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  267|   class MultilineConcatenator: public AbstractTokenFilter {
#  268|       public:
#  269|->         MultilineConcatenator(ITokenizer *agent):
#  270|               AbstractTokenFilter(agent),
#  271|               lastTok_(T_NULL)

Error: MISRA C++-2008 Rule 16-0-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:282: misra_cpp_2008_rule_16_0_2_violation: Placing "#define" within a block misleadingly implies it is scoped.
#  280|           bool tryMerge(DefEvent *pEvt);
#  281|   
#  282|-> #define REASON_SUFFIX "( \\[[^ \\]]+\\])?" RE_TOOL_SUFFIX
#  283|   
#  284|           const RE reBase_ =

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:282: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  280|           bool tryMerge(DefEvent *pEvt);
#  281|   
#  282|-> #define REASON_SUFFIX "( \\[[^ \\]]+\\])?" RE_TOOL_SUFFIX
#  283|   
#  284|           const RE reBase_ =

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:282: misra_cpp_2008_rule_16_2_2_violation: Macro "REASON_SUFFIX" is used other than include guards, type qualifiers, or storage class specifiers.
#  280|           bool tryMerge(DefEvent *pEvt);
#  281|   
#  282|-> #define REASON_SUFFIX "( \\[[^ \\]]+\\])?" RE_TOOL_SUFFIX
#  283|   
#  284|           const RE reBase_ =

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:291: misra_cpp_2008_rule_7_1_1_violation: The variable "pEvt" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  289|   };
#  290|   
#  291|-> bool MultilineConcatenator::tryMerge(DefEvent *pEvt)
#  292|   {
#  293|       if (T_MSG != lastTok_)

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:295: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  293|       if (T_MSG != lastTok_)
#  294|           // only messages can be merged together
#  295|->         return false;
#  296|   
#  297|       if (pEvt->event == "#")

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:295: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  293|       if (T_MSG != lastTok_)
#  294|           // only messages can be merged together
#  295|->         return false;
#  296|   
#  297|       if (pEvt->event == "#")

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:295: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  293|       if (T_MSG != lastTok_)
#  294|           // only messages can be merged together
#  295|->         return false;
#  296|   
#  297|       if (pEvt->event == "#")

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:295: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  293|       if (T_MSG != lastTok_)
#  294|           // only messages can be merged together
#  295|->         return false;
#  296|   
#  297|       if (pEvt->event == "#")

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:299: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  297|       if (pEvt->event == "#")
#  298|           // do not concatenate multi-line comments
#  299|->         return false;
#  300|   
#  301|       if (pEvt->event != lastEvt_.event)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:299: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  297|       if (pEvt->event == "#")
#  298|           // do not concatenate multi-line comments
#  299|->         return false;
#  300|   
#  301|       if (pEvt->event != lastEvt_.event)

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:299: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  297|       if (pEvt->event == "#")
#  298|           // do not concatenate multi-line comments
#  299|->         return false;
#  300|   
#  301|       if (pEvt->event != lastEvt_.event)

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:299: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  297|       if (pEvt->event == "#")
#  298|           // do not concatenate multi-line comments
#  299|->         return false;
#  300|   
#  301|       if (pEvt->event != lastEvt_.event)

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:303: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  301|       if (pEvt->event != lastEvt_.event)
#  302|           // different kind of event
#  303|->         return false;
#  304|   
#  305|       if (pEvt->fileName != lastEvt_.fileName

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:303: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  301|       if (pEvt->event != lastEvt_.event)
#  302|           // different kind of event
#  303|->         return false;
#  304|   
#  305|       if (pEvt->fileName != lastEvt_.fileName

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:303: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  301|       if (pEvt->event != lastEvt_.event)
#  302|           // different kind of event
#  303|->         return false;
#  304|   
#  305|       if (pEvt->fileName != lastEvt_.fileName

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:303: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  301|       if (pEvt->event != lastEvt_.event)
#  302|           // different kind of event
#  303|->         return false;
#  304|   
#  305|       if (pEvt->fileName != lastEvt_.fileName

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:305: misra_c_2012_rule_12_1_violation: Missing explicit parentheses on sub-expression: "pEvt->column != this->lastEvt_.column".
#  303|           return false;
#  304|   
#  305|->     if (pEvt->fileName != lastEvt_.fileName
#  306|               || pEvt->line != lastEvt_.line
#  307|               || pEvt->column != lastEvt_.column)

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:305: misra_c_2012_rule_12_1_violation: Missing explicit parentheses on sub-expression: "pEvt->line != this->lastEvt_.line".
#  303|           return false;
#  304|   
#  305|->     if (pEvt->fileName != lastEvt_.fileName
#  306|               || pEvt->line != lastEvt_.line
#  307|               || pEvt->column != lastEvt_.column)

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:305: misra_cpp_2008_rule_5_0_2_violation: "pEvt->fileName != this->lastEvt_.fileName" should be parenthesized.
#  303|           return false;
#  304|   
#  305|->     if (pEvt->fileName != lastEvt_.fileName
#  306|               || pEvt->line != lastEvt_.line
#  307|               || pEvt->column != lastEvt_.column)

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:306: misra_cpp_2008_rule_5_0_2_violation: "pEvt->line != this->lastEvt_.line" should be parenthesized.
#  304|   
#  305|       if (pEvt->fileName != lastEvt_.fileName
#  306|->             || pEvt->line != lastEvt_.line
#  307|               || pEvt->column != lastEvt_.column)
#  308|           // different location info

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:306: misra_cpp_2008_rule_5_2_1_violation: Operand "pEvt->line != this->lastEvt_.line" is not a postfix expression.
#  304|   
#  305|       if (pEvt->fileName != lastEvt_.fileName
#  306|->             || pEvt->line != lastEvt_.line
#  307|               || pEvt->column != lastEvt_.column)
#  308|           // different location info

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:307: misra_cpp_2008_rule_5_0_2_violation: "pEvt->column != this->lastEvt_.column" should be parenthesized.
#  305|       if (pEvt->fileName != lastEvt_.fileName
#  306|               || pEvt->line != lastEvt_.line
#  307|->             || pEvt->column != lastEvt_.column)
#  308|           // different location info
#  309|           return false;

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:307: misra_cpp_2008_rule_5_2_1_violation: Operand "pEvt->column != this->lastEvt_.column" is not a postfix expression.
#  305|       if (pEvt->fileName != lastEvt_.fileName
#  306|               || pEvt->line != lastEvt_.line
#  307|->             || pEvt->column != lastEvt_.column)
#  308|           // different location info
#  309|           return false;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:309: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  307|               || pEvt->column != lastEvt_.column)
#  308|           // different location info
#  309|->         return false;
#  310|   
#  311|       boost::smatch smBase;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:309: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  307|               || pEvt->column != lastEvt_.column)
#  308|           // different location info
#  309|->         return false;
#  310|   
#  311|       boost::smatch smBase;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:309: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  307|               || pEvt->column != lastEvt_.column)
#  308|           // different location info
#  309|->         return false;
#  310|   
#  311|       boost::smatch smBase;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:309: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  307|               || pEvt->column != lastEvt_.column)
#  308|           // different location info
#  309|->         return false;
#  310|   
#  311|       boost::smatch smBase;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:313: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  311|       boost::smatch smBase;
#  312|       if (!boost::regex_match(pEvt->msg, smBase, reBase_))
#  313|->         return false;
#  314|   
#  315|       boost::smatch smExtra;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:313: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  311|       boost::smatch smBase;
#  312|       if (!boost::regex_match(pEvt->msg, smBase, reBase_))
#  313|->         return false;
#  314|   
#  315|       boost::smatch smExtra;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:313: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  311|       boost::smatch smBase;
#  312|       if (!boost::regex_match(pEvt->msg, smBase, reBase_))
#  313|->         return false;
#  314|   
#  315|       boost::smatch smExtra;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:313: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  311|       boost::smatch smBase;
#  312|       if (!boost::regex_match(pEvt->msg, smBase, reBase_))
#  313|->         return false;
#  314|   
#  315|       boost::smatch smExtra;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:317: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  315|       boost::smatch smExtra;
#  316|       if (!boost::regex_match(lastEvt_.msg, smExtra, reExtra_))
#  317|->         return false;
#  318|   
#  319|       // we need to drop the [-Wreason] suffix from the first message if same

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:317: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  315|       boost::smatch smExtra;
#  316|       if (!boost::regex_match(lastEvt_.msg, smExtra, reExtra_))
#  317|->         return false;
#  318|   
#  319|       // we need to drop the [-Wreason] suffix from the first message if same

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:317: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  315|       boost::smatch smExtra;
#  316|       if (!boost::regex_match(lastEvt_.msg, smExtra, reExtra_))
#  317|->         return false;
#  318|   
#  319|       // we need to drop the [-Wreason] suffix from the first message if same

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:317: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  315|       boost::smatch smExtra;
#  316|       if (!boost::regex_match(lastEvt_.msg, smExtra, reExtra_))
#  317|->         return false;
#  318|   
#  319|       // we need to drop the [-Wreason] suffix from the first message if same

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:321: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  319|       // we need to drop the [-Wreason] suffix from the first message if same
#  320|       if (smBase[/* -W suffix */ 2] != smExtra[/* -W suffix */ 2])
#  321|->         return false;
#  322|   
#  323|       assert(!smExtra[/* msg */ 1].str().empty());

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:321: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  319|       // we need to drop the [-Wreason] suffix from the first message if same
#  320|       if (smBase[/* -W suffix */ 2] != smExtra[/* -W suffix */ 2])
#  321|->         return false;
#  322|   
#  323|       assert(!smExtra[/* msg */ 1].str().empty());

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:321: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  319|       // we need to drop the [-Wreason] suffix from the first message if same
#  320|       if (smBase[/* -W suffix */ 2] != smExtra[/* -W suffix */ 2])
#  321|->         return false;
#  322|   
#  323|       assert(!smExtra[/* msg */ 1].str().empty());

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:321: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  319|       // we need to drop the [-Wreason] suffix from the first message if same
#  320|       if (smBase[/* -W suffix */ 2] != smExtra[/* -W suffix */ 2])
#  321|->         return false;
#  322|   
#  323|       assert(!smExtra[/* msg */ 1].str().empty());

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:323: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "<anonymous>" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:295: end_of_scope: Reached end of scope without using value stored in "<anonymous>".
#  321|           return false;
#  322|   
#  323|->     assert(!smExtra[/* msg */ 1].str().empty());
#  324|       const char *gap = (' ' == *smExtra[/* msg */ 1].str().begin()) ? "" : " ";
#  325|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:323: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  321|           return false;
#  322|   
#  323|->     assert(!smExtra[/* msg */ 1].str().empty());
#  324|       const char *gap = (' ' == *smExtra[/* msg */ 1].str().begin()) ? "" : " ";
#  325|   

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:323: misra_cpp_2008_rule_5_0_4_violation: "323" is implicitly converted from a signed value to an unsigned value.
#  321|           return false;
#  322|   
#  323|->     assert(!smExtra[/* msg */ 1].str().empty());
#  324|       const char *gap = (' ' == *smExtra[/* msg */ 1].str().begin()) ? "" : " ";
#  325|   

Error: MISRA C++-2008 Rule 5-2-12 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:323: misra_cpp_2008_rule_5_2_12_violation: Array "<anonymous>" decays to a pointer when used as a function argument.
#  321|           return false;
#  322|   
#  323|->     assert(!smExtra[/* msg */ 1].str().empty());
#  324|       const char *gap = (' ' == *smExtra[/* msg */ 1].str().begin()) ? "" : " ";
#  325|   

Error: MISRA C++-2008 Rule 5-2-4 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:323: misra_cpp_2008_rule_5_2_4_violation: C-style casts or functional notation casts "(bool)!std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >(smExtra[1]->str()).empty()" is used.
#  321|           return false;
#  322|   
#  323|->     assert(!smExtra[/* msg */ 1].str().empty());
#  324|       const char *gap = (' ' == *smExtra[/* msg */ 1].str().begin()) ? "" : " ";
#  325|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:324: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  322|   
#  323|       assert(!smExtra[/* msg */ 1].str().empty());
#  324|->     const char *gap = (' ' == *smExtra[/* msg */ 1].str().begin()) ? "" : " ";
#  325|   
#  326|       // concatenate both messages together

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:324: misra_cpp_2008_rule_7_1_1_violation: The variable "gap" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  322|   
#  323|       assert(!smExtra[/* msg */ 1].str().empty());
#  324|->     const char *gap = (' ' == *smExtra[/* msg */ 1].str().begin()) ? "" : " ";
#  325|   
#  326|       // concatenate both messages together

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:327: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  325|   
#  326|       // concatenate both messages together
#  327|->     pEvt->msg = smBase[/* msg */ 1] + gap
#  328|           + smExtra[/* msg */1] + smExtra[/* suf */2];
#  329|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:335: misra_cpp_2008_rule_7_1_1_violation: The variable "pEvt" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  333|   }
#  334|   
#  335|-> EToken MultilineConcatenator::readNext(DefEvent *pEvt)
#  336|   {
#  337|       EToken tok;

Error: MISRA C-2012 Rule 16.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:350: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:338: misra_c_2012_rule_16_1_violation: The switch statement is not well formed.
#  336|   {
#  337|       EToken tok;
#  338|->     switch (lastTok_) {
#  339|           case T_NULL:
#  340|               // no last token --> we have to read a new one

Error: MISRA C++-2008 Rule 6-4-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:350: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:355: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:338: misra_cpp_2008_rule_6_4_3_violation: The switch statement is not well formed.
#  336|   {
#  337|       EToken tok;
#  338|->     switch (lastTok_) {
#  339|           case T_NULL:
#  340|               // no last token --> we have to read a new one

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:347: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  345|               // reuse the last T_MSG token
#  346|               tok = lastTok_;
#  347|->             *pEvt = lastEvt_;
#  348|               break;
#  349|   

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:350: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  348|               break;
#  349|   
#  350|->         default:
#  351|               // flush the last token and bail out
#  352|               tok = lastTok_;

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:350: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  348|               break;
#  349|   
#  350|->         default:
#  351|               // flush the last token and bail out
#  352|               tok = lastTok_;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:353: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  351|               // flush the last token and bail out
#  352|               tok = lastTok_;
#  353|->             *pEvt = lastEvt_;
#  354|               lastTok_ = T_NULL;
#  355|               return tok;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:355: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  353|               *pEvt = lastEvt_;
#  354|               lastTok_ = T_NULL;
#  355|->             return tok;
#  356|       }
#  357|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:355: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  353|               *pEvt = lastEvt_;
#  354|               lastTok_ = T_NULL;
#  355|->             return tok;
#  356|       }
#  357|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:361: misra_c_2012_rule_15_6_violation: The body of the "do-while" loop is not a compound statement.
#  359|           do
#  360|               // read one token ahead
#  361|->             lastTok_ = agent_->readNext(&lastEvt_);
#  362|   
#  363|           while

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:361: misra_cpp_2008_rule_6_3_1_violation: The body of the "do-while" loop is not a compound statement.
#  359|           do
#  360|               // read one token ahead
#  361|->             lastTok_ = agent_->readNext(&lastEvt_);
#  362|   
#  363|           while

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:373: misra_c_2012_rule_8_13_violation: The pointer variable "input" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  371|   class BasicGccParser {
#  372|       public:
#  373|->         BasicGccParser(InStream &input):
#  374|               rawTokenizer_(input.str()),
#  375|               noiseFilter_(&rawTokenizer_),

Error: MISRA C++-2008 Rule 7-1-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:373: misra_cpp_2008_rule_7_1_2_violation: The pointer variable "input" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  371|   class BasicGccParser {
#  372|       public:
#  373|->         BasicGccParser(InStream &input):
#  374|               rawTokenizer_(input.str()),
#  375|               noiseFilter_(&rawTokenizer_),

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:385: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#  383|           }
#  384|   
#  385|->         bool getNext(Defect *);
#  386|           bool hasError() const;
#  387|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:386: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  384|   
#  385|           bool getNext(Defect *);
#  386|->         bool hasError() const;
#  387|   
#  388|       private:

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:390: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "noiseFilter_" clashes with "NoiseFilter"
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:177: misra_typographically_ambiguous_orig: (Previously declared symbol "NoiseFilter" at line 177)
#  388|       private:
#  389|           Tokenizer               rawTokenizer_;
#  390|->         NoiseFilter             noiseFilter_;
#  391|           MarkerConverter         markerConverter_;
#  392|           MultilineConcatenator   tokenizer_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:391: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "markerConverter_" clashes with "MarkerConverter"
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:203: misra_typographically_ambiguous_orig: (Previously declared symbol "MarkerConverter" at line 203)
#  389|           Tokenizer               rawTokenizer_;
#  390|           NoiseFilter             noiseFilter_;
#  391|->         MarkerConverter         markerConverter_;
#  392|           MultilineConcatenator   tokenizer_;
#  393|           const std::string       fileName_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:392: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "tokenizer_" clashes with "Tokenizer"
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:67: misra_typographically_ambiguous_orig: (Previously declared symbol "Tokenizer" at line 67)
#  390|           NoiseFilter             noiseFilter_;
#  391|           MarkerConverter         markerConverter_;
#  392|->         MultilineConcatenator   tokenizer_;
#  393|           const std::string       fileName_;
#  394|           const bool              silent_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:396: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "hasError_" clashes with "hasError"
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:386: misra_typographically_ambiguous_orig: (Previously declared symbol "hasError" at line 386)
#  394|           const bool              silent_;
#  395|           bool                    hasKeyEvent_;
#  396|->         bool                    hasError_;
#  397|           Defect                  defCurrent_;
#  398|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:399: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  397|           Defect                  defCurrent_;
#  398|   
#  399|->         void handleError();
#  400|           bool digCppcheckEvt(Defect *pDef);
#  401|           bool exportAndReset(Defect *pDef);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:422: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  420|   };
#  421|   
#  422|-> void BasicGccParser::handleError()
#  423|   {
#  424|       if (!hasKeyEvent_)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:426: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  424|       if (!hasKeyEvent_)
#  425|           // drop the events captured up to now
#  426|->         defCurrent_ = Defect();
#  427|   
#  428|       hasError_ = true;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:426: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  424|       if (!hasKeyEvent_)
#  425|           // drop the events captured up to now
#  426|->         defCurrent_ = Defect();
#  427|   
#  428|       hasError_ = true;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:426: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  424|       if (!hasKeyEvent_)
#  425|           // drop the events captured up to now
#  426|->         defCurrent_ = Defect();
#  427|   
#  428|       hasError_ = true;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:430: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  428|       hasError_ = true;
#  429|       if (silent_)
#  430|->         return;
#  431|   
#  432|       std::cerr << fileName_ << ":" << tokenizer_.lineNo()

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:430: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  428|       hasError_ = true;
#  429|       if (silent_)
#  430|->         return;
#  431|   
#  432|       std::cerr << fileName_ << ":" << tokenizer_.lineNo()

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:430: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  428|       hasError_ = true;
#  429|       if (silent_)
#  430|->         return;
#  431|   
#  432|       std::cerr << fileName_ << ":" << tokenizer_.lineNo()

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:430: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  428|       hasError_ = true;
#  429|       if (silent_)
#  430|->         return;
#  431|   
#  432|       std::cerr << fileName_ << ":" << tokenizer_.lineNo()

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:432: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  430|           return;
#  431|   
#  432|->     std::cerr << fileName_ << ":" << tokenizer_.lineNo()
#  433|           << ": error: invalid syntax\n";
#  434|   }

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:436: misra_c_2012_rule_8_13_violation: The member function "GccParserImpl::BasicGccParser::digCppcheckEvt(Defect *)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  434|   }
#  435|   
#  436|-> bool BasicGccParser::digCppcheckEvt(Defect *pDef)
#  437|   {
#  438|       DefEvent &keyEvt = pDef->events[pDef->keyEventIdx];

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:436: misra_cpp_2008_rule_7_1_1_violation: The variable "pDef" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  434|   }
#  435|   
#  436|-> bool BasicGccParser::digCppcheckEvt(Defect *pDef)
#  437|   {
#  438|       DefEvent &keyEvt = pDef->events[pDef->keyEventIdx];

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:441: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  439|       if (keyEvt.event == "#")
#  440|           // this is just a comment, do not look for real events
#  441|->         return false;
#  442|   
#  443|       boost::smatch sm;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:441: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  439|       if (keyEvt.event == "#")
#  440|           // this is just a comment, do not look for real events
#  441|->         return false;
#  442|   
#  443|       boost::smatch sm;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:441: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  439|       if (keyEvt.event == "#")
#  440|           // this is just a comment, do not look for real events
#  441|->         return false;
#  442|   
#  443|       boost::smatch sm;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:441: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  439|       if (keyEvt.event == "#")
#  440|           // this is just a comment, do not look for real events
#  441|->         return false;
#  442|   
#  443|       boost::smatch sm;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:445: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  443|       boost::smatch sm;
#  444|       if (!boost::regex_match(keyEvt.msg, sm, reCppcheck_))
#  445|->         return false;
#  446|   
#  447|       // format produced by cscppc, embed cppcheck checker's ID into the event

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:445: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  443|       boost::smatch sm;
#  444|       if (!boost::regex_match(keyEvt.msg, sm, reCppcheck_))
#  445|->         return false;
#  446|   
#  447|       // format produced by cscppc, embed cppcheck checker's ID into the event

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:445: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  443|       boost::smatch sm;
#  444|       if (!boost::regex_match(keyEvt.msg, sm, reCppcheck_))
#  445|->         return false;
#  446|   
#  447|       // format produced by cscppc, embed cppcheck checker's ID into the event

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:445: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  443|       boost::smatch sm;
#  444|       if (!boost::regex_match(keyEvt.msg, sm, reCppcheck_))
#  445|->         return false;
#  446|   
#  447|       // format produced by cscppc, embed cppcheck checker's ID into the event

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:448: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  446|   
#  447|       // format produced by cscppc, embed cppcheck checker's ID into the event
#  448|->     pDef->checker = "CPPCHECK_WARNING";
#  449|       keyEvt.event += "[";
#  450|       keyEvt.event += sm[/* id  */ 1];

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:449: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  447|       // format produced by cscppc, embed cppcheck checker's ID into the event
#  448|       pDef->checker = "CPPCHECK_WARNING";
#  449|->     keyEvt.event += "[";
#  450|       keyEvt.event += sm[/* id  */ 1];
#  451|       keyEvt.event += "]";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:450: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  448|       pDef->checker = "CPPCHECK_WARNING";
#  449|       keyEvt.event += "[";
#  450|->     keyEvt.event += sm[/* id  */ 1];
#  451|       keyEvt.event += "]";
#  452|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:451: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  449|       keyEvt.event += "[";
#  450|       keyEvt.event += sm[/* id  */ 1];
#  451|->     keyEvt.event += "]";
#  452|   
#  453|       // store CWE if available

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:457: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  455|   
#  456|       // this assignment invalidates sm!
#  457|->     keyEvt.msg = sm[/* msg */ 3];
#  458|   
#  459|       return true;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:462: misra_cpp_2008_rule_7_1_1_violation: The variable "pDef" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  460|   }
#  461|   
#  462|-> bool BasicGccParser::exportAndReset(Defect *pDef)
#  463|   {
#  464|       Defect &def = defCurrent_;

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:464: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "def" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:467: end_of_scope: Reached end of scope without using value stored in "def".
#  462|   bool BasicGccParser::exportAndReset(Defect *pDef)
#  463|   {
#  464|->     Defect &def = defCurrent_;
#  465|       if (!hasKeyEvent_)
#  466|           // nothing to export yet

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:467: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  465|       if (!hasKeyEvent_)
#  466|           // nothing to export yet
#  467|->         return false;
#  468|   
#  469|       // assume COMPILER_WARNING by default

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:467: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  465|       if (!hasKeyEvent_)
#  466|           // nothing to export yet
#  467|->         return false;
#  468|   
#  469|       // assume COMPILER_WARNING by default

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:467: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  465|       if (!hasKeyEvent_)
#  466|           // nothing to export yet
#  467|->         return false;
#  468|   
#  469|       // assume COMPILER_WARNING by default

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:467: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  465|       if (!hasKeyEvent_)
#  466|           // nothing to export yet
#  467|->         return false;
#  468|   
#  469|       // assume COMPILER_WARNING by default

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:470: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  468|   
#  469|       // assume COMPILER_WARNING by default
#  470|->     def.checker = "COMPILER_WARNING";
#  471|   
#  472|       DefEvent &keyEvt = def.events[def.keyEventIdx];

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:472: misra_c_2012_rule_8_13_violation: The pointer variable "keyEvt" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  470|       def.checker = "COMPILER_WARNING";
#  471|   
#  472|->     DefEvent &keyEvt = def.events[def.keyEventIdx];
#  473|   
#  474|       boost::smatch sm;

Error: MISRA C-2012 Rule 15.7 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:477: misra_c_2012_rule_15_7_violation: No non-empty terminating "else" statement.
#  475|       if (boost::regex_match(keyEvt.msg, sm, reTool_)) {
#  476|           const std::string tool = sm[/* tool */ 2].str();
#  477|->         if (boost::regex_match(tool, reClang_))
#  478|               // <--[clang] or <--[clang++]
#  479|               def.checker = "CLANG_WARNING";

Error: MISRA C++-2008 Rule 6-4-2 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:477: misra_cpp_2008_rule_6_4_2_violation: No non-empty terminating "else" statement.
#  475|       if (boost::regex_match(keyEvt.msg, sm, reTool_)) {
#  476|           const std::string tool = sm[/* tool */ 2].str();
#  477|->         if (boost::regex_match(tool, reClang_))
#  478|               // <--[clang] or <--[clang++]
#  479|               def.checker = "CLANG_WARNING";

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:479: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  477|           if (boost::regex_match(tool, reClang_))
#  478|               // <--[clang] or <--[clang++]
#  479|->             def.checker = "CLANG_WARNING";
#  480|   
#  481|           else if (tool == "shellcheck")

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:479: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  477|           if (boost::regex_match(tool, reClang_))
#  478|               // <--[clang] or <--[clang++]
#  479|->             def.checker = "CLANG_WARNING";
#  480|   
#  481|           else if (tool == "shellcheck")

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:479: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  477|           if (boost::regex_match(tool, reClang_))
#  478|               // <--[clang] or <--[clang++]
#  479|->             def.checker = "CLANG_WARNING";
#  480|   
#  481|           else if (tool == "shellcheck")

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:483: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  481|           else if (tool == "shellcheck")
#  482|               // <--[shellcheck]
#  483|->             def.checker = "SHELLCHECK_WARNING";
#  484|   
#  485|           else if (tool == "smatch")

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:483: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  481|           else if (tool == "shellcheck")
#  482|               // <--[shellcheck]
#  483|->             def.checker = "SHELLCHECK_WARNING";
#  484|   
#  485|           else if (tool == "smatch")

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:483: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  481|           else if (tool == "shellcheck")
#  482|               // <--[shellcheck]
#  483|->             def.checker = "SHELLCHECK_WARNING";
#  484|   
#  485|           else if (tool == "smatch")

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:487: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  485|           else if (tool == "smatch")
#  486|               // <--[smatch]
#  487|->             def.checker = "SMATCH_WARNING";
#  488|   
#  489|           else if (tool == "cppcheck" && !this->digCppcheckEvt(&def))

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:487: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  485|           else if (tool == "smatch")
#  486|               // <--[smatch]
#  487|->             def.checker = "SMATCH_WARNING";
#  488|   
#  489|           else if (tool == "cppcheck" && !this->digCppcheckEvt(&def))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:487: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  485|           else if (tool == "smatch")
#  486|               // <--[smatch]
#  487|->             def.checker = "SMATCH_WARNING";
#  488|   
#  489|           else if (tool == "cppcheck" && !this->digCppcheckEvt(&def))

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:489: misra_cpp_2008_rule_5_0_2_violation: "tool == "cppcheck"" should be parenthesized.
#  487|               def.checker = "SMATCH_WARNING";
#  488|   
#  489|->         else if (tool == "cppcheck" && !this->digCppcheckEvt(&def))
#  490|               // <--[cppcheck] ... assume cppcheck running with --template=gcc
#  491|               def.checker = "CPPCHECK_WARNING";

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:489: misra_cpp_2008_rule_5_2_1_violation: Operand "!this->digCppcheckEvt(def)" is not a postfix expression.
#  487|               def.checker = "SMATCH_WARNING";
#  488|   
#  489|->         else if (tool == "cppcheck" && !this->digCppcheckEvt(&def))
#  490|               // <--[cppcheck] ... assume cppcheck running with --template=gcc
#  491|               def.checker = "CPPCHECK_WARNING";

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:491: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  489|           else if (tool == "cppcheck" && !this->digCppcheckEvt(&def))
#  490|               // <--[cppcheck] ... assume cppcheck running with --template=gcc
#  491|->             def.checker = "CPPCHECK_WARNING";
#  492|       }
#  493|       else if (boost::regex_match(keyEvt.event, reProspector_))

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:491: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  489|           else if (tool == "cppcheck" && !this->digCppcheckEvt(&def))
#  490|               // <--[cppcheck] ... assume cppcheck running with --template=gcc
#  491|->             def.checker = "CPPCHECK_WARNING";
#  492|       }
#  493|       else if (boost::regex_match(keyEvt.event, reProspector_))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:491: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  489|           else if (tool == "cppcheck" && !this->digCppcheckEvt(&def))
#  490|               // <--[cppcheck] ... assume cppcheck running with --template=gcc
#  491|->             def.checker = "CPPCHECK_WARNING";
#  492|       }
#  493|       else if (boost::regex_match(keyEvt.event, reProspector_))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:494: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  492|       }
#  493|       else if (boost::regex_match(keyEvt.event, reProspector_))
#  494|->         def.checker = "PROSPECTOR_WARNING";
#  495|       else if (boost::regex_match(keyEvt.msg, reShellCheckMsg_))
#  496|           def.checker = "SHELLCHECK_WARNING";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:494: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  492|       }
#  493|       else if (boost::regex_match(keyEvt.event, reProspector_))
#  494|->         def.checker = "PROSPECTOR_WARNING";
#  495|       else if (boost::regex_match(keyEvt.msg, reShellCheckMsg_))
#  496|           def.checker = "SHELLCHECK_WARNING";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:494: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  492|       }
#  493|       else if (boost::regex_match(keyEvt.event, reProspector_))
#  494|->         def.checker = "PROSPECTOR_WARNING";
#  495|       else if (boost::regex_match(keyEvt.msg, reShellCheckMsg_))
#  496|           def.checker = "SHELLCHECK_WARNING";

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:496: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  494|           def.checker = "PROSPECTOR_WARNING";
#  495|       else if (boost::regex_match(keyEvt.msg, reShellCheckMsg_))
#  496|->         def.checker = "SHELLCHECK_WARNING";
#  497|       else if (boost::regex_match(keyEvt.msg, reSmatchMsg_))
#  498|           def.checker = "SMATCH_WARNING";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:496: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  494|           def.checker = "PROSPECTOR_WARNING";
#  495|       else if (boost::regex_match(keyEvt.msg, reShellCheckMsg_))
#  496|->         def.checker = "SHELLCHECK_WARNING";
#  497|       else if (boost::regex_match(keyEvt.msg, reSmatchMsg_))
#  498|           def.checker = "SMATCH_WARNING";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:496: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  494|           def.checker = "PROSPECTOR_WARNING";
#  495|       else if (boost::regex_match(keyEvt.msg, reShellCheckMsg_))
#  496|->         def.checker = "SHELLCHECK_WARNING";
#  497|       else if (boost::regex_match(keyEvt.msg, reSmatchMsg_))
#  498|           def.checker = "SMATCH_WARNING";

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:498: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  496|           def.checker = "SHELLCHECK_WARNING";
#  497|       else if (boost::regex_match(keyEvt.msg, reSmatchMsg_))
#  498|->         def.checker = "SMATCH_WARNING";
#  499|       else
#  500|           // no <--[TOOL] suffix given

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:498: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  496|           def.checker = "SHELLCHECK_WARNING";
#  497|       else if (boost::regex_match(keyEvt.msg, reSmatchMsg_))
#  498|->         def.checker = "SMATCH_WARNING";
#  499|       else
#  500|           // no <--[TOOL] suffix given

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:498: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  496|           def.checker = "SHELLCHECK_WARNING";
#  497|       else if (boost::regex_match(keyEvt.msg, reSmatchMsg_))
#  498|->         def.checker = "SMATCH_WARNING";
#  499|       else
#  500|           // no <--[TOOL] suffix given

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:501: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  499|       else
#  500|           // no <--[TOOL] suffix given
#  501|->         this->digCppcheckEvt(&def);
#  502|   
#  503|       // drop the " <--[tool]" suffixes

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:501: misra_c_2012_rule_17_7_violation: The return value of a non-void function "digCppcheckEvt" is unused.
#  499|       else
#  500|           // no <--[TOOL] suffix given
#  501|->         this->digCppcheckEvt(&def);
#  502|   
#  503|       // drop the " <--[tool]" suffixes

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:501: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->digCppcheckEvt(def)" is not used.
#  499|       else
#  500|           // no <--[TOOL] suffix given
#  501|->         this->digCppcheckEvt(&def);
#  502|   
#  503|       // drop the " <--[tool]" suffixes

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:501: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  499|       else
#  500|           // no <--[TOOL] suffix given
#  501|->         this->digCppcheckEvt(&def);
#  502|   
#  503|       // drop the " <--[tool]" suffixes

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:504: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  502|   
#  503|       // drop the " <--[tool]" suffixes
#  504|->     for (DefEvent &evt : def.events)
#  505|           if (boost::regex_match(evt.msg, sm, reTool_))
#  506|               evt.msg = sm[/* msg */ 1];

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:505: misra_c_2012_rule_15_6_violation: The body of the "for" loop is not a compound statement.
#  503|       // drop the " <--[tool]" suffixes
#  504|       for (DefEvent &evt : def.events)
#  505|->         if (boost::regex_match(evt.msg, sm, reTool_))
#  506|               evt.msg = sm[/* msg */ 1];
#  507|   

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:505: misra_cpp_2008_rule_6_3_1_violation: The body of the "for" loop is not a compound statement.
#  503|       // drop the " <--[tool]" suffixes
#  504|       for (DefEvent &evt : def.events)
#  505|->         if (boost::regex_match(evt.msg, sm, reTool_))
#  506|               evt.msg = sm[/* msg */ 1];
#  507|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:506: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  504|       for (DefEvent &evt : def.events)
#  505|           if (boost::regex_match(evt.msg, sm, reTool_))
#  506|->             evt.msg = sm[/* msg */ 1];
#  507|   
#  508|       // export the current state and clear the data for next iteration

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:506: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  504|       for (DefEvent &evt : def.events)
#  505|           if (boost::regex_match(evt.msg, sm, reTool_))
#  506|->             evt.msg = sm[/* msg */ 1];
#  507|   
#  508|       // export the current state and clear the data for next iteration

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:506: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  504|       for (DefEvent &evt : def.events)
#  505|           if (boost::regex_match(evt.msg, sm, reTool_))
#  506|->             evt.msg = sm[/* msg */ 1];
#  507|   
#  508|       // export the current state and clear the data for next iteration

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:509: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  507|   
#  508|       // export the current state and clear the data for next iteration
#  509|->     *pDef = def;
#  510|       def = Defect();
#  511|       hasKeyEvent_ = false;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:510: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  508|       // export the current state and clear the data for next iteration
#  509|       *pDef = def;
#  510|->     def = Defect();
#  511|       hasKeyEvent_ = false;
#  512|       return true;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:515: misra_cpp_2008_rule_7_1_1_violation: The variable "pDef" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  513|   }
#  514|   
#  515|-> bool BasicGccParser::getNext(Defect *pDef)
#  516|   {
#  517|       bool done = false;

Error: MISRA C-2012 Rule 16.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:522: missing_default: No default case found for the switch statement "switch (tok)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:523: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:543: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:522: misra_c_2012_rule_16_1_violation: The switch statement is not well formed.
#  520|   
#  521|           const EToken tok = tokenizer_.readNext(&evt);
#  522|->         switch (tok) {
#  523|               case T_NULL:
#  524|                   if (!hasKeyEvent_ && !defCurrent_.events.empty())

Error: MISRA C-2012 Rule 16.4 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:522: misra_c_2012_rule_16_4_violation: The switch statement "switch (tok)"does not have a non-empty default clause.
#  520|   
#  521|           const EToken tok = tokenizer_.readNext(&evt);
#  522|->         switch (tok) {
#  523|               case T_NULL:
#  524|                   if (!hasKeyEvent_ && !defCurrent_.events.empty())

Error: MISRA C++-2008 Rule 6-4-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:523: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:528: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:545: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:547: extra_jump_statement: Jump statement exists in a switch clause without enclosing compound statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:522: misra_cpp_2008_rule_6_4_3_violation: The switch statement is not well formed.
#  520|   
#  521|           const EToken tok = tokenizer_.readNext(&evt);
#  522|->         switch (tok) {
#  523|               case T_NULL:
#  524|                   if (!hasKeyEvent_ && !defCurrent_.events.empty())

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:523: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  521|           const EToken tok = tokenizer_.readNext(&evt);
#  522|           switch (tok) {
#  523|->             case T_NULL:
#  524|                   if (!hasKeyEvent_ && !defCurrent_.events.empty())
#  525|                       // some events read prior to EOF, but we have no key event

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:523: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  521|           const EToken tok = tokenizer_.readNext(&evt);
#  522|           switch (tok) {
#  523|->             case T_NULL:
#  524|                   if (!hasKeyEvent_ && !defCurrent_.events.empty())
#  525|                       // some events read prior to EOF, but we have no key event

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:524: misra_cpp_2008_rule_5_2_1_violation: Operand "!this->defCurrent_.events.empty()" is not a postfix expression.
#  522|           switch (tok) {
#  523|               case T_NULL:
#  524|->                 if (!hasKeyEvent_ && !defCurrent_.events.empty())
#  525|                       // some events read prior to EOF, but we have no key event
#  526|                       this->handleError();

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:524: misra_cpp_2008_rule_5_2_1_violation: Operand "!this->hasKeyEvent_" is not a postfix expression.
#  522|           switch (tok) {
#  523|               case T_NULL:
#  524|->                 if (!hasKeyEvent_ && !defCurrent_.events.empty())
#  525|                       // some events read prior to EOF, but we have no key event
#  526|                       this->handleError();

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:526: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  524|                   if (!hasKeyEvent_ && !defCurrent_.events.empty())
#  525|                       // some events read prior to EOF, but we have no key event
#  526|->                     this->handleError();
#  527|   
#  528|                   return this->exportAndReset(pDef);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:526: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  524|                   if (!hasKeyEvent_ && !defCurrent_.events.empty())
#  525|                       // some events read prior to EOF, but we have no key event
#  526|->                     this->handleError();
#  527|   
#  528|                   return this->exportAndReset(pDef);

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:528: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  526|                       this->handleError();
#  527|   
#  528|->                 return this->exportAndReset(pDef);
#  529|   
#  530|               case T_INC:

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:528: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  526|                       this->handleError();
#  527|   
#  528|->                 return this->exportAndReset(pDef);
#  529|   
#  530|               case T_INC:

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:538: misra_c_2012_rule_10_3_violation: Implicit conversion of "this->defCurrent_.events.size()" from essential type "non-essential type" to different or narrower essential type "unsigned 32-bit int".
#  536|               case T_MSG:
#  537|                   done = this->exportAndReset(pDef);
#  538|->                 defCurrent_.keyEventIdx = defCurrent_.events.size();
#  539|                   defCurrent_.events.push_back(evt);
#  540|                   hasKeyEvent_ = true;

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:538: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "this->defCurrent_.events.size()" is implicitly reduced from "64-bit unsigned long" to "32-bit unsigned int".
#  536|               case T_MSG:
#  537|                   done = this->exportAndReset(pDef);
#  538|->                 defCurrent_.keyEventIdx = defCurrent_.events.size();
#  539|                   defCurrent_.events.push_back(evt);
#  540|                   hasKeyEvent_ = true;

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:543: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  541|                   break;
#  542|   
#  543|->             case T_SIDEBAR:
#  544|               case T_MARKER:
#  545|               case T_UNKNOWN:

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:543: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  541|                   break;
#  542|   
#  543|->             case T_SIDEBAR:
#  544|               case T_MARKER:
#  545|               case T_UNKNOWN:

Error: MISRA C++-2008 Rule 6-6-3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:547: misra_cpp_2008_rule_6_6_3_violation: "continue;" statement is not used in a well-formed for loop.
#  545|               case T_UNKNOWN:
#  546|                   this->handleError();
#  547|->                 continue;
#  548|           }
#  549|       }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:554: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  552|   }
#  553|   
#  554|-> bool BasicGccParser::hasError() const
#  555|   {
#  556|       return hasError_;

Error: MISRA C++-2008 Rule 7-3-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:561: misra_cpp_2008_rule_7_3_4_violation: Using a using-directive for namespace "GccParserImpl".
#  559|   } // namespace GccParserImpl
#  560|   
#  561|-> using namespace GccParserImpl;
#  562|   
#  563|   struct GccPostProcessor::Private {

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:564: misra_cpp_2008_rule_11_0_1_violation: Member "langDetector" is not private but "GccPostProcessor::Private" is a non-POD type.
#  562|   
#  563|   struct GccPostProcessor::Private {
#  564|->     const LangDetector langDetector;
#  565|   
#  566|       void transGccAnal(Defect *pDef) const;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:564: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "langDetector" clashes with "LangDetector"
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:33: misra_typographically_ambiguous_orig: (Previously declared symbol "LangDetector" at line 33 of "../../src/parser-common.hh")
#  562|   
#  563|   struct GccPostProcessor::Private {
#  564|->     const LangDetector langDetector;
#  565|   
#  566|       void transGccAnal(Defect *pDef) const;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:569: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#  567|       void polishGccAnal(Defect *pDef) const;
#  568|       void polishClangAnal(Defect *pDef) const;
#  569|->     void transSuffixGeneric(Defect *pDef, const std::string, const RE &) const;
#  570|       void transShellCheckId(Defect *pDef) const;
#  571|   

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:570: misra_c_2012_rule_8_6_violation: Function "transShellCheckId" is declared but never defined.
#  568|       void polishClangAnal(Defect *pDef) const;
#  569|       void transSuffixGeneric(Defect *pDef, const std::string, const RE &) const;
#  570|->     void transShellCheckId(Defect *pDef) const;
#  571|   
#  572|       const RE reClangWarningEvt  = RE("^(.*) (\\[[A-Za-z.]+\\])$");

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:570: misra_cpp_2008_rule_3_2_2_violation: Function "transShellCheckId" is declared but never defined.
#  568|       void polishClangAnal(Defect *pDef) const;
#  569|       void transSuffixGeneric(Defect *pDef, const std::string, const RE &) const;
#  570|->     void transShellCheckId(Defect *pDef) const;
#  571|   
#  572|       const RE reClangWarningEvt  = RE("^(.*) (\\[[A-Za-z.]+\\])$");

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:570: misra_cpp_2008_rule_3_2_4_violation: Function "transShellCheckId" is declared but never defined.
#  568|       void polishClangAnal(Defect *pDef) const;
#  569|       void transSuffixGeneric(Defect *pDef, const std::string, const RE &) const;
#  570|->     void transShellCheckId(Defect *pDef) const;
#  571|   
#  572|       const RE reClangWarningEvt  = RE("^(.*) (\\[[A-Za-z.]+\\])$");

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:572: misra_cpp_2008_rule_11_0_1_violation: Member "reClangWarningEvt" is not private but "GccPostProcessor::Private" is a non-POD type.
#  570|       void transShellCheckId(Defect *pDef) const;
#  571|   
#  572|->     const RE reClangWarningEvt  = RE("^(.*) (\\[[A-Za-z.]+\\])$");
#  573|       const RE reGccAnalCoreEvt   = RE("^(.*) (\\[-Wanalyzer-[^ \\]]+\\])$");
#  574|       const RE reGccAnalCwe       = RE("^(.*) \\[CWE-([0-9]+)\\]$");

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:573: misra_cpp_2008_rule_11_0_1_violation: Member "reGccAnalCoreEvt" is not private but "GccPostProcessor::Private" is a non-POD type.
#  571|   
#  572|       const RE reClangWarningEvt  = RE("^(.*) (\\[[A-Za-z.]+\\])$");
#  573|->     const RE reGccAnalCoreEvt   = RE("^(.*) (\\[-Wanalyzer-[^ \\]]+\\])$");
#  574|       const RE reGccAnalCwe       = RE("^(.*) \\[CWE-([0-9]+)\\]$");
#  575|       const RE reGccAnalTraceEvt  = RE("^\\([0-9]+\\) .*$$");

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:574: misra_cpp_2008_rule_11_0_1_violation: Member "reGccAnalCwe" is not private but "GccPostProcessor::Private" is a non-POD type.
#  572|       const RE reClangWarningEvt  = RE("^(.*) (\\[[A-Za-z.]+\\])$");
#  573|       const RE reGccAnalCoreEvt   = RE("^(.*) (\\[-Wanalyzer-[^ \\]]+\\])$");
#  574|->     const RE reGccAnalCwe       = RE("^(.*) \\[CWE-([0-9]+)\\]$");
#  575|       const RE reGccAnalTraceEvt  = RE("^\\([0-9]+\\) .*$$");
#  576|       const RE reGccWarningEvt    = RE("^(.*) (\\[-W[^ \\]]+\\])$");

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:575: misra_cpp_2008_rule_11_0_1_violation: Member "reGccAnalTraceEvt" is not private but "GccPostProcessor::Private" is a non-POD type.
#  573|       const RE reGccAnalCoreEvt   = RE("^(.*) (\\[-Wanalyzer-[^ \\]]+\\])$");
#  574|       const RE reGccAnalCwe       = RE("^(.*) \\[CWE-([0-9]+)\\]$");
#  575|->     const RE reGccAnalTraceEvt  = RE("^\\([0-9]+\\) .*$$");
#  576|       const RE reGccWarningEvt    = RE("^(.*) (\\[-W[^ \\]]+\\])$");
#  577|       const RE reShellCheckId     = RE("(^.*) (\\[SC([0-9]+)\\])$");

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:576: misra_cpp_2008_rule_11_0_1_violation: Member "reGccWarningEvt" is not private but "GccPostProcessor::Private" is a non-POD type.
#  574|       const RE reGccAnalCwe       = RE("^(.*) \\[CWE-([0-9]+)\\]$");
#  575|       const RE reGccAnalTraceEvt  = RE("^\\([0-9]+\\) .*$$");
#  576|->     const RE reGccWarningEvt    = RE("^(.*) (\\[-W[^ \\]]+\\])$");
#  577|       const RE reShellCheckId     = RE("(^.*) (\\[SC([0-9]+)\\])$");
#  578|   };

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:577: misra_cpp_2008_rule_11_0_1_violation: Member "reShellCheckId" is not private but "GccPostProcessor::Private" is a non-POD type.
#  575|       const RE reGccAnalTraceEvt  = RE("^\\([0-9]+\\) .*$$");
#  576|       const RE reGccWarningEvt    = RE("^(.*) (\\[-W[^ \\]]+\\])$");
#  577|->     const RE reShellCheckId     = RE("(^.*) (\\[SC([0-9]+)\\])$");
#  578|   };
#  579|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:580: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  578|   };
#  579|   
#  580|-> GccPostProcessor::GccPostProcessor():
#  581|       d(new Private)
#  582|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:581: misra_c_2012_directive_4_12_violation: A call to the function "operator new(104UL)" performs dynamic memory allocation.
#  579|   
#  580|   GccPostProcessor::GccPostProcessor():
#  581|->     d(new Private)
#  582|   {
#  583|   }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:581: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  579|   
#  580|   GccPostProcessor::GccPostProcessor():
#  581|->     d(new Private)
#  582|   {
#  583|   }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:585: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  583|   }
#  584|   
#  585|-> GccPostProcessor::~GccPostProcessor()
#  586|   {
#  587|       delete d;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:590: misra_cpp_2008_rule_7_1_1_violation: The variable "pDef" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  588|   }
#  589|   
#  590|-> void GccPostProcessor::Private::transGccAnal(Defect *pDef) const
#  591|   {
#  592|       if ("COMPILER_WARNING" != pDef->checker)

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:593: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  591|   {
#  592|       if ("COMPILER_WARNING" != pDef->checker)
#  593|->         return;
#  594|   
#  595|       // check for [-Wanalyzer-...] suffix in message of the key event

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:593: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  591|   {
#  592|       if ("COMPILER_WARNING" != pDef->checker)
#  593|->         return;
#  594|   
#  595|       // check for [-Wanalyzer-...] suffix in message of the key event

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:593: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  591|   {
#  592|       if ("COMPILER_WARNING" != pDef->checker)
#  593|->         return;
#  594|   
#  595|       // check for [-Wanalyzer-...] suffix in message of the key event

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:593: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  591|   {
#  592|       if ("COMPILER_WARNING" != pDef->checker)
#  593|->         return;
#  594|   
#  595|       // check for [-Wanalyzer-...] suffix in message of the key event

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:599: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  597|       boost::smatch sm;
#  598|       if (!boost::regex_match(keyEvt.msg, sm, this->reGccAnalCoreEvt))
#  599|->         return;
#  600|   
#  601|       // COMPILER_WARNING -> GCC_ANALYZER_WARNING

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:599: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  597|       boost::smatch sm;
#  598|       if (!boost::regex_match(keyEvt.msg, sm, this->reGccAnalCoreEvt))
#  599|->         return;
#  600|   
#  601|       // COMPILER_WARNING -> GCC_ANALYZER_WARNING

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:599: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  597|       boost::smatch sm;
#  598|       if (!boost::regex_match(keyEvt.msg, sm, this->reGccAnalCoreEvt))
#  599|->         return;
#  600|   
#  601|       // COMPILER_WARNING -> GCC_ANALYZER_WARNING

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:599: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  597|       boost::smatch sm;
#  598|       if (!boost::regex_match(keyEvt.msg, sm, this->reGccAnalCoreEvt))
#  599|->         return;
#  600|   
#  601|       // COMPILER_WARNING -> GCC_ANALYZER_WARNING

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:602: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  600|   
#  601|       // COMPILER_WARNING -> GCC_ANALYZER_WARNING
#  602|->     pDef->checker = "GCC_ANALYZER_WARNING";
#  603|       keyEvt.event += sm[/* id */ 2];
#  604|       // this invalidates sm

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:603: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  601|       // COMPILER_WARNING -> GCC_ANALYZER_WARNING
#  602|       pDef->checker = "GCC_ANALYZER_WARNING";
#  603|->     keyEvt.event += sm[/* id */ 2];
#  604|       // this invalidates sm
#  605|       keyEvt.msg = sm[/* msg */ 1];

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:605: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  603|       keyEvt.event += sm[/* id */ 2];
#  604|       // this invalidates sm
#  605|->     keyEvt.msg = sm[/* msg */ 1];
#  606|   
#  607|       // pick CWE number if available

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:609: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  607|       // pick CWE number if available
#  608|       if (!boost::regex_match(keyEvt.msg, sm, this->reGccAnalCwe))
#  609|->         return;
#  610|   
#  611|       pDef->cwe = parse_int(sm[/* cwe */ 2]);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:609: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  607|       // pick CWE number if available
#  608|       if (!boost::regex_match(keyEvt.msg, sm, this->reGccAnalCwe))
#  609|->         return;
#  610|   
#  611|       pDef->cwe = parse_int(sm[/* cwe */ 2]);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:609: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  607|       // pick CWE number if available
#  608|       if (!boost::regex_match(keyEvt.msg, sm, this->reGccAnalCwe))
#  609|->         return;
#  610|   
#  611|       pDef->cwe = parse_int(sm[/* cwe */ 2]);

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:609: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  607|       // pick CWE number if available
#  608|       if (!boost::regex_match(keyEvt.msg, sm, this->reGccAnalCwe))
#  609|->         return;
#  610|   
#  611|       pDef->cwe = parse_int(sm[/* cwe */ 2]);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:613: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  611|       pDef->cwe = parse_int(sm[/* cwe */ 2]);
#  612|       // this invalidates sm
#  613|->     keyEvt.msg = sm[/* msg */ 1];
#  614|   }
#  615|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:616: misra_cpp_2008_rule_7_1_1_violation: The variable "pDef" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  614|   }
#  615|   
#  616|-> void GccPostProcessor::Private::polishGccAnal(Defect *pDef) const
#  617|   {
#  618|       if ("GCC_ANALYZER_WARNING" != pDef->checker)

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:619: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  617|   {
#  618|       if ("GCC_ANALYZER_WARNING" != pDef->checker)
#  619|->         return;
#  620|   
#  621|       for (DefEvent &evt : pDef->events) {

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:619: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  617|   {
#  618|       if ("GCC_ANALYZER_WARNING" != pDef->checker)
#  619|->         return;
#  620|   
#  621|       for (DefEvent &evt : pDef->events) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:619: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  617|   {
#  618|       if ("GCC_ANALYZER_WARNING" != pDef->checker)
#  619|->         return;
#  620|   
#  621|       for (DefEvent &evt : pDef->events) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:619: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  617|   {
#  618|       if ("GCC_ANALYZER_WARNING" != pDef->checker)
#  619|->         return;
#  620|   
#  621|       for (DefEvent &evt : pDef->events) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:621: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  619|           return;
#  620|   
#  621|->     for (DefEvent &evt : pDef->events) {
#  622|           if (evt.verbosityLevel != /* note */ 1 || evt.event != "note")
#  623|               // not a "note" event

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:622: misra_c_2012_rule_12_1_violation: Missing explicit parentheses on sub-expression: "evt.verbosityLevel != 1".
#  620|   
#  621|       for (DefEvent &evt : pDef->events) {
#  622|->         if (evt.verbosityLevel != /* note */ 1 || evt.event != "note")
#  623|               // not a "note" event
#  624|               continue;

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:622: misra_cpp_2008_rule_5_0_2_violation: "evt.event != "note"" should be parenthesized.
#  620|   
#  621|       for (DefEvent &evt : pDef->events) {
#  622|->         if (evt.verbosityLevel != /* note */ 1 || evt.event != "note")
#  623|               // not a "note" event
#  624|               continue;

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:622: misra_cpp_2008_rule_5_0_2_violation: "evt.verbosityLevel != 1" should be parenthesized.
#  620|   
#  621|       for (DefEvent &evt : pDef->events) {
#  622|->         if (evt.verbosityLevel != /* note */ 1 || evt.event != "note")
#  623|               // not a "note" event
#  624|               continue;

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:622: misra_cpp_2008_rule_5_2_1_violation: Operand "evt.verbosityLevel != 1" is not a postfix expression.
#  620|   
#  621|       for (DefEvent &evt : pDef->events) {
#  622|->         if (evt.verbosityLevel != /* note */ 1 || evt.event != "note")
#  623|               // not a "note" event
#  624|               continue;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:624: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  622|           if (evt.verbosityLevel != /* note */ 1 || evt.event != "note")
#  623|               // not a "note" event
#  624|->             continue;
#  625|   
#  626|           if (!boost::regex_match(evt.msg, this->reGccAnalTraceEvt))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:624: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  622|           if (evt.verbosityLevel != /* note */ 1 || evt.event != "note")
#  623|               // not a "note" event
#  624|->             continue;
#  625|   
#  626|           if (!boost::regex_match(evt.msg, this->reGccAnalTraceEvt))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:628: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  626|           if (!boost::regex_match(evt.msg, this->reGccAnalTraceEvt))
#  627|               // not a "trace" event either
#  628|->             continue;
#  629|   
#  630|           evt.verbosityLevel = /* trace */ 2;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:628: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  626|           if (!boost::regex_match(evt.msg, this->reGccAnalTraceEvt))
#  627|               // not a "trace" event either
#  628|->             continue;
#  629|   
#  630|           evt.verbosityLevel = /* trace */ 2;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:634: misra_cpp_2008_rule_7_1_1_violation: The variable "pDef" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  632|   }
#  633|   
#  634|-> void GccPostProcessor::Private::polishClangAnal(Defect *pDef) const
#  635|   {
#  636|       if ("CLANG_WARNING" != pDef->checker)

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:637: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  635|   {
#  636|       if ("CLANG_WARNING" != pDef->checker)
#  637|->         return;
#  638|   
#  639|       // FIXME: we should distinguish `clang --analyze` and clang compiler

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:637: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  635|   {
#  636|       if ("CLANG_WARNING" != pDef->checker)
#  637|->         return;
#  638|   
#  639|       // FIXME: we should distinguish `clang --analyze` and clang compiler

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:637: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  635|   {
#  636|       if ("CLANG_WARNING" != pDef->checker)
#  637|->         return;
#  638|   
#  639|       // FIXME: we should distinguish `clang --analyze` and clang compiler

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:637: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  635|   {
#  636|       if ("CLANG_WARNING" != pDef->checker)
#  637|->         return;
#  638|   
#  639|       // FIXME: we should distinguish `clang --analyze` and clang compiler

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:641: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  639|       // FIXME: we should distinguish `clang --analyze` and clang compiler
#  640|   
#  641|->     for (DefEvent &evt : pDef->events) {
#  642|           if (evt.verbosityLevel != /* note */ 1 || evt.event != "note")
#  643|               // not a "note" event

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:642: misra_c_2012_rule_12_1_violation: Missing explicit parentheses on sub-expression: "evt.verbosityLevel != 1".
#  640|   
#  641|       for (DefEvent &evt : pDef->events) {
#  642|->         if (evt.verbosityLevel != /* note */ 1 || evt.event != "note")
#  643|               // not a "note" event
#  644|               continue;

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:642: misra_cpp_2008_rule_5_0_2_violation: "evt.event != "note"" should be parenthesized.
#  640|   
#  641|       for (DefEvent &evt : pDef->events) {
#  642|->         if (evt.verbosityLevel != /* note */ 1 || evt.event != "note")
#  643|               // not a "note" event
#  644|               continue;

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:642: misra_cpp_2008_rule_5_0_2_violation: "evt.verbosityLevel != 1" should be parenthesized.
#  640|   
#  641|       for (DefEvent &evt : pDef->events) {
#  642|->         if (evt.verbosityLevel != /* note */ 1 || evt.event != "note")
#  643|               // not a "note" event
#  644|               continue;

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:642: misra_cpp_2008_rule_5_2_1_violation: Operand "evt.verbosityLevel != 1" is not a postfix expression.
#  640|   
#  641|       for (DefEvent &evt : pDef->events) {
#  642|->         if (evt.verbosityLevel != /* note */ 1 || evt.event != "note")
#  643|               // not a "note" event
#  644|               continue;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:644: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  642|           if (evt.verbosityLevel != /* note */ 1 || evt.event != "note")
#  643|               // not a "note" event
#  644|->             continue;
#  645|   
#  646|           evt.verbosityLevel = /* trace */ 2;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:644: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  642|           if (evt.verbosityLevel != /* note */ 1 || evt.event != "note")
#  643|               // not a "note" event
#  644|->             continue;
#  645|   
#  646|           evt.verbosityLevel = /* trace */ 2;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:651: misra_cpp_2008_rule_7_1_1_violation: The variable "pDef" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  649|   
#  650|   void GccPostProcessor::Private::transSuffixGeneric(
#  651|->         Defect                 *pDef,
#  652|           const std::string       checker,
#  653|           const RE               &reEvt)

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:657: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  655|   {
#  656|       if (checker != pDef->checker)
#  657|->         return;
#  658|   
#  659|       // check for [...] suffix in message of the key event

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:657: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  655|   {
#  656|       if (checker != pDef->checker)
#  657|->         return;
#  658|   
#  659|       // check for [...] suffix in message of the key event

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:657: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  655|   {
#  656|       if (checker != pDef->checker)
#  657|->         return;
#  658|   
#  659|       // check for [...] suffix in message of the key event

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:657: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  655|   {
#  656|       if (checker != pDef->checker)
#  657|->         return;
#  658|   
#  659|       // check for [...] suffix in message of the key event

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:663: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  661|       boost::smatch sm;
#  662|       if (!boost::regex_match(keyEvt.msg, sm, reEvt))
#  663|->         return;
#  664|   
#  665|       // append [...] to key event ID and remove it from event msg

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:663: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  661|       boost::smatch sm;
#  662|       if (!boost::regex_match(keyEvt.msg, sm, reEvt))
#  663|->         return;
#  664|   
#  665|       // append [...] to key event ID and remove it from event msg

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:663: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  661|       boost::smatch sm;
#  662|       if (!boost::regex_match(keyEvt.msg, sm, reEvt))
#  663|->         return;
#  664|   
#  665|       // append [...] to key event ID and remove it from event msg

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:663: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  661|       boost::smatch sm;
#  662|       if (!boost::regex_match(keyEvt.msg, sm, reEvt))
#  663|->         return;
#  664|   
#  665|       // append [...] to key event ID and remove it from event msg

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:666: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  664|   
#  665|       // append [...] to key event ID and remove it from event msg
#  666|->     keyEvt.event += sm[/* id */ 2];
#  667|       // this invalidates sm
#  668|       keyEvt.msg = sm[/* msg */ 1];

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:668: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  666|       keyEvt.event += sm[/* id */ 2];
#  667|       // this invalidates sm
#  668|->     keyEvt.msg = sm[/* msg */ 1];
#  669|   }
#  670|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:671: misra_cpp_2008_rule_7_1_1_violation: The variable "pDef" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  669|   }
#  670|   
#  671|-> void GccPostProcessor::apply(Defect *pDef) const
#  672|   {
#  673|       d->transGccAnal(pDef);

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:685: misra_cpp_2008_rule_11_0_1_violation: Member "core" is not private but "GccParser::Private" is a non-POD type.
#  683|   
#  684|   struct GccParser::Private {
#  685|->     BasicGccParser              core;
#  686|       GccPostProcessor            postProc;
#  687|       Defect                      lastDef;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:686: misra_cpp_2008_rule_11_0_1_violation: Member "postProc" is not private but "GccParser::Private" is a non-POD type.
#  684|   struct GccParser::Private {
#  685|       BasicGccParser              core;
#  686|->     GccPostProcessor            postProc;
#  687|       Defect                      lastDef;
#  688|   

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:687: misra_cpp_2008_rule_11_0_1_violation: Member "lastDef" is not private but "GccParser::Private" is a non-POD type.
#  685|       BasicGccParser              core;
#  686|       GccPostProcessor            postProc;
#  687|->     Defect                      lastDef;
#  688|   
#  689|       Private(InStream &input):

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:697: misra_cpp_2008_rule_11_0_1_violation: Member "reLocation" is not private but "GccParser::Private" is a non-POD type.
#  695|       bool tryMerge(Defect *pDef);
#  696|   
#  697|->     const RE reLocation = RE("^this is the location.*$");
#  698|   };
#  699|   

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:697: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "reLocation" clashes with "RE_LOCATION"
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:63: misra_typographically_ambiguous_orig: (Previously declared symbol "RE_LOCATION" at line 63)
#  695|       bool tryMerge(Defect *pDef);
#  696|   
#  697|->     const RE reLocation = RE("^this is the location.*$");
#  698|   };
#  699|   

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:700: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "AbstractParser" are not called in this constructor.
#  698|   };
#  699|   
#  700|-> GccParser::GccParser(InStream &input):
#  701|       d(new Private(input))
#  702|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:701: misra_c_2012_directive_4_12_violation: A call to the function "operator new(960UL)" performs dynamic memory allocation.
#  699|   
#  700|   GccParser::GccParser(InStream &input):
#  701|->     d(new Private(input))
#  702|   {
#  703|   }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:701: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  699|   
#  700|   GccParser::GccParser(InStream &input):
#  701|->     d(new Private(input))
#  702|   {
#  703|   }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:705: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  703|   }
#  704|   
#  705|-> GccParser::~GccParser()
#  706|   {
#  707|       delete d;

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:710: misra_c_2012_rule_8_13_violation: The member function "GccParser::Private::checkMerge(DefEvent &)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  708|   }
#  709|   
#  710|-> bool GccParser::Private::checkMerge(DefEvent &keyEvt)
#  711|   {
#  712|       if (keyEvt.event == "#")

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:714: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  712|       if (keyEvt.event == "#")
#  713|           // can merge a comment
#  714|->         return true;
#  715|   
#  716|       if (keyEvt.event == "note"

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:714: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  712|       if (keyEvt.event == "#")
#  713|           // can merge a comment
#  714|->         return true;
#  715|   
#  716|       if (keyEvt.event == "note"

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:714: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  712|       if (keyEvt.event == "#")
#  713|           // can merge a comment
#  714|->         return true;
#  715|   
#  716|       if (keyEvt.event == "note"

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:714: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  712|       if (keyEvt.event == "#")
#  713|           // can merge a comment
#  714|->         return true;
#  715|   
#  716|       if (keyEvt.event == "note"

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:716: misra_cpp_2008_rule_5_0_2_violation: "keyEvt.event == "note"" should be parenthesized.
#  714|           return true;
#  715|   
#  716|->     if (keyEvt.event == "note"
#  717|               // shellcheck emits "note" always as key event with no context info
#  718|               && this->lastDef.checker != "SHELLCHECK_WARNING")

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:718: misra_cpp_2008_rule_5_0_2_violation: "this->lastDef.checker != "SHELLCHECK_WARNING"" should be parenthesized.
#  716|       if (keyEvt.event == "note"
#  717|               // shellcheck emits "note" always as key event with no context info
#  718|->             && this->lastDef.checker != "SHELLCHECK_WARNING")
#  719|           // can merge a "note" event
#  720|           return true;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:720: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  718|               && this->lastDef.checker != "SHELLCHECK_WARNING")
#  719|           // can merge a "note" event
#  720|->         return true;
#  721|   
#  722|       if (keyEvt.event != "warning")

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:720: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  718|               && this->lastDef.checker != "SHELLCHECK_WARNING")
#  719|           // can merge a "note" event
#  720|->         return true;
#  721|   
#  722|       if (keyEvt.event != "warning")

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:720: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  718|               && this->lastDef.checker != "SHELLCHECK_WARNING")
#  719|           // can merge a "note" event
#  720|->         return true;
#  721|   
#  722|       if (keyEvt.event != "warning")

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:720: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  718|               && this->lastDef.checker != "SHELLCHECK_WARNING")
#  719|           // can merge a "note" event
#  720|->         return true;
#  721|   
#  722|       if (keyEvt.event != "warning")

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:724: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  722|       if (keyEvt.event != "warning")
#  723|           // we know to merge only notes and warnings
#  724|->         return false;
#  725|   
#  726|       // check whether the warning comes with a location only

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:724: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  722|       if (keyEvt.event != "warning")
#  723|           // we know to merge only notes and warnings
#  724|->         return false;
#  725|   
#  726|       // check whether the warning comes with a location only

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:724: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  722|       if (keyEvt.event != "warning")
#  723|           // we know to merge only notes and warnings
#  724|->         return false;
#  725|   
#  726|       // check whether the warning comes with a location only

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:724: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  722|       if (keyEvt.event != "warning")
#  723|           // we know to merge only notes and warnings
#  724|->         return false;
#  725|   
#  726|       // check whether the warning comes with a location only

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:728: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  726|       // check whether the warning comes with a location only
#  727|       if (!boost::regex_match(keyEvt.msg, this->reLocation))
#  728|->         return false;
#  729|   
#  730|       // translate "warning" -> "note" so that we have an unambiguous key event

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:728: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  726|       // check whether the warning comes with a location only
#  727|       if (!boost::regex_match(keyEvt.msg, this->reLocation))
#  728|->         return false;
#  729|   
#  730|       // translate "warning" -> "note" so that we have an unambiguous key event

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:728: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  726|       // check whether the warning comes with a location only
#  727|       if (!boost::regex_match(keyEvt.msg, this->reLocation))
#  728|->         return false;
#  729|   
#  730|       // translate "warning" -> "note" so that we have an unambiguous key event

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:728: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  726|       // check whether the warning comes with a location only
#  727|       if (!boost::regex_match(keyEvt.msg, this->reLocation))
#  728|->         return false;
#  729|   
#  730|       // translate "warning" -> "note" so that we have an unambiguous key event

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:731: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  729|   
#  730|       // translate "warning" -> "note" so that we have an unambiguous key event
#  731|->     keyEvt.event = "note";
#  732|       return true;
#  733|   }

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:735: misra_cpp_2008_rule_7_1_1_violation: The variable "pDef" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  733|   }
#  734|   
#  735|-> bool GccParser::Private::tryMerge(Defect *pDef)
#  736|   {
#  737|       TEvtList &lastEvts = this->lastDef.events;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:741: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  739|       if (!this->checkMerge(lastKeyEvt))
#  740|           // not something we can merge
#  741|->         return false;
#  742|   
#  743|       if (pDef->checker != this->lastDef.checker && lastKeyEvt.event != "#")

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:741: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  739|       if (!this->checkMerge(lastKeyEvt))
#  740|           // not something we can merge
#  741|->         return false;
#  742|   
#  743|       if (pDef->checker != this->lastDef.checker && lastKeyEvt.event != "#")

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:741: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  739|       if (!this->checkMerge(lastKeyEvt))
#  740|           // not something we can merge
#  741|->         return false;
#  742|   
#  743|       if (pDef->checker != this->lastDef.checker && lastKeyEvt.event != "#")

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:741: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  739|       if (!this->checkMerge(lastKeyEvt))
#  740|           // not something we can merge
#  741|->         return false;
#  742|   
#  743|       if (pDef->checker != this->lastDef.checker && lastKeyEvt.event != "#")

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:743: misra_cpp_2008_rule_5_0_2_violation: "lastKeyEvt.event != "#"" should be parenthesized.
#  741|           return false;
#  742|   
#  743|->     if (pDef->checker != this->lastDef.checker && lastKeyEvt.event != "#")
#  744|           // do not merge events of incompatible checkers
#  745|           return false;

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:743: misra_cpp_2008_rule_5_0_2_violation: "pDef->checker != this->lastDef.checker" should be parenthesized.
#  741|           return false;
#  742|   
#  743|->     if (pDef->checker != this->lastDef.checker && lastKeyEvt.event != "#")
#  744|           // do not merge events of incompatible checkers
#  745|           return false;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:745: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  743|       if (pDef->checker != this->lastDef.checker && lastKeyEvt.event != "#")
#  744|           // do not merge events of incompatible checkers
#  745|->         return false;
#  746|   
#  747|       TEvtList &evts = pDef->events;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:745: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  743|       if (pDef->checker != this->lastDef.checker && lastKeyEvt.event != "#")
#  744|           // do not merge events of incompatible checkers
#  745|->         return false;
#  746|   
#  747|       TEvtList &evts = pDef->events;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:745: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  743|       if (pDef->checker != this->lastDef.checker && lastKeyEvt.event != "#")
#  744|           // do not merge events of incompatible checkers
#  745|->         return false;
#  746|   
#  747|       TEvtList &evts = pDef->events;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:745: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  743|       if (pDef->checker != this->lastDef.checker && lastKeyEvt.event != "#")
#  744|           // do not merge events of incompatible checkers
#  745|->         return false;
#  746|   
#  747|       TEvtList &evts = pDef->events;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:751: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  749|       if (keyEvt.event == "note")
#  750|           // avoid using "note" as the key event
#  751|->         return false;
#  752|   
#  753|       // concatenate the events and purge the last defect

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:751: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  749|       if (keyEvt.event == "note")
#  750|           // avoid using "note" as the key event
#  751|->         return false;
#  752|   
#  753|       // concatenate the events and purge the last defect

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:751: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  749|       if (keyEvt.event == "note")
#  750|           // avoid using "note" as the key event
#  751|->         return false;
#  752|   
#  753|       // concatenate the events and purge the last defect

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:751: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  749|       if (keyEvt.event == "note")
#  750|           // avoid using "note" as the key event
#  751|->         return false;
#  752|   
#  753|       // concatenate the events and purge the last defect

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:754: misra_c_2012_rule_17_7_violation: The return value of a non-void function "copy" is unused.
#  752|   
#  753|       // concatenate the events and purge the last defect
#  754|->     std::copy(lastEvts.begin(), lastEvts.end(), std::back_inserter(evts));
#  755|       lastEvts.clear();
#  756|       return true;

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:754: misra_cpp_2008_rule_0_1_7_violation: The return value of function "std::copy(lastEvts->begin(), lastEvts->end(), std::back_inserter(evts))" is not used.
#  752|   
#  753|       // concatenate the events and purge the last defect
#  754|->     std::copy(lastEvts.begin(), lastEvts.end(), std::back_inserter(evts));
#  755|       lastEvts.clear();
#  756|       return true;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:759: misra_cpp_2008_rule_7_1_1_violation: The variable "pDef" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  757|   }
#  758|   
#  759|-> bool GccParser::getNext(Defect *pDef)
#  760|   {
#  761|       // pick the last defect and clear the stash

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:762: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  760|   {
#  761|       // pick the last defect and clear the stash
#  762|->     *pDef = d->lastDef;
#  763|       d->lastDef.events.clear();
#  764|       if (pDef->events.size() <= pDef->keyEventIdx

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:764: misra_c_2012_rule_12_1_violation: Missing explicit parentheses on sub-expression: "pDef->events.size() <= pDef->keyEventIdx".
#  762|       *pDef = d->lastDef;
#  763|       d->lastDef.events.clear();
#  764|->     if (pDef->events.size() <= pDef->keyEventIdx
#  765|           // no valid last defect --> read a new one
#  766|               && !d->core.getNext(pDef))

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:764: misra_cpp_2008_rule_5_0_2_violation: "pDef->events.size() <= pDef->keyEventIdx" should be parenthesized.
#  762|       *pDef = d->lastDef;
#  763|       d->lastDef.events.clear();
#  764|->     if (pDef->events.size() <= pDef->keyEventIdx
#  765|           // no valid last defect --> read a new one
#  766|               && !d->core.getNext(pDef))

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:764: misra_cpp_2008_rule_5_2_1_violation: Operand "pDef->events.size() <= pDef->keyEventIdx" is not a postfix expression.
#  762|       *pDef = d->lastDef;
#  763|       d->lastDef.events.clear();
#  764|->     if (pDef->events.size() <= pDef->keyEventIdx
#  765|           // no valid last defect --> read a new one
#  766|               && !d->core.getNext(pDef))

Error: MISRA C-2012 Rule 13.5 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:766: misra_c_2012_rule_13_5_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "this->d->core.getNext(pDef)".
#  764|       if (pDef->events.size() <= pDef->keyEventIdx
#  765|           // no valid last defect --> read a new one
#  766|->             && !d->core.getNext(pDef))
#  767|           // no valid current defect either
#  768|           return false;

Error: MISRA C++-2008 Rule 5-14-1 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:766: misra_cpp_2008_rule_5_14_1_violation: The right hand operand of a logical operator "&&" has persistent side effects because of calling function "this->d->core.getNext(pDef)".
#  764|       if (pDef->events.size() <= pDef->keyEventIdx
#  765|           // no valid last defect --> read a new one
#  766|->             && !d->core.getNext(pDef))
#  767|           // no valid current defect either
#  768|           return false;

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:766: misra_cpp_2008_rule_5_2_1_violation: Operand "!this->d->core.getNext(pDef)" is not a postfix expression.
#  764|       if (pDef->events.size() <= pDef->keyEventIdx
#  765|           // no valid last defect --> read a new one
#  766|->             && !d->core.getNext(pDef))
#  767|           // no valid current defect either
#  768|           return false;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:768: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  766|               && !d->core.getNext(pDef))
#  767|           // no valid current defect either
#  768|->         return false;
#  769|   
#  770|       // defect merging loop

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:768: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  766|               && !d->core.getNext(pDef))
#  767|           // no valid current defect either
#  768|->         return false;
#  769|   
#  770|       // defect merging loop

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:768: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  766|               && !d->core.getNext(pDef))
#  767|           // no valid current defect either
#  768|->         return false;
#  769|   
#  770|       // defect merging loop

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:768: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  766|               && !d->core.getNext(pDef))
#  767|           // no valid current defect either
#  768|->         return false;
#  769|   
#  770|       // defect merging loop

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:772: misra_c_2012_rule_15_6_violation: The body of the "while" loop is not a compound statement.
#  770|       // defect merging loop
#  771|       while (d->core.getNext(&d->lastDef) && d->tryMerge(pDef))
#  772|->         ;
#  773|   
#  774|       // initialize verbosityLevel 

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:772: misra_cpp_2008_rule_6_3_1_violation: The body of the "while" loop is not a compound statement.
#  770|       // defect merging loop
#  771|       while (d->core.getNext(&d->lastDef) && d->tryMerge(pDef))
#  772|->         ;
#  773|   
#  774|       // initialize verbosityLevel 

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:777: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  775|       // FIXME: similar code to KeyEventDigger::initVerbosity()
#  776|       TEvtList &evtList = pDef->events;
#  777|->     const unsigned evtCount = evtList.size();
#  778|       const unsigned keyEventIdx = pDef->keyEventIdx;
#  779|       for (unsigned idx = 0U; idx < evtCount; ++idx)

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:777: misra_c_2012_rule_10_3_violation: Implicit conversion of "evtList->size()" from essential type "non-essential type" to different or narrower essential type "unsigned 32-bit int".
#  775|       // FIXME: similar code to KeyEventDigger::initVerbosity()
#  776|       TEvtList &evtList = pDef->events;
#  777|->     const unsigned evtCount = evtList.size();
#  778|       const unsigned keyEventIdx = pDef->keyEventIdx;
#  779|       for (unsigned idx = 0U; idx < evtCount; ++idx)

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:777: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  775|       // FIXME: similar code to KeyEventDigger::initVerbosity()
#  776|       TEvtList &evtList = pDef->events;
#  777|->     const unsigned evtCount = evtList.size();
#  778|       const unsigned keyEventIdx = pDef->keyEventIdx;
#  779|       for (unsigned idx = 0U; idx < evtCount; ++idx)

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:777: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "evtList->size()" is implicitly reduced from "64-bit unsigned long" to "32-bit unsigned int".
#  775|       // FIXME: similar code to KeyEventDigger::initVerbosity()
#  776|       TEvtList &evtList = pDef->events;
#  777|->     const unsigned evtCount = evtList.size();
#  778|       const unsigned keyEventIdx = pDef->keyEventIdx;
#  779|       for (unsigned idx = 0U; idx < evtCount; ++idx)

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:778: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  776|       TEvtList &evtList = pDef->events;
#  777|       const unsigned evtCount = evtList.size();
#  778|->     const unsigned keyEventIdx = pDef->keyEventIdx;
#  779|       for (unsigned idx = 0U; idx < evtCount; ++idx)
#  780|           evtList[idx].verbosityLevel = (keyEventIdx != idx);

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:778: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "keyEventIdx" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:785: end_of_scope: Reached end of scope without using value stored in "keyEventIdx".
#  776|       TEvtList &evtList = pDef->events;
#  777|       const unsigned evtCount = evtList.size();
#  778|->     const unsigned keyEventIdx = pDef->keyEventIdx;
#  779|       for (unsigned idx = 0U; idx < evtCount; ++idx)
#  780|           evtList[idx].verbosityLevel = (keyEventIdx != idx);

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:778: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  776|       TEvtList &evtList = pDef->events;
#  777|       const unsigned evtCount = evtList.size();
#  778|->     const unsigned keyEventIdx = pDef->keyEventIdx;
#  779|       for (unsigned idx = 0U; idx < evtCount; ++idx)
#  780|           evtList[idx].verbosityLevel = (keyEventIdx != idx);

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:779: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  777|       const unsigned evtCount = evtList.size();
#  778|       const unsigned keyEventIdx = pDef->keyEventIdx;
#  779|->     for (unsigned idx = 0U; idx < evtCount; ++idx)
#  780|           evtList[idx].verbosityLevel = (keyEventIdx != idx);
#  781|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:779: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  777|       const unsigned evtCount = evtList.size();
#  778|       const unsigned keyEventIdx = pDef->keyEventIdx;
#  779|->     for (unsigned idx = 0U; idx < evtCount; ++idx)
#  780|           evtList[idx].verbosityLevel = (keyEventIdx != idx);
#  781|   

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:780: misra_c_2012_rule_10_3_violation: Implicit conversion of "keyEventIdx != idx" from essential type "boolean" to different or narrower essential type "signed 32-bit int".
#  778|       const unsigned keyEventIdx = pDef->keyEventIdx;
#  779|       for (unsigned idx = 0U; idx < evtCount; ++idx)
#  780|->         evtList[idx].verbosityLevel = (keyEventIdx != idx);
#  781|   
#  782|       // apply final transformations

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:780: misra_c_2012_rule_15_6_violation: The body of the "for" loop is not a compound statement.
#  778|       const unsigned keyEventIdx = pDef->keyEventIdx;
#  779|       for (unsigned idx = 0U; idx < evtCount; ++idx)
#  780|->         evtList[idx].verbosityLevel = (keyEventIdx != idx);
#  781|   
#  782|       // apply final transformations

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:780: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "keyEventIdx != idx" with underlying type "bool" is implicitly converted to a different underlying type "32-bit signed int".
#  778|       const unsigned keyEventIdx = pDef->keyEventIdx;
#  779|       for (unsigned idx = 0U; idx < evtCount; ++idx)
#  780|->         evtList[idx].verbosityLevel = (keyEventIdx != idx);
#  781|   
#  782|       // apply final transformations

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:780: misra_cpp_2008_rule_6_3_1_violation: The body of the "for" loop is not a compound statement.
#  778|       const unsigned keyEventIdx = pDef->keyEventIdx;
#  779|       for (unsigned idx = 0U; idx < evtCount; ++idx)
#  780|->         evtList[idx].verbosityLevel = (keyEventIdx != idx);
#  781|   
#  782|       // apply final transformations

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.cc:788: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  786|   }
#  787|   
#  788|-> bool GccParser::hasError() const
#  789|   {
#  790|       return d->core.hasError();

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2013 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:25: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "GccParser".
#   23|   #include "abstract-parser.hh"
#   24|   
#   25|-> class GccParser: public AbstractParser {
#   26|       public:
#   27|           GccParser(InStream &input);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:29: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   27|           GccParser(InStream &input);
#   28|   
#   29|->         virtual ~GccParser();
#   30|           bool getNext(Defect *);
#   31|           bool hasError() const;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:30: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   28|   
#   29|           virtual ~GccParser();
#   30|->         bool getNext(Defect *);
#   31|           bool hasError() const;
#   32|   

Error: MISRA C++-2008 Rule 10-3-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:30: misra_cpp_2008_rule_10_3_2_violation: Virtual function "GccParser::getNext(Defect *)" is not explicitly declared 'virtual'.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:42: misra_implicitly_virtual_because: function "GccParser::getNext(Defect *)" overrides virtual function "AbstractParser::getNext(Defect *)" declared at line 42 of "../../src/abstract-parser.hh".
#   28|   
#   29|           virtual ~GccParser();
#   30|->         bool getNext(Defect *);
#   31|           bool hasError() const;
#   32|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:31: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   29|           virtual ~GccParser();
#   30|           bool getNext(Defect *);
#   31|->         bool hasError() const;
#   32|   
#   33|       private:

Error: MISRA C++-2008 Rule 10-3-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:31: misra_cpp_2008_rule_10_3_2_violation: Virtual function "GccParser::hasError() const" is not explicitly declared 'virtual'.
csdiff-2.1.1.20210615.144928.g9c9686f/src/abstract-parser.hh:43: misra_implicitly_virtual_because: function "GccParser::hasError() const" overrides virtual function "AbstractParser::hasError() const" declared at line 43 of "../../src/abstract-parser.hh".
#   29|           virtual ~GccParser();
#   30|           bool getNext(Defect *);
#   31|->         bool hasError() const;
#   32|   
#   33|       private:

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:34: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   32|   
#   33|       private:
#   34|->         GccParser(const Parser &);
#   35|           GccParser& operator=(const Parser &);
#   36|   

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:34: misra_c_2012_rule_8_6_violation: Function "GccParser" is declared but never defined.
#   32|   
#   33|       private:
#   34|->         GccParser(const Parser &);
#   35|           GccParser& operator=(const Parser &);
#   36|   

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:34: misra_cpp_2008_rule_3_2_2_violation: Function "GccParser" is declared but never defined.
#   32|   
#   33|       private:
#   34|->         GccParser(const Parser &);
#   35|           GccParser& operator=(const Parser &);
#   36|   

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:34: misra_cpp_2008_rule_3_2_4_violation: Function "GccParser" is declared but never defined.
#   32|   
#   33|       private:
#   34|->         GccParser(const Parser &);
#   35|           GccParser& operator=(const Parser &);
#   36|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:35: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   33|       private:
#   34|           GccParser(const Parser &);
#   35|->         GccParser& operator=(const Parser &);
#   36|   
#   37|           struct Private;

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:35: misra_c_2012_rule_8_6_violation: Function "operator =" is declared but never defined.
#   33|       private:
#   34|           GccParser(const Parser &);
#   35|->         GccParser& operator=(const Parser &);
#   36|   
#   37|           struct Private;

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:35: misra_cpp_2008_rule_3_2_2_violation: Function "operator =" is declared but never defined.
#   33|       private:
#   34|           GccParser(const Parser &);
#   35|->         GccParser& operator=(const Parser &);
#   36|   
#   37|           struct Private;

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:35: misra_cpp_2008_rule_3_2_4_violation: Function "operator =" is declared but never defined.
#   33|       private:
#   34|           GccParser(const Parser &);
#   35|->         GccParser& operator=(const Parser &);
#   36|   
#   37|           struct Private;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:41: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "GccPostProcessor".
#   39|   };
#   40|   
#   41|-> class GccPostProcessor {
#   42|       public:
#   43|           GccPostProcessor();

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:43: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   41|   class GccPostProcessor {
#   42|       public:
#   43|->         GccPostProcessor();
#   44|           ~GccPostProcessor();
#   45|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:44: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   42|       public:
#   43|           GccPostProcessor();
#   44|->         ~GccPostProcessor();
#   45|   
#   46|           /// apply final transformations on a successfully parsed defect

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:50: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   48|   
#   49|       private:
#   50|->         GccPostProcessor(const GccPostProcessor &);
#   51|           GccPostProcessor& operator=(const GccPostProcessor &);
#   52|   

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:50: misra_c_2012_rule_8_6_violation: Function "GccPostProcessor" is declared but never defined.
#   48|   
#   49|       private:
#   50|->         GccPostProcessor(const GccPostProcessor &);
#   51|           GccPostProcessor& operator=(const GccPostProcessor &);
#   52|   

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:50: misra_cpp_2008_rule_3_2_2_violation: Function "GccPostProcessor" is declared but never defined.
#   48|   
#   49|       private:
#   50|->         GccPostProcessor(const GccPostProcessor &);
#   51|           GccPostProcessor& operator=(const GccPostProcessor &);
#   52|   

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:50: misra_cpp_2008_rule_3_2_4_violation: Function "GccPostProcessor" is declared but never defined.
#   48|   
#   49|       private:
#   50|->         GccPostProcessor(const GccPostProcessor &);
#   51|           GccPostProcessor& operator=(const GccPostProcessor &);
#   52|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:51: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   49|       private:
#   50|           GccPostProcessor(const GccPostProcessor &);
#   51|->         GccPostProcessor& operator=(const GccPostProcessor &);
#   52|   
#   53|           struct Private;

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:51: misra_c_2012_rule_8_6_violation: Function "operator =" is declared but never defined.
#   49|       private:
#   50|           GccPostProcessor(const GccPostProcessor &);
#   51|->         GccPostProcessor& operator=(const GccPostProcessor &);
#   52|   
#   53|           struct Private;

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:51: misra_cpp_2008_rule_3_2_2_violation: Function "operator =" is declared but never defined.
#   49|       private:
#   50|           GccPostProcessor(const GccPostProcessor &);
#   51|->         GccPostProcessor& operator=(const GccPostProcessor &);
#   52|   
#   53|           struct Private;

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/gcc-parser.hh:51: misra_cpp_2008_rule_3_2_4_violation: Function "operator =" is declared but never defined.
#   49|       private:
#   50|           GccPostProcessor(const GccPostProcessor &);
#   51|->         GccPostProcessor& operator=(const GccPostProcessor &);
#   52|   
#   53|           struct Private;

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2012 Red Hat, Inc.
#    3|    *

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:30: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   28|   #include <boost/lexical_cast.hpp>
#   29|   
#   30|-> static int parsingRatioThr = 95;
#   31|   static int parsingOldToNewRatioThr = 75;
#   32|   

Error: MISRA C-2012 Rule 8.9 (CWE-1126):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:30: misra_c_2012_rule_8_9_violation: Symbol "parsingRatioThr" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:122: single_use: Symbol "parsingRatioThr" is only used in "writeParseWarnings(std::ostream &, TScanProps const &)".
#   28|   #include <boost/lexical_cast.hpp>
#   29|   
#   30|-> static int parsingRatioThr = 95;
#   31|   static int parsingOldToNewRatioThr = 75;
#   32|   

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:30: misra_cpp_2008_rule_3_4_1_violation: Symbol "parsingRatioThr" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:122: single_use: Symbol "parsingRatioThr" is only used in "writeParseWarnings(std::ostream &, TScanProps const &)".
#   28|   #include <boost/lexical_cast.hpp>
#   29|   
#   30|-> static int parsingRatioThr = 95;
#   31|   static int parsingOldToNewRatioThr = 75;
#   32|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:30: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   28|   #include <boost/lexical_cast.hpp>
#   29|   
#   30|-> static int parsingRatioThr = 95;
#   31|   static int parsingOldToNewRatioThr = 75;
#   32|   

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:30: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "parsingRatioThr".
#   28|   #include <boost/lexical_cast.hpp>
#   29|   
#   30|-> static int parsingRatioThr = 95;
#   31|   static int parsingOldToNewRatioThr = 75;
#   32|   

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:31: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   29|   
#   30|   static int parsingRatioThr = 95;
#   31|-> static int parsingOldToNewRatioThr = 75;
#   32|   
#   33|   namespace HtmlLib {

Error: MISRA C-2012 Rule 8.9 (CWE-1126):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:31: misra_c_2012_rule_8_9_violation: Symbol "parsingOldToNewRatioThr" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:122: single_use: Symbol "parsingOldToNewRatioThr" is only used in "writeParseWarnings(std::ostream &, TScanProps const &)".
#   29|   
#   30|   static int parsingRatioThr = 95;
#   31|-> static int parsingOldToNewRatioThr = 75;
#   32|   
#   33|   namespace HtmlLib {

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:31: misra_cpp_2008_rule_3_4_1_violation: Symbol "parsingOldToNewRatioThr" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:122: single_use: Symbol "parsingOldToNewRatioThr" is only used in "writeParseWarnings(std::ostream &, TScanProps const &)".
#   29|   
#   30|   static int parsingRatioThr = 95;
#   31|-> static int parsingOldToNewRatioThr = 75;
#   32|   
#   33|   namespace HtmlLib {

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:31: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   29|   
#   30|   static int parsingRatioThr = 95;
#   31|-> static int parsingOldToNewRatioThr = 75;
#   32|   
#   33|   namespace HtmlLib {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:31: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "parsingOldToNewRatioThr".
#   29|   
#   30|   static int parsingRatioThr = 95;
#   31|-> static int parsingOldToNewRatioThr = 75;
#   32|   
#   33|   namespace HtmlLib {

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:35: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   33|   namespace HtmlLib {
#   34|   
#   35|->     void escapeText(std::string &text) {
#   36|           using namespace boost::algorithm;
#   37|   

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:35: misra_c_2012_rule_8_7_violation: Function "escapeText" has external linkage but is only used in one translation unit.
#   33|   namespace HtmlLib {
#   34|   
#   35|->     void escapeText(std::string &text) {
#   36|           using namespace boost::algorithm;
#   37|   

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:35: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   33|   namespace HtmlLib {
#   34|   
#   35|->     void escapeText(std::string &text) {
#   36|           using namespace boost::algorithm;
#   37|   

Error: MISRA C++-2008 Rule 7-3-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:36: misra_cpp_2008_rule_7_3_4_violation: Using a using-directive for namespace "boost::algorithm".
#   34|   
#   35|       void escapeText(std::string &text) {
#   36|->         using namespace boost::algorithm;
#   37|   
#   38|           replace_all(text,  "&", "&amp;" );

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:45: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   43|       }
#   44|   
#   45|->     std::string escapeTextInline(std::string text) {
#   46|           escapeText(text);
#   47|           return text;

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:45: misra_c_2012_rule_8_7_violation: Function "escapeTextInline" has external linkage but is only used in one translation unit.
#   43|       }
#   44|   
#   45|->     std::string escapeTextInline(std::string text) {
#   46|           escapeText(text);
#   47|           return text;

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:45: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   43|       }
#   44|   
#   45|->     std::string escapeTextInline(std::string text) {
#   46|           escapeText(text);
#   47|           return text;

Error: MISRA C-2012 Rule 17.8 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:45: param_declaration: Declaration of parameter "text".
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:46: misra_c_2012_rule_17_8_violation: Modifying parameter "text" in call to "escapeText".
#   44|   
#   45|       std::string escapeTextInline(std::string text) {
#   46|->         escapeText(text);
#   47|           return text;
#   48|       }

Error: MISRA C-2012 Rule 17.8 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:45: param_declaration: Declaration of parameter "text".
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:47: misra_c_2012_rule_17_8_violation: Modifying parameter "text" in call to "basic_string".
#   45|       std::string escapeTextInline(std::string text) {
#   46|           escapeText(text);
#   47|->         return text;
#   48|       }
#   49|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:50: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   48|       }
#   49|   
#   50|->     void initHtml(std::ostream &str, std::string title) {
#   51|           escapeText(title);
#   52|   

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:50: misra_c_2012_rule_8_7_violation: Function "initHtml" has external linkage but is only used in one translation unit.
#   48|       }
#   49|   
#   50|->     void initHtml(std::ostream &str, std::string title) {
#   51|           escapeText(title);
#   52|   

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:50: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   48|       }
#   49|   
#   50|->     void initHtml(std::ostream &str, std::string title) {
#   51|           escapeText(title);
#   52|   

Error: MISRA C-2012 Rule 17.8 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:50: param_declaration: Declaration of parameter "title".
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:51: misra_c_2012_rule_17_8_violation: Modifying parameter "title" in call to "escapeText".
#   49|   
#   50|       void initHtml(std::ostream &str, std::string title) {
#   51|->         escapeText(title);
#   52|   
#   53|           str << "<?xml version='1.0' encoding='utf-8'?>\n\

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:53: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   51|           escapeText(title);
#   52|   
#   53|->         str << "<?xml version='1.0' encoding='utf-8'?>\n\
#   54|   <!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.1//EN' \
#   55|   'http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd'>\n\

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:61: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   59|       }
#   60|   
#   61|->     void writeLink(
#   62|               std::ostream           &str,
#   63|               const std::string      &url,

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:61: misra_c_2012_rule_8_7_violation: Function "writeLink" has external linkage but is only used in one translation unit.
#   59|       }
#   60|   
#   61|->     void writeLink(
#   62|               std::ostream           &str,
#   63|               const std::string      &url,

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:61: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   59|       }
#   60|   
#   61|->     void writeLink(
#   62|               std::ostream           &str,
#   63|               const std::string      &url,

Error: MISRA C-2012 Rule 5.9 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:64: misra_c_2012_rule_5_9_violation: Identifier "name" is already used to represent an object with internal linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:452: internal_linkage_symbol: Declaring an internal linkage object with identifier "name".
#   62|               std::ostream           &str,
#   63|               const std::string      &url,
#   64|->             const std::string      &name)
#   65|       {
#   66|           str << "<a href='" << url << "'>" << name << "</a>\n";

Error: MISRA C++-2008 Rule 2-10-5 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:64: misra_cpp_2008_rule_2_10_5_violation: Identifier "name" is already used to represent an object with static storage duration.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:452: static_storage_symbol: Declaring a static storage duration object with identifier "name".
#   62|               std::ostream           &str,
#   63|               const std::string      &url,
#   64|->             const std::string      &name)
#   65|       {
#   66|           str << "<a href='" << url << "'>" << name << "</a>\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:66: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   64|               const std::string      &name)
#   65|       {
#   66|->         str << "<a href='" << url << "'>" << name << "</a>\n";
#   67|       }
#   68|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:69: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   67|       }
#   68|   
#   69|->     void finalizeHtml(std::ostream &str) {
#   70|           str << "</body>\n</html>\n";
#   71|       }

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:69: misra_c_2012_rule_8_7_violation: Function "finalizeHtml" has external linkage but is only used in one translation unit.
#   67|       }
#   68|   
#   69|->     void finalizeHtml(std::ostream &str) {
#   70|           str << "</body>\n</html>\n";
#   71|       }

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:69: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   67|       }
#   68|   
#   69|->     void finalizeHtml(std::ostream &str) {
#   70|           str << "</body>\n</html>\n";
#   71|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:70: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   68|   
#   69|       void finalizeHtml(std::ostream &str) {
#   70|->         str << "</body>\n</html>\n";
#   71|       }
#   72|   

Error: MISRA C-2012 Rule 5.9 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:73: misra_c_2012_rule_5_9_violation: Identifier "name" is already used to represent an object with internal linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:452: internal_linkage_symbol: Declaring an internal linkage object with identifier "name".
#   71|       }
#   72|   
#   73|->     void initSection(std::ostream &str, std::string name) {
#   74|           escapeText(name);
#   75|           str << "<h2>" << name << "</h2>\n";

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:73: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   71|       }
#   72|   
#   73|->     void initSection(std::ostream &str, std::string name) {
#   74|           escapeText(name);
#   75|           str << "<h2>" << name << "</h2>\n";

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:73: misra_c_2012_rule_8_7_violation: Function "initSection" has external linkage but is only used in one translation unit.
#   71|       }
#   72|   
#   73|->     void initSection(std::ostream &str, std::string name) {
#   74|           escapeText(name);
#   75|           str << "<h2>" << name << "</h2>\n";

Error: MISRA C++-2008 Rule 2-10-5 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:73: misra_cpp_2008_rule_2_10_5_violation: Identifier "name" is already used to represent an object with static storage duration.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:452: static_storage_symbol: Declaring a static storage duration object with identifier "name".
#   71|       }
#   72|   
#   73|->     void initSection(std::ostream &str, std::string name) {
#   74|           escapeText(name);
#   75|           str << "<h2>" << name << "</h2>\n";

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:73: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   71|       }
#   72|   
#   73|->     void initSection(std::ostream &str, std::string name) {
#   74|           escapeText(name);
#   75|           str << "<h2>" << name << "</h2>\n";

Error: MISRA C-2012 Rule 17.8 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:73: param_declaration: Declaration of parameter "name".
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:74: misra_c_2012_rule_17_8_violation: Modifying parameter "name" in call to "escapeText".
#   72|   
#   73|       void initSection(std::ostream &str, std::string name) {
#   74|->         escapeText(name);
#   75|           str << "<h2>" << name << "</h2>\n";
#   76|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:75: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   73|       void initSection(std::ostream &str, std::string name) {
#   74|           escapeText(name);
#   75|->         str << "<h2>" << name << "</h2>\n";
#   76|       }
#   77|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:78: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   76|       }
#   77|   
#   78|->     void initPre(std::ostream &str) {
#   79|           str << "<pre style='white-space: pre-wrap;'>\n";
#   80|       }

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:78: misra_c_2012_rule_8_7_violation: Function "initPre" has external linkage but is only used in one translation unit.
#   76|       }
#   77|   
#   78|->     void initPre(std::ostream &str) {
#   79|           str << "<pre style='white-space: pre-wrap;'>\n";
#   80|       }

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:78: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   76|       }
#   77|   
#   78|->     void initPre(std::ostream &str) {
#   79|           str << "<pre style='white-space: pre-wrap;'>\n";
#   80|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:79: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   77|   
#   78|       void initPre(std::ostream &str) {
#   79|->         str << "<pre style='white-space: pre-wrap;'>\n";
#   80|       }
#   81|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:82: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   80|       }
#   81|   
#   82|->     void finalizePre(std::ostream &str) {
#   83|           str << "</pre>\n";
#   84|       }

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:82: misra_c_2012_rule_8_7_violation: Function "finalizePre" has external linkage but is only used in one translation unit.
#   80|       }
#   81|   
#   82|->     void finalizePre(std::ostream &str) {
#   83|           str << "</pre>\n";
#   84|       }

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:82: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   80|       }
#   81|   
#   82|->     void finalizePre(std::ostream &str) {
#   83|           str << "</pre>\n";
#   84|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:83: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   81|   
#   82|       void finalizePre(std::ostream &str) {
#   83|->         str << "</pre>\n";
#   84|       }
#   85|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:88: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   86|   } // namespace HtmlLib
#   87|   
#   88|-> std::string digTitle(const TScanProps &props) {
#   89|       const TScanProps::const_iterator NA = props.end();
#   90|       TScanProps::const_iterator it = props.find("title");

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:88: misra_c_2012_rule_8_7_violation: Function "digTitle" has external linkage but is only used in one translation unit.
#   86|   } // namespace HtmlLib
#   87|   
#   88|-> std::string digTitle(const TScanProps &props) {
#   89|       const TScanProps::const_iterator NA = props.end();
#   90|       TScanProps::const_iterator it = props.find("title");

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:88: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   86|   } // namespace HtmlLib
#   87|   
#   88|-> std::string digTitle(const TScanProps &props) {
#   89|       const TScanProps::const_iterator NA = props.end();
#   90|       TScanProps::const_iterator it = props.find("title");

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:88: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "digTitle".
#   86|   } // namespace HtmlLib
#   87|   
#   88|-> std::string digTitle(const TScanProps &props) {
#   89|       const TScanProps::const_iterator NA = props.end();
#   90|       TScanProps::const_iterator it = props.find("title");

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:92: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   90|       TScanProps::const_iterator it = props.find("title");
#   91|       if (NA != it)
#   92|->         return it->second;
#   93|   
#   94|       std::string title;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:92: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   90|       TScanProps::const_iterator it = props.find("title");
#   91|       if (NA != it)
#   92|->         return it->second;
#   93|   
#   94|       std::string title;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:92: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   90|       TScanProps::const_iterator it = props.find("title");
#   91|       if (NA != it)
#   92|->         return it->second;
#   93|   
#   94|       std::string title;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:92: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   90|       TScanProps::const_iterator it = props.find("title");
#   91|       if (NA != it)
#   92|->         return it->second;
#   93|   
#   94|       std::string title;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:99: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   97|           it = props.find("tool-args");
#   98|           if (props.end() == it)
#   99|->             return "";
#  100|   
#  101|           const std::string &args = it->second;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:99: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   97|           it = props.find("tool-args");
#   98|           if (props.end() == it)
#   99|->             return "";
#  100|   
#  101|           const std::string &args = it->second;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:99: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   97|           it = props.find("tool-args");
#   98|           if (props.end() == it)
#   99|->             return "";
#  100|   
#  101|           const std::string &args = it->second;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:99: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   97|           it = props.find("tool-args");
#   98|           if (props.end() == it)
#   99|->             return "";
#  100|   
#  101|           const std::string &args = it->second;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:106: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  104|           boost::smatch sm;
#  105|           if (!boost::regex_match(args, sm, reSrpm))
#  106|->             return "";
#  107|   
#  108|           title = sm[/* NVR */ 1];

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:106: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  104|           boost::smatch sm;
#  105|           if (!boost::regex_match(args, sm, reSrpm))
#  106|->             return "";
#  107|   
#  108|           title = sm[/* NVR */ 1];

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:106: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  104|           boost::smatch sm;
#  105|           if (!boost::regex_match(args, sm, reSrpm))
#  106|->             return "";
#  107|   
#  108|           title = sm[/* NVR */ 1];

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:106: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  104|           boost::smatch sm;
#  105|           if (!boost::regex_match(args, sm, reSrpm))
#  106|->             return "";
#  107|   
#  108|           title = sm[/* NVR */ 1];

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:108: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  106|               return "";
#  107|   
#  108|->         title = sm[/* NVR */ 1];
#  109|       }
#  110|       else

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:111: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  109|       }
#  110|       else
#  111|->         title = it->second;
#  112|   
#  113|       it = props.find("diffbase-project-name");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:111: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  109|       }
#  110|       else
#  111|->         title = it->second;
#  112|   
#  113|       it = props.find("diffbase-project-name");

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:111: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  109|       }
#  110|       else
#  111|->         title = it->second;
#  112|   
#  113|       it = props.find("diffbase-project-name");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:115: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  113|       it = props.find("diffbase-project-name");
#  114|       if (NA != it) {
#  115|->         title += " - defects not occurring in ";
#  116|           title += it->second;
#  117|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:116: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  114|       if (NA != it) {
#  115|           title += " - defects not occurring in ";
#  116|->         title += it->second;
#  117|       }
#  118|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:122: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  120|   }
#  121|   
#  122|-> void writeParseWarnings(std::ostream &str, const TScanProps &props) {
#  123|       TScanProps::const_iterator itCount, itRatio;
#  124|       itCount = props.find("cov-compilation-unit-count");

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:122: misra_c_2012_rule_8_7_violation: Function "writeParseWarnings" has external linkage but is only used in one translation unit.
#  120|   }
#  121|   
#  122|-> void writeParseWarnings(std::ostream &str, const TScanProps &props) {
#  123|       TScanProps::const_iterator itCount, itRatio;
#  124|       itCount = props.find("cov-compilation-unit-count");

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:122: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  120|   }
#  121|   
#  122|-> void writeParseWarnings(std::ostream &str, const TScanProps &props) {
#  123|       TScanProps::const_iterator itCount, itRatio;
#  124|       itCount = props.find("cov-compilation-unit-count");

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:122: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "writeParseWarnings".
#  120|   }
#  121|   
#  122|-> void writeParseWarnings(std::ostream &str, const TScanProps &props) {
#  123|       TScanProps::const_iterator itCount, itRatio;
#  124|       itCount = props.find("cov-compilation-unit-count");

Error: MISRA C++-2008 Rule 8-0-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:123: misra_cpp_2008_rule_8_0_1_violation: Declarator list has more than one declarator.
#  121|   
#  122|   void writeParseWarnings(std::ostream &str, const TScanProps &props) {
#  123|->     TScanProps::const_iterator itCount, itRatio;
#  124|       itCount = props.find("cov-compilation-unit-count");
#  125|       itRatio = props.find("cov-compilation-unit-ratio");

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:126: misra_cpp_2008_rule_5_0_2_violation: "std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::const_iterator(props->end()) == itCount" should be parenthesized.
#  124|       itCount = props.find("cov-compilation-unit-count");
#  125|       itRatio = props.find("cov-compilation-unit-ratio");
#  126|->     if (props.end() == itCount || props.end() == itRatio) {
#  127|           // fallback to deprecated format produced by cov-mockbuild
#  128|           itCount = props.find("compilation-unit-count");

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:126: misra_cpp_2008_rule_5_0_2_violation: "std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::const_iterator(props->end()) == itRatio" should be parenthesized.
#  124|       itCount = props.find("cov-compilation-unit-count");
#  125|       itRatio = props.find("cov-compilation-unit-ratio");
#  126|->     if (props.end() == itCount || props.end() == itRatio) {
#  127|           // fallback to deprecated format produced by cov-mockbuild
#  128|           itCount = props.find("compilation-unit-count");

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:129: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "itRatio" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:132: end_of_scope: Reached end of scope without using value stored in "itRatio".
#  127|           // fallback to deprecated format produced by cov-mockbuild
#  128|           itCount = props.find("compilation-unit-count");
#  129|->         itRatio = props.find("compilation-unit-ratio");
#  130|       }
#  131|       if (props.end() == itCount || props.end() == itRatio)

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:131: misra_cpp_2008_rule_5_0_2_violation: "std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::const_iterator(props->end()) == itCount" should be parenthesized.
#  129|           itRatio = props.find("compilation-unit-ratio");
#  130|       }
#  131|->     if (props.end() == itCount || props.end() == itRatio)
#  132|           return;
#  133|   

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:131: misra_cpp_2008_rule_5_0_2_violation: "std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::const_iterator(props->end()) == itRatio" should be parenthesized.
#  129|           itRatio = props.find("compilation-unit-ratio");
#  130|       }
#  131|->     if (props.end() == itCount || props.end() == itRatio)
#  132|           return;
#  133|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:132: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  130|       }
#  131|       if (props.end() == itCount || props.end() == itRatio)
#  132|->         return;
#  133|   
#  134|       try {

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:132: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  130|       }
#  131|       if (props.end() == itCount || props.end() == itRatio)
#  132|->         return;
#  133|   
#  134|       try {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:132: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  130|       }
#  131|       if (props.end() == itCount || props.end() == itRatio)
#  132|->         return;
#  133|   
#  134|       try {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:132: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  130|       }
#  131|       if (props.end() == itCount || props.end() == itRatio)
#  132|->         return;
#  133|   
#  134|       try {

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:135: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  133|   
#  134|       try {
#  135|->         const int count = boost::lexical_cast<int>(itCount->second);
#  136|           const int ratio = boost::lexical_cast<float>(itRatio->second);
#  137|           if (ratio < parsingRatioThr)

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:135: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "count" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:149: end_of_scope: Reached end of scope without using value stored in "count".
#  133|   
#  134|       try {
#  135|->         const int count = boost::lexical_cast<int>(itCount->second);
#  136|           const int ratio = boost::lexical_cast<float>(itRatio->second);
#  137|           if (ratio < parsingRatioThr)

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:135: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  133|   
#  134|       try {
#  135|->         const int count = boost::lexical_cast<int>(itCount->second);
#  136|           const int ratio = boost::lexical_cast<float>(itRatio->second);
#  137|           if (ratio < parsingRatioThr)

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:136: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  134|       try {
#  135|           const int count = boost::lexical_cast<int>(itCount->second);
#  136|->         const int ratio = boost::lexical_cast<float>(itRatio->second);
#  137|           if (ratio < parsingRatioThr)
#  138|               str << "<p><b style='color: #FF0000;'>warning:</b> "

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:136: misra_c_2012_rule_10_3_violation: Implicit conversion of "boost::lexical_cast(itRatio->second)" from essential type "32-bit float" to different or narrower essential type "signed 32-bit int".
#  134|       try {
#  135|           const int count = boost::lexical_cast<int>(itCount->second);
#  136|->         const int ratio = boost::lexical_cast<float>(itRatio->second);
#  137|           if (ratio < parsingRatioThr)
#  138|               str << "<p><b style='color: #FF0000;'>warning:</b> "

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:136: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  134|       try {
#  135|           const int count = boost::lexical_cast<int>(itCount->second);
#  136|->         const int ratio = boost::lexical_cast<float>(itRatio->second);
#  137|           if (ratio < parsingRatioThr)
#  138|               str << "<p><b style='color: #FF0000;'>warning:</b> "

Error: MISRA C++-2008 Rule 5-0-5 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:136: misra_cpp_2008_rule_5_0_5_violation: "boost::lexical_cast(itRatio->second)" is implicitly converted from a floating value to an integral value.
#  134|       try {
#  135|           const int count = boost::lexical_cast<int>(itCount->second);
#  136|->         const int ratio = boost::lexical_cast<float>(itRatio->second);
#  137|           if (ratio < parsingRatioThr)
#  138|               str << "<p><b style='color: #FF0000;'>warning:</b> "

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:138: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  136|           const int ratio = boost::lexical_cast<float>(itRatio->second);
#  137|           if (ratio < parsingRatioThr)
#  138|->             str << "<p><b style='color: #FF0000;'>warning:</b> "
#  139|                   "low parsing ratio: " << ratio << "%</p>\n";
#  140|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:138: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  136|           const int ratio = boost::lexical_cast<float>(itRatio->second);
#  137|           if (ratio < parsingRatioThr)
#  138|->             str << "<p><b style='color: #FF0000;'>warning:</b> "
#  139|                   "low parsing ratio: " << ratio << "%</p>\n";
#  140|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:138: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  136|           const int ratio = boost::lexical_cast<float>(itRatio->second);
#  137|           if (ratio < parsingRatioThr)
#  138|->             str << "<p><b style='color: #FF0000;'>warning:</b> "
#  139|                   "low parsing ratio: " << ratio << "%</p>\n";
#  140|   

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:143: misra_cpp_2008_rule_5_0_2_violation: "std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::const_iterator(props->end()) == itCount" should be parenthesized.
#  141|           itCount = props.find("diffbase-cov-compilation-unit-count");
#  142|           itRatio = props.find("diffbase-cov-compilation-unit-ratio");
#  143|->         if (props.end() == itCount || props.end() == itRatio) {
#  144|               // fallback to deprecated format produced by cov-mockbuild
#  145|               itCount = props.find("diffbase-compilation-unit-count");

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:143: misra_cpp_2008_rule_5_0_2_violation: "std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::const_iterator(props->end()) == itRatio" should be parenthesized.
#  141|           itCount = props.find("diffbase-cov-compilation-unit-count");
#  142|           itRatio = props.find("diffbase-cov-compilation-unit-ratio");
#  143|->         if (props.end() == itCount || props.end() == itRatio) {
#  144|               // fallback to deprecated format produced by cov-mockbuild
#  145|               itCount = props.find("diffbase-compilation-unit-count");

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:136: most_recent_use: Last time a value stored in "itRatio" was used.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:146: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "itRatio" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:149: end_of_scope: Reached end of scope without using value stored in "itRatio".
#  144|               // fallback to deprecated format produced by cov-mockbuild
#  145|               itCount = props.find("diffbase-compilation-unit-count");
#  146|->             itRatio = props.find("diffbase-compilation-unit-ratio");
#  147|           }
#  148|           if (props.end() == itCount || props.end() == itRatio)

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:148: misra_cpp_2008_rule_5_0_2_violation: "std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::const_iterator(props->end()) == itCount" should be parenthesized.
#  146|               itRatio = props.find("diffbase-compilation-unit-ratio");
#  147|           }
#  148|->         if (props.end() == itCount || props.end() == itRatio)
#  149|               return;
#  150|   

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:148: misra_cpp_2008_rule_5_0_2_violation: "std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::const_iterator(props->end()) == itRatio" should be parenthesized.
#  146|               itRatio = props.find("diffbase-compilation-unit-ratio");
#  147|           }
#  148|->         if (props.end() == itCount || props.end() == itRatio)
#  149|               return;
#  150|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:149: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  147|           }
#  148|           if (props.end() == itCount || props.end() == itRatio)
#  149|->             return;
#  150|   
#  151|           const int baseCount = boost::lexical_cast<int>(itCount->second);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:149: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  147|           }
#  148|           if (props.end() == itCount || props.end() == itRatio)
#  149|->             return;
#  150|   
#  151|           const int baseCount = boost::lexical_cast<int>(itCount->second);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:149: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  147|           }
#  148|           if (props.end() == itCount || props.end() == itRatio)
#  149|->             return;
#  150|   
#  151|           const int baseCount = boost::lexical_cast<int>(itCount->second);

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:149: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  147|           }
#  148|           if (props.end() == itCount || props.end() == itRatio)
#  149|->             return;
#  150|   
#  151|           const int baseCount = boost::lexical_cast<int>(itCount->second);

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:151: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  149|               return;
#  150|   
#  151|->         const int baseCount = boost::lexical_cast<int>(itCount->second);
#  152|           const int baseRatio = boost::lexical_cast<float>(itRatio->second);
#  153|           if (baseRatio < parsingRatioThr && baseRatio < ratio)

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:151: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  149|               return;
#  150|   
#  151|->         const int baseCount = boost::lexical_cast<int>(itCount->second);
#  152|           const int baseRatio = boost::lexical_cast<float>(itRatio->second);
#  153|           if (baseRatio < parsingRatioThr && baseRatio < ratio)

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:152: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  150|   
#  151|           const int baseCount = boost::lexical_cast<int>(itCount->second);
#  152|->         const int baseRatio = boost::lexical_cast<float>(itRatio->second);
#  153|           if (baseRatio < parsingRatioThr && baseRatio < ratio)
#  154|               str << "<p><b style='color: #FF0000;'>warning:</b> "

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:152: misra_c_2012_rule_10_3_violation: Implicit conversion of "boost::lexical_cast(itRatio->second)" from essential type "32-bit float" to different or narrower essential type "signed 32-bit int".
#  150|   
#  151|           const int baseCount = boost::lexical_cast<int>(itCount->second);
#  152|->         const int baseRatio = boost::lexical_cast<float>(itRatio->second);
#  153|           if (baseRatio < parsingRatioThr && baseRatio < ratio)
#  154|               str << "<p><b style='color: #FF0000;'>warning:</b> "

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:152: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  150|   
#  151|           const int baseCount = boost::lexical_cast<int>(itCount->second);
#  152|->         const int baseRatio = boost::lexical_cast<float>(itRatio->second);
#  153|           if (baseRatio < parsingRatioThr && baseRatio < ratio)
#  154|               str << "<p><b style='color: #FF0000;'>warning:</b> "

Error: MISRA C++-2008 Rule 5-0-5 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:152: misra_cpp_2008_rule_5_0_5_violation: "boost::lexical_cast(itRatio->second)" is implicitly converted from a floating value to an integral value.
#  150|   
#  151|           const int baseCount = boost::lexical_cast<int>(itCount->second);
#  152|->         const int baseRatio = boost::lexical_cast<float>(itRatio->second);
#  153|           if (baseRatio < parsingRatioThr && baseRatio < ratio)
#  154|               str << "<p><b style='color: #FF0000;'>warning:</b> "

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:153: misra_c_2012_rule_12_1_violation: Missing explicit parentheses on sub-expression: "baseRatio < ratio".
#  151|           const int baseCount = boost::lexical_cast<int>(itCount->second);
#  152|           const int baseRatio = boost::lexical_cast<float>(itRatio->second);
#  153|->         if (baseRatio < parsingRatioThr && baseRatio < ratio)
#  154|               str << "<p><b style='color: #FF0000;'>warning:</b> "
#  155|                   "low parsing ratio in diff base: "

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:153: misra_cpp_2008_rule_5_0_2_violation: "baseRatio < parsingRatioThr" should be parenthesized.
#  151|           const int baseCount = boost::lexical_cast<int>(itCount->second);
#  152|           const int baseRatio = boost::lexical_cast<float>(itRatio->second);
#  153|->         if (baseRatio < parsingRatioThr && baseRatio < ratio)
#  154|               str << "<p><b style='color: #FF0000;'>warning:</b> "
#  155|                   "low parsing ratio in diff base: "

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:153: misra_cpp_2008_rule_5_0_2_violation: "baseRatio < ratio" should be parenthesized.
#  151|           const int baseCount = boost::lexical_cast<int>(itCount->second);
#  152|           const int baseRatio = boost::lexical_cast<float>(itRatio->second);
#  153|->         if (baseRatio < parsingRatioThr && baseRatio < ratio)
#  154|               str << "<p><b style='color: #FF0000;'>warning:</b> "
#  155|                   "low parsing ratio in diff base: "

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:153: misra_cpp_2008_rule_5_2_1_violation: Operand "baseRatio < parsingRatioThr" is not a postfix expression.
#  151|           const int baseCount = boost::lexical_cast<int>(itCount->second);
#  152|           const int baseRatio = boost::lexical_cast<float>(itRatio->second);
#  153|->         if (baseRatio < parsingRatioThr && baseRatio < ratio)
#  154|               str << "<p><b style='color: #FF0000;'>warning:</b> "
#  155|                   "low parsing ratio in diff base: "

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:153: misra_cpp_2008_rule_5_2_1_violation: Operand "baseRatio < ratio" is not a postfix expression.
#  151|           const int baseCount = boost::lexical_cast<int>(itCount->second);
#  152|           const int baseRatio = boost::lexical_cast<float>(itRatio->second);
#  153|->         if (baseRatio < parsingRatioThr && baseRatio < ratio)
#  154|               str << "<p><b style='color: #FF0000;'>warning:</b> "
#  155|                   "low parsing ratio in diff base: "

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:154: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  152|           const int baseRatio = boost::lexical_cast<float>(itRatio->second);
#  153|           if (baseRatio < parsingRatioThr && baseRatio < ratio)
#  154|->             str << "<p><b style='color: #FF0000;'>warning:</b> "
#  155|                   "low parsing ratio in diff base: "
#  156|                   << baseRatio << "%</p>\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:154: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  152|           const int baseRatio = boost::lexical_cast<float>(itRatio->second);
#  153|           if (baseRatio < parsingRatioThr && baseRatio < ratio)
#  154|->             str << "<p><b style='color: #FF0000;'>warning:</b> "
#  155|                   "low parsing ratio in diff base: "
#  156|                   << baseRatio << "%</p>\n";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:154: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  152|           const int baseRatio = boost::lexical_cast<float>(itRatio->second);
#  153|           if (baseRatio < parsingRatioThr && baseRatio < ratio)
#  154|->             str << "<p><b style='color: #FF0000;'>warning:</b> "
#  155|                   "low parsing ratio in diff base: "
#  156|                   << baseRatio << "%</p>\n";

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:158: misra_c_2012_rule_10_1_violation: The expression "count" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  156|                   << baseRatio << "%</p>\n";
#  157|   
#  158|->         if (!count || 100 * baseCount / count < parsingOldToNewRatioThr)
#  159|               str << "<p><b style='color: #FF0000;'>warning:</b> "
#  160|                   "low count of parsed units in diff base: "

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:158: misra_c_2012_rule_12_1_violation: Missing explicit parentheses on sub-expression: "100 * baseCount / count < parsingOldToNewRatioThr".
#  156|                   << baseRatio << "%</p>\n";
#  157|   
#  158|->         if (!count || 100 * baseCount / count < parsingOldToNewRatioThr)
#  159|               str << "<p><b style='color: #FF0000;'>warning:</b> "
#  160|                   "low count of parsed units in diff base: "

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:158: misra_c_2012_rule_12_1_violation: Missing explicit parentheses on sub-expression: "100 * baseCount / count".
#  156|                   << baseRatio << "%</p>\n";
#  157|   
#  158|->         if (!count || 100 * baseCount / count < parsingOldToNewRatioThr)
#  159|               str << "<p><b style='color: #FF0000;'>warning:</b> "
#  160|                   "low count of parsed units in diff base: "

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:158: misra_cpp_2008_rule_5_0_13_violation: The type of "count" is not bool in the condition of "if-statement".
#  156|                   << baseRatio << "%</p>\n";
#  157|   
#  158|->         if (!count || 100 * baseCount / count < parsingOldToNewRatioThr)
#  159|               str << "<p><b style='color: #FF0000;'>warning:</b> "
#  160|                   "low count of parsed units in diff base: "

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:158: misra_cpp_2008_rule_5_0_2_violation: "100 * baseCount / count < parsingOldToNewRatioThr" should be parenthesized.
#  156|                   << baseRatio << "%</p>\n";
#  157|   
#  158|->         if (!count || 100 * baseCount / count < parsingOldToNewRatioThr)
#  159|               str << "<p><b style='color: #FF0000;'>warning:</b> "
#  160|                   "low count of parsed units in diff base: "

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:158: misra_cpp_2008_rule_5_0_2_violation: "100 * baseCount / count" should be parenthesized.
#  156|                   << baseRatio << "%</p>\n";
#  157|   
#  158|->         if (!count || 100 * baseCount / count < parsingOldToNewRatioThr)
#  159|               str << "<p><b style='color: #FF0000;'>warning:</b> "
#  160|                   "low count of parsed units in diff base: "

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:158: misra_cpp_2008_rule_5_0_2_violation: "100 * baseCount" should be parenthesized.
#  156|                   << baseRatio << "%</p>\n";
#  157|   
#  158|->         if (!count || 100 * baseCount / count < parsingOldToNewRatioThr)
#  159|               str << "<p><b style='color: #FF0000;'>warning:</b> "
#  160|                   "low count of parsed units in diff base: "

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:158: misra_cpp_2008_rule_5_2_1_violation: Operand "!count" is not a postfix expression.
#  156|                   << baseRatio << "%</p>\n";
#  157|   
#  158|->         if (!count || 100 * baseCount / count < parsingOldToNewRatioThr)
#  159|               str << "<p><b style='color: #FF0000;'>warning:</b> "
#  160|                   "low count of parsed units in diff base: "

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:158: misra_cpp_2008_rule_5_2_1_violation: Operand "100 * baseCount / count < parsingOldToNewRatioThr" is not a postfix expression.
#  156|                   << baseRatio << "%</p>\n";
#  157|   
#  158|->         if (!count || 100 * baseCount / count < parsingOldToNewRatioThr)
#  159|               str << "<p><b style='color: #FF0000;'>warning:</b> "
#  160|                   "low count of parsed units in diff base: "

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:158: misra_cpp_2008_rule_5_3_1_violation: Operand "count" of the operator "!" is not bool type.
#  156|                   << baseRatio << "%</p>\n";
#  157|   
#  158|->         if (!count || 100 * baseCount / count < parsingOldToNewRatioThr)
#  159|               str << "<p><b style='color: #FF0000;'>warning:</b> "
#  160|                   "low count of parsed units in diff base: "

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:159: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  157|   
#  158|           if (!count || 100 * baseCount / count < parsingOldToNewRatioThr)
#  159|->             str << "<p><b style='color: #FF0000;'>warning:</b> "
#  160|                   "low count of parsed units in diff base: "
#  161|                   << baseCount << "</p>\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:159: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  157|   
#  158|           if (!count || 100 * baseCount / count < parsingOldToNewRatioThr)
#  159|->             str << "<p><b style='color: #FF0000;'>warning:</b> "
#  160|                   "low count of parsed units in diff base: "
#  161|                   << baseCount << "</p>\n";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:159: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  157|   
#  158|           if (!count || 100 * baseCount / count < parsingOldToNewRatioThr)
#  159|->             str << "<p><b style='color: #FF0000;'>warning:</b> "
#  160|                   "low count of parsed units in diff base: "
#  161|                   << baseCount << "</p>\n";

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:168: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  166|   }
#  167|   
#  168|-> void writeScanProps(std::ostream &str, const TScanProps &props) {
#  169|       if (props.empty())
#  170|           return;

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:168: misra_c_2012_rule_8_7_violation: Function "writeScanProps" has external linkage but is only used in one translation unit.
#  166|   }
#  167|   
#  168|-> void writeScanProps(std::ostream &str, const TScanProps &props) {
#  169|       if (props.empty())
#  170|           return;

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:168: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  166|   }
#  167|   
#  168|-> void writeScanProps(std::ostream &str, const TScanProps &props) {
#  169|       if (props.empty())
#  170|           return;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:168: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "writeScanProps".
#  166|   }
#  167|   
#  168|-> void writeScanProps(std::ostream &str, const TScanProps &props) {
#  169|       if (props.empty())
#  170|           return;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:170: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  168|   void writeScanProps(std::ostream &str, const TScanProps &props) {
#  169|       if (props.empty())
#  170|->         return;
#  171|   
#  172|       HtmlLib::initSection(str, "Scan Properties");

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:170: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  168|   void writeScanProps(std::ostream &str, const TScanProps &props) {
#  169|       if (props.empty())
#  170|->         return;
#  171|   
#  172|       HtmlLib::initSection(str, "Scan Properties");

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:170: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  168|   void writeScanProps(std::ostream &str, const TScanProps &props) {
#  169|       if (props.empty())
#  170|->         return;
#  171|   
#  172|       HtmlLib::initSection(str, "Scan Properties");

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:170: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  168|   void writeScanProps(std::ostream &str, const TScanProps &props) {
#  169|       if (props.empty())
#  170|->         return;
#  171|   
#  172|       HtmlLib::initSection(str, "Scan Properties");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:174: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  172|       HtmlLib::initSection(str, "Scan Properties");
#  173|   
#  174|->     str << "<table style='font-family: monospace;'>\n";
#  175|       int i = 0;
#  176|   

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:175: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  173|   
#  174|       str << "<table style='font-family: monospace;'>\n";
#  175|->     int i = 0;
#  176|   
#  177|       for (TScanProps::const_reference item : props) {

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:175: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "i" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:188: end_of_scope: Reached end of scope without using value stored in "i".
#  173|   
#  174|       str << "<table style='font-family: monospace;'>\n";
#  175|->     int i = 0;
#  176|   
#  177|       for (TScanProps::const_reference item : props) {

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:175: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  173|   
#  174|       str << "<table style='font-family: monospace;'>\n";
#  175|->     int i = 0;
#  176|   
#  177|       for (TScanProps::const_reference item : props) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:177: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  175|       int i = 0;
#  176|   
#  177|->     for (TScanProps::const_reference item : props) {
#  178|           const char *trStyle = "";
#  179|           if (++i & 1)

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:178: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  176|   
#  177|       for (TScanProps::const_reference item : props) {
#  178|->         const char *trStyle = "";
#  179|           if (++i & 1)
#  180|               trStyle = " style='background-color: #EEE;'";

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:179: misra_c_2012_rule_10_1_violation: The operand "++i" to the operator "&" does not have an essentially unsigned type.
#  177|       for (TScanProps::const_reference item : props) {
#  178|           const char *trStyle = "";
#  179|->         if (++i & 1)
#  180|               trStyle = " style='background-color: #EEE;'";
#  181|   

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:179: misra_c_2012_rule_10_1_violation: The operand "1" to the operator "&" does not have an essentially unsigned type.
#  177|       for (TScanProps::const_reference item : props) {
#  178|           const char *trStyle = "";
#  179|->         if (++i & 1)
#  180|               trStyle = " style='background-color: #EEE;'";
#  181|   

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:179: misra_c_2012_rule_14_4_violation: The condition expression "++i & 1" does not have an essentially boolean type.
#  177|       for (TScanProps::const_reference item : props) {
#  178|           const char *trStyle = "";
#  179|->         if (++i & 1)
#  180|               trStyle = " style='background-color: #EEE;'";
#  181|   

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:179: misra_cpp_2008_rule_5_0_13_violation: The type of "++i & 1" is not bool in the condition of "if-statement".
#  177|       for (TScanProps::const_reference item : props) {
#  178|           const char *trStyle = "";
#  179|->         if (++i & 1)
#  180|               trStyle = " style='background-color: #EEE;'";
#  181|   

Error: MISRA C++-2008 Rule 5-0-21 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:179: misra_cpp_2008_rule_5_0_21_violation: Bitwise operator "&" has a signed operand "++i".
#  177|       for (TScanProps::const_reference item : props) {
#  178|           const char *trStyle = "";
#  179|->         if (++i & 1)
#  180|               trStyle = " style='background-color: #EEE;'";
#  181|   

Error: MISRA C++-2008 Rule 5-0-21 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:179: misra_cpp_2008_rule_5_0_21_violation: Bitwise operator "&" has a signed operand "1".
#  177|       for (TScanProps::const_reference item : props) {
#  178|           const char *trStyle = "";
#  179|->         if (++i & 1)
#  180|               trStyle = " style='background-color: #EEE;'";
#  181|   

Error: MISRA C++-2008 Rule 5-2-10 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:179: misra_cpp_2008_rule_5_2_10_violation: The ++ or -- operator is mixed with other operators in expression "++i & 1".
#  177|       for (TScanProps::const_reference item : props) {
#  178|           const char *trStyle = "";
#  179|->         if (++i & 1)
#  180|               trStyle = " style='background-color: #EEE;'";
#  181|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:180: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  178|           const char *trStyle = "";
#  179|           if (++i & 1)
#  180|->             trStyle = " style='background-color: #EEE;'";
#  181|   
#  182|           const char *tdStyle0 = "padding-right: 8px; white-space: nowrap;";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:180: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  178|           const char *trStyle = "";
#  179|           if (++i & 1)
#  180|->             trStyle = " style='background-color: #EEE;'";
#  181|   
#  182|           const char *tdStyle0 = "padding-right: 8px; white-space: nowrap;";

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:182: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  180|               trStyle = " style='background-color: #EEE;'";
#  181|   
#  182|->         const char *tdStyle0 = "padding-right: 8px; white-space: nowrap;";
#  183|           str << "<tr" << trStyle << "><td style='" << tdStyle0 << "'>"
#  184|               << item.first << "</td><td>" << item.second << "</td></tr>\n";

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:182: misra_cpp_2008_rule_7_1_1_violation: The variable "tdStyle0" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  180|               trStyle = " style='background-color: #EEE;'";
#  181|   
#  182|->         const char *tdStyle0 = "padding-right: 8px; white-space: nowrap;";
#  183|           str << "<tr" << trStyle << "><td style='" << tdStyle0 << "'>"
#  184|               << item.first << "</td><td>" << item.second << "</td></tr>\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:183: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  181|   
#  182|           const char *tdStyle0 = "padding-right: 8px; white-space: nowrap;";
#  183|->         str << "<tr" << trStyle << "><td style='" << tdStyle0 << "'>"
#  184|               << item.first << "</td><td>" << item.second << "</td></tr>\n";
#  185|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:187: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  185|       }
#  186|   
#  187|->     str << "</table>\n";
#  188|   }
#  189|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:190: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  188|   }
#  189|   
#  190|-> void linkifyShellCheckMsg(std::string *pMsg)
#  191|   {
#  192|       static const RE reShellCheckMsg("(\\[)?SC([0-9]+)(\\])?$");

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:190: misra_c_2012_rule_8_7_violation: Function "linkifyShellCheckMsg" has external linkage but is only used in one translation unit.
#  188|   }
#  189|   
#  190|-> void linkifyShellCheckMsg(std::string *pMsg)
#  191|   {
#  192|       static const RE reShellCheckMsg("(\\[)?SC([0-9]+)(\\])?$");

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:190: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  188|   }
#  189|   
#  190|-> void linkifyShellCheckMsg(std::string *pMsg)
#  191|   {
#  192|       static const RE reShellCheckMsg("(\\[)?SC([0-9]+)(\\])?$");

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:190: misra_cpp_2008_rule_7_1_1_violation: The variable "pMsg" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  188|   }
#  189|   
#  190|-> void linkifyShellCheckMsg(std::string *pMsg)
#  191|   {
#  192|       static const RE reShellCheckMsg("(\\[)?SC([0-9]+)(\\])?$");

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:190: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "linkifyShellCheckMsg".
#  188|   }
#  189|   
#  190|-> void linkifyShellCheckMsg(std::string *pMsg)
#  191|   {
#  192|       static const RE reShellCheckMsg("(\\[)?SC([0-9]+)(\\])?$");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:193: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  191|   {
#  192|       static const RE reShellCheckMsg("(\\[)?SC([0-9]+)(\\])?$");
#  193|->     *pMsg = boost::regex_replace(*pMsg, reShellCheckMsg,
#  194|               "<a href=\"https://github.com/koalaman/shellcheck/wiki/SC\\2\""
#  195|               " title=\"description of ShellCheck's checker SC\\2\">"

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:199: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  197|   }
#  198|   
#  199|-> void printCweLink(std::ostream &str, const int cwe, const std::string &cweName)
#  200|   {
#  201|       str << "<a href=\"https://cwe.mitre.org/data/definitions/"

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:199: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  197|   }
#  198|   
#  199|-> void printCweLink(std::ostream &str, const int cwe, const std::string &cweName)
#  200|   {
#  201|       str << "<a href=\"https://cwe.mitre.org/data/definitions/"

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:199: misra_c_2012_rule_8_7_violation: Function "printCweLink" has external linkage but is only used in one translation unit.
#  197|   }
#  198|   
#  199|-> void printCweLink(std::ostream &str, const int cwe, const std::string &cweName)
#  200|   {
#  201|       str << "<a href=\"https://cwe.mitre.org/data/definitions/"

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:199: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  197|   }
#  198|   
#  199|-> void printCweLink(std::ostream &str, const int cwe, const std::string &cweName)
#  200|   {
#  201|       str << "<a href=\"https://cwe.mitre.org/data/definitions/"

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:199: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  197|   }
#  198|   
#  199|-> void printCweLink(std::ostream &str, const int cwe, const std::string &cweName)
#  200|   {
#  201|       str << "<a href=\"https://cwe.mitre.org/data/definitions/"

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:199: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "printCweLink".
#  197|   }
#  198|   
#  199|-> void printCweLink(std::ostream &str, const int cwe, const std::string &cweName)
#  200|   {
#  201|       str << "<a href=\"https://cwe.mitre.org/data/definitions/"

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:201: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  199|   void printCweLink(std::ostream &str, const int cwe, const std::string &cweName)
#  200|   {
#  201|->     str << "<a href=\"https://cwe.mitre.org/data/definitions/"
#  202|           << cwe << ".html\" title=\"";
#  203|       if (cweName.empty())

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:204: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  202|           << cwe << ".html\" title=\"";
#  203|       if (cweName.empty())
#  204|->         str << "definition of CWE-" << cwe << " by MITRE";
#  205|       else
#  206|           str << "CWE-" << cwe << ": " << cweName;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:204: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  202|           << cwe << ".html\" title=\"";
#  203|       if (cweName.empty())
#  204|->         str << "definition of CWE-" << cwe << " by MITRE";
#  205|       else
#  206|           str << "CWE-" << cwe << ": " << cweName;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:204: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  202|           << cwe << ".html\" title=\"";
#  203|       if (cweName.empty())
#  204|->         str << "definition of CWE-" << cwe << " by MITRE";
#  205|       else
#  206|           str << "CWE-" << cwe << ": " << cweName;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:206: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  204|           str << "definition of CWE-" << cwe << " by MITRE";
#  205|       else
#  206|->         str << "CWE-" << cwe << ": " << cweName;
#  207|   
#  208|       str << "\">"

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:206: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  204|           str << "definition of CWE-" << cwe << " by MITRE";
#  205|       else
#  206|->         str << "CWE-" << cwe << ": " << cweName;
#  207|   
#  208|       str << "\">"

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:206: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  204|           str << "definition of CWE-" << cwe << " by MITRE";
#  205|       else
#  206|->         str << "CWE-" << cwe << ": " << cweName;
#  207|   
#  208|       str << "\">"

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:208: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  206|           str << "CWE-" << cwe << ": " << cweName;
#  207|   
#  208|->     str << "\">"
#  209|           << "CWE-" << cwe
#  210|           << "</a>";

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:213: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "HtmlWriterCore".
#  211|   }
#  212|   
#  213|-> class HtmlWriterCore {
#  214|       public:
#  215|           HtmlWriterCore(

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:220: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  218|                   const std::string  &spPlacement);
#  219|   
#  220|->         bool headerWritten() const {
#  221|               return headerWritten_;
#  222|           }

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:236: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "headerWritten_" clashes with "headerWritten"
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:220: misra_typographically_ambiguous_orig: (Previously declared symbol "headerWritten" at line 220)
#  234|           bool                spOnTop_;
#  235|           bool                spBottom_;
#  236|->         bool                headerWritten_;
#  237|           bool                documentClosed_;
#  238|   };

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:240: misra_c_2012_rule_8_3_violation: Declaration uses a different parameter name than "HtmlWriterCore::HtmlWriterCore(std::ostream &, const std::string &, const std::string &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:215: prev_declaration: (see previous declaration of "HtmlWriterCore::HtmlWriterCore" at line 215)
#  238|   };
#  239|   
#  240|-> HtmlWriterCore::HtmlWriterCore(
#  241|           std::ostream               &str,
#  242|           const std::string          &titleFb,

Error: MISRA C++-2008 Rule 8-4-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:240: misra_cpp_2008_rule_8_4_2_violation: Declaration uses a different parameter name than "HtmlWriterCore::HtmlWriterCore(std::ostream &, const std::string &, const std::string &)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:215: prev_declaration: (see previous declaration of "HtmlWriterCore::HtmlWriterCore" at line 215)
#  238|   };
#  239|   
#  240|-> HtmlWriterCore::HtmlWriterCore(
#  241|           std::ostream               &str,
#  242|           const std::string          &titleFb,

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:241: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "str" clashes with "str_"
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:232: misra_typographically_ambiguous_orig: (Previously declared symbol "str_" at line 232)
#  239|   
#  240|   HtmlWriterCore::HtmlWriterCore(
#  241|->         std::ostream               &str,
#  242|           const std::string          &titleFb,
#  243|           const std::string          &spPlacement):

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:246: misra_c_2012_rule_10_1_violation: The expression "spPlacement->compare("top")" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  244|       str_(str),
#  245|       titleFallback_(titleFb),
#  246|->     spOnTop_(!spPlacement.compare("top")),
#  247|       spBottom_(!spPlacement.compare("bottom")),
#  248|       headerWritten_(false),

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:246: misra_cpp_2008_rule_5_3_1_violation: Operand "spPlacement->compare("top")" of the operator "!" is not bool type.
#  244|       str_(str),
#  245|       titleFallback_(titleFb),
#  246|->     spOnTop_(!spPlacement.compare("top")),
#  247|       spBottom_(!spPlacement.compare("bottom")),
#  248|       headerWritten_(false),

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:247: misra_c_2012_rule_10_1_violation: The expression "spPlacement->compare("bottom")" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  245|       titleFallback_(titleFb),
#  246|       spOnTop_(!spPlacement.compare("top")),
#  247|->     spBottom_(!spPlacement.compare("bottom")),
#  248|       headerWritten_(false),
#  249|       documentClosed_(false)

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:247: misra_cpp_2008_rule_5_3_1_violation: Operand "spPlacement->compare("bottom")" of the operator "!" is not bool type.
#  245|       titleFallback_(titleFb),
#  246|       spOnTop_(!spPlacement.compare("top")),
#  247|->     spBottom_(!spPlacement.compare("bottom")),
#  248|       headerWritten_(false),
#  249|       documentClosed_(false)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:252: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  250|   {
#  251|       if (titleFallback_.empty())
#  252|->         titleFallback_ = "Scan Results";
#  253|   
#  254|       if (!spOnTop_ && !spBottom_ && !!spPlacement.compare("none"))

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:252: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  250|   {
#  251|       if (titleFallback_.empty())
#  252|->         titleFallback_ = "Scan Results";
#  253|   
#  254|       if (!spOnTop_ && !spBottom_ && !!spPlacement.compare("none"))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:252: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  250|   {
#  251|       if (titleFallback_.empty())
#  252|->         titleFallback_ = "Scan Results";
#  253|   
#  254|       if (!spOnTop_ && !spBottom_ && !!spPlacement.compare("none"))

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:254: misra_c_2012_rule_10_1_violation: The expression "spPlacement->compare("none")" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  252|           titleFallback_ = "Scan Results";
#  253|   
#  254|->     if (!spOnTop_ && !spBottom_ && !!spPlacement.compare("none"))
#  255|           std::cerr << "warning: unknown placement of scan properties table: "
#  256|               << spPlacement << "\n";

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:254: misra_cpp_2008_rule_5_0_13_violation: The type of "spPlacement->compare("none")" is not bool in the condition of "if-statement".
#  252|           titleFallback_ = "Scan Results";
#  253|   
#  254|->     if (!spOnTop_ && !spBottom_ && !!spPlacement.compare("none"))
#  255|           std::cerr << "warning: unknown placement of scan properties table: "
#  256|               << spPlacement << "\n";

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:254: misra_cpp_2008_rule_5_2_1_violation: Operand "!!spPlacement->compare("none")" is not a postfix expression.
#  252|           titleFallback_ = "Scan Results";
#  253|   
#  254|->     if (!spOnTop_ && !spBottom_ && !!spPlacement.compare("none"))
#  255|           std::cerr << "warning: unknown placement of scan properties table: "
#  256|               << spPlacement << "\n";

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:254: misra_cpp_2008_rule_5_2_1_violation: Operand "!this->spBottom_" is not a postfix expression.
#  252|           titleFallback_ = "Scan Results";
#  253|   
#  254|->     if (!spOnTop_ && !spBottom_ && !!spPlacement.compare("none"))
#  255|           std::cerr << "warning: unknown placement of scan properties table: "
#  256|               << spPlacement << "\n";

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:254: misra_cpp_2008_rule_5_2_1_violation: Operand "!this->spOnTop_" is not a postfix expression.
#  252|           titleFallback_ = "Scan Results";
#  253|   
#  254|->     if (!spOnTop_ && !spBottom_ && !!spPlacement.compare("none"))
#  255|           std::cerr << "warning: unknown placement of scan properties table: "
#  256|               << spPlacement << "\n";

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:254: misra_cpp_2008_rule_5_3_1_violation: Operand "spPlacement->compare("none")" of the operator "!" is not bool type.
#  252|           titleFallback_ = "Scan Results";
#  253|   
#  254|->     if (!spOnTop_ && !spBottom_ && !!spPlacement.compare("none"))
#  255|           std::cerr << "warning: unknown placement of scan properties table: "
#  256|               << spPlacement << "\n";

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:255: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  253|   
#  254|       if (!spOnTop_ && !spBottom_ && !!spPlacement.compare("none"))
#  255|->         std::cerr << "warning: unknown placement of scan properties table: "
#  256|               << spPlacement << "\n";
#  257|   }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:255: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  253|   
#  254|       if (!spOnTop_ && !spBottom_ && !!spPlacement.compare("none"))
#  255|->         std::cerr << "warning: unknown placement of scan properties table: "
#  256|               << spPlacement << "\n";
#  257|   }

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:255: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  253|   
#  254|       if (!spOnTop_ && !spBottom_ && !!spPlacement.compare("none"))
#  255|->         std::cerr << "warning: unknown placement of scan properties table: "
#  256|               << spPlacement << "\n";
#  257|   }

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:263: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "<anonymous>" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:266: end_of_scope: Reached end of scope without using value stored in "<anonymous>".
#  261|           const std::string          &plainTextUrl)
#  262|   {
#  263|->     assert(!documentClosed_);
#  264|       if (headerWritten_)
#  265|           // header already out

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:263: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  261|           const std::string          &plainTextUrl)
#  262|   {
#  263|->     assert(!documentClosed_);
#  264|       if (headerWritten_)
#  265|           // header already out

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:263: misra_cpp_2008_rule_5_0_4_violation: "263" is implicitly converted from a signed value to an unsigned value.
#  261|           const std::string          &plainTextUrl)
#  262|   {
#  263|->     assert(!documentClosed_);
#  264|       if (headerWritten_)
#  265|           // header already out

Error: MISRA C++-2008 Rule 5-2-12 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:263: misra_cpp_2008_rule_5_2_12_violation: Array "<anonymous>" decays to a pointer when used as a function argument.
#  261|           const std::string          &plainTextUrl)
#  262|   {
#  263|->     assert(!documentClosed_);
#  264|       if (headerWritten_)
#  265|           // header already out

Error: MISRA C++-2008 Rule 5-2-4 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:263: misra_cpp_2008_rule_5_2_4_violation: C-style casts or functional notation casts "(bool)!this->documentClosed_" is used.
#  261|           const std::string          &plainTextUrl)
#  262|   {
#  263|->     assert(!documentClosed_);
#  264|       if (headerWritten_)
#  265|           // header already out

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:266: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  264|       if (headerWritten_)
#  265|           // header already out
#  266|->         return;
#  267|   
#  268|       // resolve title of the document

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:266: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  264|       if (headerWritten_)
#  265|           // header already out
#  266|->         return;
#  267|   
#  268|       // resolve title of the document

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:266: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  264|       if (headerWritten_)
#  265|           // header already out
#  266|->         return;
#  267|   
#  268|       // resolve title of the document

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:266: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  264|       if (headerWritten_)
#  265|           // header already out
#  266|->         return;
#  267|   
#  268|       // resolve title of the document

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:271: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  269|       std::string title = digTitle(props);
#  270|       if (title.empty())
#  271|->         title = titleFallback_;
#  272|   
#  273|       // initialize a HTML document

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:271: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  269|       std::string title = digTitle(props);
#  270|       if (title.empty())
#  271|->         title = titleFallback_;
#  272|   
#  273|       // initialize a HTML document

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:271: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  269|       std::string title = digTitle(props);
#  270|       if (title.empty())
#  271|->         title = titleFallback_;
#  272|   
#  273|       // initialize a HTML document

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:276: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  274|       HtmlLib::initHtml(str_, title);
#  275|       if (!plainTextUrl.empty())
#  276|->         HtmlLib::writeLink(str_, plainTextUrl, "[Show plain-text results]");
#  277|   
#  278|       // write scan properties

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:276: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  274|       HtmlLib::initHtml(str_, title);
#  275|       if (!plainTextUrl.empty())
#  276|->         HtmlLib::writeLink(str_, plainTextUrl, "[Show plain-text results]");
#  277|   
#  278|       // write scan properties

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:281: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  279|       writeParseWarnings(str_, props);
#  280|       if (spOnTop_)
#  281|->         writeScanProps(str_, props);
#  282|   
#  283|       // initialize the section for defects

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:281: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  279|       writeParseWarnings(str_, props);
#  280|       if (spOnTop_)
#  281|->         writeScanProps(str_, props);
#  282|   
#  283|       // initialize the section for defects

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:292: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "<anonymous>" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:304: end_of_scope: Reached end of scope without using value stored in "<anonymous>".
#  290|   void HtmlWriterCore::closeDocument(const TScanProps &props)
#  291|   {
#  292|->     assert(headerWritten_);
#  293|       assert(!documentClosed_);
#  294|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:292: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  290|   void HtmlWriterCore::closeDocument(const TScanProps &props)
#  291|   {
#  292|->     assert(headerWritten_);
#  293|       assert(!documentClosed_);
#  294|   

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:292: misra_cpp_2008_rule_5_0_4_violation: "292" is implicitly converted from a signed value to an unsigned value.
#  290|   void HtmlWriterCore::closeDocument(const TScanProps &props)
#  291|   {
#  292|->     assert(headerWritten_);
#  293|       assert(!documentClosed_);
#  294|   

Error: MISRA C++-2008 Rule 5-2-12 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:292: misra_cpp_2008_rule_5_2_12_violation: Array "<anonymous>" decays to a pointer when used as a function argument.
#  290|   void HtmlWriterCore::closeDocument(const TScanProps &props)
#  291|   {
#  292|->     assert(headerWritten_);
#  293|       assert(!documentClosed_);
#  294|   

Error: MISRA C++-2008 Rule 5-2-4 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:292: misra_cpp_2008_rule_5_2_4_violation: C-style casts or functional notation casts "(bool)this->headerWritten_" is used.
#  290|   void HtmlWriterCore::closeDocument(const TScanProps &props)
#  291|   {
#  292|->     assert(headerWritten_);
#  293|       assert(!documentClosed_);
#  294|   

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:293: misra_cpp_2008_rule_5_0_4_violation: "293" is implicitly converted from a signed value to an unsigned value.
#  291|   {
#  292|       assert(headerWritten_);
#  293|->     assert(!documentClosed_);
#  294|   
#  295|       // close the HTML document

Error: MISRA C++-2008 Rule 5-2-12 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:293: misra_cpp_2008_rule_5_2_12_violation: Array "<anonymous>" decays to a pointer when used as a function argument.
#  291|   {
#  292|       assert(headerWritten_);
#  293|->     assert(!documentClosed_);
#  294|   
#  295|       // close the HTML document

Error: MISRA C++-2008 Rule 5-2-4 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:293: misra_cpp_2008_rule_5_2_4_violation: C-style casts or functional notation casts "(bool)!this->documentClosed_" is used.
#  291|   {
#  292|       assert(headerWritten_);
#  293|->     assert(!documentClosed_);
#  294|   
#  295|       // close the HTML document

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:299: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  297|   
#  298|       if (spBottom_)
#  299|->         writeScanProps(str_, props);
#  300|   
#  301|       HtmlLib::finalizeHtml(str_);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:299: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  297|   
#  298|       if (spBottom_)
#  299|->         writeScanProps(str_, props);
#  300|   
#  301|       HtmlLib::finalizeHtml(str_);

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:307: misra_cpp_2008_rule_11_0_1_violation: Member "str" is not private but "HtmlWriter::Private" is a non-POD type.
#  305|   
#  306|   struct HtmlWriter::Private {
#  307|->     std::ostream                   &str;
#  308|       HtmlWriterCore                  core;
#  309|       TScanProps                      scanProps;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:308: misra_cpp_2008_rule_11_0_1_violation: Member "core" is not private but "HtmlWriter::Private" is a non-POD type.
#  306|   struct HtmlWriter::Private {
#  307|       std::ostream                   &str;
#  308|->     HtmlWriterCore                  core;
#  309|       TScanProps                      scanProps;
#  310|       const std::string               defUrlTemplate;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:309: misra_cpp_2008_rule_11_0_1_violation: Member "scanProps" is not private but "HtmlWriter::Private" is a non-POD type.
#  307|       std::ostream                   &str;
#  308|       HtmlWriterCore                  core;
#  309|->     TScanProps                      scanProps;
#  310|       const std::string               defUrlTemplate;
#  311|       unsigned                        defCnt = 0U;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:310: misra_cpp_2008_rule_11_0_1_violation: Member "defUrlTemplate" is not private but "HtmlWriter::Private" is a non-POD type.
#  308|       HtmlWriterCore                  core;
#  309|       TScanProps                      scanProps;
#  310|->     const std::string               defUrlTemplate;
#  311|       unsigned                        defCnt = 0U;
#  312|       DefLookup                      *baseLookup = nullptr;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:311: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  309|       TScanProps                      scanProps;
#  310|       const std::string               defUrlTemplate;
#  311|->     unsigned                        defCnt = 0U;
#  312|       DefLookup                      *baseLookup = nullptr;
#  313|       RE                              checkerIgnRegex;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:311: misra_cpp_2008_rule_11_0_1_violation: Member "defCnt" is not private but "HtmlWriter::Private" is a non-POD type.
#  309|       TScanProps                      scanProps;
#  310|       const std::string               defUrlTemplate;
#  311|->     unsigned                        defCnt = 0U;
#  312|       DefLookup                      *baseLookup = nullptr;
#  313|       RE                              checkerIgnRegex;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:311: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  309|       TScanProps                      scanProps;
#  310|       const std::string               defUrlTemplate;
#  311|->     unsigned                        defCnt = 0U;
#  312|       DefLookup                      *baseLookup = nullptr;
#  313|       RE                              checkerIgnRegex;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:312: misra_cpp_2008_rule_11_0_1_violation: Member "baseLookup" is not private but "HtmlWriter::Private" is a non-POD type.
#  310|       const std::string               defUrlTemplate;
#  311|       unsigned                        defCnt = 0U;
#  312|->     DefLookup                      *baseLookup = nullptr;
#  313|       RE                              checkerIgnRegex;
#  314|       std::string                     newDefMsg;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:313: misra_cpp_2008_rule_11_0_1_violation: Member "checkerIgnRegex" is not private but "HtmlWriter::Private" is a non-POD type.
#  311|       unsigned                        defCnt = 0U;
#  312|       DefLookup                      *baseLookup = nullptr;
#  313|->     RE                              checkerIgnRegex;
#  314|       std::string                     newDefMsg;
#  315|       std::string                     plainTextUrl;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:314: misra_cpp_2008_rule_11_0_1_violation: Member "newDefMsg" is not private but "HtmlWriter::Private" is a non-POD type.
#  312|       DefLookup                      *baseLookup = nullptr;
#  313|       RE                              checkerIgnRegex;
#  314|->     std::string                     newDefMsg;
#  315|       std::string                     plainTextUrl;
#  316|       const CweNameLookup            *cweNames = nullptr;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:315: misra_cpp_2008_rule_11_0_1_violation: Member "plainTextUrl" is not private but "HtmlWriter::Private" is a non-POD type.
#  313|       RE                              checkerIgnRegex;
#  314|       std::string                     newDefMsg;
#  315|->     std::string                     plainTextUrl;
#  316|       const CweNameLookup            *cweNames = nullptr;
#  317|   

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:316: misra_cpp_2008_rule_11_0_1_violation: Member "cweNames" is not private but "HtmlWriter::Private" is a non-POD type.
#  314|       std::string                     newDefMsg;
#  315|       std::string                     plainTextUrl;
#  316|->     const CweNameLookup            *cweNames = nullptr;
#  317|   
#  318|       Private(

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:319: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "str_" clashes with "str"
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:307: misra_typographically_ambiguous_orig: (Previously declared symbol "str" at line 307)
#  317|   
#  318|       Private(
#  319|->             std::ostream           &str_,
#  320|               const std::string      &titleFallback_,
#  321|               const std::string      &defUrlTemplate_,

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:321: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "defUrlTemplate_" clashes with "defUrlTemplate"
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:310: misra_typographically_ambiguous_orig: (Previously declared symbol "defUrlTemplate" at line 310)
#  319|               std::ostream           &str_,
#  320|               const std::string      &titleFallback_,
#  321|->             const std::string      &defUrlTemplate_,
#  322|               const std::string      &spPlacement_):
#  323|           str(str_),

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:329: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  327|           if (!defUrlTemplate.empty())
#  328|               // just make sure that the format string is correct
#  329|->             boost::format(defUrlTemplate) % 1 % 2;
#  330|       }
#  331|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:329: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator %" is unused.
#  327|           if (!defUrlTemplate.empty())
#  328|               // just make sure that the format string is correct
#  329|->             boost::format(defUrlTemplate) % 1 % 2;
#  330|       }
#  331|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:329: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  327|           if (!defUrlTemplate.empty())
#  328|               // just make sure that the format string is correct
#  329|->             boost::format(defUrlTemplate) % 1 % 2;
#  330|       }
#  331|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:332: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#  330|       }
#  331|   
#  332|->     void writeLinkToDetails(const Defect &);
#  333|       void writeNewDefWarning(const Defect &);
#  334|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:333: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#  331|   
#  332|       void writeLinkToDetails(const Defect &);
#  333|->     void writeNewDefWarning(const Defect &);
#  334|   
#  335|       const RE reEvent = RE("^([^\\[]*\\[)?([^\\]]+)(])?$");

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:335: misra_cpp_2008_rule_11_0_1_violation: Member "reEvent" is not private but "HtmlWriter::Private" is a non-POD type.
#  333|       void writeNewDefWarning(const Defect &);
#  334|   
#  335|->     const RE reEvent = RE("^([^\\[]*\\[)?([^\\]]+)(])?$");
#  336|   };
#  337|   

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:338: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "AbstractWriter" are not called in this constructor.
#  336|   };
#  337|   
#  338|-> HtmlWriter::HtmlWriter(
#  339|           std::ostream               &outputStream,
#  340|           const std::string          &titleFallback,

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:343: misra_c_2012_directive_4_12_violation: A call to the function "operator new(256UL)" performs dynamic memory allocation.
#  341|           const std::string          &defUrlTemplate,
#  342|           const std::string          &spPlacement):
#  343|->     d(new Private(outputStream, titleFallback, defUrlTemplate, spPlacement))
#  344|   {
#  345|   }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:343: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  341|           const std::string          &defUrlTemplate,
#  342|           const std::string          &spPlacement):
#  343|->     d(new Private(outputStream, titleFallback, defUrlTemplate, spPlacement))
#  344|   {
#  345|   }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:347: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  345|   }
#  346|   
#  347|-> HtmlWriter::~HtmlWriter()
#  348|   {
#  349|       delete d;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:352: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  350|   }
#  351|   
#  352|-> const TScanProps& HtmlWriter::getScanProps() const
#  353|   {
#  354|       return d->scanProps;

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:352: misra_cpp_2008_rule_10_3_1_violation: Virtual function "HtmlWriter::getScanProps[abi:cxx11]() const" has already been defined in "AbstractWriter::getScanProps[abi:cxx11]() const".
#  350|   }
#  351|   
#  352|-> const TScanProps& HtmlWriter::getScanProps() const
#  353|   {
#  354|       return d->scanProps;

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:357: misra_cpp_2008_rule_10_3_1_violation: Virtual function "HtmlWriter::setScanProps(TScanProps const &)" has already been defined in "AbstractWriter::setScanProps(TScanProps const &)".
#  355|   }
#  356|   
#  357|-> void HtmlWriter::setScanProps(const TScanProps &scanProps)
#  358|   {
#  359|       assert(!d->core.headerWritten());

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:359: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "<anonymous>" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:361: end_of_scope: Reached end of scope without using value stored in "<anonymous>".
#  357|   void HtmlWriter::setScanProps(const TScanProps &scanProps)
#  358|   {
#  359|->     assert(!d->core.headerWritten());
#  360|       d->scanProps = scanProps;
#  361|   }

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:359: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  357|   void HtmlWriter::setScanProps(const TScanProps &scanProps)
#  358|   {
#  359|->     assert(!d->core.headerWritten());
#  360|       d->scanProps = scanProps;
#  361|   }

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:359: misra_cpp_2008_rule_5_0_4_violation: "359" is implicitly converted from a signed value to an unsigned value.
#  357|   void HtmlWriter::setScanProps(const TScanProps &scanProps)
#  358|   {
#  359|->     assert(!d->core.headerWritten());
#  360|       d->scanProps = scanProps;
#  361|   }

Error: MISRA C++-2008 Rule 5-2-12 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:359: misra_cpp_2008_rule_5_2_12_violation: Array "<anonymous>" decays to a pointer when used as a function argument.
#  357|   void HtmlWriter::setScanProps(const TScanProps &scanProps)
#  358|   {
#  359|->     assert(!d->core.headerWritten());
#  360|       d->scanProps = scanProps;
#  361|   }

Error: MISRA C++-2008 Rule 5-2-4 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:359: misra_cpp_2008_rule_5_2_4_violation: C-style casts or functional notation casts "(bool)!this->d->core.headerWritten()" is used.
#  357|   void HtmlWriter::setScanProps(const TScanProps &scanProps)
#  358|   {
#  359|->     assert(!d->core.headerWritten());
#  360|       d->scanProps = scanProps;
#  361|   }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:360: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  358|   {
#  359|       assert(!d->core.headerWritten());
#  360|->     d->scanProps = scanProps;
#  361|   }
#  362|   

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:363: misra_c_2012_rule_8_13_violation: The member function "HtmlWriter::setDiffBase(DefLookup *, std::string const &, TScanProps const &, std::string const &)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  361|   }
#  362|   
#  363|-> void HtmlWriter::setDiffBase(
#  364|           DefLookup                   *baseLookup,
#  365|           const std::string           &checkerIgnRegex,

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:364: misra_cpp_2008_rule_7_1_1_violation: The variable "baseLookup" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  362|   
#  363|   void HtmlWriter::setDiffBase(
#  364|->         DefLookup                   *baseLookup,
#  365|           const std::string           &checkerIgnRegex,
#  366|           const TScanProps            &baseProps,

Error: MISRA C-2012 Rule 11.7 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:369: misra_c_2012_rule_11_7_violation: The expression "baseLookup" of type "DefLookup *" is cast to an object pointer type "bool".
#  367|           const std::string           &baseTitleFallback)
#  368|   {
#  369|->     assert(baseLookup);
#  370|       d->baseLookup = baseLookup;
#  371|       d->checkerIgnRegex = checkerIgnRegex;

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:369: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "<anonymous>" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:388: end_of_scope: Reached end of scope without using value stored in "<anonymous>".
#  367|           const std::string           &baseTitleFallback)
#  368|   {
#  369|->     assert(baseLookup);
#  370|       d->baseLookup = baseLookup;
#  371|       d->checkerIgnRegex = checkerIgnRegex;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:369: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  367|           const std::string           &baseTitleFallback)
#  368|   {
#  369|->     assert(baseLookup);
#  370|       d->baseLookup = baseLookup;
#  371|       d->checkerIgnRegex = checkerIgnRegex;

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:369: misra_cpp_2008_rule_5_0_4_violation: "369" is implicitly converted from a signed value to an unsigned value.
#  367|           const std::string           &baseTitleFallback)
#  368|   {
#  369|->     assert(baseLookup);
#  370|       d->baseLookup = baseLookup;
#  371|       d->checkerIgnRegex = checkerIgnRegex;

Error: MISRA C++-2008 Rule 5-2-12 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:369: misra_cpp_2008_rule_5_2_12_violation: Array "<anonymous>" decays to a pointer when used as a function argument.
#  367|           const std::string           &baseTitleFallback)
#  368|   {
#  369|->     assert(baseLookup);
#  370|       d->baseLookup = baseLookup;
#  371|       d->checkerIgnRegex = checkerIgnRegex;

Error: MISRA C++-2008 Rule 5-2-4 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:369: misra_cpp_2008_rule_5_2_4_violation: C-style casts or functional notation casts "(bool)baseLookup" is used.
#  367|           const std::string           &baseTitleFallback)
#  368|   {
#  369|->     assert(baseLookup);
#  370|       d->baseLookup = baseLookup;
#  371|       d->checkerIgnRegex = checkerIgnRegex;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:371: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  369|       assert(baseLookup);
#  370|       d->baseLookup = baseLookup;
#  371|->     d->checkerIgnRegex = checkerIgnRegex;
#  372|   
#  373|       // TODO: merge with already existing metadata stomping on the same keys

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:376: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  374|       TScanProps::const_iterator it = baseProps.find("cov-compilation-unit-count");
#  375|       if (baseProps.end() != it)
#  376|->         d->scanProps["diffbase-cov-compilation-unit-count"] = it->second;
#  377|       it = baseProps.find("cov-compilation-unit-ratio");
#  378|       if (baseProps.end() != it)

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:376: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  374|       TScanProps::const_iterator it = baseProps.find("cov-compilation-unit-count");
#  375|       if (baseProps.end() != it)
#  376|->         d->scanProps["diffbase-cov-compilation-unit-count"] = it->second;
#  377|       it = baseProps.find("cov-compilation-unit-ratio");
#  378|       if (baseProps.end() != it)

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:376: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  374|       TScanProps::const_iterator it = baseProps.find("cov-compilation-unit-count");
#  375|       if (baseProps.end() != it)
#  376|->         d->scanProps["diffbase-cov-compilation-unit-count"] = it->second;
#  377|       it = baseProps.find("cov-compilation-unit-ratio");
#  378|       if (baseProps.end() != it)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:379: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  377|       it = baseProps.find("cov-compilation-unit-ratio");
#  378|       if (baseProps.end() != it)
#  379|->         d->scanProps["diffbase-cov-compilation-unit-ratio"] = it->second;
#  380|   
#  381|       it = baseProps.find("project-name");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:379: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  377|       it = baseProps.find("cov-compilation-unit-ratio");
#  378|       if (baseProps.end() != it)
#  379|->         d->scanProps["diffbase-cov-compilation-unit-ratio"] = it->second;
#  380|   
#  381|       it = baseProps.find("project-name");

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:379: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  377|       it = baseProps.find("cov-compilation-unit-ratio");
#  378|       if (baseProps.end() != it)
#  379|->         d->scanProps["diffbase-cov-compilation-unit-ratio"] = it->second;
#  380|   
#  381|       it = baseProps.find("project-name");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:387: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  385|   
#  386|       if (projName.empty()) {
#  387|->         d->newDefMsg = "newly introduced defect";
#  388|           return;
#  389|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:388: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  386|       if (projName.empty()) {
#  387|           d->newDefMsg = "newly introduced defect";
#  388|->         return;
#  389|       }
#  390|   

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:388: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  386|       if (projName.empty()) {
#  387|           d->newDefMsg = "newly introduced defect";
#  388|->         return;
#  389|       }
#  390|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:391: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  389|       }
#  390|   
#  391|->     d->newDefMsg += "defect not occurring in <b>";
#  392|       d->newDefMsg += projName;
#  393|       d->newDefMsg += "</b>";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:392: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  390|   
#  391|       d->newDefMsg += "defect not occurring in <b>";
#  392|->     d->newDefMsg += projName;
#  393|       d->newDefMsg += "</b>";
#  394|   }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:393: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  391|       d->newDefMsg += "defect not occurring in <b>";
#  392|       d->newDefMsg += projName;
#  393|->     d->newDefMsg += "</b>";
#  394|   }
#  395|   

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:396: misra_c_2012_rule_8_13_violation: The member function "HtmlWriter::setPlainTextUrl(std::string const &)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  394|   }
#  395|   
#  396|-> void HtmlWriter::setPlainTextUrl(const std::string &url)
#  397|   {
#  398|       d->plainTextUrl = url;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:398: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  396|   void HtmlWriter::setPlainTextUrl(const std::string &url)
#  397|   {
#  398|->     d->plainTextUrl = url;
#  399|   }
#  400|   

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:401: misra_c_2012_rule_8_13_violation: The member function "HtmlWriter::setCweNameLookup(CweNameLookup const *)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  399|   }
#  400|   
#  401|-> void HtmlWriter::setCweNameLookup(const CweNameLookup *cweNames)
#  402|   {
#  403|       d->cweNames = cweNames;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:401: misra_cpp_2008_rule_7_1_1_violation: The variable "cweNames" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  399|   }
#  400|   
#  401|-> void HtmlWriter::setCweNameLookup(const CweNameLookup *cweNames)
#  402|   {
#  403|       d->cweNames = cweNames;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:408: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  406|   void HtmlWriter::Private::writeLinkToDetails(const Defect &def)
#  407|   {
#  408|->     const int defId = def.defectId;
#  409|       if (!defId)
#  410|           // no defect ID

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:408: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  406|   void HtmlWriter::Private::writeLinkToDetails(const Defect &def)
#  407|   {
#  408|->     const int defId = def.defectId;
#  409|       if (!defId)
#  410|           // no defect ID

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:409: misra_c_2012_rule_10_1_violation: The expression "defId" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  407|   {
#  408|       const int defId = def.defectId;
#  409|->     if (!defId)
#  410|           // no defect ID
#  411|           return;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:409: misra_cpp_2008_rule_5_0_13_violation: The type of "defId" is not bool in the condition of "if-statement".
#  407|   {
#  408|       const int defId = def.defectId;
#  409|->     if (!defId)
#  410|           // no defect ID
#  411|           return;

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:409: misra_cpp_2008_rule_5_3_1_violation: Operand "defId" of the operator "!" is not bool type.
#  407|   {
#  408|       const int defId = def.defectId;
#  409|->     if (!defId)
#  410|           // no defect ID
#  411|           return;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:411: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  409|       if (!defId)
#  410|           // no defect ID
#  411|->         return;
#  412|   
#  413|       if (this->defUrlTemplate.empty())

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:411: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  409|       if (!defId)
#  410|           // no defect ID
#  411|->         return;
#  412|   
#  413|       if (this->defUrlTemplate.empty())

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:411: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  409|       if (!defId)
#  410|           // no defect ID
#  411|->         return;
#  412|   
#  413|       if (this->defUrlTemplate.empty())

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:411: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  409|       if (!defId)
#  410|           // no defect ID
#  411|->         return;
#  412|   
#  413|       if (this->defUrlTemplate.empty())

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:415: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  413|       if (this->defUrlTemplate.empty())
#  414|           // no defect URL template
#  415|->         return;
#  416|   
#  417|       const TScanProps::const_iterator it = this->scanProps.find("project-id");

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:415: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  413|       if (this->defUrlTemplate.empty())
#  414|           // no defect URL template
#  415|->         return;
#  416|   
#  417|       const TScanProps::const_iterator it = this->scanProps.find("project-id");

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:415: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  413|       if (this->defUrlTemplate.empty())
#  414|           // no defect URL template
#  415|->         return;
#  416|   
#  417|       const TScanProps::const_iterator it = this->scanProps.find("project-id");

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:415: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  413|       if (this->defUrlTemplate.empty())
#  414|           // no defect URL template
#  415|->         return;
#  416|   
#  417|       const TScanProps::const_iterator it = this->scanProps.find("project-id");

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:420: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  418|       if (this->scanProps.end() == it)
#  419|           // no project ID
#  420|->         return;
#  421|   
#  422|       try {

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:420: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  418|       if (this->scanProps.end() == it)
#  419|           // no project ID
#  420|->         return;
#  421|   
#  422|       try {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:420: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  418|       if (this->scanProps.end() == it)
#  419|           // no project ID
#  420|->         return;
#  421|   
#  422|       try {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:420: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  418|       if (this->scanProps.end() == it)
#  419|           // no project ID
#  420|->         return;
#  421|   
#  422|       try {

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:423: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  421|   
#  422|       try {
#  423|->         const int projId = boost::lexical_cast<int>(it->second);
#  424|   
#  425|           // write the link

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:423: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  421|   
#  422|       try {
#  423|->         const int projId = boost::lexical_cast<int>(it->second);
#  424|   
#  425|           // write the link

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:426: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  424|   
#  425|           // write the link
#  426|->         this->str << " <a href ='"
#  427|               << boost::format(this->defUrlTemplate) % projId % defId
#  428|               << "'>[Show Details]</a>";

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:426: misra_cpp_2008_rule_5_0_2_violation: "boost::format(this->defUrlTemplate) % projId % defId" should be parenthesized.
#  424|   
#  425|           // write the link
#  426|->         this->str << " <a href ='"
#  427|               << boost::format(this->defUrlTemplate) % projId % defId
#  428|               << "'>[Show Details]</a>";

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:435: misra_c_2012_rule_8_13_violation: The member function "HtmlWriter::Private::writeNewDefWarning(Defect const &)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#  433|   }
#  434|   
#  435|-> void HtmlWriter::Private::writeNewDefWarning(const Defect &def)
#  436|   {
#  437|       if (!this->baseLookup)

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:437: misra_c_2012_rule_10_1_violation: The expression "this->baseLookup" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  435|   void HtmlWriter::Private::writeNewDefWarning(const Defect &def)
#  436|   {
#  437|->     if (!this->baseLookup)
#  438|           // not lookup set
#  439|           return;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:437: misra_cpp_2008_rule_5_0_13_violation: The type of "this->baseLookup" is not bool in the condition of "if-statement".
#  435|   void HtmlWriter::Private::writeNewDefWarning(const Defect &def)
#  436|   {
#  437|->     if (!this->baseLookup)
#  438|           // not lookup set
#  439|           return;

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:437: misra_cpp_2008_rule_5_3_1_violation: Operand "this->baseLookup" of the operator "!" is not bool type.
#  435|   void HtmlWriter::Private::writeNewDefWarning(const Defect &def)
#  436|   {
#  437|->     if (!this->baseLookup)
#  438|           // not lookup set
#  439|           return;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:439: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  437|       if (!this->baseLookup)
#  438|           // not lookup set
#  439|->         return;
#  440|   
#  441|       if (boost::regex_match(def.checker, this->checkerIgnRegex))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:439: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  437|       if (!this->baseLookup)
#  438|           // not lookup set
#  439|->         return;
#  440|   
#  441|       if (boost::regex_match(def.checker, this->checkerIgnRegex))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:439: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  437|       if (!this->baseLookup)
#  438|           // not lookup set
#  439|->         return;
#  440|   
#  441|       if (boost::regex_match(def.checker, this->checkerIgnRegex))

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:439: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  437|       if (!this->baseLookup)
#  438|           // not lookup set
#  439|->         return;
#  440|   
#  441|       if (boost::regex_match(def.checker, this->checkerIgnRegex))

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:443: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  441|       if (boost::regex_match(def.checker, this->checkerIgnRegex))
#  442|           // user requested to ignore this checker for lookup
#  443|->         return;
#  444|   
#  445|       if (this->baseLookup->lookup(def))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:443: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  441|       if (boost::regex_match(def.checker, this->checkerIgnRegex))
#  442|           // user requested to ignore this checker for lookup
#  443|->         return;
#  444|   
#  445|       if (this->baseLookup->lookup(def))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:443: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  441|       if (boost::regex_match(def.checker, this->checkerIgnRegex))
#  442|           // user requested to ignore this checker for lookup
#  443|->         return;
#  444|   
#  445|       if (this->baseLookup->lookup(def))

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:443: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  441|       if (boost::regex_match(def.checker, this->checkerIgnRegex))
#  442|           // user requested to ignore this checker for lookup
#  443|->         return;
#  444|   
#  445|       if (this->baseLookup->lookup(def))

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:447: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  445|       if (this->baseLookup->lookup(def))
#  446|           // defect found in the lookup
#  447|->         return;
#  448|   
#  449|       // a newly introduced defect

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:447: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  445|       if (this->baseLookup->lookup(def))
#  446|           // defect found in the lookup
#  447|->         return;
#  448|   
#  449|       // a newly introduced defect

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:447: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  445|       if (this->baseLookup->lookup(def))
#  446|           // defect found in the lookup
#  447|->         return;
#  448|   
#  449|       // a newly introduced defect

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:447: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  445|       if (this->baseLookup->lookup(def))
#  446|           // defect found in the lookup
#  447|->         return;
#  448|   
#  449|       // a newly introduced defect

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:450: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  448|   
#  449|       // a newly introduced defect
#  450|->     this->str << " <span style='color: #00FF00;'>[<b>warning:</b> "
#  451|           << this->newDefMsg << "]</span>";
#  452|   }

Error: MISRA C-2012 Rule 13.3 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:459: misra_c_2012_rule_13_3_violation: Operator "++this->d->defCnt" in full expression with other potential side effects.
#  457|   
#  458|       // HTML anchor
#  459|->     d->str << "<a name='def" << ++(d->defCnt) << "'/>";
#  460|   
#  461|       d->str << "<b>Error: <span style='background: #C0FF00;'>"

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:459: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  457|   
#  458|       // HTML anchor
#  459|->     d->str << "<a name='def" << ++(d->defCnt) << "'/>";
#  460|   
#  461|       d->str << "<b>Error: <span style='background: #C0FF00;'>"

Error: MISRA C++-2008 Rule 5-2-10 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:459: misra_cpp_2008_rule_5_2_10_violation: The ++ or -- operator is mixed with other operators in expression "((this->d->str << "<a name='def") << ++this->d->defCnt) << "'/>"".
#  457|   
#  458|       // HTML anchor
#  459|->     d->str << "<a name='def" << ++(d->defCnt) << "'/>";
#  460|   
#  461|       d->str << "<b>Error: <span style='background: #C0FF00;'>"

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:461: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  459|       d->str << "<a name='def" << ++(d->defCnt) << "'/>";
#  460|   
#  461|->     d->str << "<b>Error: <span style='background: #C0FF00;'>"
#  462|           << HtmlLib::escapeTextInline(def.checker) << "</span>";
#  463|   

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:464: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  462|           << HtmlLib::escapeTextInline(def.checker) << "</span>";
#  463|   
#  464|->     const int cwe = def.cwe;
#  465|       if (cwe) {
#  466|           std::string cweName;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:464: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  462|           << HtmlLib::escapeTextInline(def.checker) << "</span>";
#  463|   
#  464|->     const int cwe = def.cwe;
#  465|       if (cwe) {
#  466|           std::string cweName;

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:465: misra_c_2012_rule_14_4_violation: The condition expression "cwe" does not have an essentially boolean type.
#  463|   
#  464|       const int cwe = def.cwe;
#  465|->     if (cwe) {
#  466|           std::string cweName;
#  467|           if (d->cweNames)

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:465: misra_cpp_2008_rule_5_0_13_violation: The type of "cwe" is not bool in the condition of "if-statement".
#  463|   
#  464|       const int cwe = def.cwe;
#  465|->     if (cwe) {
#  466|           std::string cweName;
#  467|           if (d->cweNames)

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:467: misra_c_2012_rule_14_4_violation: The condition expression "this->d->cweNames" does not have an essentially boolean type.
#  465|       if (cwe) {
#  466|           std::string cweName;
#  467|->         if (d->cweNames)
#  468|               cweName = d->cweNames->lookup(cwe);
#  469|           d->str << " (";

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:467: misra_cpp_2008_rule_5_0_13_violation: The type of "this->d->cweNames" is not bool in the condition of "if-statement".
#  465|       if (cwe) {
#  466|           std::string cweName;
#  467|->         if (d->cweNames)
#  468|               cweName = d->cweNames->lookup(cwe);
#  469|           d->str << " (";

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:468: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  466|           std::string cweName;
#  467|           if (d->cweNames)
#  468|->             cweName = d->cweNames->lookup(cwe);
#  469|           d->str << " (";
#  470|           printCweLink(d->str, cwe, cweName);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:468: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  466|           std::string cweName;
#  467|           if (d->cweNames)
#  468|->             cweName = d->cweNames->lookup(cwe);
#  469|           d->str << " (";
#  470|           printCweLink(d->str, cwe, cweName);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:468: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  466|           std::string cweName;
#  467|           if (d->cweNames)
#  468|->             cweName = d->cweNames->lookup(cwe);
#  469|           d->str << " (";
#  470|           printCweLink(d->str, cwe, cweName);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:469: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  467|           if (d->cweNames)
#  468|               cweName = d->cweNames->lookup(cwe);
#  469|->         d->str << " (";
#  470|           printCweLink(d->str, cwe, cweName);
#  471|           d->str << ")";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:471: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  469|           d->str << " (";
#  470|           printCweLink(d->str, cwe, cweName);
#  471|->         d->str << ")";
#  472|       }
#  473|       else

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:474: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  472|       }
#  473|       else
#  474|->         d->str << HtmlLib::escapeTextInline(def.annotation);
#  475|   
#  476|       d->str << ":</b>";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:474: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  472|       }
#  473|       else
#  474|->         d->str << HtmlLib::escapeTextInline(def.annotation);
#  475|   
#  476|       d->str << ":</b>";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:474: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  472|       }
#  473|       else
#  474|->         d->str << HtmlLib::escapeTextInline(def.annotation);
#  475|   
#  476|       d->str << ":</b>";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:476: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  474|           d->str << HtmlLib::escapeTextInline(def.annotation);
#  475|   
#  476|->     d->str << ":</b>";
#  477|   
#  478|       d->writeLinkToDetails(def);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:481: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  479|   
#  480|       // link to self
#  481|->     d->str << " <a href ='#def"
#  482|           << d->defCnt << "'>[#def"
#  483|           << d->defCnt << "]</a>";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:487: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  485|       if (0 < def.imp) {
#  486|           // highlight the "imp" flag
#  487|->         d->str << " <span style='color: #FF0000; font-weight: bold;'>"
#  488|               "[important]</span>";
#  489|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:493: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  491|       d->writeNewDefWarning(def);
#  492|       
#  493|->     d->str << "\n";
#  494|   
#  495|       const unsigned cntEvents = def.events.size();

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:495: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  493|       d->str << "\n";
#  494|   
#  495|->     const unsigned cntEvents = def.events.size();
#  496|       for (unsigned idx = 0; idx < cntEvents; ++idx) {
#  497|           const DefEvent &evt = def.events[idx];

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:495: misra_c_2012_rule_10_3_violation: Implicit conversion of "def.events.size()" from essential type "non-essential type" to different or narrower essential type "unsigned 32-bit int".
#  493|       d->str << "\n";
#  494|   
#  495|->     const unsigned cntEvents = def.events.size();
#  496|       for (unsigned idx = 0; idx < cntEvents; ++idx) {
#  497|           const DefEvent &evt = def.events[idx];

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:495: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  493|       d->str << "\n";
#  494|   
#  495|->     const unsigned cntEvents = def.events.size();
#  496|       for (unsigned idx = 0; idx < cntEvents; ++idx) {
#  497|           const DefEvent &evt = def.events[idx];

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:495: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "def.events.size()" is implicitly reduced from "64-bit unsigned long" to "32-bit unsigned int".
#  493|       d->str << "\n";
#  494|   
#  495|->     const unsigned cntEvents = def.events.size();
#  496|       for (unsigned idx = 0; idx < cntEvents; ++idx) {
#  497|           const DefEvent &evt = def.events[idx];

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:496: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  494|   
#  495|       const unsigned cntEvents = def.events.size();
#  496|->     for (unsigned idx = 0; idx < cntEvents; ++idx) {
#  497|           const DefEvent &evt = def.events[idx];
#  498|           const bool isComment = (evt.event == "#");

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:496: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  494|   
#  495|       const unsigned cntEvents = def.events.size();
#  496|->     for (unsigned idx = 0; idx < cntEvents; ++idx) {
#  497|           const DefEvent &evt = def.events[idx];
#  498|           const bool isComment = (evt.event == "#");

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:496: misra_cpp_2008_rule_5_0_4_violation: "0" is implicitly converted from a signed value to an unsigned value.
#  494|   
#  495|       const unsigned cntEvents = def.events.size();
#  496|->     for (unsigned idx = 0; idx < cntEvents; ++idx) {
#  497|           const DefEvent &evt = def.events[idx];
#  498|           const bool isComment = (evt.event == "#");

Error: MISRA C-2012 Rule 16.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:500: missing_default: No default case found for the switch statement "switch (evt.verbosityLevel)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:500: misra_c_2012_rule_16_1_violation: The switch statement is not well formed.
#  498|           const bool isComment = (evt.event == "#");
#  499|   
#  500|->         switch (evt.verbosityLevel) {
#  501|               case 1:
#  502|                   if (isComment)

Error: MISRA C-2012 Rule 16.4 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:500: misra_c_2012_rule_16_4_violation: The switch statement "switch (evt.verbosityLevel)"does not have a non-empty default clause.
#  498|           const bool isComment = (evt.event == "#");
#  499|   
#  500|->         switch (evt.verbosityLevel) {
#  501|               case 1:
#  502|                   if (isComment)

Error: MISRA C++-2008 Rule 6-4-6 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:500: misra_cpp_2008_rule_6_4_6_violation: The final clause of a switch statement "switch (evt.verbosityLevel)" is not a default-clause.
#  498|           const bool isComment = (evt.event == "#");
#  499|   
#  500|->         switch (evt.verbosityLevel) {
#  501|               case 1:
#  502|                   if (isComment)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:503: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  501|               case 1:
#  502|                   if (isComment)
#  503|->                     d->str << "<span style='color: #00C0C0;'>";
#  504|                   else
#  505|                       d->str << "<span style='color: #808080;'>";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:503: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  501|               case 1:
#  502|                   if (isComment)
#  503|->                     d->str << "<span style='color: #00C0C0;'>";
#  504|                   else
#  505|                       d->str << "<span style='color: #808080;'>";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:503: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  501|               case 1:
#  502|                   if (isComment)
#  503|->                     d->str << "<span style='color: #00C0C0;'>";
#  504|                   else
#  505|                       d->str << "<span style='color: #808080;'>";

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:505: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  503|                       d->str << "<span style='color: #00C0C0;'>";
#  504|                   else
#  505|->                     d->str << "<span style='color: #808080;'>";
#  506|                   break;
#  507|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:505: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  503|                       d->str << "<span style='color: #00C0C0;'>";
#  504|                   else
#  505|->                     d->str << "<span style='color: #808080;'>";
#  506|                   break;
#  507|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:505: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  503|                       d->str << "<span style='color: #00C0C0;'>";
#  504|                   else
#  505|->                     d->str << "<span style='color: #808080;'>";
#  506|                   break;
#  507|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:509: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  507|   
#  508|               case 2:
#  509|->                 d->str << "<span style='color: #C0C0C0;'>";
#  510|                   break;
#  511|           }

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:514: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  512|   
#  513|           if (!evt.fileName.empty())
#  514|->             d->str << HtmlLib::escapeTextInline(evt.fileName) << ":";
#  515|           
#  516|           if (0 < evt.line)

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:514: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  512|   
#  513|           if (!evt.fileName.empty())
#  514|->             d->str << HtmlLib::escapeTextInline(evt.fileName) << ":";
#  515|           
#  516|           if (0 < evt.line)

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:514: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  512|   
#  513|           if (!evt.fileName.empty())
#  514|->             d->str << HtmlLib::escapeTextInline(evt.fileName) << ":";
#  515|           
#  516|           if (0 < evt.line)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:517: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  515|           
#  516|           if (0 < evt.line)
#  517|->             d->str << evt.line << ":";
#  518|   
#  519|           if (0 < evt.column)

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:517: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  515|           
#  516|           if (0 < evt.line)
#  517|->             d->str << evt.line << ":";
#  518|   
#  519|           if (0 < evt.column)

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:517: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  515|           
#  516|           if (0 < evt.line)
#  517|->             d->str << evt.line << ":";
#  518|   
#  519|           if (0 < evt.column)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:520: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  518|   
#  519|           if (0 < evt.column)
#  520|->             d->str << evt.column << ":";
#  521|   
#  522|           if (isComment) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:520: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  518|   
#  519|           if (0 < evt.column)
#  520|->             d->str << evt.column << ":";
#  521|   
#  522|           if (isComment) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:520: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  518|   
#  519|           if (0 < evt.column)
#  520|->             d->str << evt.column << ":";
#  521|   
#  522|           if (isComment) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:523: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  521|   
#  522|           if (isComment) {
#  523|->             d->str << "#";
#  524|           }
#  525|           else {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:526: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  524|           }
#  525|           else {
#  526|->             d->str << " ";
#  527|   
#  528|               boost::smatch sm;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:533: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  531|                   std::string msgId = HtmlLib::escapeTextInline(sm[/* id */ 2]);
#  532|                   if (def.checker == "SHELLCHECK_WARNING")
#  533|->                     linkifyShellCheckMsg(&msgId);
#  534|                   d->str
#  535|                       << HtmlLib::escapeTextInline(sm[1])

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:533: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  531|                   std::string msgId = HtmlLib::escapeTextInline(sm[/* id */ 2]);
#  532|                   if (def.checker == "SHELLCHECK_WARNING")
#  533|->                     linkifyShellCheckMsg(&msgId);
#  534|                   d->str
#  535|                       << HtmlLib::escapeTextInline(sm[1])

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:534: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  532|                   if (def.checker == "SHELLCHECK_WARNING")
#  533|                       linkifyShellCheckMsg(&msgId);
#  534|->                 d->str
#  535|                       << HtmlLib::escapeTextInline(sm[1])
#  536|                       << "<b>" << msgId << "</b>"

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:540: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  538|               }
#  539|               else
#  540|->                 d->str << "<b>" << HtmlLib::escapeTextInline(evtName) << "</b>";
#  541|   
#  542|               d->str << ": ";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:540: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  538|               }
#  539|               else
#  540|->                 d->str << "<b>" << HtmlLib::escapeTextInline(evtName) << "</b>";
#  541|   
#  542|               d->str << ": ";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:540: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  538|               }
#  539|               else
#  540|->                 d->str << "<b>" << HtmlLib::escapeTextInline(evtName) << "</b>";
#  541|   
#  542|               d->str << ": ";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:542: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  540|                   d->str << "<b>" << HtmlLib::escapeTextInline(evtName) << "</b>";
#  541|   
#  542|->             d->str << ": ";
#  543|           }
#  544|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:545: misra_cpp_2008_rule_7_1_1_violation: The variable "detector" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  543|           }
#  544|   
#  545|->         static CtxEventDetector detector;
#  546|           const bool isCtxLine = detector.isAnyCtxLine(evt);
#  547|           if (isCtxLine) {

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:548: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  546|           const bool isCtxLine = detector.isAnyCtxLine(evt);
#  547|           if (isCtxLine) {
#  548|->             const char *color = (detector.isKeyCtxLine(evt))
#  549|                   ? "000000"
#  550|                   : "C0C0C0";

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:548: misra_cpp_2008_rule_7_1_1_violation: The variable "color" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  546|           const bool isCtxLine = detector.isAnyCtxLine(evt);
#  547|           if (isCtxLine) {
#  548|->             const char *color = (detector.isKeyCtxLine(evt))
#  549|                   ? "000000"
#  550|                   : "C0C0C0";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:551: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  549|                   ? "000000"
#  550|                   : "C0C0C0";
#  551|->             d->str << "<span style='color: #" << color << ";'>";
#  552|           }
#  553|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:557: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  555|           std::string msgText = HtmlLib::escapeTextInline(evt.msg);
#  556|           if (def.checker == "SHELLCHECK_WARNING")
#  557|->             linkifyShellCheckMsg(&msgText);
#  558|           d->str << msgText;
#  559|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:557: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  555|           std::string msgText = HtmlLib::escapeTextInline(evt.msg);
#  556|           if (def.checker == "SHELLCHECK_WARNING")
#  557|->             linkifyShellCheckMsg(&msgText);
#  558|           d->str << msgText;
#  559|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:558: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  556|           if (def.checker == "SHELLCHECK_WARNING")
#  557|               linkifyShellCheckMsg(&msgText);
#  558|->         d->str << msgText;
#  559|   
#  560|           if (isCtxLine)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:561: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  559|   
#  560|           if (isCtxLine)
#  561|->             d->str << "</span>";
#  562|   
#  563|           switch (evt.verbosityLevel) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:561: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  559|   
#  560|           if (isCtxLine)
#  561|->             d->str << "</span>";
#  562|   
#  563|           switch (evt.verbosityLevel) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:561: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  559|   
#  560|           if (isCtxLine)
#  561|->             d->str << "</span>";
#  562|   
#  563|           switch (evt.verbosityLevel) {

Error: MISRA C-2012 Rule 16.1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:563: missing_default: No default case found for the switch statement "switch (evt.verbosityLevel)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:563: missing_clause: The switch statement does not have two or more conforming switch clauses.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:564: missing_break: This switch clause does not end with an unconditional break statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:563: misra_c_2012_rule_16_1_violation: The switch statement is not well formed.
#  561|               d->str << "</span>";
#  562|   
#  563|->         switch (evt.verbosityLevel) {
#  564|               case 1:
#  565|               case 2:

Error: MISRA C-2012 Rule 16.4 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:563: misra_c_2012_rule_16_4_violation: The switch statement "switch (evt.verbosityLevel)"does not have a non-empty default clause.
#  561|               d->str << "</span>";
#  562|   
#  563|->         switch (evt.verbosityLevel) {
#  564|               case 1:
#  565|               case 2:

Error: MISRA C-2012 Rule 16.6 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:563: misra_c_2012_rule_16_6_violation: The switch statement "switch (evt.verbosityLevel)" has no conforming switch clauses.
#  561|               d->str << "</span>";
#  562|   
#  563|->         switch (evt.verbosityLevel) {
#  564|               case 1:
#  565|               case 2:

Error: MISRA C++-2008 Rule 6-4-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:565: last_statement: The switch clause is not ended with a break or throw statement.
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:563: misra_cpp_2008_rule_6_4_3_violation: The switch statement is not well formed.
#  561|               d->str << "</span>";
#  562|   
#  563|->         switch (evt.verbosityLevel) {
#  564|               case 1:
#  565|               case 2:

Error: MISRA C++-2008 Rule 6-4-6 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:563: misra_cpp_2008_rule_6_4_6_violation: The final clause of a switch statement "switch (evt.verbosityLevel)" is not a default-clause.
#  561|               d->str << "</span>";
#  562|   
#  563|->         switch (evt.verbosityLevel) {
#  564|               case 1:
#  565|               case 2:

Error: MISRA C++-2008 Rule 6-4-8 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:563: misra_cpp_2008_rule_6_4_8_violation: The switch statement has no case-clause.
#  561|               d->str << "</span>";
#  562|   
#  563|->         switch (evt.verbosityLevel) {
#  564|               case 1:
#  565|               case 2:

Error: MISRA C-2012 Rule 16.3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:564: misra_c_2012_rule_16_3_violation: This switch clause does not end with an unconditional break statement.
#  562|   
#  563|           switch (evt.verbosityLevel) {
#  564|->             case 1:
#  565|               case 2:
#  566|                   d->str << "</span>";

Error: MISRA C++-2008 Rule 6-4-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:564: misra_cpp_2008_rule_6_4_5_violation: This switch clause does not end with an unconditional break statement.
#  562|   
#  563|           switch (evt.verbosityLevel) {
#  564|->             case 1:
#  565|               case 2:
#  566|                   d->str << "</span>";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:566: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  564|               case 1:
#  565|               case 2:
#  566|->                 d->str << "</span>";
#  567|           }
#  568|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:569: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  567|           }
#  568|   
#  569|->         d->str << "\n";
#  570|       }
#  571|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:572: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  570|       }
#  571|   
#  572|->     d->str << "\n";
#  573|   }
#  574|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:575: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  573|   }
#  574|   
#  575|-> void HtmlWriter::flush()
#  576|   {
#  577|       d->core.writeHeaderOnce(d->scanProps, d->plainTextUrl);

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.cc:575: misra_cpp_2008_rule_10_3_1_violation: Virtual function "HtmlWriter::flush()" has already been defined in "AbstractWriter::flush()".
#  573|   }
#  574|   
#  575|-> void HtmlWriter::flush()
#  576|   {
#  577|       d->core.writeHeaderOnce(d->scanProps, d->plainTextUrl);

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2012 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.hh:25: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "CweNameLookup".
#   23|   #include "abstract-writer.hh"
#   24|   
#   25|-> class CweNameLookup;
#   26|   class DefLookup;
#   27|   

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.hh:26: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "DefLookup".
#   24|   
#   25|   class CweNameLookup;
#   26|-> class DefLookup;
#   27|   
#   28|   class HtmlWriter: public AbstractWriter {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.hh:28: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "HtmlWriter".
#   26|   class DefLookup;
#   27|   
#   28|-> class HtmlWriter: public AbstractWriter {
#   29|       public:
#   30|           HtmlWriter(

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.hh:36: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   34|                   const std::string           &spPlacement);
#   35|   
#   36|->         virtual ~HtmlWriter();
#   37|   
#   38|           virtual const TScanProps& getScanProps() const;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.hh:38: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   36|           virtual ~HtmlWriter();
#   37|   
#   38|->         virtual const TScanProps& getScanProps() const;
#   39|           virtual void setScanProps(const TScanProps &);
#   40|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.hh:39: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   37|   
#   38|           virtual const TScanProps& getScanProps() const;
#   39|->         virtual void setScanProps(const TScanProps &);
#   40|   
#   41|           virtual void handleDef(const Defect &def);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.hh:42: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   40|   
#   41|           virtual void handleDef(const Defect &def);
#   42|->         virtual void flush();
#   43|   
#   44|           /// @attention baseLookup needs to stay valid long enough (no deep copy)

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/html-writer.hh:51: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   49|                   const std::string           &baseTitleFallback);
#   50|   
#   51|->         void setPlainTextUrl(const std::string &);
#   52|   
#   53|           /// @attention cweNames needs to stay valid long enough (no deep copy)

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011 - 2021 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:22: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "InStream::InStream(const std::string &, bool)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:41: prev_declaration: (see previous declaration of "InStream::InStream" at line 41 of "../../src/instream.hh")
#   20|   #include "instream.hh"
#   21|   
#   22|-> InStream::InStream(const std::string &fileName, const bool silent):
#   23|       fileName_(fileName),
#   24|       silent_(silent),

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:26: misra_c_2012_rule_10_1_violation: The expression "this->fileName_.compare("-")" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#   24|       silent_(silent),
#   25|       anyError_(false),
#   26|->     str_((!fileName_.compare("-"))
#   27|                   ? std::cin
#   28|                   : fileStr_)

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:26: misra_cpp_2008_rule_5_3_1_violation: Operand "this->fileName_.compare("-")" of the operator "!" is not bool type.
#   24|       silent_(silent),
#   25|       anyError_(false),
#   26|->     str_((!fileName_.compare("-"))
#   27|                   ? std::cin
#   28|                   : fileStr_)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:31: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   29|   {
#   30|       if (&str_ == &fileStr_)
#   31|->         fileStr_.open(fileName_, std::ios::in);
#   32|   
#   33|       if (!fileStr_)

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:31: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   29|   {
#   30|       if (&str_ == &fileStr_)
#   31|->         fileStr_.open(fileName_, std::ios::in);
#   32|   
#   33|       if (!fileStr_)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:34: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   32|   
#   33|       if (!fileStr_)
#   34|->         throw InFileException(fileName_);
#   35|   }
#   36|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:34: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   32|   
#   33|       if (!fileStr_)
#   34|->         throw InFileException(fileName_);
#   35|   }
#   36|   

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:37: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "InStream::InStream(std::istringstream &, bool)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:42: prev_declaration: (see previous declaration of "InStream::InStream" at line 42 of "../../src/instream.hh")
#   35|   }
#   36|   
#   37|-> InStream::InStream(std::istringstream &str, const bool silent):
#   38|       silent_(silent),
#   39|       anyError_(false),

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:44: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   42|   }
#   43|   
#   44|-> InStream::~InStream()
#   45|   {
#   46|       if (&str_ == &fileStr_)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:47: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   45|   {
#   46|       if (&str_ == &fileStr_)
#   47|->         fileStr_.close();
#   48|   }
#   49|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:47: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   45|   {
#   46|       if (&str_ == &fileStr_)
#   47|->         fileStr_.close();
#   48|   }
#   49|   

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:50: misra_c_2012_directive_4_6_violation: Using basic numerical type "long" rather than a typedef that includes size and signedness information.
#   48|   }
#   49|   
#   50|-> void InStream::handleError(const std::string msg, const long line)
#   51|   {
#   52|       anyError_ = true;

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:50: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "void InStream::handleError(std::string, long)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:50: prev_declaration: (see previous declaration of "InStream::handleError" at line 50 of "../../src/instream.hh")
#   48|   }
#   49|   
#   50|-> void InStream::handleError(const std::string msg, const long line)
#   51|   {
#   52|       anyError_ = true;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:50: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "long" rather than a typedef that includes size and signedness information.
#   48|   }
#   49|   
#   50|-> void InStream::handleError(const std::string msg, const long line)
#   51|   {
#   52|       anyError_ = true;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:54: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   52|       anyError_ = true;
#   53|       if (silent_ || msg.empty())
#   54|->         return;
#   55|   
#   56|       std::cerr << fileName_;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:54: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   52|       anyError_ = true;
#   53|       if (silent_ || msg.empty())
#   54|->         return;
#   55|   
#   56|       std::cerr << fileName_;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:54: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   52|       anyError_ = true;
#   53|       if (silent_ || msg.empty())
#   54|->         return;
#   55|   
#   56|       std::cerr << fileName_;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:54: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   52|       anyError_ = true;
#   53|       if (silent_ || msg.empty())
#   54|->         return;
#   55|   
#   56|       std::cerr << fileName_;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:56: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   54|           return;
#   55|   
#   56|->     std::cerr << fileName_;
#   57|   
#   58|       if (line)

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:58: misra_c_2012_rule_14_4_violation: The condition expression "line" does not have an essentially boolean type.
#   56|       std::cerr << fileName_;
#   57|   
#   58|->     if (line)
#   59|           // line number available
#   60|           std::cerr << ":" << line;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:58: misra_cpp_2008_rule_5_0_13_violation: The type of "line" is not bool in the condition of "if-statement".
#   56|       std::cerr << fileName_;
#   57|   
#   58|->     if (line)
#   59|           // line number available
#   60|           std::cerr << ":" << line;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:60: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   58|       if (line)
#   59|           // line number available
#   60|->         std::cerr << ":" << line;
#   61|   
#   62|       std::cerr << ": error: " << msg << "\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:60: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   58|       if (line)
#   59|           // line number available
#   60|->         std::cerr << ":" << line;
#   61|   
#   62|       std::cerr << ": error: " << msg << "\n";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:60: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   58|       if (line)
#   59|           // line number available
#   60|->         std::cerr << ":" << line;
#   61|   
#   62|       std::cerr << ": error: " << msg << "\n";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:62: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   60|           std::cerr << ":" << line;
#   61|   
#   62|->     std::cerr << ": error: " << msg << "\n";
#   63|   }
#   64|   

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:65: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   63|   }
#   64|   
#   65|-> InStreamLookAhead::InStreamLookAhead(InStream &input, const unsigned size)
#   66|   {
#   67|       std::istream &inStr = input.str();

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:65: misra_c_2012_rule_8_13_violation: The pointer variable "input" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#   63|   }
#   64|   
#   65|-> InStreamLookAhead::InStreamLookAhead(InStream &input, const unsigned size)
#   66|   {
#   67|       std::istream &inStr = input.str();

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:65: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "InStreamLookAhead::InStreamLookAhead(InStream &, unsigned int)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:62: prev_declaration: (see previous declaration of "InStreamLookAhead::InStreamLookAhead" at line 62 of "../../src/instream.hh")
#   63|   }
#   64|   
#   65|-> InStreamLookAhead::InStreamLookAhead(InStream &input, const unsigned size)
#   66|   {
#   67|       std::istream &inStr = input.str();

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:65: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   63|   }
#   64|   
#   65|-> InStreamLookAhead::InStreamLookAhead(InStream &input, const unsigned size)
#   66|   {
#   67|       std::istream &inStr = input.str();

Error: MISRA C++-2008 Rule 7-1-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:65: misra_cpp_2008_rule_7_1_2_violation: The pointer variable "input" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#   63|   }
#   64|   
#   65|-> InStreamLookAhead::InStreamLookAhead(InStream &input, const unsigned size)
#   66|   {
#   67|       std::istream &inStr = input.str();

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:67: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "inStr" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:76: end_of_scope: Reached end of scope without using value stored in "inStr".
#   65|   InStreamLookAhead::InStreamLookAhead(InStream &input, const unsigned size)
#   66|   {
#   67|->     std::istream &inStr = input.str();
#   68|   
#   69|       // read `size` chars from input

Error: CHAR_IO (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:71: char_io: Assigning the return value of istream function "get" to char "<temporary>" truncates its value.
#   69|       // read `size` chars from input
#   70|       while (buf_.size() < size)
#   71|->         buf_.push_back(inStr.get());
#   72|   
#   73|       // put the chars back to the input stream

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:71: misra_c_2012_rule_15_6_violation: The body of the "while" loop is not a compound statement.
#   69|       // read `size` chars from input
#   70|       while (buf_.size() < size)
#   71|->         buf_.push_back(inStr.get());
#   72|   
#   73|       // put the chars back to the input stream

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:71: misra_cpp_2008_rule_5_0_11_violation: Plain char type is used for storage of non-character values of "inStr->get()".
#   69|       // read `size` chars from input
#   70|       while (buf_.size() < size)
#   71|->         buf_.push_back(inStr.get());
#   72|   
#   73|       // put the chars back to the input stream

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:71: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "inStr->get()" is implicitly reduced from "32-bit signed int" to "char".
#   69|       // read `size` chars from input
#   70|       while (buf_.size() < size)
#   71|->         buf_.push_back(inStr.get());
#   72|   
#   73|       // put the chars back to the input stream

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:71: misra_cpp_2008_rule_6_3_1_violation: The body of the "while" loop is not a compound statement.
#   69|       // read `size` chars from input
#   70|       while (buf_.size() < size)
#   71|->         buf_.push_back(inStr.get());
#   72|   
#   73|       // put the chars back to the input stream

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:74: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#   72|   
#   73|       // put the chars back to the input stream
#   74|->     for (auto it = buf_.rbegin(); it != buf_.rend(); ++it)
#   75|           inStr.putback(*it);
#   76|   }

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:75: misra_c_2012_rule_15_6_violation: The body of the "for" loop is not a compound statement.
#   73|       // put the chars back to the input stream
#   74|       for (auto it = buf_.rbegin(); it != buf_.rend(); ++it)
#   75|->         inStr.putback(*it);
#   76|   }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:75: misra_c_2012_rule_17_7_violation: The return value of a non-void function "putback" is unused.
#   73|       // put the chars back to the input stream
#   74|       for (auto it = buf_.rbegin(); it != buf_.rend(); ++it)
#   75|->         inStr.putback(*it);
#   76|   }

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:75: misra_cpp_2008_rule_0_1_7_violation: The return value of function "inStr->putback(*it)" is not used.
#   73|       // put the chars back to the input stream
#   74|       for (auto it = buf_.rbegin(); it != buf_.rend(); ++it)
#   75|->         inStr.putback(*it);
#   76|   }

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:75: misra_cpp_2008_rule_6_3_1_violation: The body of the "for" loop is not a compound statement.
#   73|       // put the chars back to the input stream
#   74|       for (auto it = buf_.rbegin(); it != buf_.rend(); ++it)
#   75|->         inStr.putback(*it);
#   76|   }

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011 - 2021 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:29: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "InFileException".
#   27|   #include <vector>
#   28|   
#   29|-> struct InFileException {
#   30|       std::string fileName;
#   31|       // TODO: details (errno?)

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:30: misra_cpp_2008_rule_11_0_1_violation: Member "fileName" is not private but "InFileException" is a non-POD type.
#   28|   
#   29|   struct InFileException {
#   30|->     std::string fileName;
#   31|       // TODO: details (errno?)
#   32|   

Error: MISRA C-2012 Directive 4.4 (CWE-1078):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:31: misra_c_2012_directive_4_4_violation: The comment resembles a code snippet.
#   29|   struct InFileException {
#   30|       std::string fileName;
#   31|->     // TODO: details (errno?)
#   32|   
#   33|       InFileException(const std::string &fileName_):

Error: MISRA C++-2008 Rule 2-7-3 (CWE-1078):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:31: misra_cpp_2008_rule_2_7_3_violation: The comment resembles a code snippet.
#   29|   struct InFileException {
#   30|       std::string fileName;
#   31|->     // TODO: details (errno?)
#   32|   
#   33|       InFileException(const std::string &fileName_):

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:33: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "fileName_" clashes with "fileName"
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:30: misra_typographically_ambiguous_orig: (Previously declared symbol "fileName" at line 30)
#   31|       // TODO: details (errno?)
#   32|   
#   33|->     InFileException(const std::string &fileName_):
#   34|           fileName(fileName_)
#   35|       {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:39: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "InStream".
#   37|   };
#   38|   
#   39|-> class InStream {
#   40|       public:
#   41|           InStream(const std::string &fileName, bool silent = false);

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:41: misra_c_2012_rule_8_3_violation: Symbol "InStream" is declared more than once and with types that are not identical.
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:22: definition: Definition for "InStream".
#   39|   class InStream {
#   40|       public:
#   41|->         InStream(const std::string &fileName, bool silent = false);
#   42|           InStream(std::istringstream &str, bool silent = false);
#   43|           ~InStream();

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:42: misra_c_2012_rule_8_3_violation: Symbol "InStream" is declared more than once and with types that are not identical.
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:37: definition: Definition for "InStream".
#   40|       public:
#   41|           InStream(const std::string &fileName, bool silent = false);
#   42|->         InStream(std::istringstream &str, bool silent = false);
#   43|           ~InStream();
#   44|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:43: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   41|           InStream(const std::string &fileName, bool silent = false);
#   42|           InStream(std::istringstream &str, bool silent = false);
#   43|->         ~InStream();
#   44|   
#   45|           const std::string& fileName()   const { return fileName_;   }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:45: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   43|           ~InStream();
#   44|   
#   45|->         const std::string& fileName()   const { return fileName_;   }
#   46|           std::istream& str()             const { return str_;        }
#   47|           bool silent()                   const { return silent_;     }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:46: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   44|   
#   45|           const std::string& fileName()   const { return fileName_;   }
#   46|->         std::istream& str()             const { return str_;        }
#   47|           bool silent()                   const { return silent_;     }
#   48|           bool anyError()                 const { return anyError_;   }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:47: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   45|           const std::string& fileName()   const { return fileName_;   }
#   46|           std::istream& str()             const { return str_;        }
#   47|->         bool silent()                   const { return silent_;     }
#   48|           bool anyError()                 const { return anyError_;   }
#   49|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:48: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   46|           std::istream& str()             const { return str_;        }
#   47|           bool silent()                   const { return silent_;     }
#   48|->         bool anyError()                 const { return anyError_;   }
#   49|   
#   50|           void handleError(std::string msg = std::string(), long line = 0L);

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:50: misra_c_2012_directive_4_6_violation: Using basic numerical type "long" rather than a typedef that includes size and signedness information.
#   48|           bool anyError()                 const { return anyError_;   }
#   49|   
#   50|->         void handleError(std::string msg = std::string(), long line = 0L);
#   51|   
#   52|       private:

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:50: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "long" rather than a typedef that includes size and signedness information.
#   48|           bool anyError()                 const { return anyError_;   }
#   49|   
#   50|->         void handleError(std::string msg = std::string(), long line = 0L);
#   51|   
#   52|       private:

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:53: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "fileName_" clashes with "fileName"
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:45: misra_typographically_ambiguous_orig: (Previously declared symbol "fileName" at line 45)
#   51|   
#   52|       private:
#   53|->         const std::string   fileName_;
#   54|           const bool          silent_;
#   55|           bool                anyError_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:54: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "silent_" clashes with "silent"
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:47: misra_typographically_ambiguous_orig: (Previously declared symbol "silent" at line 47)
#   52|       private:
#   53|           const std::string   fileName_;
#   54|->         const bool          silent_;
#   55|           bool                anyError_;
#   56|           std::fstream        fileStr_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:55: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "anyError_" clashes with "anyError"
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:48: misra_typographically_ambiguous_orig: (Previously declared symbol "anyError" at line 48)
#   53|           const std::string   fileName_;
#   54|           const bool          silent_;
#   55|->         bool                anyError_;
#   56|           std::fstream        fileStr_;
#   57|           std::istream       &str_;

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:57: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "str_" clashes with "str"
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:46: misra_typographically_ambiguous_orig: (Previously declared symbol "str" at line 46)
#   55|           bool                anyError_;
#   56|           std::fstream        fileStr_;
#   57|->         std::istream       &str_;
#   58|   };
#   59|   

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:60: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "InStreamLookAhead".
#   58|   };
#   59|   
#   60|-> class InStreamLookAhead {
#   61|       public:
#   62|           InStreamLookAhead(InStream &, unsigned size);

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:62: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   60|   class InStreamLookAhead {
#   61|       public:
#   62|->         InStreamLookAhead(InStream &, unsigned size);
#   63|   
#   64|           char operator[](const unsigned idx) const {

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:62: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   60|   class InStreamLookAhead {
#   61|       public:
#   62|->         InStreamLookAhead(InStream &, unsigned size);
#   63|   
#   64|           char operator[](const unsigned idx) const {

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:62: misra_c_2012_rule_8_3_violation: Symbol "InStreamLookAhead" is declared more than once and with types that are not identical.
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.cc:65: definition: Definition for "InStreamLookAhead".
#   60|   class InStreamLookAhead {
#   61|       public:
#   62|->         InStreamLookAhead(InStream &, unsigned size);
#   63|   
#   64|           char operator[](const unsigned idx) const {

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:62: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   60|   class InStreamLookAhead {
#   61|       public:
#   62|->         InStreamLookAhead(InStream &, unsigned size);
#   63|   
#   64|           char operator[](const unsigned idx) const {

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:64: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   62|           InStreamLookAhead(InStream &, unsigned size);
#   63|   
#   64|->         char operator[](const unsigned idx) const {
#   65|               return buf_.at(idx);
#   66|           }

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:64: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#   62|           InStreamLookAhead(InStream &, unsigned size);
#   63|   
#   64|->         char operator[](const unsigned idx) const {
#   65|               return buf_.at(idx);
#   66|           }

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:64: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#   62|           InStreamLookAhead(InStream &, unsigned size);
#   63|   
#   64|->         char operator[](const unsigned idx) const {
#   65|               return buf_.at(idx);
#   66|           }

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:65: misra_c_2012_rule_10_3_violation: Implicit conversion of "this->buf_.at(idx)" from essential type "non-essential type" to different or narrower essential type "character".
#   63|   
#   64|           char operator[](const unsigned idx) const {
#   65|->             return buf_.at(idx);
#   66|           }
#   67|   

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/instream.hh:65: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "idx" with underlying type "32-bit unsigned int" is implicitly converted to a different underlying type "64-bit unsigned long".
#   63|   
#   64|           char operator[](const unsigned idx) const {
#   65|->             return buf_.at(idx);
#   66|           }
#   67|   

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011-2021 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:30: misra_cpp_2008_rule_3_4_1_violation: Symbol "SimpleTreeDecoder" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:100: single_use: Symbol "SimpleTreeDecoder" is only used in "JsonParser::JsonParser(InStream &)".
#   28|   
#   29|   /// tree decoder of the native JSON format of csdiff
#   30|-> class SimpleTreeDecoder: public AbstractTreeDecoder {
#   31|       public:
#   32|           SimpleTreeDecoder(InStream &input);

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:30: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "SimpleTreeDecoder".
#   28|   
#   29|   /// tree decoder of the native JSON format of csdiff
#   30|-> class SimpleTreeDecoder: public AbstractTreeDecoder {
#   31|       public:
#   32|           SimpleTreeDecoder(InStream &input);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:42: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   40|           };
#   41|   
#   42|->         void reportUnknownNodes(ENodeKind, const pt::ptree &) const;
#   43|   
#   44|           typedef std::set<std::string>       TNodeSet;

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:54: misra_cpp_2008_rule_3_4_1_violation: Symbol "CovTreeDecoder" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:100: single_use: Symbol "CovTreeDecoder" is only used in "JsonParser::JsonParser(InStream &)".
#   52|   
#   53|   /// tree decoder of the Coverity JSON format
#   54|-> class CovTreeDecoder: public AbstractTreeDecoder {
#   55|       public:
#   56|           virtual bool readNode(Defect *def, pt::ptree::const_iterator defIter);

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:54: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "CovTreeDecoder".
#   52|   
#   53|   /// tree decoder of the Coverity JSON format
#   54|-> class CovTreeDecoder: public AbstractTreeDecoder {
#   55|       public:
#   56|           virtual bool readNode(Defect *def, pt::ptree::const_iterator defIter);

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:63: misra_cpp_2008_rule_11_0_1_violation: Member "input" is not private but "JsonParser::Private" is a non-POD type.
#   61|   
#   62|   struct JsonParser::Private {
#   63|->     InStream                       &input;
#   64|       bool                            jsonValid;
#   65|       AbstractTreeDecoder            *decoder;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:64: misra_cpp_2008_rule_11_0_1_violation: Member "jsonValid" is not private but "JsonParser::Private" is a non-POD type.
#   62|   struct JsonParser::Private {
#   63|       InStream                       &input;
#   64|->     bool                            jsonValid;
#   65|       AbstractTreeDecoder            *decoder;
#   66|       pt::ptree                       root;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:65: misra_cpp_2008_rule_11_0_1_violation: Member "decoder" is not private but "JsonParser::Private" is a non-POD type.
#   63|       InStream                       &input;
#   64|       bool                            jsonValid;
#   65|->     AbstractTreeDecoder            *decoder;
#   66|       pt::ptree                       root;
#   67|       pt::ptree                      *defList;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:66: misra_cpp_2008_rule_11_0_1_violation: Member "root" is not private but "JsonParser::Private" is a non-POD type.
#   64|       bool                            jsonValid;
#   65|       AbstractTreeDecoder            *decoder;
#   66|->     pt::ptree                       root;
#   67|       pt::ptree                      *defList;
#   68|       pt::ptree::const_iterator       defIter;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:67: misra_cpp_2008_rule_11_0_1_violation: Member "defList" is not private but "JsonParser::Private" is a non-POD type.
#   65|       AbstractTreeDecoder            *decoder;
#   66|       pt::ptree                       root;
#   67|->     pt::ptree                      *defList;
#   68|       pt::ptree::const_iterator       defIter;
#   69|       int                             defNumber;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:68: misra_cpp_2008_rule_11_0_1_violation: Member "defIter" is not private but "JsonParser::Private" is a non-POD type.
#   66|       pt::ptree                       root;
#   67|       pt::ptree                      *defList;
#   68|->     pt::ptree::const_iterator       defIter;
#   69|       int                             defNumber;
#   70|       TScanProps                      scanProps;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:69: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   67|       pt::ptree                      *defList;
#   68|       pt::ptree::const_iterator       defIter;
#   69|->     int                             defNumber;
#   70|       TScanProps                      scanProps;
#   71|   

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:69: misra_cpp_2008_rule_11_0_1_violation: Member "defNumber" is not private but "JsonParser::Private" is a non-POD type.
#   67|       pt::ptree                      *defList;
#   68|       pt::ptree::const_iterator       defIter;
#   69|->     int                             defNumber;
#   70|       TScanProps                      scanProps;
#   71|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:69: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   67|       pt::ptree                      *defList;
#   68|       pt::ptree::const_iterator       defIter;
#   69|->     int                             defNumber;
#   70|       TScanProps                      scanProps;
#   71|   

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:70: misra_cpp_2008_rule_11_0_1_violation: Member "scanProps" is not private but "JsonParser::Private" is a non-POD type.
#   68|       pt::ptree::const_iterator       defIter;
#   69|       int                             defNumber;
#   70|->     TScanProps                      scanProps;
#   71|   
#   72|       Private(InStream &input):

Error: MISRA C++-2008 Rule 2-10-2 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:72: misra_cpp_2008_rule_2_10_2_violation: declaration hides member "JsonParser::Private::input" (declared at line 63)
#   70|       TScanProps                      scanProps;
#   71|   
#   72|->     Private(InStream &input):
#   73|           input(input),
#   74|           jsonValid(false),

Error: MISRA C++-2008 Rule 4-10-2 (CWE-547):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:75: misra_cpp_2008_rule_4_10_2_violation: Literal zero (0) is used as the null-pointer-constant.
#   73|           input(input),
#   74|           jsonValid(false),
#   75|->         decoder(0),
#   76|           defNumber(0)
#   77|       {

Error: MISRA C++-2008 Rule 8-5-1 (CWE-456):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:67: member_decl: Class member declaration for "defList".
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:78: misra_cpp_2008_rule_8_5_1_violation: Non-static class member "defList" is not initialized in this constructor nor in any functions that it calls.
#   76|           defNumber(0)
#   77|       {
#   78|->     }
#   79|   
#   80|       ~Private()

Error: UNINIT_CTOR (CWE-456):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:67: member_decl: Class member declaration for "defList".
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:78: uninit_member: Non-static class member "defList" is not initialized in this constructor nor in any functions that it calls.
#   76|           defNumber(0)
#   77|       {
#   78|->     }
#   79|   
#   80|       ~Private()

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:80: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   78|       }
#   79|   
#   80|->     ~Private()
#   81|       {
#   82|           delete this->decoder;

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:89: misra_c_2012_rule_8_13_violation: The member function "JsonParser::Private::dataError(std::string const &)" is declared without a const qualifier but does not modify the object pointed to by the this pointer.
#   87|   };
#   88|   
#   89|-> void JsonParser::Private::dataError(const std::string &msg)
#   90|   {
#   91|       this->input.handleError();

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:93: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   91|       this->input.handleError();
#   92|       if (this->input.silent())
#   93|->         return;
#   94|   
#   95|       std::cerr

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:93: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   91|       this->input.handleError();
#   92|       if (this->input.silent())
#   93|->         return;
#   94|   
#   95|       std::cerr

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:93: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   91|       this->input.handleError();
#   92|       if (this->input.silent())
#   93|->         return;
#   94|   
#   95|       std::cerr

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:93: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   91|       this->input.handleError();
#   92|       if (this->input.silent())
#   93|->         return;
#   94|   
#   95|       std::cerr

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:95: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   93|           return;
#   94|   
#   95|->     std::cerr
#   96|           << this->input.fileName() << ": error: failed to read defect #"
#   97|           << this->defNumber << ": " << msg << "\n";

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:100: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "AbstractParser" are not called in this constructor.
#   98|   }
#   99|   
#  100|-> JsonParser::JsonParser(InStream &input):
#  101|       d(new Private(input))
#  102|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:101: misra_c_2012_directive_4_12_violation: A call to the function "operator new(136UL)" performs dynamic memory allocation.
#   99|   
#  100|   JsonParser::JsonParser(InStream &input):
#  101|->     d(new Private(input))
#  102|   {
#  103|       try {

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:101: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   99|   
#  100|   JsonParser::JsonParser(InStream &input):
#  101|->     d(new Private(input))
#  102|   {
#  103|       try {

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:111: misra_c_2012_rule_14_4_violation: The condition expression "<anonymous> != <anonymous>" does not have an essentially boolean type.
#  109|           pt::ptree scanNode =
#  110|               d->root.get_child_optional("scan").get_value_or(emp);
#  111|->         for (const pt::ptree::value_type &item : scanNode)
#  112|               d->scanProps[item.first] = item.second.data();
#  113|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:111: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  109|           pt::ptree scanNode =
#  110|               d->root.get_child_optional("scan").get_value_or(emp);
#  111|->         for (const pt::ptree::value_type &item : scanNode)
#  112|               d->scanProps[item.first] = item.second.data();
#  113|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:112: misra_c_2012_rule_15_6_violation: The body of the "for" loop is not a compound statement.
#  110|               d->root.get_child_optional("scan").get_value_or(emp);
#  111|           for (const pt::ptree::value_type &item : scanNode)
#  112|->             d->scanProps[item.first] = item.second.data();
#  113|   
#  114|           if (findChildOf(&d->defList, d->root, "defects"))

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:112: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  110|               d->root.get_child_optional("scan").get_value_or(emp);
#  111|           for (const pt::ptree::value_type &item : scanNode)
#  112|->             d->scanProps[item.first] = item.second.data();
#  113|   
#  114|           if (findChildOf(&d->defList, d->root, "defects"))

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:112: misra_cpp_2008_rule_6_3_1_violation: The body of the "for" loop is not a compound statement.
#  110|               d->root.get_child_optional("scan").get_value_or(emp);
#  111|           for (const pt::ptree::value_type &item : scanNode)
#  112|->             d->scanProps[item.first] = item.second.data();
#  113|   
#  114|           if (findChildOf(&d->defList, d->root, "defects"))

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:116: misra_c_2012_directive_4_12_violation: A call to the function "operator new(80UL)" performs dynamic memory allocation.
#  114|           if (findChildOf(&d->defList, d->root, "defects"))
#  115|               // csdiff-native JSON format
#  116|->             d->decoder = new SimpleTreeDecoder(d->input);
#  117|           else if (findChildOf(&d->defList, d->root, "issues"))
#  118|               // Coverity JSON format

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:116: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  114|           if (findChildOf(&d->defList, d->root, "defects"))
#  115|               // csdiff-native JSON format
#  116|->             d->decoder = new SimpleTreeDecoder(d->input);
#  117|           else if (findChildOf(&d->defList, d->root, "issues"))
#  118|               // Coverity JSON format

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:116: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  114|           if (findChildOf(&d->defList, d->root, "defects"))
#  115|               // csdiff-native JSON format
#  116|->             d->decoder = new SimpleTreeDecoder(d->input);
#  117|           else if (findChildOf(&d->defList, d->root, "issues"))
#  118|               // Coverity JSON format

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:116: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  114|           if (findChildOf(&d->defList, d->root, "defects"))
#  115|               // csdiff-native JSON format
#  116|->             d->decoder = new SimpleTreeDecoder(d->input);
#  117|           else if (findChildOf(&d->defList, d->root, "issues"))
#  118|               // Coverity JSON format

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:119: misra_c_2012_directive_4_12_violation: A call to the function "operator new(16UL)" performs dynamic memory allocation.
#  117|           else if (findChildOf(&d->defList, d->root, "issues"))
#  118|               // Coverity JSON format
#  119|->             d->decoder = new CovTreeDecoder;
#  120|           else
#  121|               throw pt::ptree_error("unknown JSON format");

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:119: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  117|           else if (findChildOf(&d->defList, d->root, "issues"))
#  118|               // Coverity JSON format
#  119|->             d->decoder = new CovTreeDecoder;
#  120|           else
#  121|               throw pt::ptree_error("unknown JSON format");

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:119: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  117|           else if (findChildOf(&d->defList, d->root, "issues"))
#  118|               // Coverity JSON format
#  119|->             d->decoder = new CovTreeDecoder;
#  120|           else
#  121|               throw pt::ptree_error("unknown JSON format");

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:119: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  117|           else if (findChildOf(&d->defList, d->root, "issues"))
#  118|               // Coverity JSON format
#  119|->             d->decoder = new CovTreeDecoder;
#  120|           else
#  121|               throw pt::ptree_error("unknown JSON format");

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:121: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  119|               d->decoder = new CovTreeDecoder;
#  120|           else
#  121|->             throw pt::ptree_error("unknown JSON format");
#  122|   
#  123|           // initialize the traversal through the list of defects/issues

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:121: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  119|               d->decoder = new CovTreeDecoder;
#  120|           else
#  121|->             throw pt::ptree_error("unknown JSON format");
#  122|   
#  123|           // initialize the traversal through the list of defects/issues

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:128: misra_c_2012_rule_10_3_violation: Implicit conversion of "e->line()" from essential type "unsigned 64-bit int" to different or narrower essential type "signed 64-bit int".
#  126|       }
#  127|       catch (pt::file_parser_error &e) {
#  128|->         d->input.handleError(e.message(), e.line());
#  129|       }
#  130|       catch (pt::ptree_error &e) {

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:128: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "e->line()" with underlying type "64-bit unsigned long" is implicitly converted to a different underlying type "64-bit signed long".
#  126|       }
#  127|       catch (pt::file_parser_error &e) {
#  128|->         d->input.handleError(e.message(), e.line());
#  129|       }
#  130|       catch (pt::ptree_error &e) {

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:128: misra_cpp_2008_rule_5_0_4_violation: "e->line()" is implicitly converted from an unsigned value to a signed value.
#  126|       }
#  127|       catch (pt::file_parser_error &e) {
#  128|->         d->input.handleError(e.message(), e.line());
#  129|       }
#  130|       catch (pt::ptree_error &e) {

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:135: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  133|   }
#  134|   
#  135|-> JsonParser::~JsonParser()
#  136|   {
#  137|       delete d;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:140: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  138|   }
#  139|   
#  140|-> bool JsonParser::hasError() const
#  141|   {
#  142|       return d->input.anyError();

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:145: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  143|   }
#  144|   
#  145|-> const TScanProps& JsonParser::getScanProps() const
#  146|   {
#  147|       return d->scanProps;

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:145: misra_cpp_2008_rule_10_3_1_violation: Virtual function "JsonParser::getScanProps[abi:cxx11]() const" has already been defined in "AbstractParser::getScanProps[abi:cxx11]() const".
#  143|   }
#  144|   
#  145|-> const TScanProps& JsonParser::getScanProps() const
#  146|   {
#  147|       return d->scanProps;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:150: misra_cpp_2008_rule_7_1_1_violation: The variable "def" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  148|   }
#  149|   
#  150|-> bool JsonParser::Private::readNext(Defect *def)
#  151|   {
#  152|       try {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:154: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  152|       try {
#  153|           // make sure the Defect structure is properly initialized
#  154|->         (*def) = Defect();
#  155|   
#  156|           // read the current node and move to the next one

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:158: misra_c_2012_rule_17_7_violation: The return value of a non-void function "readNode" is unused.
#  156|           // read the current node and move to the next one
#  157|           this->defNumber++;
#  158|->         this->decoder->readNode(def, this->defIter++);
#  159|           return true;
#  160|       }

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:158: misra_cpp_2008_rule_0_1_7_violation: The return value of function "this->decoder->readNode(def, this->defIter++)" is not used.
#  156|           // read the current node and move to the next one
#  157|           this->defNumber++;
#  158|->         this->decoder->readNode(def, this->defIter++);
#  159|           return true;
#  160|       }

Error: MISRA C++-2008 Rule 5-2-10 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:158: misra_cpp_2008_rule_5_2_10_violation: The ++ or -- operator is mixed with other operators in expression "this->decoder->readNode(def, this->defIter++)".
#  156|           // read the current node and move to the next one
#  157|           this->defNumber++;
#  158|->         this->decoder->readNode(def, this->defIter++);
#  159|           return true;
#  160|       }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:159: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  157|           this->defNumber++;
#  158|           this->decoder->readNode(def, this->defIter++);
#  159|->         return true;
#  160|       }
#  161|       catch (pt::ptree_error &e) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:159: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  157|           this->defNumber++;
#  158|           this->decoder->readNode(def, this->defIter++);
#  159|->         return true;
#  160|       }
#  161|       catch (pt::ptree_error &e) {

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:163: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  161|       catch (pt::ptree_error &e) {
#  162|           this->dataError(e.what());
#  163|->         return false;
#  164|       }
#  165|   }

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:163: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  161|       catch (pt::ptree_error &e) {
#  162|           this->dataError(e.what());
#  163|->         return false;
#  164|       }
#  165|   }

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:167: misra_cpp_2008_rule_7_1_1_violation: The variable "def" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  165|   }
#  166|   
#  167|-> bool JsonParser::getNext(Defect *def)
#  168|   {
#  169|       if (!d->jsonValid)

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:170: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  168|   {
#  169|       if (!d->jsonValid)
#  170|->         return false;
#  171|   
#  172|       // error recovery loop

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:170: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  168|   {
#  169|       if (!d->jsonValid)
#  170|->         return false;
#  171|   
#  172|       // error recovery loop

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:170: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  168|   {
#  169|       if (!d->jsonValid)
#  170|->         return false;
#  171|   
#  172|       // error recovery loop

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:170: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  168|   {
#  169|       if (!d->jsonValid)
#  170|->         return false;
#  171|   
#  172|       // error recovery loop

Error: MISRA C++-2008 Rule 6-5-1 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:173: misra_cpp_2008_rule_6_5_1_violation: There is no loop counter.
#  171|   
#  172|       // error recovery loop
#  173|->     for (;;) {
#  174|           if (d->defList->end() == d->defIter)
#  175|               return false;

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:174: misra_c_2012_rule_14_4_violation: The condition expression "boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::iterator(this->d->defList->end()) == this->d->defIter" does not have an essentially boolean type.
#  172|       // error recovery loop
#  173|       for (;;) {
#  174|->         if (d->defList->end() == d->defIter)
#  175|               return false;
#  176|   

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:175: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  173|       for (;;) {
#  174|           if (d->defList->end() == d->defIter)
#  175|->             return false;
#  176|   
#  177|           if (d->readNext(def))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:175: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  173|       for (;;) {
#  174|           if (d->defList->end() == d->defIter)
#  175|->             return false;
#  176|   
#  177|           if (d->readNext(def))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:175: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  173|       for (;;) {
#  174|           if (d->defList->end() == d->defIter)
#  175|->             return false;
#  176|   
#  177|           if (d->readNext(def))

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:175: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  173|       for (;;) {
#  174|           if (d->defList->end() == d->defIter)
#  175|->             return false;
#  176|   
#  177|           if (d->readNext(def))

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:178: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  176|   
#  177|           if (d->readNext(def))
#  178|->             return true;
#  179|       }
#  180|   }

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:178: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  176|   
#  177|           if (d->readNext(def))
#  178|->             return true;
#  179|       }
#  180|   }

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:178: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  176|   
#  177|           if (d->readNext(def))
#  178|->             return true;
#  179|       }
#  180|   }

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:178: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  176|   
#  177|           if (d->readNext(def))
#  178|->             return true;
#  179|       }
#  180|   }

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:182: misra_c_2012_rule_8_13_violation: The pointer variable "input" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  180|   }
#  181|   
#  182|-> SimpleTreeDecoder::SimpleTreeDecoder(InStream &input):
#  183|       fileName_(input.fileName()),
#  184|       silent_(input.silent())

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:182: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "AbstractTreeDecoder" are not called in this constructor.
#  180|   }
#  181|   
#  182|-> SimpleTreeDecoder::SimpleTreeDecoder(InStream &input):
#  183|       fileName_(input.fileName()),
#  184|       silent_(input.silent())

Error: MISRA C++-2008 Rule 7-1-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:182: misra_cpp_2008_rule_7_1_2_violation: The pointer variable "input" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  180|   }
#  181|   
#  182|-> SimpleTreeDecoder::SimpleTreeDecoder(InStream &input):
#  183|       fileName_(input.fileName()),
#  184|       silent_(input.silent())

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:188: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  186|       if (silent_)
#  187|           // skip initialization of nodeStore_ because no lookup will ever happen
#  188|->         return;
#  189|   
#  190|       nodeStore_.resize(NK_LAST);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:188: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  186|       if (silent_)
#  187|           // skip initialization of nodeStore_ because no lookup will ever happen
#  188|->         return;
#  189|   
#  190|       nodeStore_.resize(NK_LAST);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:188: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  186|       if (silent_)
#  187|           // skip initialization of nodeStore_ because no lookup will ever happen
#  188|->         return;
#  189|   
#  190|       nodeStore_.resize(NK_LAST);

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:188: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  186|       if (silent_)
#  187|           // skip initialization of nodeStore_ because no lookup will ever happen
#  188|->         return;
#  189|   
#  190|       nodeStore_.resize(NK_LAST);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:193: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  191|   
#  192|       // known per-defect subnodes
#  193|->     nodeStore_[NK_DEFECT] = {
#  194|           "annotation",
#  195|           "checker",

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:206: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  204|   
#  205|       // known per-event subnodes
#  206|->     nodeStore_[NK_EVENT] = {
#  207|           "column",
#  208|           "event",

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:216: misra_cpp_2008_rule_7_1_1_violation: The variable "nk" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  214|   }
#  215|   
#  216|-> void SimpleTreeDecoder::reportUnknownNodes(ENodeKind nk, const pt::ptree &node)
#  217|       const
#  218|   {

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:220: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  218|   {
#  219|       if (silent_)
#  220|->         return;
#  221|   
#  222|       const TNodeSet &nodeSet = nodeStore_[nk];

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:220: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  218|   {
#  219|       if (silent_)
#  220|->         return;
#  221|   
#  222|       const TNodeSet &nodeSet = nodeStore_[nk];

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:220: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  218|   {
#  219|       if (silent_)
#  220|->         return;
#  221|   
#  222|       const TNodeSet &nodeSet = nodeStore_[nk];

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:220: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  218|   {
#  219|       if (silent_)
#  220|->         return;
#  221|   
#  222|       const TNodeSet &nodeSet = nodeStore_[nk];

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:222: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "nodeSet" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:231: end_of_scope: Reached end of scope without using value stored in "nodeSet".
#  220|           return;
#  221|   
#  222|->     const TNodeSet &nodeSet = nodeStore_[nk];
#  223|   
#  224|       for (const pt::ptree::value_type &item : node) {

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:224: misra_c_2012_rule_14_4_violation: The condition expression "<anonymous> != <anonymous>" does not have an essentially boolean type.
#  222|       const TNodeSet &nodeSet = nodeStore_[nk];
#  223|   
#  224|->     for (const pt::ptree::value_type &item : node) {
#  225|           const std::string &name = item.first;
#  226|           if (nodeSet.end() == nodeSet.find(name))

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:224: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  222|       const TNodeSet &nodeSet = nodeStore_[nk];
#  223|   
#  224|->     for (const pt::ptree::value_type &item : node) {
#  225|           const std::string &name = item.first;
#  226|           if (nodeSet.end() == nodeSet.find(name))

Error: MISRA C-2012 Rule 5.9 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:225: misra_c_2012_rule_5_9_violation: Identifier "name" is already used to represent an object with internal linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:452: internal_linkage_symbol: Declaring an internal linkage object with identifier "name".
#  223|   
#  224|       for (const pt::ptree::value_type &item : node) {
#  225|->         const std::string &name = item.first;
#  226|           if (nodeSet.end() == nodeSet.find(name))
#  227|               std::cerr << fileName_

Error: MISRA C++-2008 Rule 2-10-5 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:225: misra_cpp_2008_rule_2_10_5_violation: Identifier "name" is already used to represent an object with static storage duration.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csgrep.cc:452: static_storage_symbol: Declaring a static storage duration object with identifier "name".
#  223|   
#  224|       for (const pt::ptree::value_type &item : node) {
#  225|->         const std::string &name = item.first;
#  226|           if (nodeSet.end() == nodeSet.find(name))
#  227|               std::cerr << fileName_

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:227: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  225|           const std::string &name = item.first;
#  226|           if (nodeSet.end() == nodeSet.find(name))
#  227|->             std::cerr << fileName_
#  228|                   << ": warning: unknown JSON node: " << name
#  229|                   << std::endl;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:227: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  225|           const std::string &name = item.first;
#  226|           if (nodeSet.end() == nodeSet.find(name))
#  227|->             std::cerr << fileName_
#  228|                   << ": warning: unknown JSON node: " << name
#  229|                   << std::endl;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:227: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  225|           const std::string &name = item.first;
#  226|           if (nodeSet.end() == nodeSet.find(name))
#  227|->             std::cerr << fileName_
#  228|                   << ": warning: unknown JSON node: " << name
#  229|                   << std::endl;

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:229: misra_cpp_2008_rule_8_4_4_violation: Function identifier "endl" is not used to call the function or preceded by &.
#  227|               std::cerr << fileName_
#  228|                   << ": warning: unknown JSON node: " << name
#  229|->                 << std::endl;
#  230|       }
#  231|   }

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:234: misra_cpp_2008_rule_7_1_1_violation: The variable "def" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  232|   
#  233|   bool SimpleTreeDecoder::readNode(
#  234|->         Defect                      *def,
#  235|           pt::ptree::const_iterator    defIter)
#  236|   {

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:235: misra_cpp_2008_rule_7_1_1_violation: The variable "defIter" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  233|   bool SimpleTreeDecoder::readNode(
#  234|           Defect                      *def,
#  235|->         pt::ptree::const_iterator    defIter)
#  236|   {
#  237|       const pt::ptree &defNode = defIter->second;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:242: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  240|   
#  241|       // the checker field is mandatory
#  242|->     def->checker = defNode.get<std::string>("checker");
#  243|   
#  244|       bool verbosityLevelNeedsInit = false;

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:247: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "evtListDst" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:295: end_of_scope: Reached end of scope without using value stored in "evtListDst".
#  245|   
#  246|       // read the events
#  247|->     TEvtList &evtListDst = def->events;
#  248|       const pt::ptree &evtListSrc = defNode.get_child("events");
#  249|       for (const pt::ptree::value_type &evtItem : evtListSrc) {

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:249: misra_c_2012_rule_14_4_violation: The condition expression "<anonymous> != <anonymous>" does not have an essentially boolean type.
#  247|       TEvtList &evtListDst = def->events;
#  248|       const pt::ptree &evtListSrc = defNode.get_child("events");
#  249|->     for (const pt::ptree::value_type &evtItem : evtListSrc) {
#  250|           const pt::ptree &evtNode = evtItem.second;
#  251|           this->reportUnknownNodes(NK_EVENT, evtNode);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:249: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  247|       TEvtList &evtListDst = def->events;
#  248|       const pt::ptree &evtListSrc = defNode.get_child("events");
#  249|->     for (const pt::ptree::value_type &evtItem : evtListSrc) {
#  250|           const pt::ptree &evtNode = evtItem.second;
#  251|           this->reportUnknownNodes(NK_EVENT, evtNode);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:254: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  252|   
#  253|           DefEvent evt;
#  254|->         evt.fileName    = valueOf<std::string   >(evtNode, "file_name"  , "");
#  255|           evt.line        = valueOf<int           >(evtNode, "line"       , 0);
#  256|           evt.column      = valueOf<int           >(evtNode, "column"     , 0);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:257: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  255|           evt.line        = valueOf<int           >(evtNode, "line"       , 0);
#  256|           evt.column      = valueOf<int           >(evtNode, "column"     , 0);
#  257|->         evt.event       = valueOf<std::string   >(evtNode, "event"      , "");
#  258|           evt.msg         = valueOf<std::string   >(evtNode, "message"    , "");
#  259|           evt.verbosityLevel = valueOf<int>(evtNode, "verbosity_level"    , -1);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:258: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  256|           evt.column      = valueOf<int           >(evtNode, "column"     , 0);
#  257|           evt.event       = valueOf<std::string   >(evtNode, "event"      , "");
#  258|->         evt.msg         = valueOf<std::string   >(evtNode, "message"    , "");
#  259|           evt.verbosityLevel = valueOf<int>(evtNode, "verbosity_level"    , -1);
#  260|           if (-1 == evt.verbosityLevel)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:261: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  259|           evt.verbosityLevel = valueOf<int>(evtNode, "verbosity_level"    , -1);
#  260|           if (-1 == evt.verbosityLevel)
#  261|->             verbosityLevelNeedsInit = true;
#  262|   
#  263|           evtListDst.push_back(evt);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:261: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  259|           evt.verbosityLevel = valueOf<int>(evtNode, "verbosity_level"    , -1);
#  260|           if (-1 == evt.verbosityLevel)
#  261|->             verbosityLevelNeedsInit = true;
#  262|   
#  263|           evtListDst.push_back(evt);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:270: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  268|       def->cwe      = valueOf<int>        (defNode, "cwe"      , 0);
#  269|       def->imp      = valueOf<int>        (defNode, "imp"      , 0);
#  270|->     def->function = valueOf<std::string>(defNode, "function", "");
#  271|       def->language = valueOf<std::string>(defNode, "language", "");
#  272|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:271: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  269|       def->imp      = valueOf<int>        (defNode, "imp"      , 0);
#  270|       def->function = valueOf<std::string>(defNode, "function", "");
#  271|->     def->language = valueOf<std::string>(defNode, "language", "");
#  272|   
#  273|       if (defNode.not_found() == defNode.find("key_event_idx")) {

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:273: misra_c_2012_rule_14_4_violation: The condition expression "boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::const_assoc_iterator(defNode->not_found()) == boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::const_assoc_iterator(defNode->find(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::key_type const("key_event_idx", std::allocator<char>())))" does not have an essentially boolean type.
#  271|       def->language = valueOf<std::string>(defNode, "language", "");
#  272|   
#  273|->     if (defNode.not_found() == defNode.find("key_event_idx")) {
#  274|           // key event not specified, try to guess it
#  275|           if (!keDigger_.guessKeyEvent(def))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:276: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  274|           // key event not specified, try to guess it
#  275|           if (!keDigger_.guessKeyEvent(def))
#  276|->             throw pt::ptree_error("failed to guess key event");
#  277|       }
#  278|       else {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:276: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  274|           // key event not specified, try to guess it
#  275|           if (!keDigger_.guessKeyEvent(def))
#  276|->             throw pt::ptree_error("failed to guess key event");
#  277|       }
#  278|       else {

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:280: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  278|       else {
#  279|           // use the provided key_event_idx unless it is out of range
#  280|->         const int cntEvents = evtListDst.size();
#  281|           const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|           if (0 <= defKeyEvent && defKeyEvent < cntEvents)

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:280: misra_c_2012_rule_10_3_violation: Implicit conversion of "evtListDst->size()" from essential type "non-essential type" to different or narrower essential type "signed 32-bit int".
#  278|       else {
#  279|           // use the provided key_event_idx unless it is out of range
#  280|->         const int cntEvents = evtListDst.size();
#  281|           const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|           if (0 <= defKeyEvent && defKeyEvent < cntEvents)

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:280: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  278|       else {
#  279|           // use the provided key_event_idx unless it is out of range
#  280|->         const int cntEvents = evtListDst.size();
#  281|           const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|           if (0 <= defKeyEvent && defKeyEvent < cntEvents)

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:280: misra_cpp_2008_rule_5_0_4_violation: "evtListDst->size()" is implicitly converted from an unsigned value to a signed value.
#  278|       else {
#  279|           // use the provided key_event_idx unless it is out of range
#  280|->         const int cntEvents = evtListDst.size();
#  281|           const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|           if (0 <= defKeyEvent && defKeyEvent < cntEvents)

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:280: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "evtListDst->size()" is implicitly reduced from "64-bit unsigned long" to "32-bit signed int".
#  278|       else {
#  279|           // use the provided key_event_idx unless it is out of range
#  280|->         const int cntEvents = evtListDst.size();
#  281|           const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|           if (0 <= defKeyEvent && defKeyEvent < cntEvents)

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:281: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  279|           // use the provided key_event_idx unless it is out of range
#  280|           const int cntEvents = evtListDst.size();
#  281|->         const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|           if (0 <= defKeyEvent && defKeyEvent < cntEvents)
#  283|               def->keyEventIdx = defKeyEvent;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:281: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  279|           // use the provided key_event_idx unless it is out of range
#  280|           const int cntEvents = evtListDst.size();
#  281|->         const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|           if (0 <= defKeyEvent && defKeyEvent < cntEvents)
#  283|               def->keyEventIdx = defKeyEvent;

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:282: misra_c_2012_rule_12_1_violation: Missing explicit parentheses on sub-expression: "defKeyEvent < cntEvents".
#  280|           const int cntEvents = evtListDst.size();
#  281|           const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|->         if (0 <= defKeyEvent && defKeyEvent < cntEvents)
#  283|               def->keyEventIdx = defKeyEvent;
#  284|           else

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:282: misra_cpp_2008_rule_5_0_2_violation: "0 <= defKeyEvent" should be parenthesized.
#  280|           const int cntEvents = evtListDst.size();
#  281|           const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|->         if (0 <= defKeyEvent && defKeyEvent < cntEvents)
#  283|               def->keyEventIdx = defKeyEvent;
#  284|           else

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:282: misra_cpp_2008_rule_5_0_2_violation: "defKeyEvent < cntEvents" should be parenthesized.
#  280|           const int cntEvents = evtListDst.size();
#  281|           const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|->         if (0 <= defKeyEvent && defKeyEvent < cntEvents)
#  283|               def->keyEventIdx = defKeyEvent;
#  284|           else

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:282: misra_cpp_2008_rule_5_2_1_violation: Operand "0 <= defKeyEvent" is not a postfix expression.
#  280|           const int cntEvents = evtListDst.size();
#  281|           const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|->         if (0 <= defKeyEvent && defKeyEvent < cntEvents)
#  283|               def->keyEventIdx = defKeyEvent;
#  284|           else

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:282: misra_cpp_2008_rule_5_2_1_violation: Operand "defKeyEvent < cntEvents" is not a postfix expression.
#  280|           const int cntEvents = evtListDst.size();
#  281|           const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|->         if (0 <= defKeyEvent && defKeyEvent < cntEvents)
#  283|               def->keyEventIdx = defKeyEvent;
#  284|           else

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:283: misra_c_2012_rule_10_3_violation: Implicit conversion of "defKeyEvent" from essential type "signed 32-bit int" to different or narrower essential type "unsigned 32-bit int".
#  281|           const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|           if (0 <= defKeyEvent && defKeyEvent < cntEvents)
#  283|->             def->keyEventIdx = defKeyEvent;
#  284|           else
#  285|               throw pt::ptree_error("key event out of range");

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:283: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  281|           const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|           if (0 <= defKeyEvent && defKeyEvent < cntEvents)
#  283|->             def->keyEventIdx = defKeyEvent;
#  284|           else
#  285|               throw pt::ptree_error("key event out of range");

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:283: misra_cpp_2008_rule_5_0_4_violation: "defKeyEvent" is implicitly converted from a signed value to an unsigned value.
#  281|           const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|           if (0 <= defKeyEvent && defKeyEvent < cntEvents)
#  283|->             def->keyEventIdx = defKeyEvent;
#  284|           else
#  285|               throw pt::ptree_error("key event out of range");

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:283: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  281|           const int defKeyEvent = defNode.get<int>("key_event_idx");
#  282|           if (0 <= defKeyEvent && defKeyEvent < cntEvents)
#  283|->             def->keyEventIdx = defKeyEvent;
#  284|           else
#  285|               throw pt::ptree_error("key event out of range");

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:285: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  283|               def->keyEventIdx = defKeyEvent;
#  284|           else
#  285|->             throw pt::ptree_error("key event out of range");
#  286|       }
#  287|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:285: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  283|               def->keyEventIdx = defKeyEvent;
#  284|           else
#  285|->             throw pt::ptree_error("key event out of range");
#  286|       }
#  287|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:290: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  288|       if (verbosityLevelNeedsInit)
#  289|           // missing or incomplete verbosity_level, initialize it over
#  290|->         keDigger_.initVerbosity(def);
#  291|   
#  292|       // read annotation if available

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:290: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  288|       if (verbosityLevelNeedsInit)
#  289|           // missing or incomplete verbosity_level, initialize it over
#  290|->         keDigger_.initVerbosity(def);
#  291|   
#  292|       // read annotation if available

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:293: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  291|   
#  292|       // read annotation if available
#  293|->     def->annotation = valueOf<std::string>(defNode, "annotation", "");
#  294|   
#  295|       return true;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:299: misra_cpp_2008_rule_7_1_1_violation: The variable "def" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  297|   
#  298|   bool CovTreeDecoder::readNode(
#  299|->         Defect                      *def,
#  300|           pt::ptree::const_iterator    defIter)
#  301|   {

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:300: misra_cpp_2008_rule_7_1_1_violation: The variable "defIter" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  298|   bool CovTreeDecoder::readNode(
#  299|           Defect                      *def,
#  300|->         pt::ptree::const_iterator    defIter)
#  301|   {
#  302|       const pt::ptree &defNode = defIter->second;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:305: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  303|   
#  304|       // read per-defect properties
#  305|->     def->checker = defNode.get<std::string>("checkerName");
#  306|       def->function = valueOf<std::string>(defNode, "functionDisplayName", "");
#  307|       def->language = valueOf<std::string>(defNode, "code-language", "");

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:306: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  304|       // read per-defect properties
#  305|       def->checker = defNode.get<std::string>("checkerName");
#  306|->     def->function = valueOf<std::string>(defNode, "functionDisplayName", "");
#  307|       def->language = valueOf<std::string>(defNode, "code-language", "");
#  308|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:307: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  305|       def->checker = defNode.get<std::string>("checkerName");
#  306|       def->function = valueOf<std::string>(defNode, "functionDisplayName", "");
#  307|->     def->language = valueOf<std::string>(defNode, "code-language", "");
#  308|   
#  309|       // read CWE if available

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:312: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  310|       const pt::ptree *checkerProps;
#  311|       if (findChildOf(&checkerProps, defNode, "checkerProperties"))
#  312|->         def->cwe = valueOf<int>(*checkerProps, "cweCategory", 0);
#  313|   
#  314|       // count the events and allocate dst array

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:312: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  310|       const pt::ptree *checkerProps;
#  311|       if (findChildOf(&checkerProps, defNode, "checkerProperties"))
#  312|->         def->cwe = valueOf<int>(*checkerProps, "cweCategory", 0);
#  313|   
#  314|       // count the events and allocate dst array

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:319: misra_c_2012_directive_4_6_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  317|   
#  318|       // decode events one by one
#  319|->     unsigned idx = 0;
#  320|       pt::ptree::const_iterator it;
#  321|       for (it = evtList.begin(); it != evtList.end(); ++it, ++idx) {

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:319: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "unsigned int" rather than a typedef that includes size and signedness information.
#  317|   
#  318|       // decode events one by one
#  319|->     unsigned idx = 0;
#  320|       pt::ptree::const_iterator it;
#  321|       for (it = evtList.begin(); it != evtList.end(); ++it, ++idx) {

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:319: misra_cpp_2008_rule_5_0_4_violation: "0" is implicitly converted from a signed value to an unsigned value.
#  317|   
#  318|       // decode events one by one
#  319|->     unsigned idx = 0;
#  320|       pt::ptree::const_iterator it;
#  321|       for (it = evtList.begin(); it != evtList.end(); ++it, ++idx) {

Error: MISRA C-2012 Rule 12.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:321: misra_c_2012_rule_12_3_violation: The expression "(++it) , (++idx)" uses the comma operator.
#  319|       unsigned idx = 0;
#  320|       pt::ptree::const_iterator it;
#  321|->     for (it = evtList.begin(); it != evtList.end(); ++it, ++idx) {
#  322|           const pt::ptree &evtNode = it->second;
#  323|           DefEvent &evt = def->events[idx];

Error: MISRA C-2012 Rule 13.3 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:321: misra_c_2012_rule_13_3_violation: Operator "++idx" in full expression with other potential side effects.
#  319|       unsigned idx = 0;
#  320|       pt::ptree::const_iterator it;
#  321|->     for (it = evtList.begin(); it != evtList.end(); ++it, ++idx) {
#  322|           const pt::ptree &evtNode = it->second;
#  323|           DefEvent &evt = def->events[idx];

Error: MISRA C-2012 Rule 14.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:321: misra_c_2012_rule_14_2_violation: The third clause of the for loop has more than one persistent side-effect.
#  319|       unsigned idx = 0;
#  320|       pt::ptree::const_iterator it;
#  321|->     for (it = evtList.begin(); it != evtList.end(); ++it, ++idx) {
#  322|           const pt::ptree &evtNode = it->second;
#  323|           DefEvent &evt = def->events[idx];

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:321: misra_c_2012_rule_14_4_violation: The condition expression "it != boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::const_iterator(evtList->end())" does not have an essentially boolean type.
#  319|       unsigned idx = 0;
#  320|       pt::ptree::const_iterator it;
#  321|->     for (it = evtList.begin(); it != evtList.end(); ++it, ++idx) {
#  322|           const pt::ptree &evtNode = it->second;
#  323|           DefEvent &evt = def->events[idx];

Error: MISRA C++-2008 Rule 5-18-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:321: misra_cpp_2008_rule_5_18_1_violation: The expression "(++it) , (++idx)" uses the comma operator.
#  319|       unsigned idx = 0;
#  320|       pt::ptree::const_iterator it;
#  321|->     for (it = evtList.begin(); it != evtList.end(); ++it, ++idx) {
#  322|           const pt::ptree &evtNode = it->second;
#  323|           DefEvent &evt = def->events[idx];

Error: MISRA C++-2008 Rule 5-2-10 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:321: misra_cpp_2008_rule_5_2_10_violation: The ++ or -- operator is mixed with other operators in expression "(++it) , (++idx)".
#  319|       unsigned idx = 0;
#  320|       pt::ptree::const_iterator it;
#  321|->     for (it = evtList.begin(); it != evtList.end(); ++it, ++idx) {
#  322|           const pt::ptree &evtNode = it->second;
#  323|           DefEvent &evt = def->events[idx];

Error: MISRA C++-2008 Rule 6-5-5 (CWE-1095):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:321: misra_cpp_2008_rule_6_5_5_violation: The non-loop-counter variable "idx" is modified in condition or expression clause of a for loop.
#  319|       unsigned idx = 0;
#  320|       pt::ptree::const_iterator it;
#  321|->     for (it = evtList.begin(); it != evtList.end(); ++it, ++idx) {
#  322|           const pt::ptree &evtNode = it->second;
#  323|           DefEvent &evt = def->events[idx];

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:325: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  323|           DefEvent &evt = def->events[idx];
#  324|   
#  325|->         evt.fileName    = valueOf<std::string>(evtNode, "filePathname"    , "");
#  326|           evt.line        = valueOf<int>        (evtNode, "lineNumber"      , 0 );
#  327|           // TODO: read column?

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:328: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  326|           evt.line        = valueOf<int>        (evtNode, "lineNumber"      , 0 );
#  327|           // TODO: read column?
#  328|->         evt.event       = valueOf<std::string>(evtNode, "eventTag"        , "");
#  329|           evt.msg         = valueOf<std::string>(evtNode, "eventDescription", "");
#  330|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:329: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  327|           // TODO: read column?
#  328|           evt.event       = valueOf<std::string>(evtNode, "eventTag"        , "");
#  329|->         evt.msg         = valueOf<std::string>(evtNode, "eventDescription", "");
#  330|   
#  331|           if (evtNode.get<bool>("main"))

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:334: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  332|               // this is a key event
#  333|               // TODO: detect and report re-definitions of key events
#  334|->             def->keyEventIdx = idx;
#  335|       }
#  336|   

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.cc:334: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  332|               // this is a key event
#  333|               // TODO: detect and report re-definitions of key events
#  334|->             def->keyEventIdx = idx;
#  335|       }
#  336|   

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2012 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.hh:25: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "JsonParser".
#   23|   #include "abstract-parser.hh"
#   24|   
#   25|-> class JsonParser: public AbstractParser {
#   26|       public:
#   27|           JsonParser(InStream &input);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.hh:29: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   27|           JsonParser(InStream &input);
#   28|   
#   29|->         virtual ~JsonParser();
#   30|           virtual bool getNext(Defect *);
#   31|           virtual bool hasError() const;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.hh:30: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   28|   
#   29|           virtual ~JsonParser();
#   30|->         virtual bool getNext(Defect *);
#   31|           virtual bool hasError() const;
#   32|           virtual const TScanProps& getScanProps() const;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.hh:31: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   29|           virtual ~JsonParser();
#   30|           virtual bool getNext(Defect *);
#   31|->         virtual bool hasError() const;
#   32|           virtual const TScanProps& getScanProps() const;
#   33|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.hh:32: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   30|           virtual bool getNext(Defect *);
#   31|           virtual bool hasError() const;
#   32|->         virtual const TScanProps& getScanProps() const;
#   33|   
#   34|       private:

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.hh:35: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   33|   
#   34|       private:
#   35|->         JsonParser(const Parser &);
#   36|           JsonParser& operator=(const Parser &);
#   37|   

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.hh:35: misra_c_2012_rule_8_6_violation: Function "JsonParser" is declared but never defined.
#   33|   
#   34|       private:
#   35|->         JsonParser(const Parser &);
#   36|           JsonParser& operator=(const Parser &);
#   37|   

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.hh:35: misra_cpp_2008_rule_3_2_2_violation: Function "JsonParser" is declared but never defined.
#   33|   
#   34|       private:
#   35|->         JsonParser(const Parser &);
#   36|           JsonParser& operator=(const Parser &);
#   37|   

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.hh:35: misra_cpp_2008_rule_3_2_4_violation: Function "JsonParser" is declared but never defined.
#   33|   
#   34|       private:
#   35|->         JsonParser(const Parser &);
#   36|           JsonParser& operator=(const Parser &);
#   37|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.hh:36: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   34|       private:
#   35|           JsonParser(const Parser &);
#   36|->         JsonParser& operator=(const Parser &);
#   37|   
#   38|           struct Private;

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.hh:36: misra_c_2012_rule_8_6_violation: Function "operator =" is declared but never defined.
#   34|       private:
#   35|           JsonParser(const Parser &);
#   36|->         JsonParser& operator=(const Parser &);
#   37|   
#   38|           struct Private;

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.hh:36: misra_cpp_2008_rule_3_2_2_violation: Function "operator =" is declared but never defined.
#   34|       private:
#   35|           JsonParser(const Parser &);
#   36|->         JsonParser& operator=(const Parser &);
#   37|   
#   38|           struct Private;

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-parser.hh:36: misra_cpp_2008_rule_3_2_4_violation: Function "operator =" is declared but never defined.
#   34|       private:
#   35|           JsonParser(const Parser &);
#   36|->         JsonParser& operator=(const Parser &);
#   37|   
#   38|           struct Private;

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:34: misra_cpp_2008_rule_11_0_1_violation: Member "str" is not private but "JsonWriter::Private" is a non-POD type.
#   32|   
#   33|   struct JsonWriter::Private {
#   34|->     std::ostream                   &str;
#   35|       std::queue<Defect>              defQueue;
#   36|       TScanProps                      scanProps;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:35: misra_cpp_2008_rule_11_0_1_violation: Member "defQueue" is not private but "JsonWriter::Private" is a non-POD type.
#   33|   struct JsonWriter::Private {
#   34|       std::ostream                   &str;
#   35|->     std::queue<Defect>              defQueue;
#   36|       TScanProps                      scanProps;
#   37|   

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:36: misra_cpp_2008_rule_11_0_1_violation: Member "scanProps" is not private but "JsonWriter::Private" is a non-POD type.
#   34|       std::ostream                   &str;
#   35|       std::queue<Defect>              defQueue;
#   36|->     TScanProps                      scanProps;
#   37|   
#   38|       Private(std::ostream &str_):

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:38: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "str_" clashes with "str"
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:34: misra_typographically_ambiguous_orig: (Previously declared symbol "str" at line 34)
#   36|       TScanProps                      scanProps;
#   37|   
#   38|->     Private(std::ostream &str_):
#   39|           str(str_)
#   40|       {

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:44: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "AbstractWriter" are not called in this constructor.
#   42|   };
#   43|   
#   44|-> JsonWriter::JsonWriter(std::ostream &str):
#   45|       d(new Private(str))
#   46|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:45: misra_c_2012_directive_4_12_violation: A call to the function "operator new(136UL)" performs dynamic memory allocation.
#   43|   
#   44|   JsonWriter::JsonWriter(std::ostream &str):
#   45|->     d(new Private(str))
#   46|   {
#   47|   }

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:45: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   43|   
#   44|   JsonWriter::JsonWriter(std::ostream &str):
#   45|->     d(new Private(str))
#   46|   {
#   47|   }

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:49: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   47|   }
#   48|   
#   49|-> JsonWriter::~JsonWriter()
#   50|   {
#   51|       delete d;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:54: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   52|   }
#   53|   
#   54|-> const TScanProps& JsonWriter::getScanProps() const
#   55|   {
#   56|       return d->scanProps;

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:54: misra_cpp_2008_rule_10_3_1_violation: Virtual function "JsonWriter::getScanProps[abi:cxx11]() const" has already been defined in "AbstractWriter::getScanProps[abi:cxx11]() const".
#   52|   }
#   53|   
#   54|-> const TScanProps& JsonWriter::getScanProps() const
#   55|   {
#   56|       return d->scanProps;

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:59: misra_cpp_2008_rule_10_3_1_violation: Virtual function "JsonWriter::setScanProps(TScanProps const &)" has already been defined in "AbstractWriter::setScanProps(TScanProps const &)".
#   57|   }
#   58|   
#   59|-> void JsonWriter::setScanProps(const TScanProps &scanProps)
#   60|   {
#   61|       d->scanProps = scanProps;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:61: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   59|   void JsonWriter::setScanProps(const TScanProps &scanProps)
#   60|   {
#   61|->     d->scanProps = scanProps;
#   62|   }
#   63|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:64: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   62|   }
#   63|   
#   64|-> void appendDefectNode(PTree &dst, const Defect &def)
#   65|   {
#   66|       using std::string;

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:64: misra_c_2012_rule_8_7_violation: Function "appendDefectNode" has external linkage but is only used in one translation unit.
#   62|   }
#   63|   
#   64|-> void appendDefectNode(PTree &dst, const Defect &def)
#   65|   {
#   66|       using std::string;

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:64: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   62|   }
#   63|   
#   64|-> void appendDefectNode(PTree &dst, const Defect &def)
#   65|   {
#   66|       using std::string;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:64: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "appendDefectNode".
#   62|   }
#   63|   
#   64|-> void appendDefectNode(PTree &dst, const Defect &def)
#   65|   {
#   66|       using std::string;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:70: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#   68|       // go through events
#   69|       PTree evtList;
#   70|->     for (const DefEvent &evt : def.events) {
#   71|           PTree evtNode;
#   72|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:74: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put" is unused.
#   72|   
#   73|           // describe the location
#   74|->         evtNode.put<string>("file_name", evt.fileName);
#   75|           evtNode.put<int>("line", evt.line);
#   76|           if (0 < evt.column)

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:74: misra_cpp_2008_rule_0_1_7_violation: The return value of function "evtNode.put(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("file_name", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), evt.fileName)" is not used.
#   72|   
#   73|           // describe the location
#   74|->         evtNode.put<string>("file_name", evt.fileName);
#   75|           evtNode.put<int>("line", evt.line);
#   76|           if (0 < evt.column)

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:75: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put" is unused.
#   73|           // describe the location
#   74|           evtNode.put<string>("file_name", evt.fileName);
#   75|->         evtNode.put<int>("line", evt.line);
#   76|           if (0 < evt.column)
#   77|               evtNode.put<int>("column", evt.column);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:75: misra_cpp_2008_rule_0_1_7_violation: The return value of function "evtNode.put(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("line", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), evt.line)" is not used.
#   73|           // describe the location
#   74|           evtNode.put<string>("file_name", evt.fileName);
#   75|->         evtNode.put<int>("line", evt.line);
#   76|           if (0 < evt.column)
#   77|               evtNode.put<int>("column", evt.column);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:77: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   75|           evtNode.put<int>("line", evt.line);
#   76|           if (0 < evt.column)
#   77|->             evtNode.put<int>("column", evt.column);
#   78|   
#   79|           // describe the event

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:77: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put" is unused.
#   75|           evtNode.put<int>("line", evt.line);
#   76|           if (0 < evt.column)
#   77|->             evtNode.put<int>("column", evt.column);
#   78|   
#   79|           // describe the event

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:77: misra_cpp_2008_rule_0_1_7_violation: The return value of function "evtNode.put(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("column", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), evt.column)" is not used.
#   75|           evtNode.put<int>("line", evt.line);
#   76|           if (0 < evt.column)
#   77|->             evtNode.put<int>("column", evt.column);
#   78|   
#   79|           // describe the event

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:77: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   75|           evtNode.put<int>("line", evt.line);
#   76|           if (0 < evt.column)
#   77|->             evtNode.put<int>("column", evt.column);
#   78|   
#   79|           // describe the event

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:80: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put" is unused.
#   78|   
#   79|           // describe the event
#   80|->         evtNode.put<string>("event", evt.event);
#   81|           evtNode.put<string>("message", evt.msg);
#   82|           evtNode.put<int>("verbosity_level", evt.verbosityLevel);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:80: misra_cpp_2008_rule_0_1_7_violation: The return value of function "evtNode.put(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("event", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), evt.event)" is not used.
#   78|   
#   79|           // describe the event
#   80|->         evtNode.put<string>("event", evt.event);
#   81|           evtNode.put<string>("message", evt.msg);
#   82|           evtNode.put<int>("verbosity_level", evt.verbosityLevel);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:81: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put" is unused.
#   79|           // describe the event
#   80|           evtNode.put<string>("event", evt.event);
#   81|->         evtNode.put<string>("message", evt.msg);
#   82|           evtNode.put<int>("verbosity_level", evt.verbosityLevel);
#   83|   

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:81: misra_cpp_2008_rule_0_1_7_violation: The return value of function "evtNode.put(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("message", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), evt.msg)" is not used.
#   79|           // describe the event
#   80|           evtNode.put<string>("event", evt.event);
#   81|->         evtNode.put<string>("message", evt.msg);
#   82|           evtNode.put<int>("verbosity_level", evt.verbosityLevel);
#   83|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:82: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put" is unused.
#   80|           evtNode.put<string>("event", evt.event);
#   81|           evtNode.put<string>("message", evt.msg);
#   82|->         evtNode.put<int>("verbosity_level", evt.verbosityLevel);
#   83|   
#   84|           // append the event to the list

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:82: misra_cpp_2008_rule_0_1_7_violation: The return value of function "evtNode.put(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("verbosity_level", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), evt.verbosityLevel)" is not used.
#   80|           evtNode.put<string>("event", evt.event);
#   81|           evtNode.put<string>("message", evt.msg);
#   82|->         evtNode.put<int>("verbosity_level", evt.verbosityLevel);
#   83|   
#   84|           // append the event to the list

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:85: misra_c_2012_rule_17_7_violation: The return value of a non-void function "push_back" is unused.
#   83|   
#   84|           // append the event to the list
#   85|->         evtList.push_back(std::make_pair("", evtNode));
#   86|       }
#   87|   

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:85: misra_cpp_2008_rule_0_1_7_violation: The return value of function "evtList.push_back(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type const(std::pair<char const *, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >(std::make_pair("", evtNode))))" is not used.
#   83|   
#   84|           // append the event to the list
#   85|->         evtList.push_back(std::make_pair("", evtNode));
#   86|       }
#   87|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:90: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put" is unused.
#   88|       // create a node for a single defect
#   89|       PTree defNode;
#   90|->     defNode.put<string>("checker", def.checker);
#   91|       if (!def.annotation.empty())
#   92|           defNode.put<string>("annotation", def.annotation);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:90: misra_cpp_2008_rule_0_1_7_violation: The return value of function "defNode.put(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("checker", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), def.checker)" is not used.
#   88|       // create a node for a single defect
#   89|       PTree defNode;
#   90|->     defNode.put<string>("checker", def.checker);
#   91|       if (!def.annotation.empty())
#   92|           defNode.put<string>("annotation", def.annotation);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:92: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   90|       defNode.put<string>("checker", def.checker);
#   91|       if (!def.annotation.empty())
#   92|->         defNode.put<string>("annotation", def.annotation);
#   93|   
#   94|       // write "defect_id", "cwe", etc. if available

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:92: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put" is unused.
#   90|       defNode.put<string>("checker", def.checker);
#   91|       if (!def.annotation.empty())
#   92|->         defNode.put<string>("annotation", def.annotation);
#   93|   
#   94|       // write "defect_id", "cwe", etc. if available

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:92: misra_cpp_2008_rule_0_1_7_violation: The return value of function "defNode.put(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("annotation", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), def.annotation)" is not used.
#   90|       defNode.put<string>("checker", def.checker);
#   91|       if (!def.annotation.empty())
#   92|->         defNode.put<string>("annotation", def.annotation);
#   93|   
#   94|       // write "defect_id", "cwe", etc. if available

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:92: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   90|       defNode.put<string>("checker", def.checker);
#   91|       if (!def.annotation.empty())
#   92|->         defNode.put<string>("annotation", def.annotation);
#   93|   
#   94|       // write "defect_id", "cwe", etc. if available

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:96: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   94|       // write "defect_id", "cwe", etc. if available
#   95|       if (0 < def.defectId)
#   96|->         defNode.put<int>("defect_id", def.defectId);
#   97|       if (0 < def.cwe)
#   98|           defNode.put<int>("cwe", def.cwe);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:96: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put" is unused.
#   94|       // write "defect_id", "cwe", etc. if available
#   95|       if (0 < def.defectId)
#   96|->         defNode.put<int>("defect_id", def.defectId);
#   97|       if (0 < def.cwe)
#   98|           defNode.put<int>("cwe", def.cwe);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:96: misra_cpp_2008_rule_0_1_7_violation: The return value of function "defNode.put(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("defect_id", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), def.defectId)" is not used.
#   94|       // write "defect_id", "cwe", etc. if available
#   95|       if (0 < def.defectId)
#   96|->         defNode.put<int>("defect_id", def.defectId);
#   97|       if (0 < def.cwe)
#   98|           defNode.put<int>("cwe", def.cwe);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:96: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   94|       // write "defect_id", "cwe", etc. if available
#   95|       if (0 < def.defectId)
#   96|->         defNode.put<int>("defect_id", def.defectId);
#   97|       if (0 < def.cwe)
#   98|           defNode.put<int>("cwe", def.cwe);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:98: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   96|           defNode.put<int>("defect_id", def.defectId);
#   97|       if (0 < def.cwe)
#   98|->         defNode.put<int>("cwe", def.cwe);
#   99|       if (0 < def.imp)
#  100|           defNode.put<int>("imp", def.imp);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:98: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put" is unused.
#   96|           defNode.put<int>("defect_id", def.defectId);
#   97|       if (0 < def.cwe)
#   98|->         defNode.put<int>("cwe", def.cwe);
#   99|       if (0 < def.imp)
#  100|           defNode.put<int>("imp", def.imp);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:98: misra_cpp_2008_rule_0_1_7_violation: The return value of function "defNode.put(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("cwe", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), def.cwe)" is not used.
#   96|           defNode.put<int>("defect_id", def.defectId);
#   97|       if (0 < def.cwe)
#   98|->         defNode.put<int>("cwe", def.cwe);
#   99|       if (0 < def.imp)
#  100|           defNode.put<int>("imp", def.imp);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:98: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   96|           defNode.put<int>("defect_id", def.defectId);
#   97|       if (0 < def.cwe)
#   98|->         defNode.put<int>("cwe", def.cwe);
#   99|       if (0 < def.imp)
#  100|           defNode.put<int>("imp", def.imp);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:100: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   98|           defNode.put<int>("cwe", def.cwe);
#   99|       if (0 < def.imp)
#  100|->         defNode.put<int>("imp", def.imp);
#  101|       if (!def.function.empty())
#  102|           defNode.put<string>("function", def.function);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:100: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put" is unused.
#   98|           defNode.put<int>("cwe", def.cwe);
#   99|       if (0 < def.imp)
#  100|->         defNode.put<int>("imp", def.imp);
#  101|       if (!def.function.empty())
#  102|           defNode.put<string>("function", def.function);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:100: misra_cpp_2008_rule_0_1_7_violation: The return value of function "defNode.put(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("imp", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), def.imp)" is not used.
#   98|           defNode.put<int>("cwe", def.cwe);
#   99|       if (0 < def.imp)
#  100|->         defNode.put<int>("imp", def.imp);
#  101|       if (!def.function.empty())
#  102|           defNode.put<string>("function", def.function);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:100: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   98|           defNode.put<int>("cwe", def.cwe);
#   99|       if (0 < def.imp)
#  100|->         defNode.put<int>("imp", def.imp);
#  101|       if (!def.function.empty())
#  102|           defNode.put<string>("function", def.function);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:102: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  100|           defNode.put<int>("imp", def.imp);
#  101|       if (!def.function.empty())
#  102|->         defNode.put<string>("function", def.function);
#  103|       if (!def.language.empty())
#  104|           defNode.put<string>("language", def.language);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:102: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put" is unused.
#  100|           defNode.put<int>("imp", def.imp);
#  101|       if (!def.function.empty())
#  102|->         defNode.put<string>("function", def.function);
#  103|       if (!def.language.empty())
#  104|           defNode.put<string>("language", def.language);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:102: misra_cpp_2008_rule_0_1_7_violation: The return value of function "defNode.put(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("function", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), def.function)" is not used.
#  100|           defNode.put<int>("imp", def.imp);
#  101|       if (!def.function.empty())
#  102|->         defNode.put<string>("function", def.function);
#  103|       if (!def.language.empty())
#  104|           defNode.put<string>("language", def.language);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:102: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  100|           defNode.put<int>("imp", def.imp);
#  101|       if (!def.function.empty())
#  102|->         defNode.put<string>("function", def.function);
#  103|       if (!def.language.empty())
#  104|           defNode.put<string>("language", def.language);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:104: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  102|           defNode.put<string>("function", def.function);
#  103|       if (!def.language.empty())
#  104|->         defNode.put<string>("language", def.language);
#  105|   
#  106|       defNode.put<int>("key_event_idx", def.keyEventIdx);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:104: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put" is unused.
#  102|           defNode.put<string>("function", def.function);
#  103|       if (!def.language.empty())
#  104|->         defNode.put<string>("language", def.language);
#  105|   
#  106|       defNode.put<int>("key_event_idx", def.keyEventIdx);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:104: misra_cpp_2008_rule_0_1_7_violation: The return value of function "defNode.put(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("language", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), def.language)" is not used.
#  102|           defNode.put<string>("function", def.function);
#  103|       if (!def.language.empty())
#  104|->         defNode.put<string>("language", def.language);
#  105|   
#  106|       defNode.put<int>("key_event_idx", def.keyEventIdx);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:104: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  102|           defNode.put<string>("function", def.function);
#  103|       if (!def.language.empty())
#  104|->         defNode.put<string>("language", def.language);
#  105|   
#  106|       defNode.put<int>("key_event_idx", def.keyEventIdx);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:106: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put" is unused.
#  104|           defNode.put<string>("language", def.language);
#  105|   
#  106|->     defNode.put<int>("key_event_idx", def.keyEventIdx);
#  107|       defNode.put_child("events", evtList);
#  108|   

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:106: misra_cpp_2008_rule_0_1_7_violation: The return value of function "defNode.put(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("key_event_idx", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), int const(def.keyEventIdx))" is not used.
#  104|           defNode.put<string>("language", def.language);
#  105|   
#  106|->     defNode.put<int>("key_event_idx", def.keyEventIdx);
#  107|       defNode.put_child("events", evtList);
#  108|   

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:106: misra_cpp_2008_rule_5_0_4_violation: "def.keyEventIdx" is implicitly converted from an unsigned value to a signed value.
#  104|           defNode.put<string>("language", def.language);
#  105|   
#  106|->     defNode.put<int>("key_event_idx", def.keyEventIdx);
#  107|       defNode.put_child("events", evtList);
#  108|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:107: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put_child" is unused.
#  105|   
#  106|       defNode.put<int>("key_event_idx", def.keyEventIdx);
#  107|->     defNode.put_child("events", evtList);
#  108|   
#  109|       // append the node to the list

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:107: misra_cpp_2008_rule_0_1_7_violation: The return value of function "defNode.put_child(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("events", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), evtList)" is not used.
#  105|   
#  106|       defNode.put<int>("key_event_idx", def.keyEventIdx);
#  107|->     defNode.put_child("events", evtList);
#  108|   
#  109|       // append the node to the list

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:110: misra_c_2012_rule_17_7_violation: The return value of a non-void function "push_back" is unused.
#  108|   
#  109|       // append the node to the list
#  110|->     dst.push_back(std::make_pair("", defNode));
#  111|   }
#  112|   

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:110: misra_cpp_2008_rule_0_1_7_violation: The return value of function "dst->push_back(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::value_type const(std::pair<char const *, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >(std::make_pair("", defNode))))" is not used.
#  108|   
#  109|       // append the node to the list
#  110|->     dst.push_back(std::make_pair("", defNode));
#  111|   }
#  112|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:118: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  116|   }
#  117|   
#  118|-> void JsonWriter::flush()
#  119|   {
#  120|       boost::iostreams::filtering_ostream str;

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:118: misra_cpp_2008_rule_10_3_1_violation: Virtual function "JsonWriter::flush()" has already been defined in "AbstractWriter::flush()".
#  116|   }
#  117|   
#  118|-> void JsonWriter::flush()
#  119|   {
#  120|       boost::iostreams::filtering_ostream str;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:124: misra_cpp_2008_rule_7_1_1_violation: The variable "reFilter" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  122|       // create a regex-based filter to restore integral values wrapped as strings
#  123|       const RE reInt(": \"([0-9]+)\",$");
#  124|->     boost::iostreams::basic_regex_filter<char> reFilter(reInt, ": \\1,");
#  125|       str.push(reFilter);
#  126|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:129: misra_cpp_2008_rule_7_1_1_violation: The variable "reFilterSlash" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  127|       // create a regex-based filter to replace \/ (produced by newer boost) by /
#  128|       const RE reSlash("([^\\\\]*(?:\\\\\\\\)*)(?:\\\\(/))?");
#  129|->     boost::iostreams::basic_regex_filter<char> reFilterSlash(reSlash, "\\1\\2");
#  130|       str.push(reFilterSlash);
#  131|   

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:134: misra_cpp_2008_rule_7_1_1_violation: The variable "reFilterTab" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  132|       // create a regex-based filter to replace \t by \t
#  133|       const RE reTab("\\\\t");
#  134|->     boost::iostreams::basic_regex_filter<char> reFilterTab(reTab, "\\\\t");
#  135|       str.push(reFilterTab);
#  136|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:143: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  141|       if (!d->scanProps.empty()) {
#  142|           PTree scan;
#  143|->         for (TScanProps::const_reference prop : d->scanProps)
#  144|               scan.put<std::string>(prop.first, prop.second);
#  145|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:144: misra_c_2012_rule_15_6_violation: The body of the "for" loop is not a compound statement.
#  142|           PTree scan;
#  143|           for (TScanProps::const_reference prop : d->scanProps)
#  144|->             scan.put<std::string>(prop.first, prop.second);
#  145|   
#  146|           root.put_child("scan", scan);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:144: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put" is unused.
#  142|           PTree scan;
#  143|           for (TScanProps::const_reference prop : d->scanProps)
#  144|->             scan.put<std::string>(prop.first, prop.second);
#  145|   
#  146|           root.put_child("scan", scan);

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:144: misra_cpp_2008_rule_0_1_7_violation: The return value of function "scan.put(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const(prop.first, '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), prop.second)" is not used.
#  142|           PTree scan;
#  143|           for (TScanProps::const_reference prop : d->scanProps)
#  144|->             scan.put<std::string>(prop.first, prop.second);
#  145|   
#  146|           root.put_child("scan", scan);

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:144: misra_cpp_2008_rule_6_3_1_violation: The body of the "for" loop is not a compound statement.
#  142|           PTree scan;
#  143|           for (TScanProps::const_reference prop : d->scanProps)
#  144|->             scan.put<std::string>(prop.first, prop.second);
#  145|   
#  146|           root.put_child("scan", scan);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:146: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put_child" is unused.
#  144|               scan.put<std::string>(prop.first, prop.second);
#  145|   
#  146|->         root.put_child("scan", scan);
#  147|       }
#  148|   

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:146: misra_cpp_2008_rule_0_1_7_violation: The return value of function "root.put_child(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("scan", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), scan)" is not used.
#  144|               scan.put<std::string>(prop.first, prop.second);
#  145|   
#  146|->         root.put_child("scan", scan);
#  147|       }
#  148|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:150: misra_c_2012_rule_17_7_violation: The return value of a non-void function "put_child" is unused.
#  148|   
#  149|       // node representing the list of defects
#  150|->     root.put_child("defects", PTree());
#  151|       PTree &defects = root.get_child("defects");
#  152|   

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:150: misra_cpp_2008_rule_0_1_7_violation: The return value of function "root.put_child(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, SharedStr, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::path_type const("defects", '.', boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()), PTree())" is not used.
#  148|   
#  149|       // node representing the list of defects
#  150|->     root.put_child("defects", PTree());
#  151|       PTree &defects = root.get_child("defects");
#  152|   

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:151: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "defects" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:159: end_of_scope: Reached end of scope without using value stored in "defects".
#  149|       // node representing the list of defects
#  150|       root.put_child("defects", PTree());
#  151|->     PTree &defects = root.get_child("defects");
#  152|   
#  153|       // go through the queue and move defects one by one to the property tree

Error: MISRA C-2012 Rule 14.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:154: misra_c_2012_rule_14_2_violation: The expression "this->d->defQueue" used in the for loop clauses is modified in the loop body.
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:155: modify_expr: Modifying the expression "this->d->defQueue".
#  152|   
#  153|       // go through the queue and move defects one by one to the property tree
#  154|->     for (; !d->defQueue.empty(); d->defQueue.pop())
#  155|           appendDefectNode(defects, d->defQueue.front());
#  156|   

Error: MISRA C++-2008 Rule 6-5-1 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:154: misra_cpp_2008_rule_6_5_1_violation: There is no loop counter.
#  152|   
#  153|       // go through the queue and move defects one by one to the property tree
#  154|->     for (; !d->defQueue.empty(); d->defQueue.pop())
#  155|           appendDefectNode(defects, d->defQueue.front());
#  156|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:155: misra_c_2012_rule_15_6_violation: The body of the "for" loop is not a compound statement.
#  153|       // go through the queue and move defects one by one to the property tree
#  154|       for (; !d->defQueue.empty(); d->defQueue.pop())
#  155|->         appendDefectNode(defects, d->defQueue.front());
#  156|   
#  157|       // finally encode the tree as JSON

Error: MISRA C++-2008 Rule 6-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:155: misra_cpp_2008_rule_6_3_1_violation: The body of the "for" loop is not a compound statement.
#  153|       // go through the queue and move defects one by one to the property tree
#  154|       for (; !d->defQueue.empty(); d->defQueue.pop())
#  155|->         appendDefectNode(defects, d->defQueue.front());
#  156|   
#  157|       // finally encode the tree as JSON

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.hh:27: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "JsonWriter".
#   25|   #include <iostream>
#   26|   
#   27|-> class JsonWriter: public AbstractWriter {
#   28|       public:
#   29|           JsonWriter(std::ostream &);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.hh:29: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   27|   class JsonWriter: public AbstractWriter {
#   28|       public:
#   29|->         JsonWriter(std::ostream &);
#   30|           virtual ~JsonWriter();
#   31|   

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.hh:29: misra_c_2012_rule_8_3_violation: Function "JsonWriter" is declared more than once and with parameter names that are not identical.
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.cc:44: definition: Definition for "JsonWriter".
#   27|   class JsonWriter: public AbstractWriter {
#   28|       public:
#   29|->         JsonWriter(std::ostream &);
#   30|           virtual ~JsonWriter();
#   31|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.hh:30: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   28|       public:
#   29|           JsonWriter(std::ostream &);
#   30|->         virtual ~JsonWriter();
#   31|   
#   32|           virtual const TScanProps& getScanProps() const;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.hh:32: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   30|           virtual ~JsonWriter();
#   31|   
#   32|->         virtual const TScanProps& getScanProps() const;
#   33|           virtual void setScanProps(const TScanProps &);
#   34|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.hh:33: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   31|   
#   32|           virtual const TScanProps& getScanProps() const;
#   33|->         virtual void setScanProps(const TScanProps &);
#   34|   
#   35|           virtual void handleDef(const Defect &def);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/json-writer.hh:36: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   34|   
#   35|           virtual void handleDef(const Defect &def);
#   36|->         virtual void flush();
#   37|   
#   38|       private:

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2020 Red Hat, Inc.
#    3|    *

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:24: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   22|   #include <boost/lexical_cast.hpp>
#   23|   
#   24|-> int parse_int(const std::string &str, const int fallback)
#   25|   {
#   26|       try {

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:24: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "int parse_int(const std::string &, int)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:31: prev_declaration: (see previous declaration of "parse_int" at line 31 of "../../src/parser-common.hh")
#   22|   #include <boost/lexical_cast.hpp>
#   23|   
#   24|-> int parse_int(const std::string &str, const int fallback)
#   25|   {
#   26|       try {

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:24: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   22|   #include <boost/lexical_cast.hpp>
#   23|   
#   24|-> int parse_int(const std::string &str, const int fallback)
#   25|   {
#   26|       try {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:24: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "parse_int".
#   22|   #include <boost/lexical_cast.hpp>
#   23|   
#   24|-> int parse_int(const std::string &str, const int fallback)
#   25|   {
#   26|       try {

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:27: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   25|   {
#   26|       try {
#   27|->         return boost::lexical_cast<int>(str);
#   28|       }
#   29|       catch (boost::bad_lexical_cast &) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:27: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   25|   {
#   26|       try {
#   27|->         return boost::lexical_cast<int>(str);
#   28|       }
#   29|       catch (boost::bad_lexical_cast &) {

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:30: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   28|       }
#   29|       catch (boost::bad_lexical_cast &) {
#   30|->         return fallback;
#   31|       }
#   32|   }

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:30: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   28|       }
#   29|       catch (boost::bad_lexical_cast &) {
#   30|->         return fallback;
#   31|       }
#   32|   }

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:36: misra_cpp_2008_rule_11_0_1_violation: Member "langByChecker" is not private but "LangDetector::Private" is a non-POD type.
#   34|   struct LangDetector::Private {
#   35|       typedef std::map<std::string, std::string>      TMap;
#   36|->     TMap langByChecker;
#   37|   };
#   38|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:39: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   37|   };
#   38|   
#   39|-> LangDetector::LangDetector():
#   40|       d(new Private)
#   41|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:40: misra_c_2012_directive_4_12_violation: A call to the function "operator new(48UL)" performs dynamic memory allocation.
#   38|   
#   39|   LangDetector::LangDetector():
#   40|->     d(new Private)
#   41|   {
#   42|       d->langByChecker["CLANG_WARNING"]           = "c/c++";

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:40: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#   38|   
#   39|   LangDetector::LangDetector():
#   40|->     d(new Private)
#   41|   {
#   42|       d->langByChecker["CLANG_WARNING"]           = "c/c++";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:42: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   40|       d(new Private)
#   41|   {
#   42|->     d->langByChecker["CLANG_WARNING"]           = "c/c++";
#   43|       d->langByChecker["COMPILER_WARNING"]        = "c/c++";
#   44|       d->langByChecker["CPPCHECK_WARNING"]        = "c/c++";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:43: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   41|   {
#   42|       d->langByChecker["CLANG_WARNING"]           = "c/c++";
#   43|->     d->langByChecker["COMPILER_WARNING"]        = "c/c++";
#   44|       d->langByChecker["CPPCHECK_WARNING"]        = "c/c++";
#   45|       d->langByChecker["GCC_ANALYZER_WARNING"]    = "c/c++";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:44: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   42|       d->langByChecker["CLANG_WARNING"]           = "c/c++";
#   43|       d->langByChecker["COMPILER_WARNING"]        = "c/c++";
#   44|->     d->langByChecker["CPPCHECK_WARNING"]        = "c/c++";
#   45|       d->langByChecker["GCC_ANALYZER_WARNING"]    = "c/c++";
#   46|       d->langByChecker["PROSPECTOR_WARNING"]      = "python";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:45: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   43|       d->langByChecker["COMPILER_WARNING"]        = "c/c++";
#   44|       d->langByChecker["CPPCHECK_WARNING"]        = "c/c++";
#   45|->     d->langByChecker["GCC_ANALYZER_WARNING"]    = "c/c++";
#   46|       d->langByChecker["PROSPECTOR_WARNING"]      = "python";
#   47|       d->langByChecker["SHELLCHECK_WARNING"]      = "shell";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:46: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   44|       d->langByChecker["CPPCHECK_WARNING"]        = "c/c++";
#   45|       d->langByChecker["GCC_ANALYZER_WARNING"]    = "c/c++";
#   46|->     d->langByChecker["PROSPECTOR_WARNING"]      = "python";
#   47|       d->langByChecker["SHELLCHECK_WARNING"]      = "shell";
#   48|       d->langByChecker["SMATCH_WARNING"]          = "c/c++";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:47: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   45|       d->langByChecker["GCC_ANALYZER_WARNING"]    = "c/c++";
#   46|       d->langByChecker["PROSPECTOR_WARNING"]      = "python";
#   47|->     d->langByChecker["SHELLCHECK_WARNING"]      = "shell";
#   48|       d->langByChecker["SMATCH_WARNING"]          = "c/c++";
#   49|   }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:48: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   46|       d->langByChecker["PROSPECTOR_WARNING"]      = "python";
#   47|       d->langByChecker["SHELLCHECK_WARNING"]      = "shell";
#   48|->     d->langByChecker["SMATCH_WARNING"]          = "c/c++";
#   49|   }
#   50|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:51: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   49|   }
#   50|   
#   51|-> LangDetector::~LangDetector()
#   52|   {
#   53|       delete d;

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:56: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "void LangDetector::inferLangFromChecker(Defect *, bool) const".
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:38: prev_declaration: (see previous declaration of "LangDetector::inferLangFromChecker" at line 38 of "../../src/parser-common.hh")
#   54|   }
#   55|   
#   56|-> void LangDetector::inferLangFromChecker(Defect *pDef, const bool onlyIfMissing)
#   57|       const
#   58|   {

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:56: misra_cpp_2008_rule_7_1_1_violation: The variable "pDef" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   54|   }
#   55|   
#   56|-> void LangDetector::inferLangFromChecker(Defect *pDef, const bool onlyIfMissing)
#   57|       const
#   58|   {

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:59: misra_cpp_2008_rule_5_2_1_violation: Operand "!pDef->language.empty()" is not a postfix expression.
#   57|       const
#   58|   {
#   59|->     if (onlyIfMissing && !pDef->language.empty())
#   60|           // language already assigned
#   61|           return;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:61: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   59|       if (onlyIfMissing && !pDef->language.empty())
#   60|           // language already assigned
#   61|->         return;
#   62|   
#   63|       Private::TMap::const_iterator it = d->langByChecker.find(pDef->checker);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:61: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   59|       if (onlyIfMissing && !pDef->language.empty())
#   60|           // language already assigned
#   61|->         return;
#   62|   
#   63|       Private::TMap::const_iterator it = d->langByChecker.find(pDef->checker);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:61: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   59|       if (onlyIfMissing && !pDef->language.empty())
#   60|           // language already assigned
#   61|->         return;
#   62|   
#   63|       Private::TMap::const_iterator it = d->langByChecker.find(pDef->checker);

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:61: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   59|       if (onlyIfMissing && !pDef->language.empty())
#   60|           // language already assigned
#   61|->         return;
#   62|   
#   63|       Private::TMap::const_iterator it = d->langByChecker.find(pDef->checker);

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:63: misra_cpp_2008_rule_7_1_1_violation: The variable "it" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   61|           return;
#   62|   
#   63|->     Private::TMap::const_iterator it = d->langByChecker.find(pDef->checker);
#   64|       if (d->langByChecker.end() == it)
#   65|           // not found

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:66: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   64|       if (d->langByChecker.end() == it)
#   65|           // not found
#   66|->         return;
#   67|   
#   68|       // found --> assign from map

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:66: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   64|       if (d->langByChecker.end() == it)
#   65|           // not found
#   66|->         return;
#   67|   
#   68|       // found --> assign from map

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:66: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   64|       if (d->langByChecker.end() == it)
#   65|           // not found
#   66|->         return;
#   67|   
#   68|       // found --> assign from map

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:66: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   64|       if (d->langByChecker.end() == it)
#   65|           // not found
#   66|->         return;
#   67|   
#   68|       // found --> assign from map

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.cc:69: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   67|   
#   68|       // found --> assign from map
#   69|->     pDef->language = it->second;
#   70|   }

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011-2020 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:27: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   25|   #include <string>
#   26|   
#   27|-> #define RE_EVENT_GCC "(?:(?:(?:fatal|internal) )?[a-z][A-Za-z0-9_-]+)(?:\\[[^ \\]]+\\])?"
#   28|   #define RE_EVENT_PROSPECTOR "(?:[A-Z]+[0-9]+\\[[a-z0-9-]+\\])"
#   29|   #define RE_EVENT RE_EVENT_GCC "|" RE_EVENT_PROSPECTOR

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:27: misra_cpp_2008_rule_16_2_2_violation: Macro "RE_EVENT_GCC" is used other than include guards, type qualifiers, or storage class specifiers.
#   25|   #include <string>
#   26|   
#   27|-> #define RE_EVENT_GCC "(?:(?:(?:fatal|internal) )?[a-z][A-Za-z0-9_-]+)(?:\\[[^ \\]]+\\])?"
#   28|   #define RE_EVENT_PROSPECTOR "(?:[A-Z]+[0-9]+\\[[a-z0-9-]+\\])"
#   29|   #define RE_EVENT RE_EVENT_GCC "|" RE_EVENT_PROSPECTOR

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:28: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   26|   
#   27|   #define RE_EVENT_GCC "(?:(?:(?:fatal|internal) )?[a-z][A-Za-z0-9_-]+)(?:\\[[^ \\]]+\\])?"
#   28|-> #define RE_EVENT_PROSPECTOR "(?:[A-Z]+[0-9]+\\[[a-z0-9-]+\\])"
#   29|   #define RE_EVENT RE_EVENT_GCC "|" RE_EVENT_PROSPECTOR
#   30|   

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:28: misra_cpp_2008_rule_16_2_2_violation: Macro "RE_EVENT_PROSPECTOR" is used other than include guards, type qualifiers, or storage class specifiers.
#   26|   
#   27|   #define RE_EVENT_GCC "(?:(?:(?:fatal|internal) )?[a-z][A-Za-z0-9_-]+)(?:\\[[^ \\]]+\\])?"
#   28|-> #define RE_EVENT_PROSPECTOR "(?:[A-Z]+[0-9]+\\[[a-z0-9-]+\\])"
#   29|   #define RE_EVENT RE_EVENT_GCC "|" RE_EVENT_PROSPECTOR
#   30|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:29: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   27|   #define RE_EVENT_GCC "(?:(?:(?:fatal|internal) )?[a-z][A-Za-z0-9_-]+)(?:\\[[^ \\]]+\\])?"
#   28|   #define RE_EVENT_PROSPECTOR "(?:[A-Z]+[0-9]+\\[[a-z0-9-]+\\])"
#   29|-> #define RE_EVENT RE_EVENT_GCC "|" RE_EVENT_PROSPECTOR
#   30|   
#   31|   int parse_int(const std::string &, int fallback = 0);

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:29: misra_cpp_2008_rule_16_2_2_violation: Macro "RE_EVENT" is used other than include guards, type qualifiers, or storage class specifiers.
#   27|   #define RE_EVENT_GCC "(?:(?:(?:fatal|internal) )?[a-z][A-Za-z0-9_-]+)(?:\\[[^ \\]]+\\])?"
#   28|   #define RE_EVENT_PROSPECTOR "(?:[A-Z]+[0-9]+\\[[a-z0-9-]+\\])"
#   29|-> #define RE_EVENT RE_EVENT_GCC "|" RE_EVENT_PROSPECTOR
#   30|   
#   31|   int parse_int(const std::string &, int fallback = 0);

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:31: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   29|   #define RE_EVENT RE_EVENT_GCC "|" RE_EVENT_PROSPECTOR
#   30|   
#   31|-> int parse_int(const std::string &, int fallback = 0);
#   32|   
#   33|   class LangDetector {

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:31: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   29|   #define RE_EVENT RE_EVENT_GCC "|" RE_EVENT_PROSPECTOR
#   30|   
#   31|-> int parse_int(const std::string &, int fallback = 0);
#   32|   
#   33|   class LangDetector {

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:31: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   29|   #define RE_EVENT RE_EVENT_GCC "|" RE_EVENT_PROSPECTOR
#   30|   
#   31|-> int parse_int(const std::string &, int fallback = 0);
#   32|   
#   33|   class LangDetector {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:31: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "parse_int".
#   29|   #define RE_EVENT RE_EVENT_GCC "|" RE_EVENT_PROSPECTOR
#   30|   
#   31|-> int parse_int(const std::string &, int fallback = 0);
#   32|   
#   33|   class LangDetector {

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:33: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "LangDetector".
#   31|   int parse_int(const std::string &, int fallback = 0);
#   32|   
#   33|-> class LangDetector {
#   34|       public:
#   35|           LangDetector();

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:35: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   33|   class LangDetector {
#   34|       public:
#   35|->         LangDetector();
#   36|           ~LangDetector();
#   37|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:36: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   34|       public:
#   35|           LangDetector();
#   36|->         ~LangDetector();
#   37|   
#   38|           void inferLangFromChecker(Defect *, bool onlyIfMissing = true) const;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/parser-common.hh:38: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   36|           ~LangDetector();
#   37|   
#   38|->         void inferLangFromChecker(Defect *, bool onlyIfMissing = true) const;
#   39|   
#   40|       private:

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2012 Red Hat, Inc.
#    3|    *

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:28: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   26|   #include <boost/python.hpp>
#   27|   
#   28|-> std::string diff_scans(
#   29|           const std::string          &oldScan,
#   30|           const std::string          &newScan)

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:28: misra_c_2012_rule_8_7_violation: Function "diff_scans" has external linkage but is only used in one translation unit.
#   26|   #include <boost/python.hpp>
#   27|   
#   28|-> std::string diff_scans(
#   29|           const std::string          &oldScan,
#   30|           const std::string          &newScan)

Error: MISRA C++-2008 Rule 2-10-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:28: misra_cpp_2008_rule_2_10_1_violation: Typographically ambiguous symbol "diff_scans" clashes with "diffScans"
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff-core.hh:24: misra_typographically_ambiguous_orig: (Previously declared symbol "diffScans" at line 24 of "../../src/csdiff-core.hh")
#   26|   #include <boost/python.hpp>
#   27|   
#   28|-> std::string diff_scans(
#   29|           const std::string          &oldScan,
#   30|           const std::string          &newScan)

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:28: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   26|   #include <boost/python.hpp>
#   27|   
#   28|-> std::string diff_scans(
#   29|           const std::string          &oldScan,
#   30|           const std::string          &newScan)

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:28: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "diff_scans".
#   26|   #include <boost/python.hpp>
#   27|   
#   28|-> std::string diff_scans(
#   29|           const std::string          &oldScan,
#   30|           const std::string          &newScan)

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:46: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   44|   }
#   45|   
#   46|-> std::string get_version(void)
#   47|   {
#   48|       return CS_VERSION;

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:46: misra_c_2012_rule_8_7_violation: Function "get_version" has external linkage but is only used in one translation unit.
#   44|   }
#   45|   
#   46|-> std::string get_version(void)
#   47|   {
#   48|       return CS_VERSION;

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:46: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   44|   }
#   45|   
#   46|-> std::string get_version(void)
#   47|   {
#   48|       return CS_VERSION;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:46: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "get_version".
#   44|   }
#   45|   
#   46|-> std::string get_version(void)
#   47|   {
#   48|       return CS_VERSION;

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:51: misra_c_2012_rule_8_13_violation: The array "initial_methods" has elements with non-constant type but the array elements are never modified. Consider adding const qualifier to the element type.
#   49|   }
#   50|   
#   51|-> BOOST_PYTHON_MODULE(pycsdiff)
#   52|   {
#   53|       boost::python::def("diff_scans",        diff_scans);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:51: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   49|   }
#   50|   
#   51|-> BOOST_PYTHON_MODULE(pycsdiff)
#   52|   {
#   53|       boost::python::def("diff_scans",        diff_scans);

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:51: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   49|   }
#   50|   
#   51|-> BOOST_PYTHON_MODULE(pycsdiff)
#   52|   {
#   53|       boost::python::def("diff_scans",        diff_scans);

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:51: misra_c_2012_rule_8_7_violation: Function "PyInit_pycsdiff" has external linkage but is only used in one translation unit.
#   49|   }
#   50|   
#   51|-> BOOST_PYTHON_MODULE(pycsdiff)
#   52|   {
#   53|       boost::python::def("diff_scans",        diff_scans);

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:51: misra_c_2012_rule_8_7_violation: Function "init_module_pycsdiff" has external linkage but is only used in one translation unit.
#   49|   }
#   50|   
#   51|-> BOOST_PYTHON_MODULE(pycsdiff)
#   52|   {
#   53|       boost::python::def("diff_scans",        diff_scans);

Error: MISRA C++-2008 Rule 0-1-10 (CWE-561):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:51: misra_cpp_2008_rule_0_1_10_violation: Function "PyInit_pycsdiff()" is defined but never called.
#   49|   }
#   50|   
#   51|-> BOOST_PYTHON_MODULE(pycsdiff)
#   52|   {
#   53|       boost::python::def("diff_scans",        diff_scans);

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:51: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   49|   }
#   50|   
#   51|-> BOOST_PYTHON_MODULE(pycsdiff)
#   52|   {
#   53|       boost::python::def("diff_scans",        diff_scans);

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:51: misra_cpp_2008_rule_7_1_1_violation: The array "initial_methods" has elements with non-constant type but the array elements are never modified. Consider adding const qualifier to the element type.
#   49|   }
#   50|   
#   51|-> BOOST_PYTHON_MODULE(pycsdiff)
#   52|   {
#   53|       boost::python::def("diff_scans",        diff_scans);

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:51: misra_cpp_2008_rule_7_1_1_violation: The variable "initial_m_base" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   49|   }
#   50|   
#   51|-> BOOST_PYTHON_MODULE(pycsdiff)
#   52|   {
#   53|       boost::python::def("diff_scans",        diff_scans);

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:51: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "init_module_pycsdiff".
#   49|   }
#   50|   
#   51|-> BOOST_PYTHON_MODULE(pycsdiff)
#   52|   {
#   53|       boost::python::def("diff_scans",        diff_scans);

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:51: misra_cpp_2008_rule_8_4_4_violation: Function identifier "init_module_pycsdiff" is not used to call the function or preceded by &.
#   49|   }
#   50|   
#   51|-> BOOST_PYTHON_MODULE(pycsdiff)
#   52|   {
#   53|       boost::python::def("diff_scans",        diff_scans);

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:53: misra_cpp_2008_rule_8_4_4_violation: Function identifier "diff_scans" is not used to call the function or preceded by &.
#   51|   BOOST_PYTHON_MODULE(pycsdiff)
#   52|   {
#   53|->     boost::python::def("diff_scans",        diff_scans);
#   54|       boost::python::def("get_version",       get_version);
#   55|   }

Error: MISRA C++-2008 Rule 8-4-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/pycsdiff.cc:54: misra_cpp_2008_rule_8_4_4_violation: Function identifier "get_version" is not used to call the function or preceded by &.
#   52|   {
#   53|       boost::python::def("diff_scans",        diff_scans);
#   54|->     boost::python::def("get_version",       get_version);
#   55|   }

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/regex.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2020 Red Hat, Inc.
#    3|    *

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string-ptree.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2018 Red Hat, Inc.
#    3|    *

Error: MISRA C-2012 Rule 2.3 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string-ptree.hh:29: misra_c_2012_rule_2_3_violation: Type "internal_type" is defined but never used.
#   27|   template <typename T>
#   28|   struct SharedStrTrans {
#   29|->     typedef SharedStr internal_type;
#   30|       typedef SharedStr external_type;
#   31|   

Error: MISRA C++-2008 Rule 0-1-5 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string-ptree.hh:29: misra_cpp_2008_rule_0_1_5_violation: Type "internal_type" is defined but never used.
#   27|   template <typename T>
#   28|   struct SharedStrTrans {
#   29|->     typedef SharedStr internal_type;
#   30|       typedef SharedStr external_type;
#   31|   

Error: MISRA C-2012 Rule 2.3 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string-ptree.hh:30: misra_c_2012_rule_2_3_violation: Type "external_type" is defined but never used.
#   28|   struct SharedStrTrans {
#   29|       typedef SharedStr internal_type;
#   30|->     typedef SharedStr external_type;
#   31|   
#   32|       boost::optional<SharedStr> put_value(const T &val) const {

Error: MISRA C++-2008 Rule 0-1-5 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string-ptree.hh:30: misra_cpp_2008_rule_0_1_5_violation: Type "external_type" is defined but never used.
#   28|   struct SharedStrTrans {
#   29|       typedef SharedStr internal_type;
#   30|->     typedef SharedStr external_type;
#   31|   
#   32|       boost::optional<SharedStr> put_value(const T &val) const {

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string-ptree.hh:32: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   30|       typedef SharedStr external_type;
#   31|   
#   32|->     boost::optional<SharedStr> put_value(const T &val) const {
#   33|           const SharedStr ss(val);
#   34|           return ss;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string-ptree.hh:32: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   30|       typedef SharedStr external_type;
#   31|   
#   32|->     boost::optional<SharedStr> put_value(const T &val) const {
#   33|           const SharedStr ss(val);
#   34|           return ss;

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2018 Red Hat, Inc.
#    3|    *

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.cc:26: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   24|   SharedStr::TStor SharedStr::stor_;
#   25|   
#   26|-> SharedStr::SharedStr():
#   27|       iter_(stor_.end())
#   28|   {

Error: MISRA C++-2008 Rule 0-1-10 (CWE-561):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.cc:31: misra_cpp_2008_rule_0_1_10_violation: Function "SharedStr::swap(SharedStr &)" is defined but never called.
#   29|   }
#   30|   
#   31|-> void SharedStr::swap(SharedStr &ref)
#   32|   {
#   33|       std::swap(iter_, ref.iter_);

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.cc:41: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   39|   }
#   40|   
#   41|-> SharedStr::SharedStr(const int i)
#   42|   {
#   43|       std::ostringstream ss;

Error: MISRA C++-2008 Rule 12-1-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.cc:41: misra_cpp_2008_rule_12_1_3_violation: The constructor "SharedStr::SharedStr(int)" is declared without "explicit".
#   39|   }
#   40|   
#   41|-> SharedStr::SharedStr(const int i)
#   42|   {
#   43|       std::ostringstream ss;

Error: MISRA C++-2008 Rule 3-9-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.cc:41: misra_cpp_2008_rule_3_9_1_violation: Redeclaration of object/function is typename incompatible with "SharedStr::SharedStr(int)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.hh:29: prev_declaration: (see previous declaration of "SharedStr::SharedStr" at line 29 of "../../src/shared-string.hh")
#   39|   }
#   40|   
#   41|-> SharedStr::SharedStr(const int i)
#   42|   {
#   43|       std::ostringstream ss;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.cc:41: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   39|   }
#   40|   
#   41|-> SharedStr::SharedStr(const int i)
#   42|   {
#   43|       std::ostringstream ss;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.cc:44: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#   42|   {
#   43|       std::ostringstream ss;
#   44|->     ss << i;
#   45|       this->hashStr(ss.str());
#   46|   }

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.cc:53: misra_cpp_2008_rule_7_1_1_violation: The variable "pDst" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   51|   }
#   52|   
#   53|-> void SharedStr::writeOut(std::string *pDst) const
#   54|   {
#   55|       if (stor_.end() == iter_)

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.cc:56: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   54|   {
#   55|       if (stor_.end() == iter_)
#   56|->         pDst->clear();
#   57|       else
#   58|           *pDst = *iter_;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.cc:56: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   54|   {
#   55|       if (stor_.end() == iter_)
#   56|->         pDst->clear();
#   57|       else
#   58|           *pDst = *iter_;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.cc:58: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   56|           pDst->clear();
#   57|       else
#   58|->         *pDst = *iter_;
#   59|   }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.cc:58: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   56|           pDst->clear();
#   57|       else
#   58|->         *pDst = *iter_;
#   59|   }

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.cc:58: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#   56|           pDst->clear();
#   57|       else
#   58|->         *pDst = *iter_;
#   59|   }

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2018 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.hh:26: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "SharedStr".
#   24|   #include <string>
#   25|   
#   26|-> class SharedStr {
#   27|       public:
#   28|           SharedStr();

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.hh:28: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   26|   class SharedStr {
#   27|       public:
#   28|->         SharedStr();
#   29|           SharedStr(int i);
#   30|           SharedStr(const std::string &str);

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.hh:29: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   27|       public:
#   28|           SharedStr();
#   29|->         SharedStr(int i);
#   30|           SharedStr(const std::string &str);
#   31|           void writeOut(std::string *pDst) const;

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.hh:29: misra_c_2012_rule_8_3_violation: Symbol "SharedStr" is declared more than once and with types that are not identical.
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.cc:41: definition: Definition for "SharedStr".
#   27|       public:
#   28|           SharedStr();
#   29|->         SharedStr(int i);
#   30|           SharedStr(const std::string &str);
#   31|           void writeOut(std::string *pDst) const;

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.hh:29: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#   27|       public:
#   28|           SharedStr();
#   29|->         SharedStr(int i);
#   30|           SharedStr(const std::string &str);
#   31|           void writeOut(std::string *pDst) const;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.hh:32: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   30|           SharedStr(const std::string &str);
#   31|           void writeOut(std::string *pDst) const;
#   32|->         void swap(SharedStr &);
#   33|   
#   34|       private:

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/shared-string.hh:38: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   36|           static TStor                    stor_;
#   37|           TStor::iterator                 iter_;
#   38|->         void hashStr(const std::string &);
#   39|   };
#   40|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/version.cc:2: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#    1|   #include "version.hh"
#    2|-> const char *CS_VERSION = "2.1.1.20210615.144928.g9c9686f";

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/version.cc:2: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "CS_VERSION".
#    1|   #include "version.hh"
#    2|-> const char *CS_VERSION = "2.1.1.20210615.144928.g9c9686f";

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/version.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2013 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/version.hh:23: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#   21|   #define H_GUARD_VERSION_H
#   22|   
#   23|-> extern const char *CS_VERSION;
#   24|   
#   25|   #endif /* H_GUARD_VERSION_H */

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/version.hh:23: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "CS_VERSION".
#   21|   #define H_GUARD_VERSION_H
#   22|   
#   23|-> extern const char *CS_VERSION;
#   24|   
#   25|   #endif /* H_GUARD_VERSION_H */

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2011-2021 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:27: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   25|   
#   26|   // executable of the dynamic linker (used as ELF interpreter)
#   27|-> #ifndef LD_LINUX_SO
#   28|   #   define LD_LINUX_SO "/lib64/ld-linux-x86-64.so.2"
#   29|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:28: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   26|   // executable of the dynamic linker (used as ELF interpreter)
#   27|   #ifndef LD_LINUX_SO
#   28|-> #   define LD_LINUX_SO "/lib64/ld-linux-x86-64.so.2"
#   29|   #endif
#   30|   

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:28: misra_cpp_2008_rule_16_2_2_violation: Macro "LD_LINUX_SO" is used other than include guards, type qualifiers, or storage class specifiers.
#   26|   // executable of the dynamic linker (used as ELF interpreter)
#   27|   #ifndef LD_LINUX_SO
#   28|-> #   define LD_LINUX_SO "/lib64/ld-linux-x86-64.so.2"
#   29|   #endif
#   30|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:29: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   27|   #ifndef LD_LINUX_SO
#   28|   #   define LD_LINUX_SO "/lib64/ld-linux-x86-64.so.2"
#   29|-> #endif
#   30|   
#   31|   /// tree decoder for valgrind XML output

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:32: misra_cpp_2008_rule_3_4_1_violation: Symbol "ValgrindTreeDecoder" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:298: single_use: Symbol "ValgrindTreeDecoder" is only used in "XmlParser::XmlParser(InStream &)".
#   30|   
#   31|   /// tree decoder for valgrind XML output
#   32|-> class ValgrindTreeDecoder: public AbstractTreeDecoder {
#   33|       public:
#   34|           virtual bool readNode(Defect *def, pt::ptree::const_iterator defIter);

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:32: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "ValgrindTreeDecoder".
#   30|   
#   31|   /// tree decoder for valgrind XML output
#   32|-> class ValgrindTreeDecoder: public AbstractTreeDecoder {
#   33|       public:
#   34|           virtual bool readNode(Defect *def, pt::ptree::const_iterator defIter);

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:45: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   43|   
#   44|   /// hide explicit invocation of dynamic linker from command-line args
#   45|-> bool /* continue */ skipLdArgs(
#   46|           std::string                    *pExe,
#   47|           pt::ptree::const_iterator      *pIt,

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:45: misra_c_2012_rule_8_7_violation: Function "skipLdArgs" has external linkage but is only used in one translation unit.
#   43|   
#   44|   /// hide explicit invocation of dynamic linker from command-line args
#   45|-> bool /* continue */ skipLdArgs(
#   46|           std::string                    *pExe,
#   47|           pt::ptree::const_iterator      *pIt,

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:45: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   43|   
#   44|   /// hide explicit invocation of dynamic linker from command-line args
#   45|-> bool /* continue */ skipLdArgs(
#   46|           std::string                    *pExe,
#   47|           pt::ptree::const_iterator      *pIt,

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:45: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "skipLdArgs".
#   43|   
#   44|   /// hide explicit invocation of dynamic linker from command-line args
#   45|-> bool /* continue */ skipLdArgs(
#   46|           std::string                    *pExe,
#   47|           pt::ptree::const_iterator      *pIt,

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:46: misra_cpp_2008_rule_7_1_1_violation: The variable "pExe" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   44|   /// hide explicit invocation of dynamic linker from command-line args
#   45|   bool /* continue */ skipLdArgs(
#   46|->         std::string                    *pExe,
#   47|           pt::ptree::const_iterator      *pIt,
#   48|           const pt::ptree::const_iterator itEnd)

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:47: misra_cpp_2008_rule_7_1_1_violation: The variable "pIt" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   45|   bool /* continue */ skipLdArgs(
#   46|           std::string                    *pExe,
#   47|->         pt::ptree::const_iterator      *pIt,
#   48|           const pt::ptree::const_iterator itEnd)
#   49|   {

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:51: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   49|   {
#   50|       if (*pExe != LD_LINUX_SO)
#   51|->         return /* continue */ true;
#   52|   
#   53|       for (bool skipArg = false; *pIt != itEnd; ++(*pIt)) {

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:51: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   49|   {
#   50|       if (*pExe != LD_LINUX_SO)
#   51|->         return /* continue */ true;
#   52|   
#   53|       for (bool skipArg = false; *pIt != itEnd; ++(*pIt)) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:51: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   49|   {
#   50|       if (*pExe != LD_LINUX_SO)
#   51|->         return /* continue */ true;
#   52|   
#   53|       for (bool skipArg = false; *pIt != itEnd; ++(*pIt)) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:51: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   49|   {
#   50|       if (*pExe != LD_LINUX_SO)
#   51|->         return /* continue */ true;
#   52|   
#   53|       for (bool skipArg = false; *pIt != itEnd; ++(*pIt)) {

Error: MISRA C-2012 Rule 14.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:53: misra_c_2012_rule_14_2_violation: The third clause of the for loop does not update the loop counter.
#   51|           return /* continue */ true;
#   52|   
#   53|->     for (bool skipArg = false; *pIt != itEnd; ++(*pIt)) {
#   54|           if (skipArg) {
#   55|               skipArg = false;

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:53: misra_c_2012_rule_14_4_violation: The condition expression "pIt != itEnd" does not have an essentially boolean type.
#   51|           return /* continue */ true;
#   52|   
#   53|->     for (bool skipArg = false; *pIt != itEnd; ++(*pIt)) {
#   54|           if (skipArg) {
#   55|               skipArg = false;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:53: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#   51|           return /* continue */ true;
#   52|   
#   53|->     for (bool skipArg = false; *pIt != itEnd; ++(*pIt)) {
#   54|           if (skipArg) {
#   55|               skipArg = false;

Error: MISRA C++-2008 Rule 6-6-3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:56: misra_cpp_2008_rule_6_6_3_violation: "continue;" statement is not used in a well-formed for loop.
#   54|           if (skipArg) {
#   55|               skipArg = false;
#   56|->             continue;
#   57|           }
#   58|   

Error: MISRA C-2012 Rule 15.1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:61: misra_c_2012_rule_15_1_violation: Using "goto" statement.
#   59|           const std::string argVal = getStringValue(*pIt);
#   60|           if (argVal == "--preload")
#   61|->             goto skip_arg;
#   62|   
#   63|           if (argVal == "--argv0")

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:61: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   59|           const std::string argVal = getStringValue(*pIt);
#   60|           if (argVal == "--preload")
#   61|->             goto skip_arg;
#   62|   
#   63|           if (argVal == "--argv0")

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:61: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   59|           const std::string argVal = getStringValue(*pIt);
#   60|           if (argVal == "--preload")
#   61|->             goto skip_arg;
#   62|   
#   63|           if (argVal == "--argv0")

Error: MISRA C-2012 Rule 15.1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:64: misra_c_2012_rule_15_1_violation: Using "goto" statement.
#   62|   
#   63|           if (argVal == "--argv0")
#   64|->             goto skip_arg;
#   65|   
#   66|           // record path of the real binary being executed

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:64: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   62|   
#   63|           if (argVal == "--argv0")
#   64|->             goto skip_arg;
#   65|   
#   66|           // record path of the real binary being executed

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:64: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   62|   
#   63|           if (argVal == "--argv0")
#   64|->             goto skip_arg;
#   65|   
#   66|           // record path of the real binary being executed

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:67: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   65|   
#   66|           // record path of the real binary being executed
#   67|->         *pExe = argVal;
#   68|           ++(*pIt);
#   69|           return /* continue */ (itEnd != *pIt);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:68: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#   66|           // record path of the real binary being executed
#   67|           *pExe = argVal;
#   68|->         ++(*pIt);
#   69|           return /* continue */ (itEnd != *pIt);
#   70|   

Error: MISRA C++-2008 Rule 6-5-3 (CWE-1095):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:68: misra_cpp_2008_rule_6_5_3_violation: The loop-counter "pIt" is modified within condition or statement.
#   66|           // record path of the real binary being executed
#   67|           *pExe = argVal;
#   68|->         ++(*pIt);
#   69|           return /* continue */ (itEnd != *pIt);
#   70|   

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:69: misra_c_2012_rule_10_3_violation: Implicit conversion of "itEnd != pIt" from essential type "non-essential type" to different or narrower essential type "boolean".
#   67|           *pExe = argVal;
#   68|           ++(*pIt);
#   69|->         return /* continue */ (itEnd != *pIt);
#   70|   
#   71|   skip_arg:

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:69: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   67|           *pExe = argVal;
#   68|           ++(*pIt);
#   69|->         return /* continue */ (itEnd != *pIt);
#   70|   
#   71|   skip_arg:

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:69: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   67|           *pExe = argVal;
#   68|           ++(*pIt);
#   69|->         return /* continue */ (itEnd != *pIt);
#   70|   
#   71|   skip_arg:

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:79: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#   77|   
#   78|   /// read command-line of the executed program
#   79|-> void readExeArgs(
#   80|           std::string                    *pExe,
#   81|           std::string                    *pArgs,

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:79: misra_c_2012_rule_8_7_violation: Function "readExeArgs" has external linkage but is only used in one translation unit.
#   77|   
#   78|   /// read command-line of the executed program
#   79|-> void readExeArgs(
#   80|           std::string                    *pExe,
#   81|           std::string                    *pArgs,

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:79: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#   77|   
#   78|   /// read command-line of the executed program
#   79|-> void readExeArgs(
#   80|           std::string                    *pExe,
#   81|           std::string                    *pArgs,

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:79: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "readExeArgs".
#   77|   
#   78|   /// read command-line of the executed program
#   79|-> void readExeArgs(
#   80|           std::string                    *pExe,
#   81|           std::string                    *pArgs,

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:80: misra_cpp_2008_rule_7_1_1_violation: The variable "pExe" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   78|   /// read command-line of the executed program
#   79|   void readExeArgs(
#   80|->         std::string                    *pExe,
#   81|           std::string                    *pArgs,
#   82|           const pt::ptree                *root)

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:81: misra_cpp_2008_rule_7_1_1_violation: The variable "pArgs" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   79|   void readExeArgs(
#   80|           std::string                    *pExe,
#   81|->         std::string                    *pArgs,
#   82|           const pt::ptree                *root)
#   83|   {

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:82: misra_cpp_2008_rule_7_1_1_violation: The variable "root" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#   80|           std::string                    *pExe,
#   81|           std::string                    *pArgs,
#   82|->         const pt::ptree                *root)
#   83|   {
#   84|       const pt::ptree *argsNode;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:86: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   84|       const pt::ptree *argsNode;
#   85|       if (!findChildOf(&argsNode, *root, "args"))
#   86|->         return;
#   87|   
#   88|       const pt::ptree *argvNode;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:86: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   84|       const pt::ptree *argsNode;
#   85|       if (!findChildOf(&argsNode, *root, "args"))
#   86|->         return;
#   87|   
#   88|       const pt::ptree *argvNode;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:86: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   84|       const pt::ptree *argsNode;
#   85|       if (!findChildOf(&argsNode, *root, "args"))
#   86|->         return;
#   87|   
#   88|       const pt::ptree *argvNode;

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:86: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   84|       const pt::ptree *argsNode;
#   85|       if (!findChildOf(&argsNode, *root, "args"))
#   86|->         return;
#   87|   
#   88|       const pt::ptree *argvNode;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:90: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#   88|       const pt::ptree *argvNode;
#   89|       if (!findChildOf(&argvNode, *argsNode, "argv"))
#   90|->         return;
#   91|   
#   92|       // read name of executable

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:90: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   88|       const pt::ptree *argvNode;
#   89|       if (!findChildOf(&argvNode, *argsNode, "argv"))
#   90|->         return;
#   91|   
#   92|       // read name of executable

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:90: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   88|       const pt::ptree *argvNode;
#   89|       if (!findChildOf(&argvNode, *argsNode, "argv"))
#   90|->         return;
#   91|   
#   92|       // read name of executable

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:90: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#   88|       const pt::ptree *argvNode;
#   89|       if (!findChildOf(&argvNode, *argsNode, "argv"))
#   90|->         return;
#   91|   
#   92|       // read name of executable

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:93: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#   91|   
#   92|       // read name of executable
#   93|->     *pExe = valueOf<std::string>(*argvNode, "exe", *pExe);
#   94|   
#   95|       // read command-line args

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:97: misra_c_2012_rule_14_4_violation: The condition expression "boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::const_iterator(argvNode->end()) != it" does not have an essentially boolean type.
#   95|       // read command-line args
#   96|       pt::ptree::const_iterator it;
#   97|->     for (it = argvNode->begin(); argvNode->end() != it; ++it) {
#   98|           if (it->first != "arg")
#   99|               // skip this node

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:97: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#   95|       // read command-line args
#   96|       pt::ptree::const_iterator it;
#   97|->     for (it = argvNode->begin(); argvNode->end() != it; ++it) {
#   98|           if (it->first != "arg")
#   99|               // skip this node

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:100: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   98|           if (it->first != "arg")
#   99|               // skip this node
#  100|->             continue;
#  101|   
#  102|           if (!skipLdArgs(pExe, &it, argvNode->end()))

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:100: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#   98|           if (it->first != "arg")
#   99|               // skip this node
#  100|->             continue;
#  101|   
#  102|           if (!skipLdArgs(pExe, &it, argvNode->end()))

Error: MISRA C++-2008 Rule 6-6-3 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:100: misra_cpp_2008_rule_6_6_3_violation: "continue;" statement is not used in a well-formed for loop.
#   98|           if (it->first != "arg")
#   99|               // skip this node
#  100|->             continue;
#  101|   
#  102|           if (!skipLdArgs(pExe, &it, argvNode->end()))

Error: MISRA C++-2008 Rule 6-5-3 (CWE-1095):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:102: misra_cpp_2008_rule_6_5_3_violation: The loop-counter "it" is modified within condition or statement.
#  100|               continue;
#  101|   
#  102|->         if (!skipLdArgs(pExe, &it, argvNode->end()))
#  103|               break;
#  104|   

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:103: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  101|   
#  102|           if (!skipLdArgs(pExe, &it, argvNode->end()))
#  103|->             break;
#  104|   
#  105|           *pArgs += " ";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:103: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  101|   
#  102|           if (!skipLdArgs(pExe, &it, argvNode->end()))
#  103|->             break;
#  104|   
#  105|           *pArgs += " ";

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:105: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  103|               break;
#  104|   
#  105|->         *pArgs += " ";
#  106|           *pArgs += getStringValue(it);
#  107|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:106: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  104|   
#  105|           *pArgs += " ";
#  106|->         *pArgs += getStringValue(it);
#  107|       }
#  108|   }

Error: MISRA C++-2008 Rule 10-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:110: misra_cpp_2008_rule_10_3_1_violation: Virtual function "ValgrindTreeDecoder::readRoot(boost::property_tree::ptree const **, boost::property_tree::ptree const *)" has already been defined in "AbstractTreeDecoder::readRoot(boost::property_tree::ptree const **, boost::property_tree::ptree const *)".
#  108|   }
#  109|   
#  110|-> void ValgrindTreeDecoder::readRoot(
#  111|           const pt::ptree               **pDefList,
#  112|           const pt::ptree                *root)

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:111: misra_cpp_2008_rule_7_1_1_violation: The variable "pDefList" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  109|   
#  110|   void ValgrindTreeDecoder::readRoot(
#  111|->         const pt::ptree               **pDefList,
#  112|           const pt::ptree                *root)
#  113|   {

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:112: misra_cpp_2008_rule_7_1_1_violation: The variable "root" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  110|   void ValgrindTreeDecoder::readRoot(
#  111|           const pt::ptree               **pDefList,
#  112|->         const pt::ptree                *root)
#  113|   {
#  114|       // valgrind reports will be at the same level in the XML tree

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:117: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  115|       *pDefList = root;
#  116|   
#  117|->     const int pid = valueOf<int>(*root, "pid", 0);
#  118|       if (!pid)
#  119|           // insufficient data

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:117: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  115|       *pDefList = root;
#  116|   
#  117|->     const int pid = valueOf<int>(*root, "pid", 0);
#  118|       if (!pid)
#  119|           // insufficient data

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:118: misra_c_2012_rule_10_1_violation: The expression "pid" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  116|   
#  117|       const int pid = valueOf<int>(*root, "pid", 0);
#  118|->     if (!pid)
#  119|           // insufficient data
#  120|           return;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:118: misra_cpp_2008_rule_5_0_13_violation: The type of "pid" is not bool in the condition of "if-statement".
#  116|   
#  117|       const int pid = valueOf<int>(*root, "pid", 0);
#  118|->     if (!pid)
#  119|           // insufficient data
#  120|           return;

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:118: misra_cpp_2008_rule_5_3_1_violation: Operand "pid" of the operator "!" is not bool type.
#  116|   
#  117|       const int pid = valueOf<int>(*root, "pid", 0);
#  118|->     if (!pid)
#  119|           // insufficient data
#  120|           return;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:120: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  118|       if (!pid)
#  119|           // insufficient data
#  120|->         return;
#  121|   
#  122|       // read command-line

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:120: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  118|       if (!pid)
#  119|           // insufficient data
#  120|->         return;
#  121|   
#  122|       // read command-line

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:120: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  118|       if (!pid)
#  119|           // insufficient data
#  120|->         return;
#  121|   
#  122|       // read command-line

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:120: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  118|       if (!pid)
#  119|           // insufficient data
#  120|->         return;
#  121|   
#  122|       // read command-line

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:130: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  128|       this->defPrototype.events.push_back(DefEvent("note"));
#  129|       DefEvent &noteEvt = this->defPrototype.events.back();
#  130|->     noteEvt.fileName = exe;
#  131|   
#  132|       // record PID and command-line args

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:134: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  132|       // record PID and command-line args
#  133|       std::ostringstream str;
#  134|->     str << "while executing process " << pid;
#  135|       if (!args.empty())
#  136|           str << " with arguments:" << args;

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:136: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  134|       str << "while executing process " << pid;
#  135|       if (!args.empty())
#  136|->         str << " with arguments:" << args;
#  137|       noteEvt.msg = str.str();
#  138|       noteEvt.verbosityLevel = /* note */ 1;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:136: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator <<" is unused.
#  134|       str << "while executing process " << pid;
#  135|       if (!args.empty())
#  136|->         str << " with arguments:" << args;
#  137|       noteEvt.msg = str.str();
#  138|       noteEvt.verbosityLevel = /* note */ 1;

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:136: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  134|       str << "while executing process " << pid;
#  135|       if (!args.empty())
#  136|->         str << " with arguments:" << args;
#  137|       noteEvt.msg = str.str();
#  138|       noteEvt.verbosityLevel = /* note */ 1;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:137: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  135|       if (!args.empty())
#  136|           str << " with arguments:" << args;
#  137|->     noteEvt.msg = str.str();
#  138|       noteEvt.verbosityLevel = /* note */ 1;
#  139|   }

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:142: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  140|   
#  141|   /// read valgrind's message
#  142|-> std::string readMsg(const pt::ptree &defNode)
#  143|   {
#  144|       const pt::ptree *whatNode;

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:142: misra_c_2012_rule_8_7_violation: Function "readMsg" has external linkage but is only used in one translation unit.
#  140|   
#  141|   /// read valgrind's message
#  142|-> std::string readMsg(const pt::ptree &defNode)
#  143|   {
#  144|       const pt::ptree *whatNode;

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:142: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  140|   
#  141|   /// read valgrind's message
#  142|-> std::string readMsg(const pt::ptree &defNode)
#  143|   {
#  144|       const pt::ptree *whatNode;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:142: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "readMsg".
#  140|   
#  141|   /// read valgrind's message
#  142|-> std::string readMsg(const pt::ptree &defNode)
#  143|   {
#  144|       const pt::ptree *whatNode;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:147: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  145|       if (findChildOf(&whatNode, defNode, "what"))
#  146|           // message found in <what>...</what>
#  147|->         return getStringValue(whatNode);
#  148|   
#  149|       if (findChildOf(&whatNode, defNode, "xwhat")

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:147: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  145|       if (findChildOf(&whatNode, defNode, "what"))
#  146|           // message found in <what>...</what>
#  147|->         return getStringValue(whatNode);
#  148|   
#  149|       if (findChildOf(&whatNode, defNode, "xwhat")

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:147: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  145|       if (findChildOf(&whatNode, defNode, "what"))
#  146|           // message found in <what>...</what>
#  147|->         return getStringValue(whatNode);
#  148|   
#  149|       if (findChildOf(&whatNode, defNode, "xwhat")

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:147: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  145|       if (findChildOf(&whatNode, defNode, "what"))
#  146|           // message found in <what>...</what>
#  147|->         return getStringValue(whatNode);
#  148|   
#  149|       if (findChildOf(&whatNode, defNode, "xwhat")

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:152: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  150|               && findChildOf(&whatNode, *whatNode, "text"))
#  151|           // message found in <xwhat><text>...</text></xwhat>
#  152|->         return getStringValue(whatNode);
#  153|   
#  154|       // message not found

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:152: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  150|               && findChildOf(&whatNode, *whatNode, "text"))
#  151|           // message found in <xwhat><text>...</text></xwhat>
#  152|->         return getStringValue(whatNode);
#  153|   
#  154|       // message not found

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:152: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  150|               && findChildOf(&whatNode, *whatNode, "text"))
#  151|           // message found in <xwhat><text>...</text></xwhat>
#  152|->         return getStringValue(whatNode);
#  153|   
#  154|       // message not found

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:152: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  150|               && findChildOf(&whatNode, *whatNode, "text"))
#  151|           // message found in <xwhat><text>...</text></xwhat>
#  152|->         return getStringValue(whatNode);
#  153|   
#  154|       // message not found

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:159: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  157|   
#  158|   /// return true if the given frame is internal to valgrind itself
#  159|-> bool isInternalFrame(const pt::ptree &frameNode)
#  160|   {
#  161|       std::string obj = valueOf<std::string>(frameNode, "obj", "");

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:159: misra_c_2012_rule_8_7_violation: Function "isInternalFrame" has external linkage but is only used in one translation unit.
#  157|   
#  158|   /// return true if the given frame is internal to valgrind itself
#  159|-> bool isInternalFrame(const pt::ptree &frameNode)
#  160|   {
#  161|       std::string obj = valueOf<std::string>(frameNode, "obj", "");

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:159: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  157|   
#  158|   /// return true if the given frame is internal to valgrind itself
#  159|-> bool isInternalFrame(const pt::ptree &frameNode)
#  160|   {
#  161|       std::string obj = valueOf<std::string>(frameNode, "obj", "");

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:159: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "isInternalFrame".
#  157|   
#  158|   /// return true if the given frame is internal to valgrind itself
#  159|-> bool isInternalFrame(const pt::ptree &frameNode)
#  160|   {
#  161|       std::string obj = valueOf<std::string>(frameNode, "obj", "");

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:163: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  161|       std::string obj = valueOf<std::string>(frameNode, "obj", "");
#  162|       if (obj.empty())
#  163|->         return false;
#  164|   
#  165|       static const std::string valgrindPrefix = "/usr/libexec/valgrind/";

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:163: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  161|       std::string obj = valueOf<std::string>(frameNode, "obj", "");
#  162|       if (obj.empty())
#  163|->         return false;
#  164|   
#  165|       static const std::string valgrindPrefix = "/usr/libexec/valgrind/";

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:163: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  161|       std::string obj = valueOf<std::string>(frameNode, "obj", "");
#  162|       if (obj.empty())
#  163|->         return false;
#  164|   
#  165|       static const std::string valgrindPrefix = "/usr/libexec/valgrind/";

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:163: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  161|       std::string obj = valueOf<std::string>(frameNode, "obj", "");
#  162|       if (obj.empty())
#  163|->         return false;
#  164|   
#  165|       static const std::string valgrindPrefix = "/usr/libexec/valgrind/";

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:166: misra_c_2012_rule_10_3_violation: Implicit conversion of "valgrindPrefix.size()" from essential type "non-essential type" to different or narrower essential type "unsigned 64-bit int".
#  164|   
#  165|       static const std::string valgrindPrefix = "/usr/libexec/valgrind/";
#  166|->     static const size_t valgrindPrefixLen = valgrindPrefix.size();
#  167|       if (obj.size() <= valgrindPrefixLen)
#  168|           return false;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:168: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  166|       static const size_t valgrindPrefixLen = valgrindPrefix.size();
#  167|       if (obj.size() <= valgrindPrefixLen)
#  168|->         return false;
#  169|   
#  170|       obj.resize(valgrindPrefixLen);

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:168: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  166|       static const size_t valgrindPrefixLen = valgrindPrefix.size();
#  167|       if (obj.size() <= valgrindPrefixLen)
#  168|->         return false;
#  169|   
#  170|       obj.resize(valgrindPrefixLen);

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:168: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  166|       static const size_t valgrindPrefixLen = valgrindPrefix.size();
#  167|       if (obj.size() <= valgrindPrefixLen)
#  168|->         return false;
#  169|   
#  170|       obj.resize(valgrindPrefixLen);

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:168: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  166|       static const size_t valgrindPrefixLen = valgrindPrefix.size();
#  167|       if (obj.size() <= valgrindPrefixLen)
#  168|->         return false;
#  169|   
#  170|       obj.resize(valgrindPrefixLen);

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:171: misra_c_2012_rule_10_3_violation: Implicit conversion of "valgrindPrefix == obj" from essential type "non-essential type" to different or narrower essential type "boolean".
#  169|   
#  170|       obj.resize(valgrindPrefixLen);
#  171|->     return (valgrindPrefix == obj);
#  172|   }
#  173|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:175: misra_c_2012_rule_8_4_violation: Function definition does not have a visible prototype.
#  173|   
#  174|   /// go through stack, append "note" events, and update the key event
#  175|-> void readStack(Defect *pDef, const pt::ptree &stackNode)
#  176|   {
#  177|       int keyEventBestScore = -1;

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:175: misra_c_2012_rule_8_7_violation: Function "readStack" has external linkage but is only used in one translation unit.
#  173|   
#  174|   /// go through stack, append "note" events, and update the key event
#  175|-> void readStack(Defect *pDef, const pt::ptree &stackNode)
#  176|   {
#  177|       int keyEventBestScore = -1;

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:175: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  173|   
#  174|   /// go through stack, append "note" events, and update the key event
#  175|-> void readStack(Defect *pDef, const pt::ptree &stackNode)
#  176|   {
#  177|       int keyEventBestScore = -1;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:175: misra_cpp_2008_rule_7_1_1_violation: The variable "pDef" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  173|   
#  174|   /// go through stack, append "note" events, and update the key event
#  175|-> void readStack(Defect *pDef, const pt::ptree &stackNode)
#  176|   {
#  177|       int keyEventBestScore = -1;

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:175: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "readStack".
#  173|   
#  174|   /// go through stack, append "note" events, and update the key event
#  175|-> void readStack(Defect *pDef, const pt::ptree &stackNode)
#  176|   {
#  177|       int keyEventBestScore = -1;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:177: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  175|   void readStack(Defect *pDef, const pt::ptree &stackNode)
#  176|   {
#  177|->     int keyEventBestScore = -1;
#  178|   
#  179|       for (const pt::ptree::value_type &frame : stackNode) {

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:177: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "keyEventBestScore" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:233: end_of_scope: Reached end of scope without using value stored in "keyEventBestScore".
#  175|   void readStack(Defect *pDef, const pt::ptree &stackNode)
#  176|   {
#  177|->     int keyEventBestScore = -1;
#  178|   
#  179|       for (const pt::ptree::value_type &frame : stackNode) {

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:177: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  175|   void readStack(Defect *pDef, const pt::ptree &stackNode)
#  176|   {
#  177|->     int keyEventBestScore = -1;
#  178|   
#  179|       for (const pt::ptree::value_type &frame : stackNode) {

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:179: misra_c_2012_rule_14_4_violation: The condition expression "<anonymous> != <anonymous>" does not have an essentially boolean type.
#  177|       int keyEventBestScore = -1;
#  178|   
#  179|->     for (const pt::ptree::value_type &frame : stackNode) {
#  180|           const pt::ptree &frameNode = frame.second;
#  181|           const bool intFrame = isInternalFrame(frameNode);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:179: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator ++" is unused.
#  177|       int keyEventBestScore = -1;
#  178|   
#  179|->     for (const pt::ptree::value_type &frame : stackNode) {
#  180|           const pt::ptree &frameNode = frame.second;
#  181|           const bool intFrame = isInternalFrame(frameNode);

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:182: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  180|           const pt::ptree &frameNode = frame.second;
#  181|           const bool intFrame = isInternalFrame(frameNode);
#  182|->         int keyEventScore = 0;
#  183|   
#  184|           // initialize "note" event

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:182: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "keyEventScore" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:219: end_of_scope: Reached end of scope without using value stored in "keyEventScore".
#  180|           const pt::ptree &frameNode = frame.second;
#  181|           const bool intFrame = isInternalFrame(frameNode);
#  182|->         int keyEventScore = 0;
#  183|   
#  184|           // initialize "note" event

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:182: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  180|           const pt::ptree &frameNode = frame.second;
#  181|           const bool intFrame = isInternalFrame(frameNode);
#  182|->         int keyEventScore = 0;
#  183|   
#  184|           // initialize "note" event

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:186: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  184|           // initialize "note" event
#  185|           DefEvent noteEvt("note");
#  186|->         noteEvt.msg = "called from ";
#  187|           noteEvt.verbosityLevel = /* note */ 1 + static_cast<int>(intFrame);
#  188|   

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:187: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  185|           DefEvent noteEvt("note");
#  186|           noteEvt.msg = "called from ";
#  187|->         noteEvt.verbosityLevel = /* note */ 1 + static_cast<int>(intFrame);
#  188|   
#  189|           // read function name if available

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:187: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  185|           DefEvent noteEvt("note");
#  186|           noteEvt.msg = "called from ";
#  187|->         noteEvt.verbosityLevel = /* note */ 1 + static_cast<int>(intFrame);
#  188|   
#  189|           // read function name if available

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:191: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  189|           // read function name if available
#  190|           const std::string fn = valueOf<std::string>(frameNode, "fn", "");
#  191|->         noteEvt.msg += (fn.empty())
#  192|               ? "here"
#  193|               : fn + "()";

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:193: misra_cpp_2008_rule_5_0_2_violation: "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >(fn + "()")" should be parenthesized.
#  191|           noteEvt.msg += (fn.empty())
#  192|               ? "here"
#  193|->             : fn + "()";
#  194|   
#  195|           const pt::ptree *fileNode;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:198: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  196|           if (findChildOf(&fileNode, frameNode, "file")) {
#  197|               // read absolute path of the source file
#  198|->             noteEvt.fileName = getStringValue(fileNode);
#  199|               const std::string dir = valueOf<std::string>(frameNode, "dir", "");
#  200|               if (!dir.empty())

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:201: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  199|               const std::string dir = valueOf<std::string>(frameNode, "dir", "");
#  200|               if (!dir.empty())
#  201|->                 noteEvt.fileName = dir + "/" + noteEvt.fileName;
#  202|   
#  203|               // read line number

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:201: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  199|               const std::string dir = valueOf<std::string>(frameNode, "dir", "");
#  200|               if (!dir.empty())
#  201|->                 noteEvt.fileName = dir + "/" + noteEvt.fileName;
#  202|   
#  203|               // read line number

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:201: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  199|               const std::string dir = valueOf<std::string>(frameNode, "dir", "");
#  200|               if (!dir.empty())
#  201|->                 noteEvt.fileName = dir + "/" + noteEvt.fileName;
#  202|   
#  203|               // read line number

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:205: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "keyEventScore" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:231: end_of_scope: Reached end of scope without using value stored in "keyEventScore".
#  203|               // read line number
#  204|               noteEvt.line = valueOf<int>(frameNode, "line", 0);
#  205|->             keyEventScore = 8;
#  206|           }
#  207|           else if (findChildOf(&fileNode, frameNode, "obj")) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:209: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  207|           else if (findChildOf(&fileNode, frameNode, "obj")) {
#  208|               // pick path of the object file
#  209|->             noteEvt.fileName = getStringValue(fileNode);
#  210|               keyEventScore = 4;
#  211|           }

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:210: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "keyEventScore" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:231: end_of_scope: Reached end of scope without using value stored in "keyEventScore".
#  208|               // pick path of the object file
#  209|               noteEvt.fileName = getStringValue(fileNode);
#  210|->             keyEventScore = 4;
#  211|           }
#  212|           else if (findChildOf(&fileNode, frameNode, "ip")) {

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:214: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  212|           else if (findChildOf(&fileNode, frameNode, "ip")) {
#  213|               // pick address of the code in memory
#  214|->             noteEvt.fileName = getStringValue(fileNode);
#  215|               keyEventScore = 2;
#  216|           }

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:215: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "keyEventScore" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:231: end_of_scope: Reached end of scope without using value stored in "keyEventScore".
#  213|               // pick address of the code in memory
#  214|               noteEvt.fileName = getStringValue(fileNode);
#  215|->             keyEventScore = 2;
#  216|           }
#  217|           else {

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:222: misra_c_2012_rule_12_1_violation: Missing explicit parentheses on sub-expression: "keyEventBestScore < keyEventScore".
#  220|           }
#  221|   
#  222|->         if (!intFrame && keyEventBestScore < keyEventScore) {
#  223|               // update key event
#  224|               keyEventBestScore = keyEventScore;

Error: MISRA C++-2008 Rule 5-0-2 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:222: misra_cpp_2008_rule_5_0_2_violation: "keyEventBestScore < keyEventScore" should be parenthesized.
#  220|           }
#  221|   
#  222|->         if (!intFrame && keyEventBestScore < keyEventScore) {
#  223|               // update key event
#  224|               keyEventBestScore = keyEventScore;

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:222: misra_cpp_2008_rule_5_2_1_violation: Operand "!intFrame" is not a postfix expression.
#  220|           }
#  221|   
#  222|->         if (!intFrame && keyEventBestScore < keyEventScore) {
#  223|               // update key event
#  224|               keyEventBestScore = keyEventScore;

Error: MISRA C++-2008 Rule 5-2-1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:222: misra_cpp_2008_rule_5_2_1_violation: Operand "keyEventBestScore < keyEventScore" is not a postfix expression.
#  220|           }
#  221|   
#  222|->         if (!intFrame && keyEventBestScore < keyEventScore) {
#  223|               // update key event
#  224|               keyEventBestScore = keyEventScore;

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:222: most_recent_use: Last time a value stored in "keyEventBestScore" was used.
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:224: misra_cpp_2008_rule_0_1_6_violation: Value is stored in "keyEventBestScore" but is not subsequently used on this path.
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:233: end_of_scope: Reached end of scope without using value stored in "keyEventBestScore".
#  222|           if (!intFrame && keyEventBestScore < keyEventScore) {
#  223|               // update key event
#  224|->             keyEventBestScore = keyEventScore;
#  225|               DefEvent &keyEvent = pDef->events[pDef->keyEventIdx];
#  226|               keyEvent.fileName = noteEvt.fileName;

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:226: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  224|               keyEventBestScore = keyEventScore;
#  225|               DefEvent &keyEvent = pDef->events[pDef->keyEventIdx];
#  226|->             keyEvent.fileName = noteEvt.fileName;
#  227|               keyEvent.line     = noteEvt.line;
#  228|           }

Error: MISRA C-2012 Rule 8.3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:235: misra_c_2012_rule_8_3_violation: Declaration uses a different parameter name than "bool ValgrindTreeDecoder::readNode(Defect *, boost::property_tree::basic_ptree<std::string, std::string, std::less<std::string>>::const_iterator)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:34: prev_declaration: (see previous declaration of "ValgrindTreeDecoder::readNode" at line 34)
#  233|   }
#  234|   
#  235|-> bool ValgrindTreeDecoder::readNode(Defect *pDef, pt::ptree::const_iterator defIter)
#  236|   {
#  237|       static const std::string errorKey = "error";

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:235: misra_cpp_2008_rule_7_1_1_violation: The variable "defIter" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  233|   }
#  234|   
#  235|-> bool ValgrindTreeDecoder::readNode(Defect *pDef, pt::ptree::const_iterator defIter)
#  236|   {
#  237|       static const std::string errorKey = "error";

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:235: misra_cpp_2008_rule_7_1_1_violation: The variable "pDef" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  233|   }
#  234|   
#  235|-> bool ValgrindTreeDecoder::readNode(Defect *pDef, pt::ptree::const_iterator defIter)
#  236|   {
#  237|       static const std::string errorKey = "error";

Error: MISRA C++-2008 Rule 8-4-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:235: misra_cpp_2008_rule_8_4_2_violation: Declaration uses a different parameter name than "bool ValgrindTreeDecoder::readNode(Defect *, boost::property_tree::basic_ptree<std::string, std::string, std::less<std::string>>::const_iterator)".
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:34: prev_declaration: (see previous declaration of "ValgrindTreeDecoder::readNode" at line 34)
#  233|   }
#  234|   
#  235|-> bool ValgrindTreeDecoder::readNode(Defect *pDef, pt::ptree::const_iterator defIter)
#  236|   {
#  237|       static const std::string errorKey = "error";

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:240: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  238|       if (errorKey != defIter->first)
#  239|           // not a node we are interested in
#  240|->         return false;
#  241|   
#  242|       // the current "error" node representing a single valgrind's report

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:240: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  238|       if (errorKey != defIter->first)
#  239|           // not a node we are interested in
#  240|->         return false;
#  241|   
#  242|       // the current "error" node representing a single valgrind's report

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:240: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  238|       if (errorKey != defIter->first)
#  239|           // not a node we are interested in
#  240|->         return false;
#  241|   
#  242|       // the current "error" node representing a single valgrind's report

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:240: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  238|       if (errorKey != defIter->first)
#  239|           // not a node we are interested in
#  240|->         return false;
#  241|   
#  242|       // the current "error" node representing a single valgrind's report

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:247: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  245|       // initialize the defect structure
#  246|       Defect &def = *pDef;
#  247|->     def = this->defPrototype;
#  248|   
#  249|       // initialize the key event

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:250: misra_c_2012_rule_10_3_violation: Implicit conversion of "def.events.size()" from essential type "non-essential type" to different or narrower essential type "unsigned 32-bit int".
#  248|   
#  249|       // initialize the key event
#  250|->     def.keyEventIdx = def.events.size();
#  251|       def.events.push_back(DefEvent("warning"));
#  252|       DefEvent &keyEvent = def.events.back();

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:250: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "def.events.size()" is implicitly reduced from "64-bit unsigned long" to "32-bit unsigned int".
#  248|   
#  249|       // initialize the key event
#  250|->     def.keyEventIdx = def.events.size();
#  251|       def.events.push_back(DefEvent("warning"));
#  252|       DefEvent &keyEvent = def.events.back();

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:253: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  251|       def.events.push_back(DefEvent("warning"));
#  252|       DefEvent &keyEvent = def.events.back();
#  253|->     keyEvent.fileName = "<unknown>";
#  254|       keyEvent.msg = readMsg(defNode);
#  255|   

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:254: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  252|       DefEvent &keyEvent = def.events.back();
#  253|       keyEvent.fileName = "<unknown>";
#  254|->     keyEvent.msg = readMsg(defNode);
#  255|   
#  256|       // read "kind" of the report

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:259: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  257|       const std::string kind = valueOf<std::string>(defNode, "kind", "");
#  258|       if (!kind.empty())
#  259|->         keyEvent.event += "[" + kind + "]";
#  260|   
#  261|       // go through stack trace

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:259: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator +=" is unused.
#  257|       const std::string kind = valueOf<std::string>(defNode, "kind", "");
#  258|       if (!kind.empty())
#  259|->         keyEvent.event += "[" + kind + "]";
#  260|   
#  261|       // go through stack trace

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:259: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  257|       const std::string kind = valueOf<std::string>(defNode, "kind", "");
#  258|       if (!kind.empty())
#  259|->         keyEvent.event += "[" + kind + "]";
#  260|   
#  261|       // go through stack trace

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:265: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  263|       if (findChildOf(&stackNode, defNode, "stack"))
#  264|           // this invalidates &keyEvent !!!
#  265|->         readStack(pDef, *stackNode);
#  266|   
#  267|       // read aux valgrind's message if available and insert _after_ the key event

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:265: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  263|       if (findChildOf(&stackNode, defNode, "stack"))
#  264|           // this invalidates &keyEvent !!!
#  265|->         readStack(pDef, *stackNode);
#  266|   
#  267|       // read aux valgrind's message if available and insert _after_ the key event

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:271: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  269|       if (findChildOf(&auxwhat, defNode, "auxwhat")) {
#  270|           DefEvent auxEvent = def.events[def.keyEventIdx];
#  271|->         auxEvent.event = "note";
#  272|           auxEvent.verbosityLevel = /* note */ 1;
#  273|           auxEvent.msg = getStringValue(auxwhat);

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:273: misra_c_2012_rule_17_7_violation: The return value of a non-void function "operator =" is unused.
#  271|           auxEvent.event = "note";
#  272|           auxEvent.verbosityLevel = /* note */ 1;
#  273|->         auxEvent.msg = getStringValue(auxwhat);
#  274|           def.events.insert(def.events.begin() + def.keyEventIdx + 1, auxEvent);
#  275|       }

Error: MISRA C-2012 Rule 17.7 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:274: misra_c_2012_rule_17_7_violation: The return value of a non-void function "insert" is unused.
#  272|           auxEvent.verbosityLevel = /* note */ 1;
#  273|           auxEvent.msg = getStringValue(auxwhat);
#  274|->         def.events.insert(def.events.begin() + def.keyEventIdx + 1, auxEvent);
#  275|       }
#  276|   

Error: MISRA C++-2008 Rule 0-1-7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:274: misra_cpp_2008_rule_0_1_7_violation: The return value of function "def.events.insert(std::vector<DefEvent, std::allocator<DefEvent> >::const_iterator(__gnu_cxx::__normal_iterator<DefEvent *, std::vector<DefEvent, std::allocator<DefEvent> > >(def.events.begin() + def.keyEventIdx + 1L)), auxEvent)" is not used.
#  272|           auxEvent.verbosityLevel = /* note */ 1;
#  273|           auxEvent.msg = getStringValue(auxwhat);
#  274|->         def.events.insert(def.events.begin() + def.keyEventIdx + 1, auxEvent);
#  275|       }
#  276|   

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:274: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "def.keyEventIdx" with underlying type "32-bit unsigned int" is implicitly converted to a different underlying type "64-bit signed long".
#  272|           auxEvent.verbosityLevel = /* note */ 1;
#  273|           auxEvent.msg = getStringValue(auxwhat);
#  274|->         def.events.insert(def.events.begin() + def.keyEventIdx + 1, auxEvent);
#  275|       }
#  276|   

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:274: misra_cpp_2008_rule_5_0_4_violation: "def.keyEventIdx" is implicitly converted from an unsigned value to a signed value.
#  272|           auxEvent.verbosityLevel = /* note */ 1;
#  273|           auxEvent.msg = getStringValue(auxwhat);
#  274|->         def.events.insert(def.events.begin() + def.keyEventIdx + 1, auxEvent);
#  275|       }
#  276|   

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:281: misra_cpp_2008_rule_11_0_1_violation: Member "input" is not private but "XmlParser::Private" is a non-POD type.
#  279|   
#  280|   struct XmlParser::Private {
#  281|->     InStream                       &input;
#  282|       AbstractTreeDecoder            *decoder = nullptr;
#  283|       pt::ptree                       root;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:282: misra_cpp_2008_rule_11_0_1_violation: Member "decoder" is not private but "XmlParser::Private" is a non-POD type.
#  280|   struct XmlParser::Private {
#  281|       InStream                       &input;
#  282|->     AbstractTreeDecoder            *decoder = nullptr;
#  283|       pt::ptree                       root;
#  284|       const pt::ptree                *defList = nullptr;

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:283: misra_cpp_2008_rule_11_0_1_violation: Member "root" is not private but "XmlParser::Private" is a non-POD type.
#  281|       InStream                       &input;
#  282|       AbstractTreeDecoder            *decoder = nullptr;
#  283|->     pt::ptree                       root;
#  284|       const pt::ptree                *defList = nullptr;
#  285|       pt::ptree::const_iterator       defIter = root.end();

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:284: misra_cpp_2008_rule_11_0_1_violation: Member "defList" is not private but "XmlParser::Private" is a non-POD type.
#  282|       AbstractTreeDecoder            *decoder = nullptr;
#  283|       pt::ptree                       root;
#  284|->     const pt::ptree                *defList = nullptr;
#  285|       pt::ptree::const_iterator       defIter = root.end();
#  286|   

Error: MISRA C++-2008 Rule 11-0-1 (CWE-1061):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:285: misra_cpp_2008_rule_11_0_1_violation: Member "defIter" is not private but "XmlParser::Private" is a non-POD type.
#  283|       pt::ptree                       root;
#  284|       const pt::ptree                *defList = nullptr;
#  285|->     pt::ptree::const_iterator       defIter = root.end();
#  286|   
#  287|       Private(InStream &input):

Error: MISRA C++-2008 Rule 2-10-2 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:287: misra_cpp_2008_rule_2_10_2_violation: declaration hides member "XmlParser::Private::input" (declared at line 281)
#  285|       pt::ptree::const_iterator       defIter = root.end();
#  286|   
#  287|->     Private(InStream &input):
#  288|           input(input)
#  289|       {

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:292: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  290|       }
#  291|   
#  292|->     ~Private()
#  293|       {
#  294|           delete this->decoder;

Error: MISRA C++-2008 Rule 12-1-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:298: misra_cpp_2008_rule_12_1_2_violation: The constructors of immediate base classes and/or virtual base classes "AbstractParser" are not called in this constructor.
#  296|   };
#  297|   
#  298|-> XmlParser::XmlParser(InStream &input):
#  299|       d(new Private(input))
#  300|   {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:299: misra_c_2012_directive_4_12_violation: A call to the function "operator new(72UL)" performs dynamic memory allocation.
#  297|   
#  298|   XmlParser::XmlParser(InStream &input):
#  299|->     d(new Private(input))
#  300|   {
#  301|       try {

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:299: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  297|   
#  298|   XmlParser::XmlParser(InStream &input):
#  299|->     d(new Private(input))
#  300|   {
#  301|       try {

Error: MISRA C-2012 Directive 4.12 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:309: misra_c_2012_directive_4_12_violation: A call to the function "operator new(176UL)" performs dynamic memory allocation.
#  307|           if (findChildOf(&node, d->root, "valgrindoutput"))
#  308|               // valgrind XML format
#  309|->             d->decoder = new ValgrindTreeDecoder;
#  310|           else
#  311|               throw pt::ptree_error("unknown XML format");

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:309: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  307|           if (findChildOf(&node, d->root, "valgrindoutput"))
#  308|               // valgrind XML format
#  309|->             d->decoder = new ValgrindTreeDecoder;
#  310|           else
#  311|               throw pt::ptree_error("unknown XML format");

Error: MISRA C++-2008 Rule 18-4-1 (CWE-1177):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:309: misra_cpp_2008_rule_18_4_1_violation: Function "new" is used to manage dynamic heap memory.
#  307|           if (findChildOf(&node, d->root, "valgrindoutput"))
#  308|               // valgrind XML format
#  309|->             d->decoder = new ValgrindTreeDecoder;
#  310|           else
#  311|               throw pt::ptree_error("unknown XML format");

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:309: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  307|           if (findChildOf(&node, d->root, "valgrindoutput"))
#  308|               // valgrind XML format
#  309|->             d->decoder = new ValgrindTreeDecoder;
#  310|           else
#  311|               throw pt::ptree_error("unknown XML format");

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:311: misra_c_2012_rule_15_6_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  309|               d->decoder = new ValgrindTreeDecoder;
#  310|           else
#  311|->             throw pt::ptree_error("unknown XML format");
#  312|   
#  313|           // process the root node

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:311: misra_cpp_2008_rule_6_4_1_violation: The body of the "else" branch of the "if" statement is not a compound statement.
#  309|               d->decoder = new ValgrindTreeDecoder;
#  310|           else
#  311|->             throw pt::ptree_error("unknown XML format");
#  312|   
#  313|           // process the root node

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:320: misra_c_2012_rule_10_3_violation: Implicit conversion of "e->line()" from essential type "unsigned 64-bit int" to different or narrower essential type "signed 64-bit int".
#  318|       }
#  319|       catch (pt::file_parser_error &e) {
#  320|->         d->input.handleError(e.message(), e.line());
#  321|       }
#  322|       catch (pt::ptree_error &e) {

Error: MISRA C++-2008 Rule 5-0-3 (CWE-704):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:320: misra_cpp_2008_rule_5_0_3_violation: Cvalue expression "e->line()" with underlying type "64-bit unsigned long" is implicitly converted to a different underlying type "64-bit signed long".
#  318|       }
#  319|       catch (pt::file_parser_error &e) {
#  320|->         d->input.handleError(e.message(), e.line());
#  321|       }
#  322|       catch (pt::ptree_error &e) {

Error: MISRA C++-2008 Rule 5-0-4 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:320: misra_cpp_2008_rule_5_0_4_violation: "e->line()" is implicitly converted from an unsigned value to a signed value.
#  318|       }
#  319|       catch (pt::file_parser_error &e) {
#  320|->         d->input.handleError(e.message(), e.line());
#  321|       }
#  322|       catch (pt::ptree_error &e) {

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:327: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  325|   }
#  326|   
#  327|-> XmlParser::~XmlParser()
#  328|   {
#  329|       delete d;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:332: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#  330|   }
#  331|   
#  332|-> bool XmlParser::hasError() const
#  333|   {
#  334|       return d->input.anyError();

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:337: misra_cpp_2008_rule_7_1_1_violation: The variable "pDef" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  335|   }
#  336|   
#  337|-> bool XmlParser::getNext(Defect *pDef)
#  338|   {
#  339|       if (!d->defList)

Error: MISRA C-2012 Rule 10.1 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:339: misra_c_2012_rule_10_1_violation: The expression "this->d->defList" of non-boolean essential type is being interpreted as a boolean value for the operator "!".
#  337|   bool XmlParser::getNext(Defect *pDef)
#  338|   {
#  339|->     if (!d->defList)
#  340|           // initialization failed, error has already been reported
#  341|           return false;

Error: MISRA C++-2008 Rule 5-0-13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:339: misra_cpp_2008_rule_5_0_13_violation: The type of "this->d->defList" is not bool in the condition of "if-statement".
#  337|   bool XmlParser::getNext(Defect *pDef)
#  338|   {
#  339|->     if (!d->defList)
#  340|           // initialization failed, error has already been reported
#  341|           return false;

Error: MISRA C++-2008 Rule 5-3-1 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:339: misra_cpp_2008_rule_5_3_1_violation: Operand "this->d->defList" of the operator "!" is not bool type.
#  337|   bool XmlParser::getNext(Defect *pDef)
#  338|   {
#  339|->     if (!d->defList)
#  340|           // initialization failed, error has already been reported
#  341|           return false;

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:341: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  339|       if (!d->defList)
#  340|           // initialization failed, error has already been reported
#  341|->         return false;
#  342|   
#  343|       while (d->defList->end() != d->defIter) {

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:341: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  339|       if (!d->defList)
#  340|           // initialization failed, error has already been reported
#  341|->         return false;
#  342|   
#  343|       while (d->defList->end() != d->defIter) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:341: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  339|       if (!d->defList)
#  340|           // initialization failed, error has already been reported
#  341|->         return false;
#  342|   
#  343|       while (d->defList->end() != d->defIter) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:341: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  339|       if (!d->defList)
#  340|           // initialization failed, error has already been reported
#  341|->         return false;
#  342|   
#  343|       while (d->defList->end() != d->defIter) {

Error: MISRA C-2012 Rule 14.4 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:343: misra_c_2012_rule_14_4_violation: The condition expression "boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::const_iterator(this->d->defList->end()) != this->d->defIter" does not have an essentially boolean type.
#  341|           return false;
#  342|   
#  343|->     while (d->defList->end() != d->defIter) {
#  344|           // get the current node and move to the next one
#  345|           try {

Error: MISRA C++-2008 Rule 5-2-10 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:346: misra_cpp_2008_rule_5_2_10_violation: The ++ or -- operator is mixed with other operators in expression "this->d->decoder->readNode(pDef, this->d->defIter++)".
#  344|           // get the current node and move to the next one
#  345|           try {
#  346|->             if (d->decoder->readNode(pDef, d->defIter++))
#  347|                   return true;
#  348|           }

Error: MISRA C-2012 Rule 15.5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:347: misra_c_2012_rule_15_5_violation: This return statement is not the final statement in the compound statement that forms the body of the function.
#  345|           try {
#  346|               if (d->decoder->readNode(pDef, d->defIter++))
#  347|->                 return true;
#  348|           }
#  349|           catch (pt::ptree_error &e) {

Error: MISRA C-2012 Rule 15.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:347: misra_c_2012_rule_15_6_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  345|           try {
#  346|               if (d->decoder->readNode(pDef, d->defIter++))
#  347|->                 return true;
#  348|           }
#  349|           catch (pt::ptree_error &e) {

Error: MISRA C++-2008 Rule 6-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:347: misra_cpp_2008_rule_6_4_1_violation: The body of the "then" branch of the "if" statement is not a compound statement.
#  345|           try {
#  346|               if (d->decoder->readNode(pDef, d->defIter++))
#  347|->                 return true;
#  348|           }
#  349|           catch (pt::ptree_error &e) {

Error: MISRA C++-2008 Rule 6-6-5 (CWE-691):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.cc:347: misra_cpp_2008_rule_6_6_5_violation: Additional exit point in function.
#  345|           try {
#  346|               if (d->decoder->readNode(pDef, d->defIter++))
#  347|->                 return true;
#  348|           }
#  349|           catch (pt::ptree_error &e) {

Error: MISRA C-2012 Rule 3.1 (CWE-1113):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.hh:1: misra_c_2012_rule_3_1_violation: Nesting comment with character sequences "//" or "/*" in comment.
#    1|-> /*
#    2|    * Copyright (C) 2021 Red Hat, Inc.
#    3|    *

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.hh:25: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "XmlParser".
#   23|   #include "abstract-parser.hh"
#   24|   
#   25|-> class XmlParser: public AbstractParser {
#   26|       public:
#   27|           XmlParser(InStream &input);

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.hh:29: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   27|           XmlParser(InStream &input);
#   28|   
#   29|->         virtual ~XmlParser();
#   30|           virtual bool getNext(Defect *);
#   31|           virtual bool hasError() const;

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.hh:30: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   28|   
#   29|           virtual ~XmlParser();
#   30|->         virtual bool getNext(Defect *);
#   31|           virtual bool hasError() const;
#   32|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.hh:31: misra_c_2012_rule_8_2_violation: Explicit void keyword for empty parameter list has been omitted.
#   29|           virtual ~XmlParser();
#   30|           virtual bool getNext(Defect *);
#   31|->         virtual bool hasError() const;
#   32|   
#   33|       private:

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.hh:34: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   32|   
#   33|       private:
#   34|->         XmlParser(const Parser &);
#   35|           XmlParser& operator=(const Parser &);
#   36|   

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.hh:34: misra_c_2012_rule_8_6_violation: Function "XmlParser" is declared but never defined.
#   32|   
#   33|       private:
#   34|->         XmlParser(const Parser &);
#   35|           XmlParser& operator=(const Parser &);
#   36|   

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.hh:34: misra_cpp_2008_rule_3_2_2_violation: Function "XmlParser" is declared but never defined.
#   32|   
#   33|       private:
#   34|->         XmlParser(const Parser &);
#   35|           XmlParser& operator=(const Parser &);
#   36|   

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.hh:34: misra_cpp_2008_rule_3_2_4_violation: Function "XmlParser" is declared but never defined.
#   32|   
#   33|       private:
#   34|->         XmlParser(const Parser &);
#   35|           XmlParser& operator=(const Parser &);
#   36|   

Error: MISRA C-2012 Rule 8.2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.hh:35: misra_c_2012_rule_8_2_violation: Parameter name for function prototype has been omitted.
#   33|       private:
#   34|           XmlParser(const Parser &);
#   35|->         XmlParser& operator=(const Parser &);
#   36|   
#   37|           struct Private;

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.hh:35: misra_c_2012_rule_8_6_violation: Function "operator =" is declared but never defined.
#   33|       private:
#   34|           XmlParser(const Parser &);
#   35|->         XmlParser& operator=(const Parser &);
#   36|   
#   37|           struct Private;

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.hh:35: misra_cpp_2008_rule_3_2_2_violation: Function "operator =" is declared but never defined.
#   33|       private:
#   34|           XmlParser(const Parser &);
#   35|->         XmlParser& operator=(const Parser &);
#   36|   
#   37|           struct Private;

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/src/xml-parser.hh:35: misra_cpp_2008_rule_3_2_4_violation: Function "operator =" is declared but never defined.
#   33|       private:
#   34|           XmlParser(const Parser &);
#   35|->         XmlParser& operator=(const Parser &);
#   36|   
#   37|           struct Private;

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:4: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#    2|      recognize the extension without flags.  Borland does not know .cxx for
#    3|      example.  */
#    4|-> #ifndef __cplusplus
#    5|   # error "A C compiler has been selected for C++."
#    6|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:6: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#    4|   #ifndef __cplusplus
#    5|   # error "A C compiler has been selected for C++."
#    6|-> #endif
#    7|   
#    8|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:12: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   10|      Version date components:   YYYY=Year, MM=Month,   DD=Day  */
#   11|   
#   12|-> #if defined(__COMO__)
#   13|   # define COMPILER_ID "Comeau"
#   14|     /* __COMO_VERSION__ = VRR */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:22: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   20|   # if defined(_MSC_VER)
#   21|   #  define SIMULATE_ID "MSVC"
#   22|-> # endif
#   23|   # if defined(__GNUC__)
#   24|   #  define SIMULATE_ID "GNU"

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:25: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   23|   # if defined(__GNUC__)
#   24|   #  define SIMULATE_ID "GNU"
#   25|-> # endif
#   26|     /* __INTEL_COMPILER = VRP */
#   27|   # define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:33: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   31|   # else
#   32|   #  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
#   33|-> # endif
#   34|   # if defined(__INTEL_COMPILER_BUILD_DATE)
#   35|     /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:37: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   35|     /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#   36|   #  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
#   37|-> # endif
#   38|   # if defined(_MSC_VER)
#   39|      /* _MSC_VER = VVRR */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:42: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   40|   #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#   41|   #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#   42|-> # endif
#   43|   # if defined(__GNUC__)
#   44|   #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:47: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   45|   # elif defined(__GNUG__)
#   46|   #  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
#   47|-> # endif
#   48|   # if defined(__GNUC_MINOR__)
#   49|   #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:50: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   48|   # if defined(__GNUC_MINOR__)
#   49|   #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#   50|-> # endif
#   51|   # if defined(__GNUC_PATCHLEVEL__)
#   52|   #  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:53: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   51|   # if defined(__GNUC_PATCHLEVEL__)
#   52|   #  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#   53|-> # endif
#   54|   
#   55|   #elif defined(__PATHCC__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:61: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   59|   # if defined(__PATHCC_PATCHLEVEL__)
#   60|   #  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
#   61|-> # endif
#   62|   
#   63|   #elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:75: misra_c_2012_rule_12_1_violation: Missing parentheses on sub-expression of the operator.
#   73|   # define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)
#   74|   
#   75|-> #elif defined(__WATCOMC__) && __WATCOMC__ < 1200
#   76|   # define COMPILER_ID "Watcom"
#   77|      /* __WATCOMC__ = VVRR */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:82: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   80|   # if (__WATCOMC__ % 10) > 0
#   81|   #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
#   82|-> # endif
#   83|   
#   84|   #elif defined(__WATCOMC__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:91: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   89|   # if (__WATCOMC__ % 10) > 0
#   90|   #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
#   91|-> # endif
#   92|   
#   93|   #elif defined(__SUNPRO_CC)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:105: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  103|   #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)
#  104|   #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
#  105|-> # endif
#  106|   
#  107|   #elif defined(__HP_aCC)

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:136: misra_c_2012_rule_12_1_violation: Missing parentheses on sub-expression of the operator.
#  134|   
#  135|   
#  136|-> #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800
#  137|   # define COMPILER_ID "XL"
#  138|     /* __IBMCPP__ = VRP */

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:143: misra_c_2012_rule_12_1_violation: Missing parentheses on sub-expression of the operator.
#  141|   # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)
#  142|   
#  143|-> #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800
#  144|   # define COMPILER_ID "VisualAge"
#  145|     /* __IBMCPP__ = VRP */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:156: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  154|   # if defined(__PGIC_PATCHLEVEL__)
#  155|   #  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
#  156|-> # endif
#  157|   
#  158|   #elif defined(_CRAYC)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:180: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  178|   # define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
#  179|   # define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
#  180|-> # endif
#  181|   
#  182|   #elif defined(__SCO_VERSION__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:197: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  195|     # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
#  196|     # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#  197|-> #endif
#  198|   
#  199|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:204: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  202|   # if defined(_MSC_VER)
#  203|   #  define SIMULATE_ID "MSVC"
#  204|-> # endif
#  205|   # define COMPILER_VERSION_MAJOR DEC(__clang_major__)
#  206|   # define COMPILER_VERSION_MINOR DEC(__clang_minor__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:212: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  210|   #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  211|   #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#  212|-> # endif
#  213|   # define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)
#  214|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:226: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  224|   # if defined(_MSC_VER)
#  225|   #  define SIMULATE_ID "MSVC"
#  226|-> # endif
#  227|   # define COMPILER_VERSION_MAJOR DEC(__clang_major__)
#  228|   # define COMPILER_VERSION_MINOR DEC(__clang_minor__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:234: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  232|   #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  233|   #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#  234|-> # endif
#  235|   
#  236|   #elif defined(__GNUC__) || defined(__GNUG__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:236: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  234|   # endif
#  235|   
#  236|-> #elif defined(__GNUC__) || defined(__GNUG__)
#  237|   # define COMPILER_ID "GNU"
#  238|   # if defined(__GNUC__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:237: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  235|   
#  236|   #elif defined(__GNUC__) || defined(__GNUG__)
#  237|-> # define COMPILER_ID "GNU"
#  238|   # if defined(__GNUC__)
#  239|   #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:237: misra_cpp_2008_rule_16_2_2_violation: Macro "COMPILER_ID" is used other than include guards, type qualifiers, or storage class specifiers.
#  235|   
#  236|   #elif defined(__GNUC__) || defined(__GNUG__)
#  237|-> # define COMPILER_ID "GNU"
#  238|   # if defined(__GNUC__)
#  239|   #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:238: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  236|   #elif defined(__GNUC__) || defined(__GNUG__)
#  237|   # define COMPILER_ID "GNU"
#  238|-> # if defined(__GNUC__)
#  239|   #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
#  240|   # else

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:239: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  237|   # define COMPILER_ID "GNU"
#  238|   # if defined(__GNUC__)
#  239|-> #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
#  240|   # else
#  241|   #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:239: misra_cpp_2008_rule_16_2_2_violation: Macro "COMPILER_VERSION_MAJOR" is used other than include guards, type qualifiers, or storage class specifiers.
#  237|   # define COMPILER_ID "GNU"
#  238|   # if defined(__GNUC__)
#  239|-> #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
#  240|   # else
#  241|   #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:240: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  238|   # if defined(__GNUC__)
#  239|   #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
#  240|-> # else
#  241|   #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
#  242|   # endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:242: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  240|   # else
#  241|   #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
#  242|-> # endif
#  243|   # if defined(__GNUC_MINOR__)
#  244|   #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:243: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  241|   #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
#  242|   # endif
#  243|-> # if defined(__GNUC_MINOR__)
#  244|   #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
#  245|   # endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:244: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  242|   # endif
#  243|   # if defined(__GNUC_MINOR__)
#  244|-> #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
#  245|   # endif
#  246|   # if defined(__GNUC_PATCHLEVEL__)

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:244: misra_cpp_2008_rule_16_2_2_violation: Macro "COMPILER_VERSION_MINOR" is used other than include guards, type qualifiers, or storage class specifiers.
#  242|   # endif
#  243|   # if defined(__GNUC_MINOR__)
#  244|-> #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
#  245|   # endif
#  246|   # if defined(__GNUC_PATCHLEVEL__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:245: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  243|   # if defined(__GNUC_MINOR__)
#  244|   #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
#  245|-> # endif
#  246|   # if defined(__GNUC_PATCHLEVEL__)
#  247|   #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:246: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  244|   #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
#  245|   # endif
#  246|-> # if defined(__GNUC_PATCHLEVEL__)
#  247|   #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  248|   # endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:247: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  245|   # endif
#  246|   # if defined(__GNUC_PATCHLEVEL__)
#  247|-> #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  248|   # endif
#  249|   

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:247: misra_cpp_2008_rule_16_2_2_violation: Macro "COMPILER_VERSION_PATCH" is used other than include guards, type qualifiers, or storage class specifiers.
#  245|   # endif
#  246|   # if defined(__GNUC_PATCHLEVEL__)
#  247|-> #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  248|   # endif
#  249|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:248: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  246|   # if defined(__GNUC_PATCHLEVEL__)
#  247|   #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  248|-> # endif
#  249|   
#  250|   #elif defined(_MSC_VER)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:250: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  248|   # endif
#  249|   
#  250|-> #elif defined(_MSC_VER)
#  251|   # define COMPILER_ID "MSVC"
#  252|     /* _MSC_VER = VVRR */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:262: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  260|       /* _MSC_FULL_VER = VVRRPPPP */
#  261|   #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  262|-> #  endif
#  263|   # endif
#  264|   # if defined(_MSC_BUILD)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:263: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  261|   #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  262|   #  endif
#  263|-> # endif
#  264|   # if defined(_MSC_BUILD)
#  265|   #  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:266: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  264|   # if defined(_MSC_BUILD)
#  265|   #  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
#  266|-> # endif
#  267|   
#  268|   #elif defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || defined(__ADSP21000__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:275: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  273|   # define COMPILER_VERSION_MINOR HEX(__VISUALDSPVERSION__>>16 & 0xFF)
#  274|   # define COMPILER_VERSION_PATCH HEX(__VISUALDSPVERSION__>>8  & 0xFF)
#  275|-> #endif
#  276|   
#  277|   #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:289: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  287|   #  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  288|   #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
#  289|-> # endif
#  290|   
#  291|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:300: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  298|   #else /* unknown compiler */
#  299|   # define COMPILER_ID ""
#  300|-> #endif
#  301|   
#  302|   /* Construct the string literal in pieces to prevent the source from

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_c_2012_rule_5_8_violation: Identifier "info_compiler" is already used to represent an object with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: external_linkage_symbol: Declaring an external linkage object with identifier "info_compiler".
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_c_2012_rule_8_4_violation: Object definition does not have a visible prototype.
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_c_2012_rule_8_7_violation: Object "info_compiler" has external linkage but is only used in one translation unit.
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C-2012 Rule 8.9 (CWE-1126):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_c_2012_rule_8_9_violation: Symbol "info_compiler" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_compiler" is only used in "main(int, char **)".
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_cpp_2008_rule_3_4_1_violation: Symbol "info_compiler" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_compiler" is only used in "main(int, char **)".
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "info_compiler".
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:307: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  305|      array rather than assigning a pointer to a static array.  */
#  306|   char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|-> #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#  309|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:309: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#  309|-> #endif
#  310|   
#  311|   #ifdef __QNXNTO__

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:311: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  309|   #endif
#  310|   
#  311|-> #ifdef __QNXNTO__
#  312|   char const* qnxnto = "INFO" ":" "qnxnto[]";
#  313|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:313: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  311|   #ifdef __QNXNTO__
#  312|   char const* qnxnto = "INFO" ":" "qnxnto[]";
#  313|-> #endif
#  314|   
#  315|   #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:315: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  313|   #endif
#  314|   
#  315|-> #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
#  316|   char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#  317|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:317: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  315|   #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
#  316|   char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#  317|-> #endif
#  318|   
#  319|   #define STRINGIFY_HELPER(X) #X

Error: MISRA C-2012 Rule 20.10 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:319: misra_c_2012_rule_20_10_violation: Use of "#" or "##" preprocessor operator.
#  317|   #endif
#  318|   
#  319|-> #define STRINGIFY_HELPER(X) #X
#  320|   #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   

Error: MISRA C-2012 Rule 2.5 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:319: misra_c_2012_rule_2_5_violation: Macro "STRINGIFY_HELPER" is defined but never used.
#  317|   #endif
#  318|   
#  319|-> #define STRINGIFY_HELPER(X) #X
#  320|   #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   

Error: MISRA C++-2008 Rule 16-0-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:319: misra_cpp_2008_rule_16_0_4_violation: Function-like macro "STRINGIFY_HELPER" is defined.
#  317|   #endif
#  318|   
#  319|-> #define STRINGIFY_HELPER(X) #X
#  320|   #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:319: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  317|   #endif
#  318|   
#  319|-> #define STRINGIFY_HELPER(X) #X
#  320|   #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:319: misra_cpp_2008_rule_16_2_2_violation: Macro "STRINGIFY_HELPER" is used other than include guards, type qualifiers, or storage class specifiers.
#  317|   #endif
#  318|   
#  319|-> #define STRINGIFY_HELPER(X) #X
#  320|   #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   

Error: MISRA C++-2008 Rule 16-3-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:319: misra_cpp_2008_rule_16_3_2_violation: Use of "#" or "##" preprocessor operator.
#  317|   #endif
#  318|   
#  319|-> #define STRINGIFY_HELPER(X) #X
#  320|   #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   

Error: MISRA C-2012 Rule 2.5 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:320: misra_c_2012_rule_2_5_violation: Macro "STRINGIFY" is defined but never used.
#  318|   
#  319|   #define STRINGIFY_HELPER(X) #X
#  320|-> #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   
#  322|   /* Identify known platforms by name.  */

Error: MISRA C++-2008 Rule 16-0-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:320: misra_cpp_2008_rule_16_0_4_violation: Function-like macro "STRINGIFY" is defined.
#  318|   
#  319|   #define STRINGIFY_HELPER(X) #X
#  320|-> #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   
#  322|   /* Identify known platforms by name.  */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:320: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  318|   
#  319|   #define STRINGIFY_HELPER(X) #X
#  320|-> #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   
#  322|   /* Identify known platforms by name.  */

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:320: misra_cpp_2008_rule_16_2_2_violation: Macro "STRINGIFY" is used other than include guards, type qualifiers, or storage class specifiers.
#  318|   
#  319|   #define STRINGIFY_HELPER(X) #X
#  320|-> #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   
#  322|   /* Identify known platforms by name.  */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:323: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  321|   
#  322|   /* Identify known platforms by name.  */
#  323|-> #if defined(__linux) || defined(__linux__) || defined(linux)
#  324|   # define PLATFORM_ID "Linux"
#  325|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:324: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  322|   /* Identify known platforms by name.  */
#  323|   #if defined(__linux) || defined(__linux__) || defined(linux)
#  324|-> # define PLATFORM_ID "Linux"
#  325|   
#  326|   #elif defined(__CYGWIN__)

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:324: misra_cpp_2008_rule_16_2_2_violation: Macro "PLATFORM_ID" is used other than include guards, type qualifiers, or storage class specifiers.
#  322|   /* Identify known platforms by name.  */
#  323|   #if defined(__linux) || defined(__linux__) || defined(linux)
#  324|-> # define PLATFORM_ID "Linux"
#  325|   
#  326|   #elif defined(__CYGWIN__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:326: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  324|   # define PLATFORM_ID "Linux"
#  325|   
#  326|-> #elif defined(__CYGWIN__)
#  327|   # define PLATFORM_ID "Cygwin"
#  328|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:413: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  411|   # else /* unknown platform */
#  412|   #  define PLATFORM_ID
#  413|-> # endif
#  414|   
#  415|   #elif defined(__INTEGRITY)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:421: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  419|   # else /* regular Integrity */
#  420|   #  define PLATFORM_ID "Integrity"
#  421|-> # endif
#  422|   
#  423|   #else /* unknown platform */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:426: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  424|   # define PLATFORM_ID
#  425|   
#  426|-> #endif
#  427|   
#  428|   /* For windows compilers MSVC and Intel we can determine

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:433: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  431|      but rather depend on which compiler is being used
#  432|   */
#  433|-> #if defined(_WIN32) && defined(_MSC_VER)
#  434|   # if defined(_M_IA64)
#  435|   #  define ARCHITECTURE_ID "IA64"

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:453: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  451|   #  else
#  452|   #   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  453|-> #  endif
#  454|   
#  455|   # elif defined(_M_MIPS)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:463: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  461|   # else /* unknown architecture */
#  462|   #  define ARCHITECTURE_ID ""
#  463|-> # endif
#  464|   
#  465|   #elif defined(__WATCOMC__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:474: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  472|   # else /* unknown architecture */
#  473|   #  define ARCHITECTURE_ID ""
#  474|-> # endif
#  475|   
#  476|   #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:506: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  504|   # else /* unknown architecture */
#  505|   #  define ARCHITECTURE_ID ""
#  506|-> # endif
#  507|   
#  508|   #elif defined(__ghs__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:526: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  524|   # else /* unknown architecture */
#  525|   #  define ARCHITECTURE_ID ""
#  526|-> # endif
#  527|   
#  528|   #elif defined(__TI_COMPILER_VERSION__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:543: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  541|   # else /* unknown architecture */
#  542|   #  define ARCHITECTURE_ID ""
#  543|-> # endif
#  544|   
#  545|   #else

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:545: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  543|   # endif
#  544|   
#  545|-> #else
#  546|   #  define ARCHITECTURE_ID
#  547|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:546: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  544|   
#  545|   #else
#  546|-> #  define ARCHITECTURE_ID
#  547|   #endif
#  548|   

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:546: misra_cpp_2008_rule_16_2_2_violation: Macro "ARCHITECTURE_ID" is used other than include guards, type qualifiers, or storage class specifiers.
#  544|   
#  545|   #else
#  546|-> #  define ARCHITECTURE_ID
#  547|   #endif
#  548|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:547: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  545|   #else
#  546|   #  define ARCHITECTURE_ID
#  547|-> #endif
#  548|   
#  549|   /* Convert integer to decimal digit literals.  */

Error: MISRA C++-2008 Rule 16-0-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:550: misra_cpp_2008_rule_16_0_4_violation: Function-like macro "DEC" is defined.
#  548|   
#  549|   /* Convert integer to decimal digit literals.  */
#  550|-> #define DEC(n)                   \
#  551|     ('0' + (((n) / 10000000)%10)), \
#  552|     ('0' + (((n) / 1000000)%10)),  \

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:550: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  548|   
#  549|   /* Convert integer to decimal digit literals.  */
#  550|-> #define DEC(n)                   \
#  551|     ('0' + (((n) / 10000000)%10)), \
#  552|     ('0' + (((n) / 1000000)%10)),  \

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:550: misra_cpp_2008_rule_16_2_2_violation: Macro "DEC" is used other than include guards, type qualifiers, or storage class specifiers.
#  548|   
#  549|   /* Convert integer to decimal digit literals.  */
#  550|-> #define DEC(n)                   \
#  551|     ('0' + (((n) / 10000000)%10)), \
#  552|     ('0' + (((n) / 1000000)%10)),  \

Error: MISRA C-2012 Rule 2.5 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:561: misra_c_2012_rule_2_5_violation: Macro "HEX" is defined but never used.
#  559|   
#  560|   /* Convert integer to hex digit literals.  */
#  561|-> #define HEX(n)             \
#  562|     ('0' + ((n)>>28 & 0xF)), \
#  563|     ('0' + ((n)>>24 & 0xF)), \

Error: MISRA C++-2008 Rule 16-0-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:561: misra_cpp_2008_rule_16_0_4_violation: Function-like macro "HEX" is defined.
#  559|   
#  560|   /* Convert integer to hex digit literals.  */
#  561|-> #define HEX(n)             \
#  562|     ('0' + ((n)>>28 & 0xF)), \
#  563|     ('0' + ((n)>>24 & 0xF)), \

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:561: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  559|   
#  560|   /* Convert integer to hex digit literals.  */
#  561|-> #define HEX(n)             \
#  562|     ('0' + ((n)>>28 & 0xF)), \
#  563|     ('0' + ((n)>>24 & 0xF)), \

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:561: misra_cpp_2008_rule_16_2_2_violation: Macro "HEX" is used other than include guards, type qualifiers, or storage class specifiers.
#  559|   
#  560|   /* Convert integer to hex digit literals.  */
#  561|-> #define HEX(n)             \
#  562|     ('0' + ((n)>>28 & 0xF)), \
#  563|     ('0' + ((n)>>24 & 0xF)), \

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:572: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  570|   
#  571|   /* Construct a string literal encoding the version number components. */
#  572|-> #ifdef COMPILER_VERSION_MAJOR
#  573|   char const info_version[] = {
#  574|     'I', 'N', 'F', 'O', ':',

Error: MISRA C-2012 Rule 5.9 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:573: misra_c_2012_rule_5_9_violation: Identifier "info_version" is already used to represent an object with internal linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:573: internal_linkage_symbol: Declaring an internal linkage object with identifier "info_version".
#  571|   /* Construct a string literal encoding the version number components. */
#  572|   #ifdef COMPILER_VERSION_MAJOR
#  573|-> char const info_version[] = {
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',

Error: MISRA C-2012 Rule 8.9 (CWE-1126):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:573: misra_c_2012_rule_8_9_violation: Symbol "info_version" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_version" is only used in "main(int, char **)".
#  571|   /* Construct a string literal encoding the version number components. */
#  572|   #ifdef COMPILER_VERSION_MAJOR
#  573|-> char const info_version[] = {
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',

Error: MISRA C++-2008 Rule 2-10-5 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:573: misra_cpp_2008_rule_2_10_5_violation: Identifier "info_version" is already used to represent an object with static storage duration.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:573: static_storage_symbol: Declaring a static storage duration object with identifier "info_version".
#  571|   /* Construct a string literal encoding the version number components. */
#  572|   #ifdef COMPILER_VERSION_MAJOR
#  573|-> char const info_version[] = {
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:573: misra_cpp_2008_rule_3_4_1_violation: Symbol "info_version" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_version" is only used in "main(int, char **)".
#  571|   /* Construct a string literal encoding the version number components. */
#  572|   #ifdef COMPILER_VERSION_MAJOR
#  573|-> char const info_version[] = {
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:573: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  571|   /* Construct a string literal encoding the version number components. */
#  572|   #ifdef COMPILER_VERSION_MAJOR
#  573|-> char const info_version[] = {
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:573: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "info_version".
#  571|   /* Construct a string literal encoding the version number components. */
#  572|   #ifdef COMPILER_VERSION_MAJOR
#  573|-> char const info_version[] = {
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:576: misra_cpp_2008_rule_5_0_11_violation: Object "'0'" with plain char type is used with its non-character values.
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
#  576|->   COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|     '.', COMPILER_VERSION_MINOR,

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:576: misra_cpp_2008_rule_5_0_11_violation: Plain char type is used for storage of non-character values of "48 + 0".
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
#  576|->   COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|     '.', COMPILER_VERSION_MINOR,

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:576: misra_cpp_2008_rule_5_0_11_violation: Plain char type is used for storage of non-character values of "48 + 1".
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
#  576|->   COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|     '.', COMPILER_VERSION_MINOR,

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:576: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "0 % 10" is implicitly reduced from "16-bit signed short" to "char".
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
#  576|->   COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|     '.', COMPILER_VERSION_MINOR,

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:576: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "0 % 10" is implicitly reduced from "32-bit signed long" to "char".
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
#  576|->   COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|     '.', COMPILER_VERSION_MINOR,

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:577: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
#  576|     COMPILER_VERSION_MAJOR,
#  577|-> # ifdef COMPILER_VERSION_MINOR
#  578|     '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:578: misra_cpp_2008_rule_5_0_11_violation: Object "'0'" with plain char type is used with its non-character values.
#  576|     COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|->   '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|      '.', COMPILER_VERSION_PATCH,

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:578: misra_cpp_2008_rule_5_0_11_violation: Plain char type is used for storage of non-character values of "48 + 0".
#  576|     COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|->   '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|      '.', COMPILER_VERSION_PATCH,

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:578: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "0 % 10" is implicitly reduced from "16-bit signed short" to "char".
#  576|     COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|->   '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|      '.', COMPILER_VERSION_PATCH,

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:578: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "0 % 10" is implicitly reduced from "32-bit signed long" to "char".
#  576|     COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|->   '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|      '.', COMPILER_VERSION_PATCH,

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:579: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|     '.', COMPILER_VERSION_MINOR,
#  579|-> #  ifdef COMPILER_VERSION_PATCH
#  580|      '.', COMPILER_VERSION_PATCH,
#  581|   #   ifdef COMPILER_VERSION_TWEAK

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:580: misra_cpp_2008_rule_5_0_11_violation: Object "'0'" with plain char type is used with its non-character values.
#  578|     '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|->    '.', COMPILER_VERSION_PATCH,
#  581|   #   ifdef COMPILER_VERSION_TWEAK
#  582|       '.', COMPILER_VERSION_TWEAK,

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:580: misra_cpp_2008_rule_5_0_11_violation: Plain char type is used for storage of non-character values of "48 + 0".
#  578|     '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|->    '.', COMPILER_VERSION_PATCH,
#  581|   #   ifdef COMPILER_VERSION_TWEAK
#  582|       '.', COMPILER_VERSION_TWEAK,

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:580: misra_cpp_2008_rule_5_0_11_violation: Plain char type is used for storage of non-character values of "48 + 1".
#  578|     '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|->    '.', COMPILER_VERSION_PATCH,
#  581|   #   ifdef COMPILER_VERSION_TWEAK
#  582|       '.', COMPILER_VERSION_TWEAK,

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:580: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "0 % 10" is implicitly reduced from "16-bit signed short" to "char".
#  578|     '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|->    '.', COMPILER_VERSION_PATCH,
#  581|   #   ifdef COMPILER_VERSION_TWEAK
#  582|       '.', COMPILER_VERSION_TWEAK,

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:580: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "0 % 10" is implicitly reduced from "32-bit signed long" to "char".
#  578|     '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|->    '.', COMPILER_VERSION_PATCH,
#  581|   #   ifdef COMPILER_VERSION_TWEAK
#  582|       '.', COMPILER_VERSION_TWEAK,

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:581: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|      '.', COMPILER_VERSION_PATCH,
#  581|-> #   ifdef COMPILER_VERSION_TWEAK
#  582|       '.', COMPILER_VERSION_TWEAK,
#  583|   #   endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:583: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  581|   #   ifdef COMPILER_VERSION_TWEAK
#  582|       '.', COMPILER_VERSION_TWEAK,
#  583|-> #   endif
#  584|   #  endif
#  585|   # endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:584: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  582|       '.', COMPILER_VERSION_TWEAK,
#  583|   #   endif
#  584|-> #  endif
#  585|   # endif
#  586|     ']','\0'};

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:585: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  583|   #   endif
#  584|   #  endif
#  585|-> # endif
#  586|     ']','\0'};
#  587|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:587: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  585|   # endif
#  586|     ']','\0'};
#  587|-> #endif
#  588|   
#  589|   /* Construct a string literal encoding the internal version number. */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:590: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  588|   
#  589|   /* Construct a string literal encoding the internal version number. */
#  590|-> #ifdef COMPILER_VERSION_INTERNAL
#  591|   char const info_version_internal[] = {
#  592|     'I', 'N', 'F', 'O', ':',

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:596: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  594|     'i','n','t','e','r','n','a','l','[',
#  595|     COMPILER_VERSION_INTERNAL,']','\0'};
#  596|-> #endif
#  597|   
#  598|   /* Construct a string literal encoding the version number components. */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:599: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  597|   
#  598|   /* Construct a string literal encoding the version number components. */
#  599|-> #ifdef SIMULATE_VERSION_MAJOR
#  600|   char const info_simulate_version[] = {
#  601|     'I', 'N', 'F', 'O', ':',

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:610: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  608|   #   ifdef SIMULATE_VERSION_TWEAK
#  609|       '.', SIMULATE_VERSION_TWEAK,
#  610|-> #   endif
#  611|   #  endif
#  612|   # endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:611: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  609|       '.', SIMULATE_VERSION_TWEAK,
#  610|   #   endif
#  611|-> #  endif
#  612|   # endif
#  613|     ']','\0'};

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:612: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  610|   #   endif
#  611|   #  endif
#  612|-> # endif
#  613|     ']','\0'};
#  614|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:614: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  612|   # endif
#  613|     ']','\0'};
#  614|-> #endif
#  615|   
#  616|   /* Construct the string literal in pieces to prevent the source from

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_c_2012_rule_5_8_violation: Identifier "info_platform" is already used to represent an object with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: external_linkage_symbol: Declaring an external linkage object with identifier "info_platform".
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_c_2012_rule_8_4_violation: Object definition does not have a visible prototype.
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_c_2012_rule_8_7_violation: Object "info_platform" has external linkage but is only used in one translation unit.
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C-2012 Rule 8.9 (CWE-1126):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_c_2012_rule_8_9_violation: Symbol "info_platform" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_platform" is only used in "main(int, char **)".
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_cpp_2008_rule_3_4_1_violation: Symbol "info_platform" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_platform" is only used in "main(int, char **)".
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "info_platform".
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_c_2012_rule_5_8_violation: Identifier "info_arch" is already used to represent an object with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: external_linkage_symbol: Declaring an external linkage object with identifier "info_arch".
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_c_2012_rule_8_4_violation: Object definition does not have a visible prototype.
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_c_2012_rule_8_7_violation: Object "info_arch" has external linkage but is only used in one translation unit.
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C++-2008 Rule 0-1-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_cpp_2008_rule_0_1_4_violation: The variable "info_arch" has only one use.
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_cpp_2008_rule_0_1_6_violation: "info_arch" is not used outside of an assignment to itself.
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "info_arch".
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:625: misra_c_2012_rule_12_1_violation: Missing parentheses on sub-expression of the operator.
#  623|   
#  624|   
#  625|-> #if defined(__INTEL_COMPILER) && defined(_MSVC_LANG) && _MSVC_LANG < 201403L
#  626|   #  if defined(__INTEL_CXX11_MODE__)
#  627|   #    if defined(__cpp_aggregate_nsdmi)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:625: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  623|   
#  624|   
#  625|-> #if defined(__INTEL_COMPILER) && defined(_MSVC_LANG) && _MSVC_LANG < 201403L
#  626|   #  if defined(__INTEL_CXX11_MODE__)
#  627|   #    if defined(__cpp_aggregate_nsdmi)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:631: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  629|   #    else
#  630|   #      define CXX_STD 201103L
#  631|-> #    endif
#  632|   #  else
#  633|   #    define CXX_STD 199711L

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:634: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  632|   #  else
#  633|   #    define CXX_STD 199711L
#  634|-> #  endif
#  635|   #elif defined(_MSC_VER) && defined(_MSVC_LANG)
#  636|   #  define CXX_STD _MSVC_LANG

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:637: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  635|   #elif defined(_MSC_VER) && defined(_MSVC_LANG)
#  636|   #  define CXX_STD _MSVC_LANG
#  637|-> #else
#  638|   #  define CXX_STD __cplusplus
#  639|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:638: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  636|   #  define CXX_STD _MSVC_LANG
#  637|   #else
#  638|-> #  define CXX_STD __cplusplus
#  639|   #endif
#  640|   

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:638: misra_cpp_2008_rule_16_2_2_violation: Macro "CXX_STD" is used other than include guards, type qualifiers, or storage class specifiers.
#  636|   #  define CXX_STD _MSVC_LANG
#  637|   #else
#  638|-> #  define CXX_STD __cplusplus
#  639|   #endif
#  640|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:639: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  637|   #else
#  638|   #  define CXX_STD __cplusplus
#  639|-> #endif
#  640|   
#  641|   const char* info_language_dialect_default = "INFO" ":" "dialect_default["

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_c_2012_rule_5_8_violation: Identifier "info_language_dialect_default" is already used to represent an object with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: external_linkage_symbol: Declaring an external linkage object with identifier "info_language_dialect_default".
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_c_2012_rule_8_4_violation: Object definition does not have a visible prototype.
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_c_2012_rule_8_7_violation: Object "info_language_dialect_default" has external linkage but is only used in one translation unit.
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C-2012 Rule 8.9 (CWE-1126):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_c_2012_rule_8_9_violation: Symbol "info_language_dialect_default" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_language_dialect_default" is only used in "main(int, char **)".
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_cpp_2008_rule_3_4_1_violation: Symbol "info_language_dialect_default" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_language_dialect_default" is only used in "main(int, char **)".
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "info_language_dialect_default".
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:642: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  640|   
#  641|   const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|-> #if CXX_STD > 201703L
#  643|     "20"
#  644|   #elif CXX_STD >= 201703L

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:644: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  642|   #if CXX_STD > 201703L
#  643|     "20"
#  644|-> #elif CXX_STD >= 201703L
#  645|     "17"
#  646|   #elif CXX_STD >= 201402L

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:646: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  644|   #elif CXX_STD >= 201703L
#  645|     "17"
#  646|-> #elif CXX_STD >= 201402L
#  647|     "14"
#  648|   #elif CXX_STD >= 201103L

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:652: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  650|   #else
#  651|     "98"
#  652|-> #endif
#  653|   "]";
#  654|   

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: misra_c_2012_rule_5_8_violation: Identifier "main" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: external_linkage_symbol: Declaring an external linkage function with identifier "main".
#  655|   /*--------------------------------------------------------------------------*/
#  656|   
#  657|-> int main(int argc, char* argv[])
#  658|   {
#  659|     int require = 0;

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: misra_c_2012_rule_8_13_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  655|   /*--------------------------------------------------------------------------*/
#  656|   
#  657|-> int main(int argc, char* argv[])
#  658|   {
#  659|     int require = 0;

Error: MISRA C++-2008 Rule 15-3-2 (CWE-703):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: misra_cpp_2008_rule_15_3_2_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block.
#  655|   /*--------------------------------------------------------------------------*/
#  656|   
#  657|-> int main(int argc, char* argv[])
#  658|   {
#  659|     int require = 0;

Error: MISRA C++-2008 Rule 15-5-3 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: misra_cpp_2008_rule_15_5_3_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block. terminate() could be called implicitly.
#  655|   /*--------------------------------------------------------------------------*/
#  656|   
#  657|-> int main(int argc, char* argv[])
#  658|   {
#  659|     int require = 0;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: misra_cpp_2008_rule_7_1_1_violation: The variable "argc" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  655|   /*--------------------------------------------------------------------------*/
#  656|   
#  657|-> int main(int argc, char* argv[])
#  658|   {
#  659|     int require = 0;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: misra_cpp_2008_rule_7_1_1_violation: The variable "argv" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  655|   /*--------------------------------------------------------------------------*/
#  656|   
#  657|-> int main(int argc, char* argv[])
#  658|   {
#  659|     int require = 0;

Error: MISRA C++-2008 Rule 7-1-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: misra_cpp_2008_rule_7_1_2_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  655|   /*--------------------------------------------------------------------------*/
#  656|   
#  657|-> int main(int argc, char* argv[])
#  658|   {
#  659|     int require = 0;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:659: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  657|   int main(int argc, char* argv[])
#  658|   {
#  659|->   int require = 0;
#  660|     require += info_compiler[argc];
#  661|     require += info_platform[argc];

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:659: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  657|   int main(int argc, char* argv[])
#  658|   {
#  659|->   int require = 0;
#  660|     require += info_compiler[argc];
#  661|     require += info_platform[argc];

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:660: misra_c_2012_rule_10_3_violation: Implicit conversion of "info_compiler[argc]" from essential type "character" to different or narrower essential type "signed 32-bit int".
#  658|   {
#  659|     int require = 0;
#  660|->   require += info_compiler[argc];
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR

Error: MISRA C-2012 Rule 10.6 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:660: misra_c_2012_rule_10_6_violation: Assigning composite expression "info_compiler[argc]" of width 8 to a target of width 32.
#  658|   {
#  659|     int require = 0;
#  660|->   require += info_compiler[argc];
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR

Error: MISRA C++-2008 Rule 4-5-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:660: misra_cpp_2008_rule_4_5_3_violation: "info_compiler[argc]" is a character constant other than "0" used as an operand to operator +.
#  658|   {
#  659|     int require = 0;
#  660|->   require += info_compiler[argc];
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:660: misra_cpp_2008_rule_5_0_11_violation: Object "info_compiler[argc]" with plain char type is used with its non-character values.
#  658|   {
#  659|     int require = 0;
#  660|->   require += info_compiler[argc];
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR

Error: MISRA C++-2008 Rule 5-0-15 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:660: misra_cpp_2008_rule_5_0_15_violation: Using arithmetic on pointer "info_compiler".
#  658|   {
#  659|     int require = 0;
#  660|->   require += info_compiler[argc];
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:661: misra_c_2012_rule_10_3_violation: Implicit conversion of "info_platform[argc]" from essential type "character" to different or narrower essential type "signed 32-bit int".
#  659|     int require = 0;
#  660|     require += info_compiler[argc];
#  661|->   require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|     require += info_version[argc];

Error: MISRA C-2012 Rule 10.6 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:661: misra_c_2012_rule_10_6_violation: Assigning composite expression "info_platform[argc]" of width 8 to a target of width 32.
#  659|     int require = 0;
#  660|     require += info_compiler[argc];
#  661|->   require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|     require += info_version[argc];

Error: MISRA C++-2008 Rule 4-5-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:661: misra_cpp_2008_rule_4_5_3_violation: "info_platform[argc]" is a character constant other than "0" used as an operand to operator +.
#  659|     int require = 0;
#  660|     require += info_compiler[argc];
#  661|->   require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|     require += info_version[argc];

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:661: misra_cpp_2008_rule_5_0_11_violation: Object "info_platform[argc]" with plain char type is used with its non-character values.
#  659|     int require = 0;
#  660|     require += info_compiler[argc];
#  661|->   require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|     require += info_version[argc];

Error: MISRA C++-2008 Rule 5-0-15 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:661: misra_cpp_2008_rule_5_0_15_violation: Using arithmetic on pointer "info_platform".
#  659|     int require = 0;
#  660|     require += info_compiler[argc];
#  661|->   require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|     require += info_version[argc];

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:662: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  660|     require += info_compiler[argc];
#  661|     require += info_platform[argc];
#  662|-> #ifdef COMPILER_VERSION_MAJOR
#  663|     require += info_version[argc];
#  664|   #endif

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:663: misra_c_2012_rule_10_3_violation: Implicit conversion of "info_version[argc]" from essential type "character" to different or narrower essential type "signed 32-bit int".
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|->   require += info_version[argc];
#  664|   #endif
#  665|   #ifdef COMPILER_VERSION_INTERNAL

Error: MISRA C-2012 Rule 10.6 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:663: misra_c_2012_rule_10_6_violation: Assigning composite expression "info_version[argc]" of width 8 to a target of width 32.
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|->   require += info_version[argc];
#  664|   #endif
#  665|   #ifdef COMPILER_VERSION_INTERNAL

Error: MISRA C++-2008 Rule 4-5-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:663: misra_cpp_2008_rule_4_5_3_violation: "info_version[argc]" is a character constant other than "0" used as an operand to operator +.
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|->   require += info_version[argc];
#  664|   #endif
#  665|   #ifdef COMPILER_VERSION_INTERNAL

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:663: misra_cpp_2008_rule_5_0_11_violation: Object "info_version[argc]" with plain char type is used with its non-character values.
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|->   require += info_version[argc];
#  664|   #endif
#  665|   #ifdef COMPILER_VERSION_INTERNAL

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:664: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|     require += info_version[argc];
#  664|-> #endif
#  665|   #ifdef COMPILER_VERSION_INTERNAL
#  666|     require += info_version_internal[argc];

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:665: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  663|     require += info_version[argc];
#  664|   #endif
#  665|-> #ifdef COMPILER_VERSION_INTERNAL
#  666|     require += info_version_internal[argc];
#  667|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:667: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  665|   #ifdef COMPILER_VERSION_INTERNAL
#  666|     require += info_version_internal[argc];
#  667|-> #endif
#  668|   #ifdef SIMULATE_ID
#  669|     require += info_simulate[argc];

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:668: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  666|     require += info_version_internal[argc];
#  667|   #endif
#  668|-> #ifdef SIMULATE_ID
#  669|     require += info_simulate[argc];
#  670|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:670: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  668|   #ifdef SIMULATE_ID
#  669|     require += info_simulate[argc];
#  670|-> #endif
#  671|   #ifdef SIMULATE_VERSION_MAJOR
#  672|     require += info_simulate_version[argc];

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:671: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  669|     require += info_simulate[argc];
#  670|   #endif
#  671|-> #ifdef SIMULATE_VERSION_MAJOR
#  672|     require += info_simulate_version[argc];
#  673|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:673: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  671|   #ifdef SIMULATE_VERSION_MAJOR
#  672|     require += info_simulate_version[argc];
#  673|-> #endif
#  674|   #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
#  675|     require += info_cray[argc];

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:674: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  672|     require += info_simulate_version[argc];
#  673|   #endif
#  674|-> #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
#  675|     require += info_cray[argc];
#  676|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:676: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  674|   #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
#  675|     require += info_cray[argc];
#  676|-> #endif
#  677|     require += info_language_dialect_default[argc];
#  678|     (void)argv;

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:677: misra_c_2012_rule_10_3_violation: Implicit conversion of "info_language_dialect_default[argc]" from essential type "character" to different or narrower essential type "signed 32-bit int".
#  675|     require += info_cray[argc];
#  676|   #endif
#  677|->   require += info_language_dialect_default[argc];
#  678|     (void)argv;
#  679|     return require;

Error: MISRA C-2012 Rule 10.6 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:677: misra_c_2012_rule_10_6_violation: Assigning composite expression "info_language_dialect_default[argc]" of width 8 to a target of width 32.
#  675|     require += info_cray[argc];
#  676|   #endif
#  677|->   require += info_language_dialect_default[argc];
#  678|     (void)argv;
#  679|     return require;

Error: MISRA C++-2008 Rule 4-5-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:677: misra_cpp_2008_rule_4_5_3_violation: "info_language_dialect_default[argc]" is a character constant other than "0" used as an operand to operator +.
#  675|     require += info_cray[argc];
#  676|   #endif
#  677|->   require += info_language_dialect_default[argc];
#  678|     (void)argv;
#  679|     return require;

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:677: misra_cpp_2008_rule_5_0_11_violation: Object "info_language_dialect_default[argc]" with plain char type is used with its non-character values.
#  675|     require += info_cray[argc];
#  676|   #endif
#  677|->   require += info_language_dialect_default[argc];
#  678|     (void)argv;
#  679|     return require;

Error: MISRA C++-2008 Rule 5-0-15 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:677: misra_cpp_2008_rule_5_0_15_violation: Using arithmetic on pointer "info_language_dialect_default".
#  675|     require += info_cray[argc];
#  676|   #endif
#  677|->   require += info_language_dialect_default[argc];
#  678|     (void)argv;
#  679|     return require;

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:4: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#    2|      recognize the extension without flags.  Borland does not know .cxx for
#    3|      example.  */
#    4|-> #ifndef __cplusplus
#    5|   # error "A C compiler has been selected for C++."
#    6|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:6: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#    4|   #ifndef __cplusplus
#    5|   # error "A C compiler has been selected for C++."
#    6|-> #endif
#    7|   
#    8|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:12: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   10|      Version date components:   YYYY=Year, MM=Month,   DD=Day  */
#   11|   
#   12|-> #if defined(__COMO__)
#   13|   # define COMPILER_ID "Comeau"
#   14|     /* __COMO_VERSION__ = VRR */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:22: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   20|   # if defined(_MSC_VER)
#   21|   #  define SIMULATE_ID "MSVC"
#   22|-> # endif
#   23|   # if defined(__GNUC__)
#   24|   #  define SIMULATE_ID "GNU"

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:25: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   23|   # if defined(__GNUC__)
#   24|   #  define SIMULATE_ID "GNU"
#   25|-> # endif
#   26|     /* __INTEL_COMPILER = VRP */
#   27|   # define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:33: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   31|   # else
#   32|   #  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
#   33|-> # endif
#   34|   # if defined(__INTEL_COMPILER_BUILD_DATE)
#   35|     /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:37: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   35|     /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#   36|   #  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
#   37|-> # endif
#   38|   # if defined(_MSC_VER)
#   39|      /* _MSC_VER = VVRR */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:42: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   40|   #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#   41|   #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#   42|-> # endif
#   43|   # if defined(__GNUC__)
#   44|   #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:47: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   45|   # elif defined(__GNUG__)
#   46|   #  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
#   47|-> # endif
#   48|   # if defined(__GNUC_MINOR__)
#   49|   #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:50: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   48|   # if defined(__GNUC_MINOR__)
#   49|   #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#   50|-> # endif
#   51|   # if defined(__GNUC_PATCHLEVEL__)
#   52|   #  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:53: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   51|   # if defined(__GNUC_PATCHLEVEL__)
#   52|   #  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#   53|-> # endif
#   54|   
#   55|   #elif defined(__PATHCC__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:61: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   59|   # if defined(__PATHCC_PATCHLEVEL__)
#   60|   #  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
#   61|-> # endif
#   62|   
#   63|   #elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:75: misra_c_2012_rule_12_1_violation: Missing parentheses on sub-expression of the operator.
#   73|   # define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)
#   74|   
#   75|-> #elif defined(__WATCOMC__) && __WATCOMC__ < 1200
#   76|   # define COMPILER_ID "Watcom"
#   77|      /* __WATCOMC__ = VVRR */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:82: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   80|   # if (__WATCOMC__ % 10) > 0
#   81|   #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
#   82|-> # endif
#   83|   
#   84|   #elif defined(__WATCOMC__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:91: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#   89|   # if (__WATCOMC__ % 10) > 0
#   90|   #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
#   91|-> # endif
#   92|   
#   93|   #elif defined(__SUNPRO_CC)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:105: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  103|   #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)
#  104|   #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
#  105|-> # endif
#  106|   
#  107|   #elif defined(__HP_aCC)

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:136: misra_c_2012_rule_12_1_violation: Missing parentheses on sub-expression of the operator.
#  134|   
#  135|   
#  136|-> #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800
#  137|   # define COMPILER_ID "XL"
#  138|     /* __IBMCPP__ = VRP */

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:143: misra_c_2012_rule_12_1_violation: Missing parentheses on sub-expression of the operator.
#  141|   # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)
#  142|   
#  143|-> #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800
#  144|   # define COMPILER_ID "VisualAge"
#  145|     /* __IBMCPP__ = VRP */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:156: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  154|   # if defined(__PGIC_PATCHLEVEL__)
#  155|   #  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
#  156|-> # endif
#  157|   
#  158|   #elif defined(_CRAYC)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:180: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  178|   # define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
#  179|   # define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
#  180|-> # endif
#  181|   
#  182|   #elif defined(__SCO_VERSION__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:197: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  195|     # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
#  196|     # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#  197|-> #endif
#  198|   
#  199|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:204: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  202|   # if defined(_MSC_VER)
#  203|   #  define SIMULATE_ID "MSVC"
#  204|-> # endif
#  205|   # define COMPILER_VERSION_MAJOR DEC(__clang_major__)
#  206|   # define COMPILER_VERSION_MINOR DEC(__clang_minor__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:212: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  210|   #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  211|   #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#  212|-> # endif
#  213|   # define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)
#  214|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:226: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  224|   # if defined(_MSC_VER)
#  225|   #  define SIMULATE_ID "MSVC"
#  226|-> # endif
#  227|   # define COMPILER_VERSION_MAJOR DEC(__clang_major__)
#  228|   # define COMPILER_VERSION_MINOR DEC(__clang_minor__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:234: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  232|   #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  233|   #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#  234|-> # endif
#  235|   
#  236|   #elif defined(__GNUC__) || defined(__GNUG__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:236: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  234|   # endif
#  235|   
#  236|-> #elif defined(__GNUC__) || defined(__GNUG__)
#  237|   # define COMPILER_ID "GNU"
#  238|   # if defined(__GNUC__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:237: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  235|   
#  236|   #elif defined(__GNUC__) || defined(__GNUG__)
#  237|-> # define COMPILER_ID "GNU"
#  238|   # if defined(__GNUC__)
#  239|   #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:237: misra_cpp_2008_rule_16_2_2_violation: Macro "COMPILER_ID" is used other than include guards, type qualifiers, or storage class specifiers.
#  235|   
#  236|   #elif defined(__GNUC__) || defined(__GNUG__)
#  237|-> # define COMPILER_ID "GNU"
#  238|   # if defined(__GNUC__)
#  239|   #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:238: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  236|   #elif defined(__GNUC__) || defined(__GNUG__)
#  237|   # define COMPILER_ID "GNU"
#  238|-> # if defined(__GNUC__)
#  239|   #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
#  240|   # else

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:239: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  237|   # define COMPILER_ID "GNU"
#  238|   # if defined(__GNUC__)
#  239|-> #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
#  240|   # else
#  241|   #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:239: misra_cpp_2008_rule_16_2_2_violation: Macro "COMPILER_VERSION_MAJOR" is used other than include guards, type qualifiers, or storage class specifiers.
#  237|   # define COMPILER_ID "GNU"
#  238|   # if defined(__GNUC__)
#  239|-> #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
#  240|   # else
#  241|   #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:240: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  238|   # if defined(__GNUC__)
#  239|   #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
#  240|-> # else
#  241|   #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
#  242|   # endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:242: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  240|   # else
#  241|   #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
#  242|-> # endif
#  243|   # if defined(__GNUC_MINOR__)
#  244|   #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:243: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  241|   #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
#  242|   # endif
#  243|-> # if defined(__GNUC_MINOR__)
#  244|   #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
#  245|   # endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:244: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  242|   # endif
#  243|   # if defined(__GNUC_MINOR__)
#  244|-> #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
#  245|   # endif
#  246|   # if defined(__GNUC_PATCHLEVEL__)

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:244: misra_cpp_2008_rule_16_2_2_violation: Macro "COMPILER_VERSION_MINOR" is used other than include guards, type qualifiers, or storage class specifiers.
#  242|   # endif
#  243|   # if defined(__GNUC_MINOR__)
#  244|-> #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
#  245|   # endif
#  246|   # if defined(__GNUC_PATCHLEVEL__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:245: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  243|   # if defined(__GNUC_MINOR__)
#  244|   #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
#  245|-> # endif
#  246|   # if defined(__GNUC_PATCHLEVEL__)
#  247|   #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:246: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  244|   #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
#  245|   # endif
#  246|-> # if defined(__GNUC_PATCHLEVEL__)
#  247|   #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  248|   # endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:247: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  245|   # endif
#  246|   # if defined(__GNUC_PATCHLEVEL__)
#  247|-> #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  248|   # endif
#  249|   

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:247: misra_cpp_2008_rule_16_2_2_violation: Macro "COMPILER_VERSION_PATCH" is used other than include guards, type qualifiers, or storage class specifiers.
#  245|   # endif
#  246|   # if defined(__GNUC_PATCHLEVEL__)
#  247|-> #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  248|   # endif
#  249|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:248: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  246|   # if defined(__GNUC_PATCHLEVEL__)
#  247|   #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  248|-> # endif
#  249|   
#  250|   #elif defined(_MSC_VER)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:250: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  248|   # endif
#  249|   
#  250|-> #elif defined(_MSC_VER)
#  251|   # define COMPILER_ID "MSVC"
#  252|     /* _MSC_VER = VVRR */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:262: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  260|       /* _MSC_FULL_VER = VVRRPPPP */
#  261|   #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  262|-> #  endif
#  263|   # endif
#  264|   # if defined(_MSC_BUILD)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:263: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  261|   #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  262|   #  endif
#  263|-> # endif
#  264|   # if defined(_MSC_BUILD)
#  265|   #  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:266: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  264|   # if defined(_MSC_BUILD)
#  265|   #  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
#  266|-> # endif
#  267|   
#  268|   #elif defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || defined(__ADSP21000__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:275: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  273|   # define COMPILER_VERSION_MINOR HEX(__VISUALDSPVERSION__>>16 & 0xFF)
#  274|   # define COMPILER_VERSION_PATCH HEX(__VISUALDSPVERSION__>>8  & 0xFF)
#  275|-> #endif
#  276|   
#  277|   #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:289: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  287|   #  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  288|   #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
#  289|-> # endif
#  290|   
#  291|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:300: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  298|   #else /* unknown compiler */
#  299|   # define COMPILER_ID ""
#  300|-> #endif
#  301|   
#  302|   /* Construct the string literal in pieces to prevent the source from

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_c_2012_rule_8_4_violation: Object definition does not have a visible prototype.
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_c_2012_rule_8_6_violation: Symbol "info_compiler" is defined more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: definition_tu: Symbol "info_compiler" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: definition_tu: Symbol "info_compiler" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_c_2012_rule_8_7_violation: Object "info_compiler" has external linkage but is only used in one translation unit.
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C-2012 Rule 8.9 (CWE-1126):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_c_2012_rule_8_9_violation: Symbol "info_compiler" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_compiler" is only used in "main(int, char **)".
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_cpp_2008_rule_3_2_2_violation: Symbol "info_compiler" is defined more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: definition_tu: Symbol "info_compiler" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: definition_tu: Symbol "info_compiler" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_cpp_2008_rule_3_2_4_violation: Symbol "info_compiler" is defined more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: definition_tu: Symbol "info_compiler" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: definition_tu: Symbol "info_compiler" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_cpp_2008_rule_3_4_1_violation: Symbol "info_compiler" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_compiler" is only used in "main(int, char **)".
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:306: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "info_compiler".
#  304|      because some compilers will just produce instructions to fill the
#  305|      array rather than assigning a pointer to a static array.  */
#  306|-> char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:307: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  305|      array rather than assigning a pointer to a static array.  */
#  306|   char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#  307|-> #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#  309|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:309: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  307|   #ifdef SIMULATE_ID
#  308|   char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#  309|-> #endif
#  310|   
#  311|   #ifdef __QNXNTO__

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:311: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  309|   #endif
#  310|   
#  311|-> #ifdef __QNXNTO__
#  312|   char const* qnxnto = "INFO" ":" "qnxnto[]";
#  313|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:313: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  311|   #ifdef __QNXNTO__
#  312|   char const* qnxnto = "INFO" ":" "qnxnto[]";
#  313|-> #endif
#  314|   
#  315|   #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:315: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  313|   #endif
#  314|   
#  315|-> #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
#  316|   char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#  317|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:317: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  315|   #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
#  316|   char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#  317|-> #endif
#  318|   
#  319|   #define STRINGIFY_HELPER(X) #X

Error: MISRA C-2012 Rule 20.10 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:319: misra_c_2012_rule_20_10_violation: Use of "#" or "##" preprocessor operator.
#  317|   #endif
#  318|   
#  319|-> #define STRINGIFY_HELPER(X) #X
#  320|   #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   

Error: MISRA C-2012 Rule 2.5 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:319: misra_c_2012_rule_2_5_violation: Macro "STRINGIFY_HELPER" is defined but never used.
#  317|   #endif
#  318|   
#  319|-> #define STRINGIFY_HELPER(X) #X
#  320|   #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   

Error: MISRA C++-2008 Rule 16-0-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:319: misra_cpp_2008_rule_16_0_4_violation: Function-like macro "STRINGIFY_HELPER" is defined.
#  317|   #endif
#  318|   
#  319|-> #define STRINGIFY_HELPER(X) #X
#  320|   #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:319: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  317|   #endif
#  318|   
#  319|-> #define STRINGIFY_HELPER(X) #X
#  320|   #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:319: misra_cpp_2008_rule_16_2_2_violation: Macro "STRINGIFY_HELPER" is used other than include guards, type qualifiers, or storage class specifiers.
#  317|   #endif
#  318|   
#  319|-> #define STRINGIFY_HELPER(X) #X
#  320|   #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   

Error: MISRA C++-2008 Rule 16-3-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:319: misra_cpp_2008_rule_16_3_2_violation: Use of "#" or "##" preprocessor operator.
#  317|   #endif
#  318|   
#  319|-> #define STRINGIFY_HELPER(X) #X
#  320|   #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   

Error: MISRA C-2012 Rule 2.5 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:320: misra_c_2012_rule_2_5_violation: Macro "STRINGIFY" is defined but never used.
#  318|   
#  319|   #define STRINGIFY_HELPER(X) #X
#  320|-> #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   
#  322|   /* Identify known platforms by name.  */

Error: MISRA C++-2008 Rule 16-0-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:320: misra_cpp_2008_rule_16_0_4_violation: Function-like macro "STRINGIFY" is defined.
#  318|   
#  319|   #define STRINGIFY_HELPER(X) #X
#  320|-> #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   
#  322|   /* Identify known platforms by name.  */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:320: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  318|   
#  319|   #define STRINGIFY_HELPER(X) #X
#  320|-> #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   
#  322|   /* Identify known platforms by name.  */

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:320: misra_cpp_2008_rule_16_2_2_violation: Macro "STRINGIFY" is used other than include guards, type qualifiers, or storage class specifiers.
#  318|   
#  319|   #define STRINGIFY_HELPER(X) #X
#  320|-> #define STRINGIFY(X) STRINGIFY_HELPER(X)
#  321|   
#  322|   /* Identify known platforms by name.  */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:323: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  321|   
#  322|   /* Identify known platforms by name.  */
#  323|-> #if defined(__linux) || defined(__linux__) || defined(linux)
#  324|   # define PLATFORM_ID "Linux"
#  325|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:324: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  322|   /* Identify known platforms by name.  */
#  323|   #if defined(__linux) || defined(__linux__) || defined(linux)
#  324|-> # define PLATFORM_ID "Linux"
#  325|   
#  326|   #elif defined(__CYGWIN__)

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:324: misra_cpp_2008_rule_16_2_2_violation: Macro "PLATFORM_ID" is used other than include guards, type qualifiers, or storage class specifiers.
#  322|   /* Identify known platforms by name.  */
#  323|   #if defined(__linux) || defined(__linux__) || defined(linux)
#  324|-> # define PLATFORM_ID "Linux"
#  325|   
#  326|   #elif defined(__CYGWIN__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:326: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  324|   # define PLATFORM_ID "Linux"
#  325|   
#  326|-> #elif defined(__CYGWIN__)
#  327|   # define PLATFORM_ID "Cygwin"
#  328|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:413: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  411|   # else /* unknown platform */
#  412|   #  define PLATFORM_ID
#  413|-> # endif
#  414|   
#  415|   #elif defined(__INTEGRITY)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:421: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  419|   # else /* regular Integrity */
#  420|   #  define PLATFORM_ID "Integrity"
#  421|-> # endif
#  422|   
#  423|   #else /* unknown platform */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:426: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  424|   # define PLATFORM_ID
#  425|   
#  426|-> #endif
#  427|   
#  428|   /* For windows compilers MSVC and Intel we can determine

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:433: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  431|      but rather depend on which compiler is being used
#  432|   */
#  433|-> #if defined(_WIN32) && defined(_MSC_VER)
#  434|   # if defined(_M_IA64)
#  435|   #  define ARCHITECTURE_ID "IA64"

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:453: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  451|   #  else
#  452|   #   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  453|-> #  endif
#  454|   
#  455|   # elif defined(_M_MIPS)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:463: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  461|   # else /* unknown architecture */
#  462|   #  define ARCHITECTURE_ID ""
#  463|-> # endif
#  464|   
#  465|   #elif defined(__WATCOMC__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:474: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  472|   # else /* unknown architecture */
#  473|   #  define ARCHITECTURE_ID ""
#  474|-> # endif
#  475|   
#  476|   #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:506: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  504|   # else /* unknown architecture */
#  505|   #  define ARCHITECTURE_ID ""
#  506|-> # endif
#  507|   
#  508|   #elif defined(__ghs__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:526: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  524|   # else /* unknown architecture */
#  525|   #  define ARCHITECTURE_ID ""
#  526|-> # endif
#  527|   
#  528|   #elif defined(__TI_COMPILER_VERSION__)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:543: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  541|   # else /* unknown architecture */
#  542|   #  define ARCHITECTURE_ID ""
#  543|-> # endif
#  544|   
#  545|   #else

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:545: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  543|   # endif
#  544|   
#  545|-> #else
#  546|   #  define ARCHITECTURE_ID
#  547|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:546: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  544|   
#  545|   #else
#  546|-> #  define ARCHITECTURE_ID
#  547|   #endif
#  548|   

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:546: misra_cpp_2008_rule_16_2_2_violation: Macro "ARCHITECTURE_ID" is used other than include guards, type qualifiers, or storage class specifiers.
#  544|   
#  545|   #else
#  546|-> #  define ARCHITECTURE_ID
#  547|   #endif
#  548|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:547: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  545|   #else
#  546|   #  define ARCHITECTURE_ID
#  547|-> #endif
#  548|   
#  549|   /* Convert integer to decimal digit literals.  */

Error: MISRA C++-2008 Rule 16-0-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:550: misra_cpp_2008_rule_16_0_4_violation: Function-like macro "DEC" is defined.
#  548|   
#  549|   /* Convert integer to decimal digit literals.  */
#  550|-> #define DEC(n)                   \
#  551|     ('0' + (((n) / 10000000)%10)), \
#  552|     ('0' + (((n) / 1000000)%10)),  \

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:550: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  548|   
#  549|   /* Convert integer to decimal digit literals.  */
#  550|-> #define DEC(n)                   \
#  551|     ('0' + (((n) / 10000000)%10)), \
#  552|     ('0' + (((n) / 1000000)%10)),  \

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:550: misra_cpp_2008_rule_16_2_2_violation: Macro "DEC" is used other than include guards, type qualifiers, or storage class specifiers.
#  548|   
#  549|   /* Convert integer to decimal digit literals.  */
#  550|-> #define DEC(n)                   \
#  551|     ('0' + (((n) / 10000000)%10)), \
#  552|     ('0' + (((n) / 1000000)%10)),  \

Error: MISRA C-2012 Rule 2.5 (CWE-1164):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:561: misra_c_2012_rule_2_5_violation: Macro "HEX" is defined but never used.
#  559|   
#  560|   /* Convert integer to hex digit literals.  */
#  561|-> #define HEX(n)             \
#  562|     ('0' + ((n)>>28 & 0xF)), \
#  563|     ('0' + ((n)>>24 & 0xF)), \

Error: MISRA C++-2008 Rule 16-0-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:561: misra_cpp_2008_rule_16_0_4_violation: Function-like macro "HEX" is defined.
#  559|   
#  560|   /* Convert integer to hex digit literals.  */
#  561|-> #define HEX(n)             \
#  562|     ('0' + ((n)>>28 & 0xF)), \
#  563|     ('0' + ((n)>>24 & 0xF)), \

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:561: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  559|   
#  560|   /* Convert integer to hex digit literals.  */
#  561|-> #define HEX(n)             \
#  562|     ('0' + ((n)>>28 & 0xF)), \
#  563|     ('0' + ((n)>>24 & 0xF)), \

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:561: misra_cpp_2008_rule_16_2_2_violation: Macro "HEX" is used other than include guards, type qualifiers, or storage class specifiers.
#  559|   
#  560|   /* Convert integer to hex digit literals.  */
#  561|-> #define HEX(n)             \
#  562|     ('0' + ((n)>>28 & 0xF)), \
#  563|     ('0' + ((n)>>24 & 0xF)), \

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:572: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  570|   
#  571|   /* Construct a string literal encoding the version number components. */
#  572|-> #ifdef COMPILER_VERSION_MAJOR
#  573|   char const info_version[] = {
#  574|     'I', 'N', 'F', 'O', ':',

Error: MISRA C-2012 Rule 8.9 (CWE-1126):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:573: misra_c_2012_rule_8_9_violation: Symbol "info_version" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_version" is only used in "main(int, char **)".
#  571|   /* Construct a string literal encoding the version number components. */
#  572|   #ifdef COMPILER_VERSION_MAJOR
#  573|-> char const info_version[] = {
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:573: misra_cpp_2008_rule_3_4_1_violation: Symbol "info_version" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_version" is only used in "main(int, char **)".
#  571|   /* Construct a string literal encoding the version number components. */
#  572|   #ifdef COMPILER_VERSION_MAJOR
#  573|-> char const info_version[] = {
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:573: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  571|   /* Construct a string literal encoding the version number components. */
#  572|   #ifdef COMPILER_VERSION_MAJOR
#  573|-> char const info_version[] = {
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:573: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "info_version".
#  571|   /* Construct a string literal encoding the version number components. */
#  572|   #ifdef COMPILER_VERSION_MAJOR
#  573|-> char const info_version[] = {
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:576: misra_cpp_2008_rule_5_0_11_violation: Object "'0'" with plain char type is used with its non-character values.
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
#  576|->   COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|     '.', COMPILER_VERSION_MINOR,

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:576: misra_cpp_2008_rule_5_0_11_violation: Plain char type is used for storage of non-character values of "48 + 0".
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
#  576|->   COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|     '.', COMPILER_VERSION_MINOR,

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:576: misra_cpp_2008_rule_5_0_11_violation: Plain char type is used for storage of non-character values of "48 + 1".
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
#  576|->   COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|     '.', COMPILER_VERSION_MINOR,

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:576: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "0 % 10" is implicitly reduced from "16-bit signed short" to "char".
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
#  576|->   COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|     '.', COMPILER_VERSION_MINOR,

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:576: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "0 % 10" is implicitly reduced from "32-bit signed long" to "char".
#  574|     'I', 'N', 'F', 'O', ':',
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
#  576|->   COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|     '.', COMPILER_VERSION_MINOR,

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:577: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  575|     'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
#  576|     COMPILER_VERSION_MAJOR,
#  577|-> # ifdef COMPILER_VERSION_MINOR
#  578|     '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:578: misra_cpp_2008_rule_5_0_11_violation: Object "'0'" with plain char type is used with its non-character values.
#  576|     COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|->   '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|      '.', COMPILER_VERSION_PATCH,

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:578: misra_cpp_2008_rule_5_0_11_violation: Plain char type is used for storage of non-character values of "48 + 0".
#  576|     COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|->   '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|      '.', COMPILER_VERSION_PATCH,

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:578: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "0 % 10" is implicitly reduced from "16-bit signed short" to "char".
#  576|     COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|->   '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|      '.', COMPILER_VERSION_PATCH,

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:578: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "0 % 10" is implicitly reduced from "32-bit signed long" to "char".
#  576|     COMPILER_VERSION_MAJOR,
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|->   '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|      '.', COMPILER_VERSION_PATCH,

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:579: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  577|   # ifdef COMPILER_VERSION_MINOR
#  578|     '.', COMPILER_VERSION_MINOR,
#  579|-> #  ifdef COMPILER_VERSION_PATCH
#  580|      '.', COMPILER_VERSION_PATCH,
#  581|   #   ifdef COMPILER_VERSION_TWEAK

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:580: misra_cpp_2008_rule_5_0_11_violation: Object "'0'" with plain char type is used with its non-character values.
#  578|     '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|->    '.', COMPILER_VERSION_PATCH,
#  581|   #   ifdef COMPILER_VERSION_TWEAK
#  582|       '.', COMPILER_VERSION_TWEAK,

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:580: misra_cpp_2008_rule_5_0_11_violation: Plain char type is used for storage of non-character values of "48 + 0".
#  578|     '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|->    '.', COMPILER_VERSION_PATCH,
#  581|   #   ifdef COMPILER_VERSION_TWEAK
#  582|       '.', COMPILER_VERSION_TWEAK,

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:580: misra_cpp_2008_rule_5_0_11_violation: Plain char type is used for storage of non-character values of "48 + 1".
#  578|     '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|->    '.', COMPILER_VERSION_PATCH,
#  581|   #   ifdef COMPILER_VERSION_TWEAK
#  582|       '.', COMPILER_VERSION_TWEAK,

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:580: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "0 % 10" is implicitly reduced from "16-bit signed short" to "char".
#  578|     '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|->    '.', COMPILER_VERSION_PATCH,
#  581|   #   ifdef COMPILER_VERSION_TWEAK
#  582|       '.', COMPILER_VERSION_TWEAK,

Error: MISRA C++-2008 Rule 5-0-6 (CWE-681):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:580: misra_cpp_2008_rule_5_0_6_violation: The underlying type of "0 % 10" is implicitly reduced from "32-bit signed long" to "char".
#  578|     '.', COMPILER_VERSION_MINOR,
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|->    '.', COMPILER_VERSION_PATCH,
#  581|   #   ifdef COMPILER_VERSION_TWEAK
#  582|       '.', COMPILER_VERSION_TWEAK,

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:581: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  579|   #  ifdef COMPILER_VERSION_PATCH
#  580|      '.', COMPILER_VERSION_PATCH,
#  581|-> #   ifdef COMPILER_VERSION_TWEAK
#  582|       '.', COMPILER_VERSION_TWEAK,
#  583|   #   endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:583: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  581|   #   ifdef COMPILER_VERSION_TWEAK
#  582|       '.', COMPILER_VERSION_TWEAK,
#  583|-> #   endif
#  584|   #  endif
#  585|   # endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:584: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  582|       '.', COMPILER_VERSION_TWEAK,
#  583|   #   endif
#  584|-> #  endif
#  585|   # endif
#  586|     ']','\0'};

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:585: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  583|   #   endif
#  584|   #  endif
#  585|-> # endif
#  586|     ']','\0'};
#  587|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:587: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  585|   # endif
#  586|     ']','\0'};
#  587|-> #endif
#  588|   
#  589|   /* Construct a string literal encoding the internal version number. */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:590: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  588|   
#  589|   /* Construct a string literal encoding the internal version number. */
#  590|-> #ifdef COMPILER_VERSION_INTERNAL
#  591|   char const info_version_internal[] = {
#  592|     'I', 'N', 'F', 'O', ':',

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:596: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  594|     'i','n','t','e','r','n','a','l','[',
#  595|     COMPILER_VERSION_INTERNAL,']','\0'};
#  596|-> #endif
#  597|   
#  598|   /* Construct a string literal encoding the version number components. */

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:599: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  597|   
#  598|   /* Construct a string literal encoding the version number components. */
#  599|-> #ifdef SIMULATE_VERSION_MAJOR
#  600|   char const info_simulate_version[] = {
#  601|     'I', 'N', 'F', 'O', ':',

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:610: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  608|   #   ifdef SIMULATE_VERSION_TWEAK
#  609|       '.', SIMULATE_VERSION_TWEAK,
#  610|-> #   endif
#  611|   #  endif
#  612|   # endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:611: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  609|       '.', SIMULATE_VERSION_TWEAK,
#  610|   #   endif
#  611|-> #  endif
#  612|   # endif
#  613|     ']','\0'};

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:612: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  610|   #   endif
#  611|   #  endif
#  612|-> # endif
#  613|     ']','\0'};
#  614|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:614: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  612|   # endif
#  613|     ']','\0'};
#  614|-> #endif
#  615|   
#  616|   /* Construct the string literal in pieces to prevent the source from

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_c_2012_rule_8_4_violation: Object definition does not have a visible prototype.
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_c_2012_rule_8_6_violation: Symbol "info_platform" is defined more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: definition_tu: Symbol "info_platform" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: definition_tu: Symbol "info_platform" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_c_2012_rule_8_7_violation: Object "info_platform" has external linkage but is only used in one translation unit.
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C-2012 Rule 8.9 (CWE-1126):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_c_2012_rule_8_9_violation: Symbol "info_platform" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_platform" is only used in "main(int, char **)".
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_cpp_2008_rule_3_2_2_violation: Symbol "info_platform" is defined more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: definition_tu: Symbol "info_platform" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: definition_tu: Symbol "info_platform" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_cpp_2008_rule_3_2_4_violation: Symbol "info_platform" is defined more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: definition_tu: Symbol "info_platform" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: definition_tu: Symbol "info_platform" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_cpp_2008_rule_3_4_1_violation: Symbol "info_platform" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_platform" is only used in "main(int, char **)".
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:620: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "info_platform".
#  618|      because some compilers will just produce instructions to fill the
#  619|      array rather than assigning a pointer to a static array.  */
#  620|-> char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|   char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_c_2012_rule_8_4_violation: Object definition does not have a visible prototype.
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_c_2012_rule_8_6_violation: Symbol "info_arch" is defined more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: definition_tu: Symbol "info_arch" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: definition_tu: Symbol "info_arch" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_c_2012_rule_8_7_violation: Object "info_arch" has external linkage but is only used in one translation unit.
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C++-2008 Rule 0-1-4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_cpp_2008_rule_0_1_4_violation: The variable "info_arch" has only one use.
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C++-2008 Rule 0-1-6 (CWE-563):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_cpp_2008_rule_0_1_6_violation: "info_arch" is not used outside of an assignment to itself.
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_cpp_2008_rule_3_2_2_violation: Symbol "info_arch" is defined more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: definition_tu: Symbol "info_arch" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: definition_tu: Symbol "info_arch" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_cpp_2008_rule_3_2_4_violation: Symbol "info_arch" is defined more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: definition_tu: Symbol "info_arch" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: definition_tu: Symbol "info_arch" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:621: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "info_arch".
#  619|      array rather than assigning a pointer to a static array.  */
#  620|   char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
#  621|-> char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
#  622|   
#  623|   

Error: MISRA C-2012 Rule 12.1 (CWE-783):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:625: misra_c_2012_rule_12_1_violation: Missing parentheses on sub-expression of the operator.
#  623|   
#  624|   
#  625|-> #if defined(__INTEL_COMPILER) && defined(_MSVC_LANG) && _MSVC_LANG < 201403L
#  626|   #  if defined(__INTEL_CXX11_MODE__)
#  627|   #    if defined(__cpp_aggregate_nsdmi)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:625: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  623|   
#  624|   
#  625|-> #if defined(__INTEL_COMPILER) && defined(_MSVC_LANG) && _MSVC_LANG < 201403L
#  626|   #  if defined(__INTEL_CXX11_MODE__)
#  627|   #    if defined(__cpp_aggregate_nsdmi)

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:631: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  629|   #    else
#  630|   #      define CXX_STD 201103L
#  631|-> #    endif
#  632|   #  else
#  633|   #    define CXX_STD 199711L

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:634: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  632|   #  else
#  633|   #    define CXX_STD 199711L
#  634|-> #  endif
#  635|   #elif defined(_MSC_VER) && defined(_MSVC_LANG)
#  636|   #  define CXX_STD _MSVC_LANG

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:637: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  635|   #elif defined(_MSC_VER) && defined(_MSVC_LANG)
#  636|   #  define CXX_STD _MSVC_LANG
#  637|-> #else
#  638|   #  define CXX_STD __cplusplus
#  639|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:638: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  636|   #  define CXX_STD _MSVC_LANG
#  637|   #else
#  638|-> #  define CXX_STD __cplusplus
#  639|   #endif
#  640|   

Error: MISRA C++-2008 Rule 16-2-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:638: misra_cpp_2008_rule_16_2_2_violation: Macro "CXX_STD" is used other than include guards, type qualifiers, or storage class specifiers.
#  636|   #  define CXX_STD _MSVC_LANG
#  637|   #else
#  638|-> #  define CXX_STD __cplusplus
#  639|   #endif
#  640|   

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:639: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  637|   #else
#  638|   #  define CXX_STD __cplusplus
#  639|-> #endif
#  640|   
#  641|   const char* info_language_dialect_default = "INFO" ":" "dialect_default["

Error: MISRA C-2012 Rule 8.4 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_c_2012_rule_8_4_violation: Object definition does not have a visible prototype.
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C-2012 Rule 8.6 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_c_2012_rule_8_6_violation: Symbol "info_language_dialect_default" is defined more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: definition_tu: Symbol "info_language_dialect_default" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: definition_tu: Symbol "info_language_dialect_default" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C-2012 Rule 8.7 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_c_2012_rule_8_7_violation: Object "info_language_dialect_default" has external linkage but is only used in one translation unit.
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C-2012 Rule 8.9 (CWE-1126):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_c_2012_rule_8_9_violation: Symbol "info_language_dialect_default" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_language_dialect_default" is only used in "main(int, char **)".
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C++-2008 Rule 3-2-2 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_cpp_2008_rule_3_2_2_violation: Symbol "info_language_dialect_default" is defined more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: definition_tu: Symbol "info_language_dialect_default" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: definition_tu: Symbol "info_language_dialect_default" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C++-2008 Rule 3-2-4 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_cpp_2008_rule_3_2_4_violation: Symbol "info_language_dialect_default" is defined more than once.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: definition_tu: Symbol "info_language_dialect_default" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: definition_tu: Symbol "info_language_dialect_default" is defined here in the compilation of the following files:
"/builddir/build/BUILD/csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu-py3/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp".
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C++-2008 Rule 3-3-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_cpp_2008_rule_3_3_1_violation: Declaration of symbols with external linkage outside of headers.
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C++-2008 Rule 3-4-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_cpp_2008_rule_3_4_1_violation: Symbol "info_language_dialect_default" should be defined at block scope.
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: single_use: Symbol "info_language_dialect_default" is only used in "main(int, char **)".
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "char" rather than a typedef that includes size and signedness information.
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C++-2008 Rule 7-3-1 (CWE-1108):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:641: misra_cpp_2008_rule_7_3_1_violation: Global namespace contains "info_language_dialect_default".
#  639|   #endif
#  640|   
#  641|-> const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|   #if CXX_STD > 201703L
#  643|     "20"

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:642: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  640|   
#  641|   const char* info_language_dialect_default = "INFO" ":" "dialect_default["
#  642|-> #if CXX_STD > 201703L
#  643|     "20"
#  644|   #elif CXX_STD >= 201703L

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:644: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  642|   #if CXX_STD > 201703L
#  643|     "20"
#  644|-> #elif CXX_STD >= 201703L
#  645|     "17"
#  646|   #elif CXX_STD >= 201402L

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:646: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  644|   #elif CXX_STD >= 201703L
#  645|     "17"
#  646|-> #elif CXX_STD >= 201402L
#  647|     "14"
#  648|   #elif CXX_STD >= 201103L

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:652: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  650|   #else
#  651|     "98"
#  652|-> #endif
#  653|   "]";
#  654|   

Error: MISRA C-2012 Rule 5.8 (CWE-694):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: misra_c_2012_rule_5_8_violation: Identifier "main" is already used to represent a function with external linkage.
csdiff-2.1.1.20210615.144928.g9c9686f/src/csdiff.cc:30: external_linkage_symbol: Declaring an external linkage function with identifier "main".
#  655|   /*--------------------------------------------------------------------------*/
#  656|   
#  657|-> int main(int argc, char* argv[])
#  658|   {
#  659|     int require = 0;

Error: MISRA C-2012 Rule 8.13 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: misra_c_2012_rule_8_13_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  655|   /*--------------------------------------------------------------------------*/
#  656|   
#  657|-> int main(int argc, char* argv[])
#  658|   {
#  659|     int require = 0;

Error: MISRA C++-2008 Rule 15-3-2 (CWE-703):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: misra_cpp_2008_rule_15_3_2_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block.
#  655|   /*--------------------------------------------------------------------------*/
#  656|   
#  657|-> int main(int argc, char* argv[])
#  658|   {
#  659|     int require = 0;

Error: MISRA C++-2008 Rule 15-5-3 (CWE-758):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: misra_cpp_2008_rule_15_5_3_violation: The body of the program root function "main(int, char **)" is not enclosed in a catch-all try-block. terminate() could be called implicitly.
#  655|   /*--------------------------------------------------------------------------*/
#  656|   
#  657|-> int main(int argc, char* argv[])
#  658|   {
#  659|     int require = 0;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: misra_cpp_2008_rule_7_1_1_violation: The variable "argc" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  655|   /*--------------------------------------------------------------------------*/
#  656|   
#  657|-> int main(int argc, char* argv[])
#  658|   {
#  659|     int require = 0;

Error: MISRA C++-2008 Rule 7-1-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: misra_cpp_2008_rule_7_1_1_violation: The variable "argv" has a non-const type, however its value is never changed. Consider adding a const qualifier to the variable type.
#  655|   /*--------------------------------------------------------------------------*/
#  656|   
#  657|-> int main(int argc, char* argv[])
#  658|   {
#  659|     int require = 0;

Error: MISRA C++-2008 Rule 7-1-2 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:657: misra_cpp_2008_rule_7_1_2_violation: The pointer variable "argv" points to a non-constant type but does not modify the object it points to. Consider adding const qualifier to the points-to type.
#  655|   /*--------------------------------------------------------------------------*/
#  656|   
#  657|-> int main(int argc, char* argv[])
#  658|   {
#  659|     int require = 0;

Error: MISRA C-2012 Directive 4.6 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:659: misra_c_2012_directive_4_6_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  657|   int main(int argc, char* argv[])
#  658|   {
#  659|->   int require = 0;
#  660|     require += info_compiler[argc];
#  661|     require += info_platform[argc];

Error: MISRA C++-2008 Rule 3-9-2 (CWE-1076):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:659: misra_cpp_2008_rule_3_9_2_violation: Using basic numerical type "int" rather than a typedef that includes size and signedness information.
#  657|   int main(int argc, char* argv[])
#  658|   {
#  659|->   int require = 0;
#  660|     require += info_compiler[argc];
#  661|     require += info_platform[argc];

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:660: misra_c_2012_rule_10_3_violation: Implicit conversion of "info_compiler[argc]" from essential type "character" to different or narrower essential type "signed 32-bit int".
#  658|   {
#  659|     int require = 0;
#  660|->   require += info_compiler[argc];
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR

Error: MISRA C-2012 Rule 10.6 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:660: misra_c_2012_rule_10_6_violation: Assigning composite expression "info_compiler[argc]" of width 8 to a target of width 32.
#  658|   {
#  659|     int require = 0;
#  660|->   require += info_compiler[argc];
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR

Error: MISRA C++-2008 Rule 4-5-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:660: misra_cpp_2008_rule_4_5_3_violation: "info_compiler[argc]" is a character constant other than "0" used as an operand to operator +.
#  658|   {
#  659|     int require = 0;
#  660|->   require += info_compiler[argc];
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:660: misra_cpp_2008_rule_5_0_11_violation: Object "info_compiler[argc]" with plain char type is used with its non-character values.
#  658|   {
#  659|     int require = 0;
#  660|->   require += info_compiler[argc];
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR

Error: MISRA C++-2008 Rule 5-0-15 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:660: misra_cpp_2008_rule_5_0_15_violation: Using arithmetic on pointer "info_compiler".
#  658|   {
#  659|     int require = 0;
#  660|->   require += info_compiler[argc];
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:661: misra_c_2012_rule_10_3_violation: Implicit conversion of "info_platform[argc]" from essential type "character" to different or narrower essential type "signed 32-bit int".
#  659|     int require = 0;
#  660|     require += info_compiler[argc];
#  661|->   require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|     require += info_version[argc];

Error: MISRA C-2012 Rule 10.6 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:661: misra_c_2012_rule_10_6_violation: Assigning composite expression "info_platform[argc]" of width 8 to a target of width 32.
#  659|     int require = 0;
#  660|     require += info_compiler[argc];
#  661|->   require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|     require += info_version[argc];

Error: MISRA C++-2008 Rule 4-5-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:661: misra_cpp_2008_rule_4_5_3_violation: "info_platform[argc]" is a character constant other than "0" used as an operand to operator +.
#  659|     int require = 0;
#  660|     require += info_compiler[argc];
#  661|->   require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|     require += info_version[argc];

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:661: misra_cpp_2008_rule_5_0_11_violation: Object "info_platform[argc]" with plain char type is used with its non-character values.
#  659|     int require = 0;
#  660|     require += info_compiler[argc];
#  661|->   require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|     require += info_version[argc];

Error: MISRA C++-2008 Rule 5-0-15 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:661: misra_cpp_2008_rule_5_0_15_violation: Using arithmetic on pointer "info_platform".
#  659|     int require = 0;
#  660|     require += info_compiler[argc];
#  661|->   require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|     require += info_version[argc];

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:662: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  660|     require += info_compiler[argc];
#  661|     require += info_platform[argc];
#  662|-> #ifdef COMPILER_VERSION_MAJOR
#  663|     require += info_version[argc];
#  664|   #endif

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:663: misra_c_2012_rule_10_3_violation: Implicit conversion of "info_version[argc]" from essential type "character" to different or narrower essential type "signed 32-bit int".
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|->   require += info_version[argc];
#  664|   #endif
#  665|   #ifdef COMPILER_VERSION_INTERNAL

Error: MISRA C-2012 Rule 10.6 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:663: misra_c_2012_rule_10_6_violation: Assigning composite expression "info_version[argc]" of width 8 to a target of width 32.
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|->   require += info_version[argc];
#  664|   #endif
#  665|   #ifdef COMPILER_VERSION_INTERNAL

Error: MISRA C++-2008 Rule 4-5-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:663: misra_cpp_2008_rule_4_5_3_violation: "info_version[argc]" is a character constant other than "0" used as an operand to operator +.
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|->   require += info_version[argc];
#  664|   #endif
#  665|   #ifdef COMPILER_VERSION_INTERNAL

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:663: misra_cpp_2008_rule_5_0_11_violation: Object "info_version[argc]" with plain char type is used with its non-character values.
#  661|     require += info_platform[argc];
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|->   require += info_version[argc];
#  664|   #endif
#  665|   #ifdef COMPILER_VERSION_INTERNAL

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:664: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  662|   #ifdef COMPILER_VERSION_MAJOR
#  663|     require += info_version[argc];
#  664|-> #endif
#  665|   #ifdef COMPILER_VERSION_INTERNAL
#  666|     require += info_version_internal[argc];

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:665: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  663|     require += info_version[argc];
#  664|   #endif
#  665|-> #ifdef COMPILER_VERSION_INTERNAL
#  666|     require += info_version_internal[argc];
#  667|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:667: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  665|   #ifdef COMPILER_VERSION_INTERNAL
#  666|     require += info_version_internal[argc];
#  667|-> #endif
#  668|   #ifdef SIMULATE_ID
#  669|     require += info_simulate[argc];

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:668: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  666|     require += info_version_internal[argc];
#  667|   #endif
#  668|-> #ifdef SIMULATE_ID
#  669|     require += info_simulate[argc];
#  670|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:670: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  668|   #ifdef SIMULATE_ID
#  669|     require += info_simulate[argc];
#  670|-> #endif
#  671|   #ifdef SIMULATE_VERSION_MAJOR
#  672|     require += info_simulate_version[argc];

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:671: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  669|     require += info_simulate[argc];
#  670|   #endif
#  671|-> #ifdef SIMULATE_VERSION_MAJOR
#  672|     require += info_simulate_version[argc];
#  673|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:673: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  671|   #ifdef SIMULATE_VERSION_MAJOR
#  672|     require += info_simulate_version[argc];
#  673|-> #endif
#  674|   #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
#  675|     require += info_cray[argc];

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:674: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  672|     require += info_simulate_version[argc];
#  673|   #endif
#  674|-> #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
#  675|     require += info_cray[argc];
#  676|   #endif

Error: MISRA C++-2008 Rule 16-2-1 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:676: misra_cpp_2008_rule_16_2_1_violation: Using preprocessor features for something other than include guards or file inclusion.
#  674|   #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
#  675|     require += info_cray[argc];
#  676|-> #endif
#  677|     require += info_language_dialect_default[argc];
#  678|     (void)argv;

Error: MISRA C-2012 Rule 10.3 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:677: misra_c_2012_rule_10_3_violation: Implicit conversion of "info_language_dialect_default[argc]" from essential type "character" to different or narrower essential type "signed 32-bit int".
#  675|     require += info_cray[argc];
#  676|   #endif
#  677|->   require += info_language_dialect_default[argc];
#  678|     (void)argv;
#  679|     return require;

Error: MISRA C-2012 Rule 10.6 (CWE-664):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:677: misra_c_2012_rule_10_6_violation: Assigning composite expression "info_language_dialect_default[argc]" of width 8 to a target of width 32.
#  675|     require += info_cray[argc];
#  676|   #endif
#  677|->   require += info_language_dialect_default[argc];
#  678|     (void)argv;
#  679|     return require;

Error: MISRA C++-2008 Rule 4-5-3 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:677: misra_cpp_2008_rule_4_5_3_violation: "info_language_dialect_default[argc]" is a character constant other than "0" used as an operand to operator +.
#  675|     require += info_cray[argc];
#  676|   #endif
#  677|->   require += info_language_dialect_default[argc];
#  678|     (void)argv;
#  679|     return require;

Error: MISRA C++-2008 Rule 5-0-11 (CWE-710):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:677: misra_cpp_2008_rule_5_0_11_violation: Object "info_language_dialect_default[argc]" with plain char type is used with its non-character values.
#  675|     require += info_cray[argc];
#  676|   #endif
#  677|->   require += info_language_dialect_default[argc];
#  678|     (void)argv;
#  679|     return require;

Error: MISRA C++-2008 Rule 5-0-15 (CWE-682):
csdiff-2.1.1.20210615.144928.g9c9686f/x86_64-redhat-linux-gnu/CMakeFiles/3.19.7/CompilerIdCXX/CMakeCXXCompilerId.cpp:677: misra_cpp_2008_rule_5_0_15_violation: Using arithmetic on pointer "info_language_dialect_default".
#  675|     require += info_cray[argc];
#  676|   #endif
#  677|->   require += info_language_dialect_default[argc];
#  678|     (void)argv;
#  679|     return require;
