Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/examples/Bye/Bye.cpp:11: constructor_uses_global_object: The constructor of global object "Wave" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Wave" might be created before "llvm::cl::TopLevelSubCommand" is available.
#    9|   using namespace llvm;
#   10|   
#   11|-> static cl::opt<bool> Wave("wave-goodbye", cl::init(false),
#   12|                             cl::desc("wave good bye"));
#   13|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/examples/IRTransforms/SimplifyCFG.cpp:49: constructor_uses_global_object: The constructor of global object "Version" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Version" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   47|   enum TutorialVersion { V1, V2, V3 };
#   48|   static cl::opt<TutorialVersion>
#   49|->     Version("tut-simplifycfg-version", cl::desc("Select tutorial version"),
#   50|               cl::Hidden, cl::ValueOptional, cl::init(V1),
#   51|               cl::values(clEnumValN(V1, "v1", "version 1"),

Error: USE_AFTER_MOVE (CWE-457):
llvm-17.0.6.src/include/llvm/ADT/iterator_range.h:56: move: "c" is moved (indicated by "std::forward(c)").
llvm-17.0.6.src/include/llvm/ADT/iterator_range.h:57: use_after_move: "c" is used after it has been already moved.
#   55|     iterator_range(Container &&c)
#   56|         : begin_iterator(adl_begin(std::forward<Container>(c))),
#   57|->         end_iterator(adl_end(std::forward<Container>(c))) {
#   58|     }
#   59|     iterator_range(IteratorT begin_iterator, IteratorT end_iterator)

Error: UNINIT (CWE-457):
llvm-17.0.6.src/include/llvm/Analysis/ValueLattice.h:235: var_decl: Declaring variable "Res".
llvm-17.0.6.src/include/llvm/Analysis/ValueLattice.h:237: uninit_use: Using uninitialized value "Res". Field "Res" is uninitialized.
#  235|       ValueLatticeElement Res;
#  236|       Res.markOverdefined();
#  237|->     return Res;
#  238|     }
#  239|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1199: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugAbbrev" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugAbbrev" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1197|   // TODO: Add Mach-O and COFF names.
# 1198|   // Official DWARF sections.
# 1199|-> HANDLE_DWARF_SECTION(DebugAbbrev, ".debug_abbrev", "debug-abbrev", BoolOption)
# 1200|   HANDLE_DWARF_SECTION(DebugAddr, ".debug_addr", "debug-addr", BoolOption)
# 1201|   HANDLE_DWARF_SECTION(DebugAranges, ".debug_aranges", "debug-aranges",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1200: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugAddr" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugAddr" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1198|   // Official DWARF sections.
# 1199|   HANDLE_DWARF_SECTION(DebugAbbrev, ".debug_abbrev", "debug-abbrev", BoolOption)
# 1200|-> HANDLE_DWARF_SECTION(DebugAddr, ".debug_addr", "debug-addr", BoolOption)
# 1201|   HANDLE_DWARF_SECTION(DebugAranges, ".debug_aranges", "debug-aranges",
# 1202|                        BoolOption)

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1201: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugAranges" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugAranges" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1199|   HANDLE_DWARF_SECTION(DebugAbbrev, ".debug_abbrev", "debug-abbrev", BoolOption)
# 1200|   HANDLE_DWARF_SECTION(DebugAddr, ".debug_addr", "debug-addr", BoolOption)
# 1201|-> HANDLE_DWARF_SECTION(DebugAranges, ".debug_aranges", "debug-aranges",
# 1202|                        BoolOption)
# 1203|   HANDLE_DWARF_SECTION(DebugInfo, ".debug_info", "debug-info", OffsetOption)

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1203: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugInfo" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugInfo" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1201|   HANDLE_DWARF_SECTION(DebugAranges, ".debug_aranges", "debug-aranges",
# 1202|                        BoolOption)
# 1203|-> HANDLE_DWARF_SECTION(DebugInfo, ".debug_info", "debug-info", OffsetOption)
# 1204|   HANDLE_DWARF_SECTION(DebugTypes, ".debug_types", "debug-types", OffsetOption)
# 1205|   HANDLE_DWARF_SECTION(DebugLine, ".debug_line", "debug-line", OffsetOption)

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1204: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugTypes" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugTypes" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1202|                        BoolOption)
# 1203|   HANDLE_DWARF_SECTION(DebugInfo, ".debug_info", "debug-info", OffsetOption)
# 1204|-> HANDLE_DWARF_SECTION(DebugTypes, ".debug_types", "debug-types", OffsetOption)
# 1205|   HANDLE_DWARF_SECTION(DebugLine, ".debug_line", "debug-line", OffsetOption)
# 1206|   HANDLE_DWARF_SECTION(DebugLineStr, ".debug_line_str", "debug-line-str",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1205: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugLine" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugLine" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1203|   HANDLE_DWARF_SECTION(DebugInfo, ".debug_info", "debug-info", OffsetOption)
# 1204|   HANDLE_DWARF_SECTION(DebugTypes, ".debug_types", "debug-types", OffsetOption)
# 1205|-> HANDLE_DWARF_SECTION(DebugLine, ".debug_line", "debug-line", OffsetOption)
# 1206|   HANDLE_DWARF_SECTION(DebugLineStr, ".debug_line_str", "debug-line-str",
# 1207|                        BoolOption)

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1206: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugLineStr" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugLineStr" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1204|   HANDLE_DWARF_SECTION(DebugTypes, ".debug_types", "debug-types", OffsetOption)
# 1205|   HANDLE_DWARF_SECTION(DebugLine, ".debug_line", "debug-line", OffsetOption)
# 1206|-> HANDLE_DWARF_SECTION(DebugLineStr, ".debug_line_str", "debug-line-str",
# 1207|                        BoolOption)
# 1208|   HANDLE_DWARF_SECTION(DebugLoc, ".debug_loc", "debug-loc", OffsetOption)

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1208: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugLoc" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugLoc" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1206|   HANDLE_DWARF_SECTION(DebugLineStr, ".debug_line_str", "debug-line-str",
# 1207|                        BoolOption)
# 1208|-> HANDLE_DWARF_SECTION(DebugLoc, ".debug_loc", "debug-loc", OffsetOption)
# 1209|   HANDLE_DWARF_SECTION(DebugLoclists, ".debug_loclists", "debug-loclists",
# 1210|                        OffsetOption)

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1209: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugLoclists" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugLoclists" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1207|                        BoolOption)
# 1208|   HANDLE_DWARF_SECTION(DebugLoc, ".debug_loc", "debug-loc", OffsetOption)
# 1209|-> HANDLE_DWARF_SECTION(DebugLoclists, ".debug_loclists", "debug-loclists",
# 1210|                        OffsetOption)
# 1211|   HANDLE_DWARF_SECTION(DebugFrame, ".debug_frame", "debug-frame", OffsetOption)

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1211: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugFrame" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugFrame" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1209|   HANDLE_DWARF_SECTION(DebugLoclists, ".debug_loclists", "debug-loclists",
# 1210|                        OffsetOption)
# 1211|-> HANDLE_DWARF_SECTION(DebugFrame, ".debug_frame", "debug-frame", OffsetOption)
# 1212|   HANDLE_DWARF_SECTION(DebugMacro, ".debug_macro", "debug-macro", BoolOption)
# 1213|   HANDLE_DWARF_SECTION(DebugNames, ".debug_names", "debug-names", BoolOption)

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1212: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugMacro" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugMacro" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1210|                        OffsetOption)
# 1211|   HANDLE_DWARF_SECTION(DebugFrame, ".debug_frame", "debug-frame", OffsetOption)
# 1212|-> HANDLE_DWARF_SECTION(DebugMacro, ".debug_macro", "debug-macro", BoolOption)
# 1213|   HANDLE_DWARF_SECTION(DebugNames, ".debug_names", "debug-names", BoolOption)
# 1214|   HANDLE_DWARF_SECTION(DebugPubnames, ".debug_pubnames", "debug-pubnames",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1213: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugNames" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugNames" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1211|   HANDLE_DWARF_SECTION(DebugFrame, ".debug_frame", "debug-frame", OffsetOption)
# 1212|   HANDLE_DWARF_SECTION(DebugMacro, ".debug_macro", "debug-macro", BoolOption)
# 1213|-> HANDLE_DWARF_SECTION(DebugNames, ".debug_names", "debug-names", BoolOption)
# 1214|   HANDLE_DWARF_SECTION(DebugPubnames, ".debug_pubnames", "debug-pubnames",
# 1215|                        BoolOption)

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1214: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugPubnames" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugPubnames" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1212|   HANDLE_DWARF_SECTION(DebugMacro, ".debug_macro", "debug-macro", BoolOption)
# 1213|   HANDLE_DWARF_SECTION(DebugNames, ".debug_names", "debug-names", BoolOption)
# 1214|-> HANDLE_DWARF_SECTION(DebugPubnames, ".debug_pubnames", "debug-pubnames",
# 1215|                        BoolOption)
# 1216|   HANDLE_DWARF_SECTION(DebugPubtypes, ".debug_pubtypes", "debug-pubtypes",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1216: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugPubtypes" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugPubtypes" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1214|   HANDLE_DWARF_SECTION(DebugPubnames, ".debug_pubnames", "debug-pubnames",
# 1215|                        BoolOption)
# 1216|-> HANDLE_DWARF_SECTION(DebugPubtypes, ".debug_pubtypes", "debug-pubtypes",
# 1217|                        BoolOption)
# 1218|   HANDLE_DWARF_SECTION(DebugGnuPubnames, ".debug_gnu_pubnames",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1218: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugGnuPubnames" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugGnuPubnames" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1216|   HANDLE_DWARF_SECTION(DebugPubtypes, ".debug_pubtypes", "debug-pubtypes",
# 1217|                        BoolOption)
# 1218|-> HANDLE_DWARF_SECTION(DebugGnuPubnames, ".debug_gnu_pubnames",
# 1219|                        "debug-gnu-pubnames", BoolOption)
# 1220|   HANDLE_DWARF_SECTION(DebugGnuPubtypes, ".debug_gnu_pubtypes",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1220: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugGnuPubtypes" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugGnuPubtypes" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1218|   HANDLE_DWARF_SECTION(DebugGnuPubnames, ".debug_gnu_pubnames",
# 1219|                        "debug-gnu-pubnames", BoolOption)
# 1220|-> HANDLE_DWARF_SECTION(DebugGnuPubtypes, ".debug_gnu_pubtypes",
# 1221|                        "debug-gnu-pubtypes", BoolOption)
# 1222|   HANDLE_DWARF_SECTION(DebugRanges, ".debug_ranges", "debug-ranges", BoolOption)

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1222: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugRanges" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugRanges" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1220|   HANDLE_DWARF_SECTION(DebugGnuPubtypes, ".debug_gnu_pubtypes",
# 1221|                        "debug-gnu-pubtypes", BoolOption)
# 1222|-> HANDLE_DWARF_SECTION(DebugRanges, ".debug_ranges", "debug-ranges", BoolOption)
# 1223|   HANDLE_DWARF_SECTION(DebugRnglists, ".debug_rnglists", "debug-rnglists",
# 1224|                        BoolOption)

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1223: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugRnglists" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugRnglists" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1221|                        "debug-gnu-pubtypes", BoolOption)
# 1222|   HANDLE_DWARF_SECTION(DebugRanges, ".debug_ranges", "debug-ranges", BoolOption)
# 1223|-> HANDLE_DWARF_SECTION(DebugRnglists, ".debug_rnglists", "debug-rnglists",
# 1224|                        BoolOption)
# 1225|   HANDLE_DWARF_SECTION(DebugStr, ".debug_str", "debug-str", BoolOption)

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1225: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugStr" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugStr" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1223|   HANDLE_DWARF_SECTION(DebugRnglists, ".debug_rnglists", "debug-rnglists",
# 1224|                        BoolOption)
# 1225|-> HANDLE_DWARF_SECTION(DebugStr, ".debug_str", "debug-str", BoolOption)
# 1226|   HANDLE_DWARF_SECTION(DebugStrOffsets, ".debug_str_offsets", "debug-str-offsets",
# 1227|                        BoolOption)

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1226: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugStrOffsets" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugStrOffsets" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1224|                        BoolOption)
# 1225|   HANDLE_DWARF_SECTION(DebugStr, ".debug_str", "debug-str", BoolOption)
# 1226|-> HANDLE_DWARF_SECTION(DebugStrOffsets, ".debug_str_offsets", "debug-str-offsets",
# 1227|                        BoolOption)
# 1228|   HANDLE_DWARF_SECTION(DebugCUIndex, ".debug_cu_index", "debug-cu-index",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1228: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugCUIndex" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugCUIndex" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1226|   HANDLE_DWARF_SECTION(DebugStrOffsets, ".debug_str_offsets", "debug-str-offsets",
# 1227|                        BoolOption)
# 1228|-> HANDLE_DWARF_SECTION(DebugCUIndex, ".debug_cu_index", "debug-cu-index",
# 1229|                        BoolOption)
# 1230|   HANDLE_DWARF_SECTION(DebugTUIndex, ".debug_tu_index", "debug-tu-index",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1230: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDebugTUIndex" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDebugTUIndex" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1228|   HANDLE_DWARF_SECTION(DebugCUIndex, ".debug_cu_index", "debug-cu-index",
# 1229|                        BoolOption)
# 1230|-> HANDLE_DWARF_SECTION(DebugTUIndex, ".debug_tu_index", "debug-tu-index",
# 1231|                        BoolOption)
# 1232|   // Vendor extensions.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1233: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpAppleNames" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpAppleNames" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1231|                        BoolOption)
# 1232|   // Vendor extensions.
# 1233|-> HANDLE_DWARF_SECTION(AppleNames, ".apple_names", "apple-names", BoolOption)
# 1234|   HANDLE_DWARF_SECTION(AppleTypes, ".apple_types", "apple-types", BoolOption)
# 1235|   HANDLE_DWARF_SECTION(AppleNamespaces, ".apple_namespaces", "apple-namespaces",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1234: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpAppleTypes" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpAppleTypes" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1232|   // Vendor extensions.
# 1233|   HANDLE_DWARF_SECTION(AppleNames, ".apple_names", "apple-names", BoolOption)
# 1234|-> HANDLE_DWARF_SECTION(AppleTypes, ".apple_types", "apple-types", BoolOption)
# 1235|   HANDLE_DWARF_SECTION(AppleNamespaces, ".apple_namespaces", "apple-namespaces",
# 1236|                        BoolOption)

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1235: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpAppleNamespaces" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpAppleNamespaces" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1233|   HANDLE_DWARF_SECTION(AppleNames, ".apple_names", "apple-names", BoolOption)
# 1234|   HANDLE_DWARF_SECTION(AppleTypes, ".apple_types", "apple-types", BoolOption)
# 1235|-> HANDLE_DWARF_SECTION(AppleNamespaces, ".apple_namespaces", "apple-namespaces",
# 1236|                        BoolOption)
# 1237|   HANDLE_DWARF_SECTION(AppleObjC, ".apple_objc", "apple-objc", BoolOption)

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1237: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpAppleObjC" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpAppleObjC" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1235|   HANDLE_DWARF_SECTION(AppleNamespaces, ".apple_namespaces", "apple-namespaces",
# 1236|                        BoolOption)
# 1237|-> HANDLE_DWARF_SECTION(AppleObjC, ".apple_objc", "apple-objc", BoolOption)
# 1238|   HANDLE_DWARF_SECTION(GdbIndex, ".gdb_index", "gdb-index", BoolOption)
# 1239|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/BinaryFormat/Dwarf.def:1238: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpGdbIndex" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpGdbIndex" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1236|                        BoolOption)
# 1237|   HANDLE_DWARF_SECTION(AppleObjC, ".apple_objc", "apple-objc", BoolOption)
# 1238|-> HANDLE_DWARF_SECTION(GdbIndex, ".gdb_index", "gdb-index", BoolOption)
# 1239|   
# 1240|   HANDLE_DW_IDX(0x01, compile_unit)

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/CodeGen/LinkAllCodegenComponents.h:46: alloc_fn: Storage is returned from allocation function "createFastDAGScheduler".
llvm-17.0.6.src/include/llvm/CodeGen/LinkAllCodegenComponents.h:46: leaked_storage: Failing to save or free storage allocated by "llvm::createFastDAGScheduler(NULL, Default)" leaks it.
#   44|         (void) llvm::createHybridListDAGScheduler(nullptr,
#   45|                                                   llvm::CodeGenOpt::Default);
#   46|->       (void) llvm::createFastDAGScheduler(nullptr, llvm::CodeGenOpt::Default);
#   47|         (void) llvm::createDefaultScheduler(nullptr, llvm::CodeGenOpt::Default);
#   48|         (void) llvm::createVLIWDAGScheduler(nullptr, llvm::CodeGenOpt::Default);

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/CodeGen/LinkAllCodegenComponents.h:47: alloc_fn: Storage is returned from allocation function "createDefaultScheduler".
llvm-17.0.6.src/include/llvm/CodeGen/LinkAllCodegenComponents.h:47: leaked_storage: Failing to save or free storage allocated by "llvm::createDefaultScheduler(NULL, Default)" leaks it.
#   45|                                                   llvm::CodeGenOpt::Default);
#   46|         (void) llvm::createFastDAGScheduler(nullptr, llvm::CodeGenOpt::Default);
#   47|->       (void) llvm::createDefaultScheduler(nullptr, llvm::CodeGenOpt::Default);
#   48|         (void) llvm::createVLIWDAGScheduler(nullptr, llvm::CodeGenOpt::Default);
#   49|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/CodeGen/LinkAllCodegenComponents.h:51: constructor_uses_global_object: The constructor of global object "<unnamed>::ForceCodegenLinking" itself makes use of global object "DisableSchedCycles" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ForceCodegenLinking" might be created before "DisableSchedCycles" is available.
#   49|   
#   50|       }
#   51|->   } ForceCodegenLinking; // Force link by creating a global definition.
#   52|   }
#   53|   

Error: UNINIT (CWE-457):
llvm-17.0.6.src/include/llvm/CodeGen/MachineInstr.h:573: var_decl: Declaring variable "UsedRegs".
llvm-17.0.6.src/include/llvm/CodeGen/MachineInstr.h:577: uninit_use: Using uninitialized value "UsedRegs". Field "UsedRegs.Vector.InlineElts" is uninitialized.
#  575|         if (MO.isReg() && MO.getReg())
#  576|           UsedRegs.insert(MO.getReg());
#  577|->     return UsedRegs;
#  578|     }
#  579|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/LinkAllIR.h:51: constructor_uses_global_object: The constructor of global object "<unnamed>::ForceVMCoreLinking" itself makes use of global object "DisableI2pP2iOpt" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ForceVMCoreLinking" might be created before "DisableI2pP2iOpt" is available.
#   49|         (void)    llvm::createVerifierPass();
#   50|       }
#   51|->   } ForceVMCoreLinking;
#   52|   }
#   53|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/LinkAllIR.h:51: constructor_uses_global_object: The constructor of global object "<unnamed>::ForceVMCoreLinking" itself makes use of global object "ScalableErrorAsWarning" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ForceVMCoreLinking" might be created before "ScalableErrorAsWarning" is available.
#   49|         (void)    llvm::createVerifierPass();
#   50|       }
#   51|->   } ForceVMCoreLinking;
#   52|   }
#   53|   

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:71: alloc_fn: Storage is returned from allocation function "createAAEvalPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:71: leaked_storage: Failing to save or free storage allocated by "llvm::createAAEvalPass()" leaks it.
#   69|           return;
#   70|   
#   71|->       (void) llvm::createAAEvalPass();
#   72|         (void) llvm::createBasicAAWrapperPass();
#   73|         (void) llvm::createSCEVAAWrapperPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:81: alloc_fn: Storage is returned from allocation function "createCostModelAnalysisPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:81: leaked_storage: Failing to save or free storage allocated by "llvm::createCostModelAnalysisPass()" leaks it.
#   79|         (void) llvm::createCFGSimplificationPass();
#   80|         (void) llvm::createStructurizeCFGPass();
#   81|->       (void) llvm::createCostModelAnalysisPass();
#   82|         (void) llvm::createDeadArgEliminationPass();
#   83|         (void) llvm::createDeadCodeEliminationPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:91: alloc_fn: Storage is returned from allocation function "createGuardWideningPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:91: leaked_storage: Failing to save or free storage allocated by "llvm::createGuardWideningPass()" leaks it.
#   89|         (void) llvm::createAlwaysInlinerLegacyPass();
#   90|         (void) llvm::createGlobalsAAWrapperPass();
#   91|->       (void) llvm::createGuardWideningPass();
#   92|         (void) llvm::createLoopGuardWideningPass();
#   93|         (void) llvm::createInstSimplifyLegacyPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:92: alloc_fn: Storage is returned from allocation function "createLoopGuardWideningPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:92: leaked_storage: Failing to save or free storage allocated by "llvm::createLoopGuardWideningPass()" leaks it.
#   90|         (void) llvm::createGlobalsAAWrapperPass();
#   91|         (void) llvm::createGuardWideningPass();
#   92|->       (void) llvm::createLoopGuardWideningPass();
#   93|         (void) llvm::createInstSimplifyLegacyPass();
#   94|         (void) llvm::createInstructionCombiningPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:99: alloc_fn: Storage is returned from allocation function "createLoopSinkPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:99: leaked_storage: Failing to save or free storage allocated by "llvm::createLoopSinkPass()" leaks it.
#   97|         (void) llvm::createLCSSAPass();
#   98|         (void) llvm::createLICMPass();
#   99|->       (void) llvm::createLoopSinkPass();
#  100|         (void) llvm::createLazyValueInfoPass();
#  101|         (void) llvm::createLoopExtractorPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:102: alloc_fn: Storage is returned from allocation function "createLoopPredicationPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:102: leaked_storage: Failing to save or free storage allocated by "llvm::createLoopPredicationPass()" leaks it.
#  100|         (void) llvm::createLazyValueInfoPass();
#  101|         (void) llvm::createLoopExtractorPass();
#  102|->       (void) llvm::createLoopPredicationPass();
#  103|         (void) llvm::createLoopSimplifyPass();
#  104|         (void) llvm::createLoopSimplifyCFGPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:104: alloc_fn: Storage is returned from allocation function "createLoopSimplifyCFGPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:104: leaked_storage: Failing to save or free storage allocated by "llvm::createLoopSimplifyCFGPass()" leaks it.
#  102|         (void) llvm::createLoopPredicationPass();
#  103|         (void) llvm::createLoopSimplifyPass();
#  104|->       (void) llvm::createLoopSimplifyCFGPass();
#  105|         (void) llvm::createLoopStrengthReducePass();
#  106|         (void) llvm::createLoopUnrollPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:107: alloc_fn: Storage is returned from allocation function "createLoopRotatePass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:107: leaked_storage: Failing to save or free storage allocated by "llvm::createLoopRotatePass(-1, false)" leaks it.
#  105|         (void) llvm::createLoopStrengthReducePass();
#  106|         (void) llvm::createLoopUnrollPass();
#  107|->       (void) llvm::createLoopRotatePass();
#  108|         (void) llvm::createLowerConstantIntrinsicsPass();
#  109|         (void) llvm::createLowerExpectIntrinsicPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:109: alloc_fn: Storage is returned from allocation function "createLowerExpectIntrinsicPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:109: leaked_storage: Failing to save or free storage allocated by "llvm::createLowerExpectIntrinsicPass()" leaks it.
#  107|         (void) llvm::createLoopRotatePass();
#  108|         (void) llvm::createLowerConstantIntrinsicsPass();
#  109|->       (void) llvm::createLowerExpectIntrinsicPass();
#  110|         (void) llvm::createLowerGlobalDtorsLegacyPass();
#  111|         (void) llvm::createLowerInvokePass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:115: alloc_fn: Storage is returned from allocation function "createPromoteMemoryToRegisterPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:115: leaked_storage: Failing to save or free storage allocated by "llvm::createPromoteMemoryToRegisterPass(false)" leaks it.
#  113|         (void) llvm::createNaryReassociatePass();
#  114|         (void) llvm::createObjCARCContractPass();
#  115|->       (void) llvm::createPromoteMemoryToRegisterPass();
#  116|         (void) llvm::createDemoteRegisterToMemoryPass();
#  117|         (void)llvm::createPostDomOnlyPrinterWrapperPassPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:116: alloc_fn: Storage is returned from allocation function "createDemoteRegisterToMemoryPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:116: leaked_storage: Failing to save or free storage allocated by "llvm::createDemoteRegisterToMemoryPass()" leaks it.
#  114|         (void) llvm::createObjCARCContractPass();
#  115|         (void) llvm::createPromoteMemoryToRegisterPass();
#  116|->       (void) llvm::createDemoteRegisterToMemoryPass();
#  117|         (void)llvm::createPostDomOnlyPrinterWrapperPassPass();
#  118|         (void)llvm::createPostDomPrinterWrapperPassPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:122: alloc_fn: Storage is returned from allocation function "createRedundantDbgInstEliminationPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:122: leaked_storage: Failing to save or free storage allocated by "llvm::createRedundantDbgInstEliminationPass()" leaks it.
#  120|         (void)llvm::createPostDomViewerWrapperPassPass();
#  121|         (void) llvm::createReassociatePass();
#  122|->       (void) llvm::createRedundantDbgInstEliminationPass();
#  123|         (void) llvm::createRegionInfoPass();
#  124|         (void) llvm::createRegionOnlyPrinterPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:133: alloc_fn: Storage is returned from allocation function "createUnifyFunctionExitNodesPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:133: leaked_storage: Failing to save or free storage allocated by "llvm::createUnifyFunctionExitNodesPass()" leaks it.
#  131|         (void) llvm::createTailCallEliminationPass();
#  132|         (void)llvm::createTLSVariableHoistPass();
#  133|->       (void) llvm::createUnifyFunctionExitNodesPass();
#  134|         (void) llvm::createInstCountPass();
#  135|         (void) llvm::createConstantHoistingPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:134: alloc_fn: Storage is returned from allocation function "createInstCountPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:134: leaked_storage: Failing to save or free storage allocated by "llvm::createInstCountPass()" leaks it.
#  132|         (void)llvm::createTLSVariableHoistPass();
#  133|         (void) llvm::createUnifyFunctionExitNodesPass();
#  134|->       (void) llvm::createInstCountPass();
#  135|         (void) llvm::createConstantHoistingPass();
#  136|         (void) llvm::createCodeGenPreparePass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:136: alloc_fn: Storage is returned from allocation function "createCodeGenPreparePass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:136: leaked_storage: Failing to save or free storage allocated by "llvm::createCodeGenPreparePass()" leaks it.
#  134|         (void) llvm::createInstCountPass();
#  135|         (void) llvm::createConstantHoistingPass();
#  136|->       (void) llvm::createCodeGenPreparePass();
#  137|         (void) llvm::createEarlyCSEPass();
#  138|         (void) llvm::createMergedLoadStoreMotionPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:138: alloc_fn: Storage is returned from allocation function "createMergedLoadStoreMotionPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:138: leaked_storage: Failing to save or free storage allocated by "llvm::createMergedLoadStoreMotionPass(false)" leaks it.
#  136|         (void) llvm::createCodeGenPreparePass();
#  137|         (void) llvm::createEarlyCSEPass();
#  138|->       (void) llvm::createMergedLoadStoreMotionPass();
#  139|         (void) llvm::createGVNPass();
#  140|         (void) llvm::createPostDomTree();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:143: alloc_fn: Storage is returned from allocation function "createExpandMemCmpPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:143: leaked_storage: Failing to save or free storage allocated by "llvm::createExpandMemCmpPass()" leaks it.
#  141|         (void) llvm::createMergeICmpsLegacyPass();
#  142|         (void) llvm::createExpandLargeDivRemPass();
#  143|->       (void) llvm::createExpandMemCmpPass();
#  144|         (void) llvm::createExpandVectorPredicationPass();
#  145|         std::string buf;

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:153: alloc_fn: Storage is returned from allocation function "createScalarizerPass".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:153: leaked_storage: Failing to save or free storage allocated by "llvm::createScalarizerPass()" leaks it.
#  151|         (void) llvm::createLoadStoreVectorizerPass();
#  152|         (void) llvm::createPartiallyInlineLibCallsPass();
#  153|->       (void) llvm::createScalarizerPass();
#  154|         (void) llvm::createSeparateConstOffsetFromGEPPass();
#  155|         (void) llvm::createSpeculativeExecutionPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:164: alloc_fn: Storage is returned from allocation function "operator new".
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:164: leaked_storage: Failing to save or free storage allocated by "new llvm::IntervalPartition" leaks it.
#  162|         (void)llvm::createSelectOptimizePass();
#  163|   
#  164|->       (void)new llvm::IntervalPartition();
#  165|         (void)new llvm::ScalarEvolutionWrapperPass();
#  166|         llvm::Function::Create(nullptr, llvm::GlobalValue::ExternalLinkage)->viewCFGOnly();

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:178: constructor_uses_global_object: The constructor of global object "<unnamed>::ForcePassLinking" itself makes use of global object "<unnamed>::ForceSkipUniformRegions" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ForcePassLinking" might be created before "<unnamed>::ForceSkipUniformRegions" is available.
#  176|         (void) llvm::sys::RunningOnValgrind();
#  177|       }
#  178|->   } ForcePassLinking; // Force link by creating a global definition.
#  179|   }
#  180|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:178: constructor_uses_global_object: The constructor of global object "<unnamed>::ForcePassLinking" itself makes use of global object "CFGFuncName[abi:cxx11]" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ForcePassLinking" might be created before "CFGFuncName[abi:cxx11]" is available.
#  176|         (void) llvm::sys::RunningOnValgrind();
#  177|       }
#  178|->   } ForcePassLinking; // Force link by creating a global definition.
#  179|   }
#  180|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:178: constructor_uses_global_object: The constructor of global object "<unnamed>::ForcePassLinking" itself makes use of global object "DefaultRotationThreshold" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ForcePassLinking" might be created before "DefaultRotationThreshold" is available.
#  176|         (void) llvm::sys::RunningOnValgrind();
#  177|       }
#  178|->   } ForcePassLinking; // Force link by creating a global definition.
#  179|   }
#  180|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:178: constructor_uses_global_object: The constructor of global object "<unnamed>::ForcePassLinking" itself makes use of global object "UserBonusInstThreshold" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ForcePassLinking" might be created before "UserBonusInstThreshold" is available.
#  176|         (void) llvm::sys::RunningOnValgrind();
#  177|       }
#  178|->   } ForcePassLinking; // Force link by creating a global definition.
#  179|   }
#  180|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/LinkAllPasses.h:178: constructor_uses_global_object: The constructor of global object "<unnamed>::ForcePassLinking" itself makes use of global object "llvm::SetLicmMssaOptCap" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ForcePassLinking" might be created before "llvm::SetLicmMssaOptCap" is available.
#  176|         (void) llvm::sys::RunningOnValgrind();
#  177|       }
#  178|->   } ForcePassLinking; // Force link by creating a global definition.
#  179|   }
#  180|   

Error: UNINIT (CWE-457):
llvm-17.0.6.src/include/llvm/ProfileData/MemProf.h:103: var_decl: Declaring variable "List".
llvm-17.0.6.src/include/llvm/ProfileData/MemProf.h:107: uninit_use: Using uninitialized value "List". Field "List.InlineElts" is uninitialized.
#  105|   #include "llvm/ProfileData/MIBEntryDef.inc"
#  106|   #undef MIBEntryDef
#  107|->     return List;
#  108|     }
#  109|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/include/llvm/Support/PluginLoader.h:35: constructor_uses_global_object: The constructor of global object "llvm::LoadOpt[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::LoadOpt[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|     // This causes operator= above to be invoked for every -load option.
#   34|     static cl::opt<PluginLoader, false, cl::parser<std::string>>
#   35|->       LoadOpt("load", cl::value_desc("pluginfilename"),
#   36|                 cl::desc("Load the specified plugin"));
#   37|   #endif

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/AliasAnalysis.cpp:66: constructor_uses_global_object: The constructor of global object "llvm::DisableBasicAA" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::DisableBasicAA" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   64|   /// Allow disabling BasicAA from the AA results. This is particularly useful
#   65|   /// when testing to isolate a single AA implementation.
#   66|-> cl::opt<bool> DisableBasicAA("disable-basic-aa", cl::Hidden, cl::init(false));
#   67|   } // namespace llvm
#   68|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/AliasAnalysisEvaluator.cpp:23: constructor_uses_global_object: The constructor of global object "PrintAll" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintAll" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   21|   using namespace llvm;
#   22|   
#   23|-> static cl::opt<bool> PrintAll("print-all-alias-modref-info", cl::ReallyHidden);
#   24|   
#   25|   static cl::opt<bool> PrintNoAlias("print-no-aliases", cl::ReallyHidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/AliasAnalysisEvaluator.cpp:25: constructor_uses_global_object: The constructor of global object "PrintNoAlias" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintNoAlias" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   23|   static cl::opt<bool> PrintAll("print-all-alias-modref-info", cl::ReallyHidden);
#   24|   
#   25|-> static cl::opt<bool> PrintNoAlias("print-no-aliases", cl::ReallyHidden);
#   26|   static cl::opt<bool> PrintMayAlias("print-may-aliases", cl::ReallyHidden);
#   27|   static cl::opt<bool> PrintPartialAlias("print-partial-aliases", cl::ReallyHidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/AliasAnalysisEvaluator.cpp:26: constructor_uses_global_object: The constructor of global object "PrintMayAlias" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintMayAlias" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   24|   
#   25|   static cl::opt<bool> PrintNoAlias("print-no-aliases", cl::ReallyHidden);
#   26|-> static cl::opt<bool> PrintMayAlias("print-may-aliases", cl::ReallyHidden);
#   27|   static cl::opt<bool> PrintPartialAlias("print-partial-aliases", cl::ReallyHidden);
#   28|   static cl::opt<bool> PrintMustAlias("print-must-aliases", cl::ReallyHidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/AliasAnalysisEvaluator.cpp:27: constructor_uses_global_object: The constructor of global object "PrintPartialAlias" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintPartialAlias" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   25|   static cl::opt<bool> PrintNoAlias("print-no-aliases", cl::ReallyHidden);
#   26|   static cl::opt<bool> PrintMayAlias("print-may-aliases", cl::ReallyHidden);
#   27|-> static cl::opt<bool> PrintPartialAlias("print-partial-aliases", cl::ReallyHidden);
#   28|   static cl::opt<bool> PrintMustAlias("print-must-aliases", cl::ReallyHidden);
#   29|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/AliasAnalysisEvaluator.cpp:28: constructor_uses_global_object: The constructor of global object "PrintMustAlias" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintMustAlias" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   26|   static cl::opt<bool> PrintMayAlias("print-may-aliases", cl::ReallyHidden);
#   27|   static cl::opt<bool> PrintPartialAlias("print-partial-aliases", cl::ReallyHidden);
#   28|-> static cl::opt<bool> PrintMustAlias("print-must-aliases", cl::ReallyHidden);
#   29|   
#   30|   static cl::opt<bool> PrintNoModRef("print-no-modref", cl::ReallyHidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/AliasAnalysisEvaluator.cpp:30: constructor_uses_global_object: The constructor of global object "PrintNoModRef" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintNoModRef" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   28|   static cl::opt<bool> PrintMustAlias("print-must-aliases", cl::ReallyHidden);
#   29|   
#   30|-> static cl::opt<bool> PrintNoModRef("print-no-modref", cl::ReallyHidden);
#   31|   static cl::opt<bool> PrintRef("print-ref", cl::ReallyHidden);
#   32|   static cl::opt<bool> PrintMod("print-mod", cl::ReallyHidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/AliasAnalysisEvaluator.cpp:31: constructor_uses_global_object: The constructor of global object "PrintRef" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintRef" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   29|   
#   30|   static cl::opt<bool> PrintNoModRef("print-no-modref", cl::ReallyHidden);
#   31|-> static cl::opt<bool> PrintRef("print-ref", cl::ReallyHidden);
#   32|   static cl::opt<bool> PrintMod("print-mod", cl::ReallyHidden);
#   33|   static cl::opt<bool> PrintModRef("print-modref", cl::ReallyHidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/AliasAnalysisEvaluator.cpp:32: constructor_uses_global_object: The constructor of global object "PrintMod" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintMod" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   30|   static cl::opt<bool> PrintNoModRef("print-no-modref", cl::ReallyHidden);
#   31|   static cl::opt<bool> PrintRef("print-ref", cl::ReallyHidden);
#   32|-> static cl::opt<bool> PrintMod("print-mod", cl::ReallyHidden);
#   33|   static cl::opt<bool> PrintModRef("print-modref", cl::ReallyHidden);
#   34|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/AliasAnalysisEvaluator.cpp:33: constructor_uses_global_object: The constructor of global object "PrintModRef" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintModRef" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   31|   static cl::opt<bool> PrintRef("print-ref", cl::ReallyHidden);
#   32|   static cl::opt<bool> PrintMod("print-mod", cl::ReallyHidden);
#   33|-> static cl::opt<bool> PrintModRef("print-modref", cl::ReallyHidden);
#   34|   
#   35|   static cl::opt<bool> EvalAAMD("evaluate-aa-metadata", cl::ReallyHidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/AliasAnalysisEvaluator.cpp:35: constructor_uses_global_object: The constructor of global object "EvalAAMD" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EvalAAMD" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|   static cl::opt<bool> PrintModRef("print-modref", cl::ReallyHidden);
#   34|   
#   35|-> static cl::opt<bool> EvalAAMD("evaluate-aa-metadata", cl::ReallyHidden);
#   36|   
#   37|   static void PrintResults(AliasResult AR, bool P,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/AliasSetTracker.cpp:38: constructor_uses_global_object: The constructor of global object "SaturationThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SaturationThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   36|   
#   37|   static cl::opt<unsigned>
#   38|->     SaturationThreshold("alias-set-saturation-threshold", cl::Hidden,
#   39|                           cl::init(250),
#   40|                           cl::desc("The maximum number of pointers may-alias "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/AssumptionCache.cpp:40: constructor_uses_global_object: The constructor of global object "VerifyAssumptionCache" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyAssumptionCache" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   38|   
#   39|   static cl::opt<bool>
#   40|->     VerifyAssumptionCache("verify-assumption-cache", cl::Hidden,
#   41|                             cl::desc("Enable verification of assumption cache"),
#   42|                             cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/BasicAliasAnalysis.cpp:68: constructor_uses_global_object: The constructor of global object "EnableRecPhiAnalysis" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableRecPhiAnalysis" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   66|   
#   67|   /// Enable analysis of recursive PHI nodes.
#   68|-> static cl::opt<bool> EnableRecPhiAnalysis("basic-aa-recphi", cl::Hidden,
#   69|                                             cl::init(true));
#   70|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/BasicAliasAnalysis.cpp:71: constructor_uses_global_object: The constructor of global object "EnableSeparateStorageAnalysis" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSeparateStorageAnalysis" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   69|                                             cl::init(true));
#   70|   
#   71|-> static cl::opt<bool> EnableSeparateStorageAnalysis("basic-aa-separate-storage",
#   72|                                                      cl::Hidden, cl::init(false));
#   73|   

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Analysis/BasicAliasAnalysis.cpp:1058: tainted_data_return: Called function "V2Size.getValue()", and a possible return value is known to be less than zero.
llvm-17.0.6.src/lib/Analysis/BasicAliasAnalysis.cpp:1058: underflow: The cast of "V2Size.getValue()" to a signed type could result in a negative number.
# 1056|     // If an inbounds GEP would have to start from an out of bounds address
# 1057|     // for the two to alias, then we can assume noalias.
# 1058|->   if (*DecompGEP1.InBounds && DecompGEP1.VarIndices.empty() &&
# 1059|         V2Size.hasValue() && DecompGEP1.Offset.sge(V2Size.getValue()) &&
# 1060|         isBaseOfObject(DecompGEP2.Base))

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/BlockFrequencyInfo.cpp:35: constructor_uses_global_object: The constructor of global object "ViewBlockFreqPropagationDAG" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ViewBlockFreqPropagationDAG" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|   #define DEBUG_TYPE "block-freq"
#   34|   
#   35|-> static cl::opt<GVDAGType> ViewBlockFreqPropagationDAG(
#   36|       "view-block-freq-propagation-dags", cl::Hidden,
#   37|       cl::desc("Pop up a window to show a dag displaying how block "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/BlockFrequencyInfo.cpp:51: constructor_uses_global_object: The constructor of global object "llvm::ViewBlockFreqFuncName[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ViewBlockFreqFuncName[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   49|   namespace llvm {
#   50|   cl::opt<std::string>
#   51|->     ViewBlockFreqFuncName("view-bfi-func-name", cl::Hidden,
#   52|                             cl::desc("The option to specify "
#   53|                                      "the name of the function "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/BlockFrequencyInfo.cpp:57: constructor_uses_global_object: The constructor of global object "llvm::ViewHotFreqPercent" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ViewHotFreqPercent" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   55|   
#   56|   cl::opt<unsigned>
#   57|->     ViewHotFreqPercent("view-hot-freq-percent", cl::init(10), cl::Hidden,
#   58|                          cl::desc("An integer in percent used to specify "
#   59|                                   "the hot blocks/edges to be displayed "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/BlockFrequencyInfo.cpp:65: constructor_uses_global_object: The constructor of global object "llvm::PGOViewCounts" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::PGOViewCounts" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|   
#   64|   // Command line option to turn on CFG dot or text dump after profile annotation.
#   65|-> cl::opt<PGOViewCountsType> PGOViewCounts(
#   66|       "pgo-view-counts", cl::Hidden,
#   67|       cl::desc("A boolean option to show CFG dag or text with "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/BlockFrequencyInfo.cpp:81: constructor_uses_global_object: The constructor of global object "llvm::PrintBlockFreq" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::PrintBlockFreq" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   79|                  clEnumValN(PGOVCT_Text, "text", "show in text.")));
#   80|   
#   81|-> static cl::opt<bool> PrintBlockFreq(
#   82|       "print-bfi", cl::init(false), cl::Hidden,
#   83|       cl::desc("Print the block frequency info."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/BlockFrequencyInfo.cpp:85: constructor_uses_global_object: The constructor of global object "llvm::PrintBlockFreqFuncName[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::PrintBlockFreqFuncName[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   83|       cl::desc("Print the block frequency info."));
#   84|   
#   85|-> cl::opt<std::string> PrintBlockFreqFuncName(
#   86|       "print-bfi-func-name", cl::Hidden,
#   87|       cl::desc("The option to specify the name of the function "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/BlockFrequencyInfoImpl.cpp:44: constructor_uses_global_object: The constructor of global object "llvm::CheckBFIUnknownBlockQueries" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::CheckBFIUnknownBlockQueries" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   42|   
#   43|   namespace llvm {
#   44|-> cl::opt<bool> CheckBFIUnknownBlockQueries(
#   45|       "check-bfi-unknown-block-queries",
#   46|       cl::init(false), cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/BlockFrequencyInfoImpl.cpp:50: constructor_uses_global_object: The constructor of global object "llvm::UseIterativeBFIInference" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::UseIterativeBFIInference" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   48|                "for debugging missed BFI updates"));
#   49|   
#   50|-> cl::opt<bool> UseIterativeBFIInference(
#   51|       "use-iterative-bfi-inference", cl::Hidden,
#   52|       cl::desc("Apply an iterative post-processing to infer correct BFI counts"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/BlockFrequencyInfoImpl.cpp:54: constructor_uses_global_object: The constructor of global object "llvm::IterativeBFIMaxIterationsPerBlock" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::IterativeBFIMaxIterationsPerBlock" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|       cl::desc("Apply an iterative post-processing to infer correct BFI counts"));
#   53|   
#   54|-> cl::opt<unsigned> IterativeBFIMaxIterationsPerBlock(
#   55|       "iterative-bfi-max-iterations-per-block", cl::init(1000), cl::Hidden,
#   56|       cl::desc("Iterative inference: maximum number of update iterations "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/BlockFrequencyInfoImpl.cpp:59: constructor_uses_global_object: The constructor of global object "llvm::IterativeBFIPrecision" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::IterativeBFIPrecision" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   57|                "per block"));
#   58|   
#   59|-> cl::opt<double> IterativeBFIPrecision(
#   60|       "iterative-bfi-precision", cl::init(1e-12), cl::Hidden,
#   61|       cl::desc("Iterative inference: delta convergence precision; smaller values "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/BranchProbabilityInfo.cpp:54: constructor_uses_global_object: The constructor of global object "PrintBranchProb" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintBranchProb" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|   #define DEBUG_TYPE "branch-prob"
#   53|   
#   54|-> static cl::opt<bool> PrintBranchProb(
#   55|       "print-bpi", cl::init(false), cl::Hidden,
#   56|       cl::desc("Print the branch probability info."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/BranchProbabilityInfo.cpp:58: constructor_uses_global_object: The constructor of global object "PrintBranchProbFuncName[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintBranchProbFuncName[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   56|       cl::desc("Print the branch probability info."));
#   57|   
#   58|-> cl::opt<std::string> PrintBranchProbFuncName(
#   59|       "print-bpi-func-name", cl::Hidden,
#   60|       cl::desc("The option to specify the name of the function "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CFG.cpp:24: constructor_uses_global_object: The constructor of global object "DefaultMaxBBsToExplore" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DefaultMaxBBsToExplore" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   22|   // two basic blocks. This is kept reasonably small to limit compile time when
#   23|   // repeatedly used by clients of this analysis (such as captureTracking).
#   24|-> static cl::opt<unsigned> DefaultMaxBBsToExplore(
#   25|       "dom-tree-reachability-max-bbs-to-explore", cl::Hidden,
#   26|       cl::desc("Max number of BBs to explore for reachability analysis"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CFGPrinter.cpp:31: constructor_uses_global_object: The constructor of global object "CFGFuncName[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CFGFuncName[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   29|   
#   30|   static cl::opt<std::string>
#   31|->     CFGFuncName("cfg-func-name", cl::Hidden,
#   32|                   cl::desc("The name of a function (or its substring)"
#   33|                            " whose CFG is viewed/printed."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CFGPrinter.cpp:35: constructor_uses_global_object: The constructor of global object "CFGDotFilenamePrefix[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CFGDotFilenamePrefix[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|                            " whose CFG is viewed/printed."));
#   34|   
#   35|-> static cl::opt<std::string> CFGDotFilenamePrefix(
#   36|       "cfg-dot-filename-prefix", cl::Hidden,
#   37|       cl::desc("The prefix used for the CFG dot file names."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CFGPrinter.cpp:39: constructor_uses_global_object: The constructor of global object "HideUnreachablePaths" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HideUnreachablePaths" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   37|       cl::desc("The prefix used for the CFG dot file names."));
#   38|   
#   39|-> static cl::opt<bool> HideUnreachablePaths("cfg-hide-unreachable-paths",
#   40|                                             cl::init(false));
#   41|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CFGPrinter.cpp:42: constructor_uses_global_object: The constructor of global object "HideDeoptimizePaths" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HideDeoptimizePaths" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   40|                                             cl::init(false));
#   41|   
#   42|-> static cl::opt<bool> HideDeoptimizePaths("cfg-hide-deoptimize-paths",
#   43|                                            cl::init(false));
#   44|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CFGPrinter.cpp:45: constructor_uses_global_object: The constructor of global object "HideColdPaths" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HideColdPaths" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   43|                                            cl::init(false));
#   44|   
#   45|-> static cl::opt<double> HideColdPaths(
#   46|       "cfg-hide-cold-paths", cl::init(0.0),
#   47|       cl::desc("Hide blocks with relative frequency below the given value"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CFGPrinter.cpp:49: constructor_uses_global_object: The constructor of global object "ShowHeatColors" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ShowHeatColors" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   47|       cl::desc("Hide blocks with relative frequency below the given value"));
#   48|   
#   49|-> static cl::opt<bool> ShowHeatColors("cfg-heat-colors", cl::init(true),
#   50|                                       cl::Hidden,
#   51|                                       cl::desc("Show heat colors in CFG"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CFGPrinter.cpp:53: constructor_uses_global_object: The constructor of global object "UseRawEdgeWeight" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseRawEdgeWeight" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   51|                                       cl::desc("Show heat colors in CFG"));
#   52|   
#   53|-> static cl::opt<bool> UseRawEdgeWeight("cfg-raw-weights", cl::init(false),
#   54|                                         cl::Hidden,
#   55|                                         cl::desc("Use raw weights for labels. "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CFGPrinter.cpp:59: constructor_uses_global_object: The constructor of global object "ShowEdgeWeight" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ShowEdgeWeight" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   57|   
#   58|   static cl::opt<bool>
#   59|->     ShowEdgeWeight("cfg-weights", cl::init(false), cl::Hidden,
#   60|                      cl::desc("Show edges labeled with weights"));
#   61|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CGSCCPassManager.cpp:41: constructor_uses_global_object: The constructor of global object "llvm::AbortOnMaxDevirtIterationsReached" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::AbortOnMaxDevirtIterationsReached" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   39|   // template typedefs.
#   40|   namespace llvm {
#   41|-> static cl::opt<bool> AbortOnMaxDevirtIterationsReached(
#   42|       "abort-on-max-devirt-iterations-reached",
#   43|       cl::desc("Abort when the max iterations for devirtualization CGSCC repeat "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CallGraphSCCPass.cpp:47: constructor_uses_global_object: The constructor of global object "llvm::MaxDevirtIterations" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::MaxDevirtIterations" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   45|   
#   46|   namespace llvm {
#   47|-> cl::opt<unsigned> MaxDevirtIterations("max-devirt-iterations", cl::ReallyHidden,
#   48|                                         cl::init(4));
#   49|   }

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CallPrinter.cpp:37: constructor_uses_global_object: The constructor of global object "ShowHeatColors" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ShowHeatColors" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   35|   // FIXME:
#   36|   // Need to show real counts when profile data is available
#   37|-> static cl::opt<bool> ShowHeatColors("callgraph-heat-colors", cl::init(false),
#   38|                                       cl::Hidden,
#   39|                                       cl::desc("Show heat colors in call-graph"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CallPrinter.cpp:42: constructor_uses_global_object: The constructor of global object "ShowEdgeWeight" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ShowEdgeWeight" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   40|   
#   41|   static cl::opt<bool>
#   42|->     ShowEdgeWeight("callgraph-show-weights", cl::init(false), cl::Hidden,
#   43|                          cl::desc("Show edges labeled with weights"));
#   44|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CallPrinter.cpp:46: constructor_uses_global_object: The constructor of global object "CallMultiGraph" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CallMultiGraph" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   44|   
#   45|   static cl::opt<bool>
#   46|->     CallMultiGraph("callgraph-multigraph", cl::init(false), cl::Hidden,
#   47|               cl::desc("Show call-multigraph (do not remove parallel edges)"));
#   48|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CallPrinter.cpp:49: constructor_uses_global_object: The constructor of global object "CallGraphDotFilenamePrefix[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CallGraphDotFilenamePrefix[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   47|               cl::desc("Show call-multigraph (do not remove parallel edges)"));
#   48|   
#   49|-> static cl::opt<std::string> CallGraphDotFilenamePrefix(
#   50|       "callgraph-dot-filename-prefix", cl::Hidden,
#   51|       cl::desc("The prefix used for the CallGraph dot file names."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CaptureTracking.cpp:48: constructor_uses_global_object: The constructor of global object "DefaultMaxUsesToExplore" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DefaultMaxUsesToExplore" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   46|   /// don't have this cap at all.
#   47|   static cl::opt<unsigned>
#   48|->     DefaultMaxUsesToExplore("capture-tracking-max-uses-to-explore", cl::Hidden,
#   49|                               cl::desc("Maximal number of uses to explore."),
#   50|                               cl::init(100));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CostModel.cpp:31: constructor_uses_global_object: The constructor of global object "CostKind" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CostKind" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   29|   using namespace llvm;
#   30|   
#   31|-> static cl::opt<TargetTransformInfo::TargetCostKind> CostKind(
#   32|       "cost-kind", cl::desc("Target cost kind"),
#   33|       cl::init(TargetTransformInfo::TCK_RecipThroughput),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/CostModel.cpp:43: constructor_uses_global_object: The constructor of global object "TypeBasedIntrinsicCost" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TypeBasedIntrinsicCost" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   41|                             "size-latency", "Code size and latency")));
#   42|   
#   43|-> static cl::opt<bool> TypeBasedIntrinsicCost("type-based-intrinsic-cost",
#   44|       cl::desc("Calculate intrinsics cost based only on argument types"),
#   45|       cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/DDG.cpp:19: constructor_uses_global_object: The constructor of global object "SimplifyDDG" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SimplifyDDG" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   17|   using namespace llvm;
#   18|   
#   19|-> static cl::opt<bool> SimplifyDDG(
#   20|       "ddg-simplify", cl::init(true), cl::Hidden,
#   21|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/DDG.cpp:24: constructor_uses_global_object: The constructor of global object "CreatePiBlocks" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CreatePiBlocks" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   22|           "Simplify DDG by merging nodes that have less interesting edges."));
#   23|   
#   24|-> static cl::opt<bool> CreatePiBlocks("ddg-pi-blocks", cl::init(true), cl::Hidden,
#   25|                                       cl::desc("Create pi-block nodes."));
#   26|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/DDGPrinter.cpp:21: constructor_uses_global_object: The constructor of global object "DotOnly" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DotOnly" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   19|   using namespace llvm;
#   20|   
#   21|-> static cl::opt<bool> DotOnly("dot-ddg-only", cl::Hidden,
#   22|                                cl::desc("simple ddg dot graph"));
#   23|   static cl::opt<std::string> DDGDotFilenamePrefix(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/DDGPrinter.cpp:23: constructor_uses_global_object: The constructor of global object "DDGDotFilenamePrefix[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DDGDotFilenamePrefix[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   21|   static cl::opt<bool> DotOnly("dot-ddg-only", cl::Hidden,
#   22|                                cl::desc("simple ddg dot graph"));
#   23|-> static cl::opt<std::string> DDGDotFilenamePrefix(
#   24|       "dot-ddg-filename-prefix", cl::init("ddg"), cl::Hidden,
#   25|       cl::desc("The prefix used for the DDG dot file names."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/DependenceAnalysis.cpp:109: constructor_uses_global_object: The constructor of global object "Delinearize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Delinearize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  107|   
#  108|   static cl::opt<bool>
#  109|->     Delinearize("da-delinearize", cl::init(true), cl::Hidden,
#  110|                   cl::desc("Try to delinearize array references."));
#  111|   static cl::opt<bool> DisableDelinearizationChecks(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/DependenceAnalysis.cpp:111: constructor_uses_global_object: The constructor of global object "DisableDelinearizationChecks" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableDelinearizationChecks" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  109|       Delinearize("da-delinearize", cl::init(true), cl::Hidden,
#  110|                   cl::desc("Try to delinearize array references."));
#  111|-> static cl::opt<bool> DisableDelinearizationChecks(
#  112|       "da-disable-delinearization-checks", cl::Hidden,
#  113|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/DependenceAnalysis.cpp:119: constructor_uses_global_object: The constructor of global object "MIVMaxLevelThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MIVMaxLevelThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  117|           "dimension to underflow or overflow into another dimension."));
#  118|   
#  119|-> static cl::opt<unsigned> MIVMaxLevelThreshold(
#  120|       "da-miv-max-level-threshold", cl::init(7), cl::Hidden,
#  121|       cl::desc("Maximum depth allowed for the recursive algorithm used to "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/GlobalsModRef.cpp:54: constructor_uses_global_object: The constructor of global object "EnableUnsafeGlobalsModRefAliasResults" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableUnsafeGlobalsModRefAliasResults" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|   // sensitivity and no known issues. The option also makes it easy to evaluate
#   53|   // the performance impact of these results.
#   54|-> static cl::opt<bool> EnableUnsafeGlobalsModRefAliasResults(
#   55|       "enable-unsafe-globalsmodref-alias-results", cl::init(false), cl::Hidden);
#   56|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/IRSimilarityIdentifier.cpp:29: constructor_uses_global_object: The constructor of global object "llvm::DisableBranches" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::DisableBranches" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   27|   namespace llvm {
#   28|   cl::opt<bool>
#   29|->     DisableBranches("no-ir-sim-branch-matching", cl::init(false),
#   30|                       cl::ReallyHidden,
#   31|                       cl::desc("disable similarity matching, and outlining, "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/IRSimilarityIdentifier.cpp:35: constructor_uses_global_object: The constructor of global object "llvm::DisableIndirectCalls" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::DisableIndirectCalls" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|   
#   34|   cl::opt<bool>
#   35|->     DisableIndirectCalls("no-ir-sim-indirect-calls", cl::init(false),
#   36|                            cl::ReallyHidden,
#   37|                            cl::desc("disable outlining indirect calls."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/IRSimilarityIdentifier.cpp:40: constructor_uses_global_object: The constructor of global object "llvm::MatchCallsByName" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::MatchCallsByName" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   38|   
#   39|   cl::opt<bool>
#   40|->     MatchCallsByName("ir-sim-calls-by-name", cl::init(false), cl::ReallyHidden,
#   41|                        cl::desc("only allow matching call instructions if the "
#   42|                                 "name and type signature match."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/IRSimilarityIdentifier.cpp:45: constructor_uses_global_object: The constructor of global object "llvm::DisableIntrinsics" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::DisableIntrinsics" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   43|   
#   44|   cl::opt<bool>
#   45|->     DisableIntrinsics("no-ir-sim-intrinsics", cl::init(false), cl::ReallyHidden,
#   46|                         cl::desc("Don't match or outline intrinsics"));
#   47|   } // namespace llvm

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ImportedFunctionsInliningStatistics.cpp:27: constructor_uses_global_object: The constructor of global object "llvm::InlinerFunctionImportStats" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::InlinerFunctionImportStats" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   25|   
#   26|   namespace llvm {
#   27|-> cl::opt<InlinerFunctionImportStatsOpts> InlinerFunctionImportStats(
#   28|       "inliner-function-import-stats",
#   29|       cl::init(InlinerFunctionImportStatsOpts::No),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/IndirectCallPromotionAnalysis.cpp:28: constructor_uses_global_object: The constructor of global object "ICPRemainingPercentThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ICPRemainingPercentThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   26|   // The percent threshold for the direct-call target (this call site vs the
#   27|   // remaining call count) for it to be considered as the promotion target.
#   28|-> static cl::opt<unsigned> ICPRemainingPercentThreshold(
#   29|       "icp-remaining-percent-threshold", cl::init(30), cl::Hidden,
#   30|       cl::desc("The percentage threshold against remaining unpromoted indirect "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/IndirectCallPromotionAnalysis.cpp:36: constructor_uses_global_object: The constructor of global object "ICPTotalPercentThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ICPTotalPercentThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   34|   // total call count) for it to be considered as the promotion target.
#   35|   static cl::opt<unsigned>
#   36|->     ICPTotalPercentThreshold("icp-total-percent-threshold", cl::init(5),
#   37|                                cl::Hidden,
#   38|                                cl::desc("The percentage threshold against total "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/IndirectCallPromotionAnalysis.cpp:44: constructor_uses_global_object: The constructor of global object "MaxNumPromotions" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxNumPromotions" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   42|   // callsite.
#   43|   static cl::opt<unsigned>
#   44|->     MaxNumPromotions("icp-max-prom", cl::init(3), cl::Hidden,
#   45|                        cl::desc("Max number of promotions for a single indirect "
#   46|                                 "call callsite"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineAdvisor.cpp:43: constructor_uses_global_object: The constructor of global object "InlineRemarkAttribute" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InlineRemarkAttribute" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   41|   /// Flag to add inline messages as callsite attributes 'inline-remark'.
#   42|   static cl::opt<bool>
#   43|->     InlineRemarkAttribute("inline-remark-attribute", cl::init(false),
#   44|                             cl::Hidden,
#   45|                             cl::desc("Enable adding inline-remark attribute to"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineAdvisor.cpp:49: constructor_uses_global_object: The constructor of global object "EnableInlineDeferral" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableInlineDeferral" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   47|                                      " to be not inlined"));
#   48|   
#   49|-> static cl::opt<bool> EnableInlineDeferral("inline-deferral", cl::init(false),
#   50|                                             cl::Hidden,
#   51|                                             cl::desc("Enable deferred inlining"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineAdvisor.cpp:56: constructor_uses_global_object: The constructor of global object "InlineDeferralScale" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InlineDeferralScale" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   54|   // number tells shouldBeDeferred to only take the secondary cost into account.
#   55|   static cl::opt<int>
#   56|->     InlineDeferralScale("inline-deferral-scale",
#   57|                           cl::desc("Scale to limit the cost of inline deferral"),
#   58|                           cl::init(2), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineAdvisor.cpp:61: constructor_uses_global_object: The constructor of global object "AnnotateInlinePhase" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AnnotateInlinePhase" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   59|   
#   60|   static cl::opt<bool>
#   61|->     AnnotateInlinePhase("annotate-inline-phase", cl::Hidden, cl::init(false),
#   62|                           cl::desc("If true, annotate inline advisor remarks "
#   63|                                    "with LTO and pass information."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:57: constructor_uses_global_object: The constructor of global object "DefaultThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DefaultThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   55|   
#   56|   static cl::opt<int>
#   57|->     DefaultThreshold("inlinedefault-threshold", cl::Hidden, cl::init(225),
#   58|                        cl::desc("Default amount of inlining to perform"));
#   59|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:65: constructor_uses_global_object: The constructor of global object "IgnoreTTIInlineCompatible" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "IgnoreTTIInlineCompatible" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|   // some use cases. If we avoid adding the attribute, we need an option to avoid
#   64|   // checking these attributes.
#   65|-> static cl::opt<bool> IgnoreTTIInlineCompatible(
#   66|       "ignore-tti-inline-compatible", cl::Hidden, cl::init(false),
#   67|       cl::desc("Ignore TTI attributes compatibility check between callee/caller "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:70: constructor_uses_global_object: The constructor of global object "PrintInstructionComments" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintInstructionComments" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   68|                "during inline cost calculation"));
#   69|   
#   70|-> static cl::opt<bool> PrintInstructionComments(
#   71|       "print-instruction-comments", cl::Hidden, cl::init(false),
#   72|       cl::desc("Prints comments for instruction based on inline cost analysis"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:74: constructor_uses_global_object: The constructor of global object "InlineThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InlineThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   72|       cl::desc("Prints comments for instruction based on inline cost analysis"));
#   73|   
#   74|-> static cl::opt<int> InlineThreshold(
#   75|       "inline-threshold", cl::Hidden, cl::init(225),
#   76|       cl::desc("Control the amount of inlining to perform (default = 225)"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:78: constructor_uses_global_object: The constructor of global object "HintThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HintThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   76|       cl::desc("Control the amount of inlining to perform (default = 225)"));
#   77|   
#   78|-> static cl::opt<int> HintThreshold(
#   79|       "inlinehint-threshold", cl::Hidden, cl::init(325),
#   80|       cl::desc("Threshold for inlining functions with inline hint"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:83: constructor_uses_global_object: The constructor of global object "ColdCallSiteThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ColdCallSiteThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   81|   
#   82|   static cl::opt<int>
#   83|->     ColdCallSiteThreshold("inline-cold-callsite-threshold", cl::Hidden,
#   84|                             cl::init(45),
#   85|                             cl::desc("Threshold for inlining cold callsites"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:87: constructor_uses_global_object: The constructor of global object "InlineEnableCostBenefitAnalysis" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InlineEnableCostBenefitAnalysis" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   85|                             cl::desc("Threshold for inlining cold callsites"));
#   86|   
#   87|-> static cl::opt<bool> InlineEnableCostBenefitAnalysis(
#   88|       "inline-enable-cost-benefit-analysis", cl::Hidden, cl::init(false),
#   89|       cl::desc("Enable the cost-benefit analysis for the inliner"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:91: constructor_uses_global_object: The constructor of global object "InlineSavingsMultiplier" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InlineSavingsMultiplier" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   89|       cl::desc("Enable the cost-benefit analysis for the inliner"));
#   90|   
#   91|-> static cl::opt<int> InlineSavingsMultiplier(
#   92|       "inline-savings-multiplier", cl::Hidden, cl::init(8),
#   93|       cl::desc("Multiplier to multiply cycle savings by during inlining"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:96: constructor_uses_global_object: The constructor of global object "InlineSizeAllowance" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InlineSizeAllowance" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   94|   
#   95|   static cl::opt<int>
#   96|->     InlineSizeAllowance("inline-size-allowance", cl::Hidden, cl::init(100),
#   97|                           cl::desc("The maximum size of a callee that get's "
#   98|                                    "inlined without sufficient cycle savings"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:103: constructor_uses_global_object: The constructor of global object "ColdThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ColdThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  101|   // PGO before we actually hook up inliner with analysis passes such as BPI and
#  102|   // BFI.
#  103|-> static cl::opt<int> ColdThreshold(
#  104|       "inlinecold-threshold", cl::Hidden, cl::init(45),
#  105|       cl::desc("Threshold for inlining functions with cold attribute"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:108: constructor_uses_global_object: The constructor of global object "HotCallSiteThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HotCallSiteThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  106|   
#  107|   static cl::opt<int>
#  108|->     HotCallSiteThreshold("hot-callsite-threshold", cl::Hidden, cl::init(3000),
#  109|                            cl::desc("Threshold for hot callsites "));
#  110|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:111: constructor_uses_global_object: The constructor of global object "LocallyHotCallSiteThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LocallyHotCallSiteThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  109|                            cl::desc("Threshold for hot callsites "));
#  110|   
#  111|-> static cl::opt<int> LocallyHotCallSiteThreshold(
#  112|       "locally-hot-callsite-threshold", cl::Hidden, cl::init(525),
#  113|       cl::desc("Threshold for locally hot callsites "));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:115: constructor_uses_global_object: The constructor of global object "ColdCallSiteRelFreq" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ColdCallSiteRelFreq" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  113|       cl::desc("Threshold for locally hot callsites "));
#  114|   
#  115|-> static cl::opt<int> ColdCallSiteRelFreq(
#  116|       "cold-callsite-rel-freq", cl::Hidden, cl::init(2),
#  117|       cl::desc("Maximum block frequency, expressed as a percentage of caller's "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:121: constructor_uses_global_object: The constructor of global object "HotCallSiteRelFreq" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HotCallSiteRelFreq" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  119|                "profile information."));
#  120|   
#  121|-> static cl::opt<int> HotCallSiteRelFreq(
#  122|       "hot-callsite-rel-freq", cl::Hidden, cl::init(60),
#  123|       cl::desc("Minimum block frequency, expressed as a multiple of caller's "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:128: constructor_uses_global_object: The constructor of global object "InstrCost" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InstrCost" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  126|   
#  127|   static cl::opt<int>
#  128|->     InstrCost("inline-instr-cost", cl::Hidden, cl::init(5),
#  129|                 cl::desc("Cost of a single instruction when inlining"));
#  130|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:132: constructor_uses_global_object: The constructor of global object "MemAccessCost" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MemAccessCost" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  130|   
#  131|   static cl::opt<int>
#  132|->     MemAccessCost("inline-memaccess-cost", cl::Hidden, cl::init(0),
#  133|                     cl::desc("Cost of load/store instruction when inlining"));
#  134|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:135: constructor_uses_global_object: The constructor of global object "CallPenalty" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CallPenalty" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  133|                     cl::desc("Cost of load/store instruction when inlining"));
#  134|   
#  135|-> static cl::opt<int> CallPenalty(
#  136|       "inline-call-penalty", cl::Hidden, cl::init(25),
#  137|       cl::desc("Call penalty that is applied per callsite when inlining"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:140: constructor_uses_global_object: The constructor of global object "StackSizeThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StackSizeThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  138|   
#  139|   static cl::opt<size_t>
#  140|->     StackSizeThreshold("inline-max-stacksize", cl::Hidden,
#  141|                          cl::init(std::numeric_limits<size_t>::max()),
#  142|                          cl::desc("Do not inline functions with a stack size "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:145: constructor_uses_global_object: The constructor of global object "RecurStackSizeThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RecurStackSizeThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  143|                                   "that exceeds the specified limit"));
#  144|   
#  145|-> static cl::opt<size_t> RecurStackSizeThreshold(
#  146|       "recursive-inline-max-stacksize", cl::Hidden,
#  147|       cl::init(InlineConstants::TotalAllocaSizeRecursiveCaller),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:151: constructor_uses_global_object: The constructor of global object "OptComputeFullInlineCost" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OptComputeFullInlineCost" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  149|                "size that exceeds the specified limit"));
#  150|   
#  151|-> static cl::opt<bool> OptComputeFullInlineCost(
#  152|       "inline-cost-full", cl::Hidden,
#  153|       cl::desc("Compute the full inline cost of a call site even when the cost "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:156: constructor_uses_global_object: The constructor of global object "InlineCallerSupersetNoBuiltin" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InlineCallerSupersetNoBuiltin" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  154|                "exceeds the threshold."));
#  155|   
#  156|-> static cl::opt<bool> InlineCallerSupersetNoBuiltin(
#  157|       "inline-caller-superset-nobuiltin", cl::Hidden, cl::init(true),
#  158|       cl::desc("Allow inlining when caller has a superset of callee's nobuiltin "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineCost.cpp:161: constructor_uses_global_object: The constructor of global object "DisableGEPConstOperand" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableGEPConstOperand" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  159|                "attributes."));
#  160|   
#  161|-> static cl::opt<bool> DisableGEPConstOperand(
#  162|       "disable-gep-const-evaluation", cl::Hidden, cl::init(false),
#  163|       cl::desc("Disables evaluation of GetElementPtr with constant operands"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineOrder.cpp:27: constructor_uses_global_object: The constructor of global object "UseInlinePriority" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseInlinePriority" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   25|   enum class InlinePriorityMode : int { Size, Cost, CostBenefit, ML };
#   26|   
#   27|-> static cl::opt<InlinePriorityMode> UseInlinePriority(
#   28|       "inline-priority-mode", cl::init(InlinePriorityMode::Size), cl::Hidden,
#   29|       cl::desc("Choose the priority mode to use in module inline"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InlineOrder.cpp:38: constructor_uses_global_object: The constructor of global object "ModuleInlinerTopPriorityThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ModuleInlinerTopPriorityThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   36|                  clEnumValN(InlinePriorityMode::ML, "ml", "Use ML.")));
#   37|   
#   38|-> static cl::opt<int> ModuleInlinerTopPriorityThreshold(
#   39|       "moudle-inliner-top-priority-threshold", cl::Hidden, cl::init(0),
#   40|       cl::desc("The cost threshold for call sites that get inlined without the "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/InteractiveModelRunner.cpp:21: constructor_uses_global_object: The constructor of global object "DebugReply" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DebugReply" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   19|   using namespace llvm;
#   20|   
#   21|-> static cl::opt<bool> DebugReply(
#   22|       "interactive-model-runner-echo-reply", cl::init(false), cl::Hidden,
#   23|       cl::desc("The InteractiveModelRunner will echo back to stderr "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/Loads.cpp:448: constructor_uses_global_object: The constructor of global object "llvm::DefMaxInstsToScan" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::DefMaxInstsToScan" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  446|   /// without documented explanation.
#  447|   cl::opt<unsigned>
#  448|-> llvm::DefMaxInstsToScan("available-load-scan-limit", cl::init(6), cl::Hidden,
#  449|     cl::desc("Use this to specify the default maximum number of instructions "
#  450|              "to scan backward from a given instruction, when searching for "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/LoopAccessAnalysis.cpp:76: constructor_uses_global_object: The constructor of global object "VectorizationFactor" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VectorizationFactor" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   74|   
#   75|   static cl::opt<unsigned, true>
#   76|-> VectorizationFactor("force-vector-width", cl::Hidden,
#   77|                       cl::desc("Sets the SIMD width. Zero is autoselect."),
#   78|                       cl::location(VectorizerParams::VectorizationFactor));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/LoopAccessAnalysis.cpp:82: constructor_uses_global_object: The constructor of global object "VectorizationInterleave" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VectorizationInterleave" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   80|   
#   81|   static cl::opt<unsigned, true>
#   82|-> VectorizationInterleave("force-vector-interleave", cl::Hidden,
#   83|                           cl::desc("Sets the vectorization interleave count. "
#   84|                                    "Zero is autoselect."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/LoopAccessAnalysis.cpp:89: constructor_uses_global_object: The constructor of global object "RuntimeMemoryCheckThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RuntimeMemoryCheckThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   87|   unsigned VectorizerParams::VectorizationInterleave;
#   88|   
#   89|-> static cl::opt<unsigned, true> RuntimeMemoryCheckThreshold(
#   90|       "runtime-memory-check-threshold", cl::Hidden,
#   91|       cl::desc("When performing memory disambiguation checks at runtime do not "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/LoopAccessAnalysis.cpp:97: constructor_uses_global_object: The constructor of global object "MemoryCheckMergeThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MemoryCheckMergeThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   95|   
#   96|   /// The maximum iterations used to merge memory checks
#   97|-> static cl::opt<unsigned> MemoryCheckMergeThreshold(
#   98|       "memory-check-merge-threshold", cl::Hidden,
#   99|       cl::desc("Maximum number of comparisons done when trying to merge "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/LoopAccessAnalysis.cpp:108: constructor_uses_global_object: The constructor of global object "MaxDependences" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxDependences" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  106|   /// We collect dependences up to this threshold.
#  107|   static cl::opt<unsigned>
#  108|->     MaxDependences("max-dependences", cl::Hidden,
#  109|                      cl::desc("Maximum number of dependences collected by "
#  110|                               "loop-access analysis (default = 100)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/LoopAccessAnalysis.cpp:124: constructor_uses_global_object: The constructor of global object "EnableMemAccessVersioning" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMemAccessVersioning" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  122|   ///    } else
#  123|   ///      ...
#  124|-> static cl::opt<bool> EnableMemAccessVersioning(
#  125|       "enable-mem-access-versioning", cl::init(true), cl::Hidden,
#  126|       cl::desc("Enable symbolic stride memory access versioning"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/LoopAccessAnalysis.cpp:130: constructor_uses_global_object: The constructor of global object "EnableForwardingConflictDetection" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableForwardingConflictDetection" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  128|   /// Enable store-to-load forwarding conflict detection. This option can
#  129|   /// be disabled for correctness testing.
#  130|-> static cl::opt<bool> EnableForwardingConflictDetection(
#  131|       "store-to-load-forwarding-conflict-detection", cl::Hidden,
#  132|       cl::desc("Enable conflict detection in loop-access analysis"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/LoopAccessAnalysis.cpp:135: constructor_uses_global_object: The constructor of global object "MaxForkedSCEVDepth" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxForkedSCEVDepth" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  133|       cl::init(true));
#  134|   
#  135|-> static cl::opt<unsigned> MaxForkedSCEVDepth(
#  136|       "max-forked-scev-depth", cl::Hidden,
#  137|       cl::desc("Maximum recursion depth when finding forked SCEVs (default = 5)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/LoopAccessAnalysis.cpp:140: constructor_uses_global_object: The constructor of global object "SpeculateUnitStride" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SpeculateUnitStride" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  138|       cl::init(5));
#  139|   
#  140|-> static cl::opt<bool> SpeculateUnitStride(
#  141|       "laa-speculate-unit-stride", cl::Hidden,
#  142|       cl::desc("Speculate that non-constant strides are unit in LAA"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/LoopCacheAnalysis.cpp:45: constructor_uses_global_object: The constructor of global object "DefaultTripCount" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DefaultTripCount" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   43|   #define DEBUG_TYPE "loop-cache-cost"
#   44|   
#   45|-> static cl::opt<unsigned> DefaultTripCount(
#   46|       "default-trip-count", cl::init(100), cl::Hidden,
#   47|       cl::desc("Use this to specify the default trip count of a loop"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/LoopCacheAnalysis.cpp:52: constructor_uses_global_object: The constructor of global object "TemporalReuseThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TemporalReuseThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   50|   // reuse if they access either the same memory location, or a memory location
#   51|   // with distance smaller than a configurable threshold.
#   52|-> static cl::opt<unsigned> TemporalReuseThreshold(
#   53|       "temporal-reuse-threshold", cl::init(2), cl::Hidden,
#   54|       cl::desc("Use this to specify the max. distance between array elements "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/LoopInfo.cpp:53: constructor_uses_global_object: The constructor of global object "VerifyLoopInfoX" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyLoopInfoX" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   51|   #endif
#   52|   static cl::opt<bool, true>
#   53|->     VerifyLoopInfoX("verify-loop-info", cl::location(VerifyLoopInfo),
#   54|                       cl::Hidden, cl::desc("Verify loop info (time consuming)"));
#   55|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/MLInlineAdvisor.cpp:35: constructor_uses_global_object: The constructor of global object "InteractiveChannelBaseName[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InteractiveChannelBaseName[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|   using namespace llvm;
#   34|   
#   35|-> static cl::opt<std::string> InteractiveChannelBaseName(
#   36|       "inliner-interactive-channel-base", cl::Hidden,
#   37|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/MLInlineAdvisor.cpp:46: constructor_uses_global_object: The constructor of global object "InteractiveIncludeDefault" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InteractiveIncludeDefault" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   44|           .str();
#   45|   static cl::opt<bool>
#   46|->     InteractiveIncludeDefault("inliner-interactive-include-default", cl::Hidden,
#   47|                                 cl::desc(InclDefaultMsg));
#   48|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/MLInlineAdvisor.cpp:82: constructor_uses_global_object: The constructor of global object "SizeIncreaseThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SizeIncreaseThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   80|   #define DEBUG_TYPE "inline-ml"
#   81|   
#   82|-> static cl::opt<float> SizeIncreaseThreshold(
#   83|       "ml-advisor-size-increase-threshold", cl::Hidden,
#   84|       cl::desc("Maximum factor by which expected native size may increase before "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/MLInlineAdvisor.cpp:88: constructor_uses_global_object: The constructor of global object "KeepFPICache" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "KeepFPICache" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   86|       cl::init(2.0));
#   87|   
#   88|-> static cl::opt<bool> KeepFPICache(
#   89|       "ml-advisor-keep-fpi-cache", cl::Hidden,
#   90|       cl::desc(

Error: RETURN_LOCAL (CWE-562):
llvm-17.0.6.src/lib/Analysis/MemoryBuiltins.cpp:980: identity_transfer: Passing "llvm::APInt(getSizeWithOverflow(LHS)).slt(llvm::APInt(getSizeWithOverflow(RHS))) ? LHS : RHS" as argument 1 to constructor for class "pair", which sets "<temporary>" to that argument.
llvm-17.0.6.src/lib/Analysis/MemoryBuiltins.cpp:980: return_local_addr_alias: Returning pointer "<temporary>" which points to local variable "LHS".
#  978|     switch (Options.EvalMode) {
#  979|     case ObjectSizeOpts::Mode::Min:
#  980|->     return (getSizeWithOverflow(LHS).slt(getSizeWithOverflow(RHS))) ? LHS : RHS;
#  981|     case ObjectSizeOpts::Mode::Max:
#  982|       return (getSizeWithOverflow(LHS).sgt(getSizeWithOverflow(RHS))) ? LHS : RHS;

Error: RETURN_LOCAL (CWE-562):
llvm-17.0.6.src/lib/Analysis/MemoryBuiltins.cpp:980: identity_transfer: Passing "llvm::APInt(getSizeWithOverflow(LHS)).slt(llvm::APInt(getSizeWithOverflow(RHS))) ? LHS : RHS" as argument 1 to constructor for class "pair", which sets "<temporary>" to that argument.
llvm-17.0.6.src/lib/Analysis/MemoryBuiltins.cpp:980: return_local_addr_alias: Returning pointer "<temporary>" which points to local variable "RHS".
#  978|     switch (Options.EvalMode) {
#  979|     case ObjectSizeOpts::Mode::Min:
#  980|->     return (getSizeWithOverflow(LHS).slt(getSizeWithOverflow(RHS))) ? LHS : RHS;
#  981|     case ObjectSizeOpts::Mode::Max:
#  982|       return (getSizeWithOverflow(LHS).sgt(getSizeWithOverflow(RHS))) ? LHS : RHS;

Error: RETURN_LOCAL (CWE-562):
llvm-17.0.6.src/lib/Analysis/MemoryBuiltins.cpp:982: identity_transfer: Passing "llvm::APInt(getSizeWithOverflow(LHS)).sgt(llvm::APInt(getSizeWithOverflow(RHS))) ? LHS : RHS" as argument 1 to constructor for class "pair", which sets "<temporary>" to that argument.
llvm-17.0.6.src/lib/Analysis/MemoryBuiltins.cpp:982: return_local_addr_alias: Returning pointer "<temporary>" which points to local variable "LHS".
#  980|       return (getSizeWithOverflow(LHS).slt(getSizeWithOverflow(RHS))) ? LHS : RHS;
#  981|     case ObjectSizeOpts::Mode::Max:
#  982|->     return (getSizeWithOverflow(LHS).sgt(getSizeWithOverflow(RHS))) ? LHS : RHS;
#  983|     case ObjectSizeOpts::Mode::ExactSizeFromOffset:
#  984|       return (getSizeWithOverflow(LHS).eq(getSizeWithOverflow(RHS))) ? LHS

Error: RETURN_LOCAL (CWE-562):
llvm-17.0.6.src/lib/Analysis/MemoryBuiltins.cpp:982: identity_transfer: Passing "llvm::APInt(getSizeWithOverflow(LHS)).sgt(llvm::APInt(getSizeWithOverflow(RHS))) ? LHS : RHS" as argument 1 to constructor for class "pair", which sets "<temporary>" to that argument.
llvm-17.0.6.src/lib/Analysis/MemoryBuiltins.cpp:982: return_local_addr_alias: Returning pointer "<temporary>" which points to local variable "RHS".
#  980|       return (getSizeWithOverflow(LHS).slt(getSizeWithOverflow(RHS))) ? LHS : RHS;
#  981|     case ObjectSizeOpts::Mode::Max:
#  982|->     return (getSizeWithOverflow(LHS).sgt(getSizeWithOverflow(RHS))) ? LHS : RHS;
#  983|     case ObjectSizeOpts::Mode::ExactSizeFromOffset:
#  984|       return (getSizeWithOverflow(LHS).eq(getSizeWithOverflow(RHS))) ? LHS

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/MemoryDependenceAnalysis.cpp:73: constructor_uses_global_object: The constructor of global object "BlockScanLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BlockScanLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   71|   // Limit for the number of instructions to scan in a block.
#   72|   
#   73|-> static cl::opt<unsigned> BlockScanLimit(
#   74|       "memdep-block-scan-limit", cl::Hidden, cl::init(100),
#   75|       cl::desc("The number of instructions to scan in a block in memory "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/MemoryDependenceAnalysis.cpp:79: constructor_uses_global_object: The constructor of global object "BlockNumberLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BlockNumberLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   77|   
#   78|   static cl::opt<unsigned>
#   79|->     BlockNumberLimit("memdep-block-number-limit", cl::Hidden, cl::init(200),
#   80|                        cl::desc("The number of blocks to scan during memory "
#   81|                                 "dependency analysis (default = 200)"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/MemoryProfileInfo.cpp:23: constructor_uses_global_object: The constructor of global object "MemProfLifetimeAccessDensityColdThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MemProfLifetimeAccessDensityColdThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   21|   // Upper bound on lifetime access density (accesses per byte per lifetime sec)
#   22|   // for marking an allocation cold.
#   23|-> cl::opt<float> MemProfLifetimeAccessDensityColdThreshold(
#   24|       "memprof-lifetime-access-density-cold-threshold", cl::init(0.05),
#   25|       cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/MemoryProfileInfo.cpp:31: constructor_uses_global_object: The constructor of global object "MemProfAveLifetimeColdThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MemProfAveLifetimeColdThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   29|   // Lower bound on lifetime to mark an allocation cold (in addition to accesses
#   30|   // per byte per sec above). This is to avoid pessimizing short lived objects.
#   31|-> cl::opt<unsigned> MemProfAveLifetimeColdThreshold(
#   32|       "memprof-ave-lifetime-cold-threshold", cl::init(200), cl::Hidden,
#   33|       cl::desc("The average lifetime (s) for an allocation to be considered "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/MemoryProfileInfo.cpp:38: constructor_uses_global_object: The constructor of global object "MemProfMinAveLifetimeAccessDensityHotThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MemProfMinAveLifetimeAccessDensityHotThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   36|   // Lower bound on average lifetime accesses density (total life time access
#   37|   // density / alloc count) for marking an allocation hot.
#   38|-> cl::opt<unsigned> MemProfMinAveLifetimeAccessDensityHotThreshold(
#   39|       "memprof-min-ave-lifetime-access-density-hot-threshold", cl::init(1000),
#   40|       cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/MemorySSA.cpp:63: constructor_uses_global_object: The constructor of global object "DotCFGMSSA[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DotCFGMSSA[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   61|   
#   62|   static cl::opt<std::string>
#   63|->     DotCFGMSSA("dot-cfg-mssa",
#   64|                  cl::value_desc("file name for generated dot file"),
#   65|                  cl::desc("file name for generated dot file"), cl::init(""));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/MemorySSA.cpp:74: constructor_uses_global_object: The constructor of global object "MaxCheckLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxCheckLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   72|                       true)
#   73|   
#   74|-> static cl::opt<unsigned> MaxCheckLimit(
#   75|       "memssa-check-limit", cl::Hidden, cl::init(100),
#   76|       cl::desc("The maximum number of stores/phis MemorySSA"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/MemorySSA.cpp:87: constructor_uses_global_object: The constructor of global object "VerifyMemorySSAX" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyMemorySSAX" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   85|   
#   86|   static cl::opt<bool, true>
#   87|->     VerifyMemorySSAX("verify-memoryssa", cl::location(VerifyMemorySSA),
#   88|                        cl::Hidden, cl::desc("Enable verification of MemorySSA."));
#   89|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ModuleSummaryAnalysis.cpp:71: constructor_uses_global_object: The constructor of global object "FSEC" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FSEC" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   69|   } // namespace llvm
#   70|   
#   71|-> static cl::opt<FunctionSummary::ForceSummaryHotnessType, true> FSEC(
#   72|       "force-summary-edges-cold", cl::Hidden, cl::location(ForceSummaryEdgesCold),
#   73|       cl::desc("Force all edges in the function summary to cold"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ModuleSummaryAnalysis.cpp:79: constructor_uses_global_object: The constructor of global object "ModuleSummaryDotFile[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ModuleSummaryDotFile[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   77|                  clEnumValN(FunctionSummary::FSHT_All, "all", "All edges.")));
#   78|   
#   79|-> static cl::opt<std::string> ModuleSummaryDotFile(
#   80|       "module-summary-dot-file", cl::Hidden, cl::value_desc("filename"),
#   81|       cl::desc("File to emit dot graph of new summary into"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ObjCARCAnalysisUtils.cpp:24: constructor_uses_global_object: The constructor of global object "EnableARCOptimizations" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableARCOptimizations" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   22|   /// A handy option to enable/disable all ARC Optimizations.
#   23|   bool llvm::objcarc::EnableARCOpts;
#   24|-> static cl::opt<bool, true> EnableARCOptimizations(
#   25|       "enable-objc-arc-opts", cl::desc("enable/disable all ARC Optimizations"),
#   26|       cl::location(EnableARCOpts), cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/PHITransAddr.cpp:24: constructor_uses_global_object: The constructor of global object "EnableAddPhiTranslation" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableAddPhiTranslation" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   22|   using namespace llvm;
#   23|   
#   24|-> static cl::opt<bool> EnableAddPhiTranslation(
#   25|       "gvn-add-phi-translation", cl::init(false), cl::Hidden,
#   26|       cl::desc("Enable phi-translation of add instructions"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ProfileSummaryInfo.cpp:36: constructor_uses_global_object: The constructor of global object "PartialProfile" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PartialProfile" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   34|   } // namespace llvm
#   35|   
#   36|-> static cl::opt<bool> PartialProfile(
#   37|       "partial-profile", cl::Hidden, cl::init(false),
#   38|       cl::desc("Specify the current profile is used as a partial profile."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ProfileSummaryInfo.cpp:40: constructor_uses_global_object: The constructor of global object "ScalePartialSampleProfileWorkingSetSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ScalePartialSampleProfileWorkingSetSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   38|       cl::desc("Specify the current profile is used as a partial profile."));
#   39|   
#   40|-> cl::opt<bool> ScalePartialSampleProfileWorkingSetSize(
#   41|       "scale-partial-sample-profile-working-set-size", cl::Hidden, cl::init(true),
#   42|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ProfileSummaryInfo.cpp:47: constructor_uses_global_object: The constructor of global object "PartialSampleProfileWorkingSetSizeScaleFactor" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PartialSampleProfileWorkingSetSizeScaleFactor" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   45|           "being compiled."));
#   46|   
#   47|-> static cl::opt<double> PartialSampleProfileWorkingSetSizeScaleFactor(
#   48|       "partial-sample-profile-working-set-size-scale-factor", cl::Hidden,
#   49|       cl::init(0.008),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/RegionInfo.cpp:42: constructor_uses_global_object: The constructor of global object "VerifyRegionInfoX" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyRegionInfoX" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   40|   
#   41|   static cl::opt<bool,true>
#   42|-> VerifyRegionInfoX(
#   43|     "verify-region-info",
#   44|     cl::location(RegionInfoBase<RegionTraits<Function>>::VerifyRegionInfo),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/RegionInfo.cpp:47: constructor_uses_global_object: The constructor of global object "printStyleX" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "printStyleX" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   45|     cl::desc("Verify region info (time consuming)"));
#   46|   
#   47|-> static cl::opt<Region::PrintStyle, true> printStyleX("print-region-style",
#   48|     cl::location(RegionInfo::printStyle),
#   49|     cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/RegionPrinter.cpp:28: constructor_uses_global_object: The constructor of global object "onlySimpleRegions" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "onlySimpleRegions" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   26|   /// onlySimpleRegion - Show only the simple regions in the RegionViewer.
#   27|   static cl::opt<bool>
#   28|-> onlySimpleRegions("only-simple-regions",
#   29|                     cl::desc("Show only simple regions in the graphviz viewer"),
#   30|                     cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:153: constructor_uses_global_object: The constructor of global object "MaxBruteForceIterations" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxBruteForceIterations" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  151|   
#  152|   static cl::opt<unsigned>
#  153|->     MaxBruteForceIterations("scalar-evolution-max-iterations", cl::ReallyHidden,
#  154|                               cl::desc("Maximum number of iterations SCEV will "
#  155|                                        "symbolically execute a constant "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:159: constructor_uses_global_object: The constructor of global object "VerifySCEVOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifySCEVOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  157|                               cl::init(100));
#  158|   
#  159|-> static cl::opt<bool, true> VerifySCEVOpt(
#  160|       "verify-scev", cl::Hidden, cl::location(VerifySCEV),
#  161|       cl::desc("Verify ScalarEvolution's backedge taken counts (slow)"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:162: constructor_uses_global_object: The constructor of global object "VerifySCEVStrict" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifySCEVStrict" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  160|       "verify-scev", cl::Hidden, cl::location(VerifySCEV),
#  161|       cl::desc("Verify ScalarEvolution's backedge taken counts (slow)"));
#  162|-> static cl::opt<bool> VerifySCEVStrict(
#  163|       "verify-scev-strict", cl::Hidden,
#  164|       cl::desc("Enable stricter verification with -verify-scev is passed"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:166: constructor_uses_global_object: The constructor of global object "VerifyIR" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyIR" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  164|       cl::desc("Enable stricter verification with -verify-scev is passed"));
#  165|   
#  166|-> static cl::opt<bool> VerifyIR(
#  167|       "scev-verify-ir", cl::Hidden,
#  168|       cl::desc("Verify IR correctness when making sensitive SCEV queries (slow)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:171: constructor_uses_global_object: The constructor of global object "MulOpsInlineThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MulOpsInlineThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  169|       cl::init(false));
#  170|   
#  171|-> static cl::opt<unsigned> MulOpsInlineThreshold(
#  172|       "scev-mulops-inline-threshold", cl::Hidden,
#  173|       cl::desc("Threshold for inlining multiplication operands into a SCEV"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:176: constructor_uses_global_object: The constructor of global object "AddOpsInlineThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AddOpsInlineThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  174|       cl::init(32));
#  175|   
#  176|-> static cl::opt<unsigned> AddOpsInlineThreshold(
#  177|       "scev-addops-inline-threshold", cl::Hidden,
#  178|       cl::desc("Threshold for inlining addition operands into a SCEV"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:181: constructor_uses_global_object: The constructor of global object "MaxSCEVCompareDepth" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxSCEVCompareDepth" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  179|       cl::init(500));
#  180|   
#  181|-> static cl::opt<unsigned> MaxSCEVCompareDepth(
#  182|       "scalar-evolution-max-scev-compare-depth", cl::Hidden,
#  183|       cl::desc("Maximum depth of recursive SCEV complexity comparisons"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:186: constructor_uses_global_object: The constructor of global object "MaxSCEVOperationsImplicationDepth" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxSCEVOperationsImplicationDepth" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  184|       cl::init(32));
#  185|   
#  186|-> static cl::opt<unsigned> MaxSCEVOperationsImplicationDepth(
#  187|       "scalar-evolution-max-scev-operations-implication-depth", cl::Hidden,
#  188|       cl::desc("Maximum depth of recursive SCEV operations implication analysis"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:191: constructor_uses_global_object: The constructor of global object "MaxValueCompareDepth" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxValueCompareDepth" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  189|       cl::init(2));
#  190|   
#  191|-> static cl::opt<unsigned> MaxValueCompareDepth(
#  192|       "scalar-evolution-max-value-compare-depth", cl::Hidden,
#  193|       cl::desc("Maximum depth of recursive value complexity comparisons"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:197: constructor_uses_global_object: The constructor of global object "MaxArithDepth" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxArithDepth" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  195|   
#  196|   static cl::opt<unsigned>
#  197|->     MaxArithDepth("scalar-evolution-max-arith-depth", cl::Hidden,
#  198|                     cl::desc("Maximum depth of recursive arithmetics"),
#  199|                     cl::init(32));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:201: constructor_uses_global_object: The constructor of global object "MaxConstantEvolvingDepth" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxConstantEvolvingDepth" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  199|                     cl::init(32));
#  200|   
#  201|-> static cl::opt<unsigned> MaxConstantEvolvingDepth(
#  202|       "scalar-evolution-max-constant-evolving-depth", cl::Hidden,
#  203|       cl::desc("Maximum depth of recursive constant evolving"), cl::init(32));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:206: constructor_uses_global_object: The constructor of global object "MaxCastDepth" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxCastDepth" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  204|   
#  205|   static cl::opt<unsigned>
#  206|->     MaxCastDepth("scalar-evolution-max-cast-depth", cl::Hidden,
#  207|                    cl::desc("Maximum depth of recursive SExt/ZExt/Trunc"),
#  208|                    cl::init(8));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:211: constructor_uses_global_object: The constructor of global object "MaxAddRecSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxAddRecSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  209|   
#  210|   static cl::opt<unsigned>
#  211|->     MaxAddRecSize("scalar-evolution-max-add-rec-size", cl::Hidden,
#  212|                     cl::desc("Max coefficients in AddRec during evolving"),
#  213|                     cl::init(8));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:216: constructor_uses_global_object: The constructor of global object "HugeExprThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HugeExprThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  214|   
#  215|   static cl::opt<unsigned>
#  216|->     HugeExprThreshold("scalar-evolution-huge-expr-threshold", cl::Hidden,
#  217|                     cl::desc("Size of the expression which is considered huge"),
#  218|                     cl::init(4096));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:220: constructor_uses_global_object: The constructor of global object "RangeIterThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RangeIterThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  218|                     cl::init(4096));
#  219|   
#  220|-> static cl::opt<unsigned> RangeIterThreshold(
#  221|       "scev-range-iter-threshold", cl::Hidden,
#  222|       cl::desc("Threshold for switching to iteratively computing SCEV ranges"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:226: constructor_uses_global_object: The constructor of global object "ClassifyExpressions" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ClassifyExpressions" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  224|   
#  225|   static cl::opt<bool>
#  226|-> ClassifyExpressions("scalar-evolution-classify-expressions",
#  227|       cl::Hidden, cl::init(true),
#  228|       cl::desc("When printing analysis, include information on every instruction"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:230: constructor_uses_global_object: The constructor of global object "UseExpensiveRangeSharpening" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseExpensiveRangeSharpening" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  228|       cl::desc("When printing analysis, include information on every instruction"));
#  229|   
#  230|-> static cl::opt<bool> UseExpensiveRangeSharpening(
#  231|       "scalar-evolution-use-expensive-range-sharpening", cl::Hidden,
#  232|       cl::init(false),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:236: constructor_uses_global_object: The constructor of global object "MaxPhiSCCAnalysisSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxPhiSCCAnalysisSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  234|                "be costly in terms of compile time"));
#  235|   
#  236|-> static cl::opt<unsigned> MaxPhiSCCAnalysisSize(
#  237|       "scalar-evolution-max-scc-analysis-depth", cl::Hidden,
#  238|       cl::desc("Maximum amount of nodes to process while searching SCEVUnknown "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:243: constructor_uses_global_object: The constructor of global object "EnableFiniteLoopControl" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableFiniteLoopControl" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  241|   
#  242|   static cl::opt<bool>
#  243|->     EnableFiniteLoopControl("scalar-evolution-finite-loop", cl::Hidden,
#  244|                               cl::desc("Handle <= and >= in finite loops"),
#  245|                               cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScalarEvolution.cpp:247: constructor_uses_global_object: The constructor of global object "UseContextForNoWrapFlagInference" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseContextForNoWrapFlagInference" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  245|                               cl::init(true));
#  246|   
#  247|-> static cl::opt<bool> UseContextForNoWrapFlagInference(
#  248|       "scalar-evolution-use-context-for-no-wrap-flag-strenghening", cl::Hidden,
#  249|       cl::desc("Infer nuw/nsw flags using context where suitable"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ScopedNoAliasAA.cpp:51: constructor_uses_global_object: The constructor of global object "EnableScopedNoAlias" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableScopedNoAlias" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   49|   // can also be achieved by stripping the associated metadata tags from IR, but
#   50|   // this option is sometimes more convenient.
#   51|-> static cl::opt<bool> EnableScopedNoAlias("enable-scoped-noalias",
#   52|                                            cl::init(true), cl::Hidden);
#   53|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/StackSafetyAnalysis.cpp:62: constructor_uses_global_object: The constructor of global object "StackSafetyMaxIterations" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StackSafetyMaxIterations" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   60|   
#   61|   
#   62|-> static cl::opt<int> StackSafetyMaxIterations("stack-safety-max-iterations",
#   63|                                                cl::init(20), cl::Hidden);
#   64|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/StackSafetyAnalysis.cpp:65: constructor_uses_global_object: The constructor of global object "StackSafetyPrint" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StackSafetyPrint" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|                                                cl::init(20), cl::Hidden);
#   64|   
#   65|-> static cl::opt<bool> StackSafetyPrint("stack-safety-print", cl::init(false),
#   66|                                         cl::Hidden);
#   67|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/StackSafetyAnalysis.cpp:68: constructor_uses_global_object: The constructor of global object "StackSafetyRun" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StackSafetyRun" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   66|                                         cl::Hidden);
#   67|   
#   68|-> static cl::opt<bool> StackSafetyRun("stack-safety-run", cl::init(false),
#   69|                                       cl::Hidden);
#   70|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/TargetLibraryInfo.cpp:20: constructor_uses_global_object: The constructor of global object "ClVectorLibrary" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ClVectorLibrary" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   18|   using namespace llvm;
#   19|   
#   20|-> static cl::opt<TargetLibraryInfoImpl::VectorLibrary> ClVectorLibrary(
#   21|       "vector-library", cl::Hidden, cl::desc("Vector functions library"),
#   22|       cl::init(TargetLibraryInfoImpl::NoLibrary),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/TargetTransformInfo.cpp:31: constructor_uses_global_object: The constructor of global object "EnableReduxCost" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableReduxCost" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   29|   #define DEBUG_TYPE "tti"
#   30|   
#   31|-> static cl::opt<bool> EnableReduxCost("costmodel-reduxcost", cl::init(false),
#   32|                                        cl::Hidden,
#   33|                                        cl::desc("Recognize reduction patterns."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/TargetTransformInfo.cpp:35: constructor_uses_global_object: The constructor of global object "CacheLineSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CacheLineSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|                                        cl::desc("Recognize reduction patterns."));
#   34|   
#   35|-> static cl::opt<unsigned> CacheLineSize(
#   36|       "cache-line-size", cl::init(0), cl::Hidden,
#   37|       cl::desc("Use this to override the target cache line size when "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/TargetTransformInfo.cpp:40: constructor_uses_global_object: The constructor of global object "PredictableBranchThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PredictableBranchThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   38|                "specified by the user."));
#   39|   
#   40|-> static cl::opt<unsigned> PredictableBranchThreshold(
#   41|       "predictable-branch-threshold", cl::init(99), cl::Hidden,
#   42|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/TrainingLogger.cpp:32: constructor_uses_global_object: The constructor of global object "UseSimpleLogger" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseSimpleLogger" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   30|   // FIXME(mtrofin): remove the flag altogether
#   31|   static cl::opt<bool>
#   32|->     UseSimpleLogger("tfutils-use-simplelogger", cl::init(true), cl::Hidden,
#   33|                       cl::desc("Output simple (non-protobuf) log."));
#   34|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/TypeBasedAliasAnalysis.cpp:130: constructor_uses_global_object: The constructor of global object "EnableTBAA" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableTBAA" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  128|   // achieved by stripping the !tbaa tags from IR, but this option is sometimes
#  129|   // more convenient.
#  130|-> static cl::opt<bool> EnableTBAA("enable-tbaa", cl::init(true), cl::Hidden);
#  131|   
#  132|   namespace {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/ValueTracking.cpp:85: constructor_uses_global_object: The constructor of global object "DomConditionsMaxUses" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DomConditionsMaxUses" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   83|   // Controls the number of uses of the value searched for possible
#   84|   // dominating comparisons.
#   85|-> static cl::opt<unsigned> DomConditionsMaxUses("dom-conditions-max-uses",
#   86|                                                 cl::Hidden, cl::init(20));
#   87|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Analysis/VectorUtils.cpp:35: constructor_uses_global_object: The constructor of global object "MaxInterleaveGroupFactor" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxInterleaveGroupFactor" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|   
#   34|   /// Maximum factor for an interleaved memory access.
#   35|-> static cl::opt<unsigned> MaxInterleaveGroupFactor(
#   36|       "max-interleave-group-factor", cl::Hidden,
#   37|       cl::desc("Maximum factor for an interleaved access group (default = 8)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:93: constructor_uses_global_object: The constructor of global object "PrintSummaryGUIDs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintSummaryGUIDs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   91|   using namespace llvm;
#   92|   
#   93|-> static cl::opt<bool> PrintSummaryGUIDs(
#   94|       "print-summary-global-ids", cl::init(false), cl::Hidden,
#   95|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:98: constructor_uses_global_object: The constructor of global object "ExpandConstantExprs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ExpandConstantExprs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   96|           "Print the global id for each value when reading the module summary"));
#   97|   
#   98|-> static cl::opt<bool> ExpandConstantExprs(
#   99|       "expand-constant-exprs", cl::Hidden,
#  100|       cl::desc(

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:3042: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::IEEEhalf(), llvm::APInt(16U, (uint16_t)Record[0UL], false))".
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:3042: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 3040|           return error("Invalid float const record");
# 3041|         if (CurTy->isHalfTy())
# 3042|->         V = ConstantFP::get(Context, APFloat(APFloat::IEEEhalf(),
# 3043|                                                APInt(16, (uint16_t)Record[0])));
# 3044|         else if (CurTy->isBFloatTy())

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:3045: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::BFloat(), llvm::APInt(16U, (uint32_t)Record[0UL], false))".
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:3045: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 3043|                                                APInt(16, (uint16_t)Record[0])));
# 3044|         else if (CurTy->isBFloatTy())
# 3045|->         V = ConstantFP::get(Context, APFloat(APFloat::BFloat(),
# 3046|                                                APInt(16, (uint32_t)Record[0])));
# 3047|         else if (CurTy->isFloatTy())

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:3048: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::IEEEsingle(), llvm::APInt(32U, (uint32_t)Record[0UL], false))".
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:3048: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 3046|                                                APInt(16, (uint32_t)Record[0])));
# 3047|         else if (CurTy->isFloatTy())
# 3048|->         V = ConstantFP::get(Context, APFloat(APFloat::IEEEsingle(),
# 3049|                                                APInt(32, (uint32_t)Record[0])));
# 3050|         else if (CurTy->isDoubleTy())

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:3051: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::IEEEdouble(), llvm::APInt(64U, Record[0UL], false))".
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:3051: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 3049|                                                APInt(32, (uint32_t)Record[0])));
# 3050|         else if (CurTy->isDoubleTy())
# 3051|->         V = ConstantFP::get(Context, APFloat(APFloat::IEEEdouble(),
# 3052|                                                APInt(64, Record[0])));
# 3053|         else if (CurTy->isX86_FP80Ty()) {

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:3058: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::x87DoubleExtended(), llvm::APInt(80U, llvm::ArrayRef<unsigned long>(Rearrange)))".
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:3058: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 3056|           Rearrange[0] = (Record[1] & 0xffffLL) | (Record[0] << 16);
# 3057|           Rearrange[1] = Record[0] >> 48;
# 3058|->         V = ConstantFP::get(Context, APFloat(APFloat::x87DoubleExtended(),
# 3059|                                                APInt(80, Rearrange)));
# 3060|         } else if (CurTy->isFP128Ty())

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:3061: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::IEEEquad(), llvm::APInt(128U, llvm::ArrayRef<unsigned long>(Record)))".
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:3061: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 3059|                                                APInt(80, Rearrange)));
# 3060|         } else if (CurTy->isFP128Ty())
# 3061|->         V = ConstantFP::get(Context, APFloat(APFloat::IEEEquad(),
# 3062|                                                APInt(128, Record)));
# 3063|         else if (CurTy->isPPC_FP128Ty())

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:3064: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::PPCDoubleDouble(), llvm::APInt(128U, llvm::ArrayRef<unsigned long>(Record)))".
llvm-17.0.6.src/lib/Bitcode/Reader/BitcodeReader.cpp:3064: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 3062|                                                APInt(128, Record)));
# 3063|         else if (CurTy->isPPC_FP128Ty())
# 3064|->         V = ConstantFP::get(Context, APFloat(APFloat::PPCDoubleDouble(),
# 3065|                                                APInt(128, Record)));
# 3066|         else

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Bitcode/Reader/MetadataLoader.cpp:78: constructor_uses_global_object: The constructor of global object "ImportFullTypeDefinitions" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ImportFullTypeDefinitions" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   76|   /// Flag whether we need to import full type definitions for ThinLTO.
#   77|   /// Currently needed for Darwin and LLDB.
#   78|-> static cl::opt<bool> ImportFullTypeDefinitions(
#   79|       "import-full-type-definitions", cl::init(false), cl::Hidden,
#   80|       cl::desc("Import full type definitions for ThinLTO."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Bitcode/Reader/MetadataLoader.cpp:82: constructor_uses_global_object: The constructor of global object "DisableLazyLoading" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableLazyLoading" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   80|       cl::desc("Import full type definitions for ThinLTO."));
#   81|   
#   82|-> static cl::opt<bool> DisableLazyLoading(
#   83|       "disable-ondemand-mds-loading", cl::init(false), cl::Hidden,
#   84|       cl::desc("Force disable the lazy-loading on-demand of metadata when "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Bitcode/Writer/BitcodeWriter.cpp:87: constructor_uses_global_object: The constructor of global object "IndexThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "IndexThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   85|   
#   86|   static cl::opt<unsigned>
#   87|->     IndexThreshold("bitcode-mdindex-threshold", cl::Hidden, cl::init(25),
#   88|                      cl::desc("Number of metadatas above which we emit an index "
#   89|                               "to enable lazy-loading"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Bitcode/Writer/BitcodeWriter.cpp:90: constructor_uses_global_object: The constructor of global object "FlushThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FlushThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   88|                      cl::desc("Number of metadatas above which we emit an index "
#   89|                               "to enable lazy-loading"));
#   90|-> static cl::opt<uint32_t> FlushThreshold(
#   91|       "bitcode-flush-threshold", cl::Hidden, cl::init(512),
#   92|       cl::desc("The threshold (unit M) for flushing LLVM bitcode."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Bitcode/Writer/BitcodeWriter.cpp:94: constructor_uses_global_object: The constructor of global object "WriteRelBFToSummary" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "WriteRelBFToSummary" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   92|       cl::desc("The threshold (unit M) for flushing LLVM bitcode."));
#   93|   
#   94|-> static cl::opt<bool> WriteRelBFToSummary(
#   95|       "write-relbf-to-summary", cl::Hidden, cl::init(false),
#   96|       cl::desc("Write relative block frequency to function summary "));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AggressiveAntiDepBreaker.cpp:45: constructor_uses_global_object: The constructor of global object "DebugDiv" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DebugDiv" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   43|   // If DebugDiv > 0 then only break antidep with (ID % DebugDiv) == DebugMod
#   44|   static cl::opt<int>
#   45|-> DebugDiv("agg-antidep-debugdiv",
#   46|            cl::desc("Debug control for aggressive anti-dep breaker"),
#   47|            cl::init(0), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AggressiveAntiDepBreaker.cpp:50: constructor_uses_global_object: The constructor of global object "DebugMod" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DebugMod" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   48|   
#   49|   static cl::opt<int>
#   50|-> DebugMod("agg-antidep-debugmod",
#   51|            cl::desc("Debug control for aggressive anti-dep breaker"),
#   52|            cl::init(0), cl::Hidden);

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/AccelTable.cpp:408: var_decl: Declaring variable "UA".
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/AccelTable.cpp:415: uninit_use: Using uninitialized value "UA". Field "UA.InlineElts" is uninitialized.
#  413|     }
#  414|     UA.push_back({dwarf::DW_IDX_die_offset, dwarf::DW_FORM_ref4});
#  415|->   return UA;
#  416|   }
#  417|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:134: constructor_uses_global_object: The constructor of global object "BasicBlockProfileDump[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BasicBlockProfileDump[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  132|   #define DEBUG_TYPE "asm-printer"
#  133|   
#  134|-> static cl::opt<std::string> BasicBlockProfileDump(
#  135|       "mbb-profile-dump", cl::Hidden,
#  136|       cl::desc("Basic block profile dump for external cost modelling. If "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DebugHandlerBase.cpp:30: constructor_uses_global_object: The constructor of global object "TrimVarLocs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TrimVarLocs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   28|   /// If true, we drop variable location ranges which exist entirely outside the
#   29|   /// variable's lexical scope instruction ranges.
#   30|-> static cl::opt<bool> TrimVarLocs("trim-var-locs", cl::Hidden, cl::init(true));
#   31|   
#   32|   std::optional<DbgVariableLocation>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:69: constructor_uses_global_object: The constructor of global object "UseDwarfRangesBaseAddressSpecifier" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseDwarfRangesBaseAddressSpecifier" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   67|   STATISTIC(NumCSParams, "Number of dbg call site params created");
#   68|   
#   69|-> static cl::opt<bool> UseDwarfRangesBaseAddressSpecifier(
#   70|       "use-dwarf-ranges-base-address-specifier", cl::Hidden,
#   71|       cl::desc("Use base address specifiers in debug_ranges"), cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:73: constructor_uses_global_object: The constructor of global object "GenerateARangeSection" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "GenerateARangeSection" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   71|       cl::desc("Use base address specifiers in debug_ranges"), cl::init(false));
#   72|   
#   73|-> static cl::opt<bool> GenerateARangeSection("generate-arange-section",
#   74|                                              cl::Hidden,
#   75|                                              cl::desc("Generate dwarf aranges"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:79: constructor_uses_global_object: The constructor of global object "GenerateDwarfTypeUnits" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "GenerateDwarfTypeUnits" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   77|   
#   78|   static cl::opt<bool>
#   79|->     GenerateDwarfTypeUnits("generate-type-units", cl::Hidden,
#   80|                              cl::desc("Generate DWARF4 type units."),
#   81|                              cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:83: constructor_uses_global_object: The constructor of global object "SplitDwarfCrossCuReferences" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SplitDwarfCrossCuReferences" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   81|                              cl::init(false));
#   82|   
#   83|-> static cl::opt<bool> SplitDwarfCrossCuReferences(
#   84|       "split-dwarf-cross-cu-references", cl::Hidden,
#   85|       cl::desc("Enable cross-cu references in DWO files"), cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:89: constructor_uses_global_object: The constructor of global object "UnknownLocations" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UnknownLocations" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   87|   enum DefaultOnOff { Default, Enable, Disable };
#   88|   
#   89|-> static cl::opt<DefaultOnOff> UnknownLocations(
#   90|       "use-unknown-locations", cl::Hidden,
#   91|       cl::desc("Make an absence of debug location information explicit."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:96: constructor_uses_global_object: The constructor of global object "AccelTables" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AccelTables" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   94|       cl::init(Default));
#   95|   
#   96|-> static cl::opt<AccelTableKind> AccelTables(
#   97|       "accel-tables", cl::Hidden, cl::desc("Output dwarf accelerator tables."),
#   98|       cl::values(clEnumValN(AccelTableKind::Default, "Default",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:106: constructor_uses_global_object: The constructor of global object "DwarfInlinedStrings" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DwarfInlinedStrings" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  104|   
#  105|   static cl::opt<DefaultOnOff>
#  106|-> DwarfInlinedStrings("dwarf-inlined-strings", cl::Hidden,
#  107|                    cl::desc("Use inlined strings rather than string section."),
#  108|                    cl::values(clEnumVal(Default, "Default for platform"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:114: constructor_uses_global_object: The constructor of global object "NoDwarfRangesSection" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "NoDwarfRangesSection" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  112|   
#  113|   static cl::opt<bool>
#  114|->     NoDwarfRangesSection("no-dwarf-ranges-section", cl::Hidden,
#  115|                            cl::desc("Disable emission .debug_ranges section."),
#  116|                            cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:118: constructor_uses_global_object: The constructor of global object "DwarfSectionsAsReferences" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DwarfSectionsAsReferences" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  116|                            cl::init(false));
#  117|   
#  118|-> static cl::opt<DefaultOnOff> DwarfSectionsAsReferences(
#  119|       "dwarf-sections-as-references", cl::Hidden,
#  120|       cl::desc("Use sections+offset as references rather than labels."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:126: constructor_uses_global_object: The constructor of global object "UseGNUDebugMacro" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseGNUDebugMacro" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  124|   
#  125|   static cl::opt<bool>
#  126|->     UseGNUDebugMacro("use-gnu-debug-macro", cl::Hidden,
#  127|                        cl::desc("Emit the GNU .debug_macro format with DWARF <5"),
#  128|                        cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:130: constructor_uses_global_object: The constructor of global object "DwarfOpConvert" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DwarfOpConvert" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  128|                        cl::init(false));
#  129|   
#  130|-> static cl::opt<DefaultOnOff> DwarfOpConvert(
#  131|       "dwarf-op-convert", cl::Hidden,
#  132|       cl::desc("Enable use of the DWARFv5 DW_OP_convert operator"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:144: constructor_uses_global_object: The constructor of global object "DwarfLinkageNames" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DwarfLinkageNames" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  142|   
#  143|   static cl::opt<LinkageNameOption>
#  144|->     DwarfLinkageNames("dwarf-linkage-names", cl::Hidden,
#  145|                         cl::desc("Which DWARF linkage-name attributes to emit."),
#  146|                         cl::values(clEnumValN(DefaultLinkageNames, "Default",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:153: constructor_uses_global_object: The constructor of global object "MinimizeAddrInV5Option" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MinimizeAddrInV5Option" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  151|                         cl::init(DefaultLinkageNames));
#  152|   
#  153|-> static cl::opt<DwarfDebug::MinimizeAddrInV5> MinimizeAddrInV5Option(
#  154|       "minimize-addr-in-v5", cl::Hidden,
#  155|       cl::desc("Always use DW_AT_ranges in DWARFv5 whenever it could allow more "

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:1569: var_decl: Declaring variable "LocEntry".
llvm-17.0.6.src/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:1570: uninit_use_in_call: Using uninitialized value "LocEntry". Field "LocEntry.Constant" is uninitialized when calling "DbgValueLoc".
# 1568|         MachineLocation MLoc(VI.getEntryValueRegister(), /*IsIndirect*/ true);
# 1569|         auto LocEntry = DbgValueLocEntry(MLoc);
# 1570|->       RegVar->initializeDbgValue(DbgValueLoc(VI.Expr, LocEntry));
# 1571|       }
# 1572|       LLVM_DEBUG(dbgs() << "Created DbgVariable for " << VI.Var->getName()

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AssignmentTrackingAnalysis.cpp:41: constructor_uses_global_object: The constructor of global object "MaxNumBlocks" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxNumBlocks" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   39|   
#   40|   static cl::opt<unsigned>
#   41|->     MaxNumBlocks("debug-ata-max-blocks", cl::init(10000),
#   42|                    cl::desc("Maximum num basic blocks before debug info dropped"),
#   43|                    cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AssignmentTrackingAnalysis.cpp:46: constructor_uses_global_object: The constructor of global object "EnableMemLocFragFill" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMemLocFragFill" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   44|   /// Option for debugging the pass, determines if the memory location fragment
#   45|   /// filling happens after generating the variable locations.
#   46|-> static cl::opt<bool> EnableMemLocFragFill("mem-loc-frag-fill", cl::init(true),
#   47|                                             cl::Hidden);
#   48|   /// Print the results of the analysis. Respects -filter-print-funcs.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AssignmentTrackingAnalysis.cpp:49: constructor_uses_global_object: The constructor of global object "PrintResults" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintResults" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   47|                                             cl::Hidden);
#   48|   /// Print the results of the analysis. Respects -filter-print-funcs.
#   49|-> static cl::opt<bool> PrintResults("print-debug-ata", cl::init(false),
#   50|                                     cl::Hidden);
#   51|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/AssignmentTrackingAnalysis.cpp:56: constructor_uses_global_object: The constructor of global object "CoalesceAdjacentFragmentsOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CoalesceAdjacentFragmentsOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   54|   /// construction for each explicitly stated variable fragment.
#   55|   static cl::opt<cl::boolOrDefault>
#   56|->     CoalesceAdjacentFragmentsOpt("debug-ata-coalesce-frags", cl::Hidden);
#   57|   
#   58|   // Implicit conversions are disabled for enum class types, so unfortunately we

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/BasicBlockSections.cpp:89: constructor_uses_global_object: The constructor of global object "llvm::BBSectionsColdTextPrefix[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::BBSectionsColdTextPrefix[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   87|   // section granularity. Defaults to ".text.split." which is recognized by lld
#   88|   // via the `-z keep-text-section-prefix` flag.
#   89|-> cl::opt<std::string> llvm::BBSectionsColdTextPrefix(
#   90|       "bbsections-cold-text-prefix",
#   91|       cl::desc("The text prefix to use for cold basic block clusters"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/BasicBlockSections.cpp:94: constructor_uses_global_object: The constructor of global object "BBSectionsDetectSourceDrift" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BBSectionsDetectSourceDrift" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   92|       cl::init(".text.split."), cl::Hidden);
#   93|   
#   94|-> static cl::opt<bool> BBSectionsDetectSourceDrift(
#   95|       "bbsections-detect-source-drift",
#   96|       cl::desc("This checks if there is a fdo instr. profile hash "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/BasicTargetTransformInfo.cpp:28: constructor_uses_global_object: The constructor of global object "llvm::PartialUnrollingThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::PartialUnrollingThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   26|   // provide a definition.
#   27|   cl::opt<unsigned>
#   28|-> llvm::PartialUnrollingThreshold("partial-unrolling-threshold", cl::init(0),
#   29|                                   cl::desc("Threshold for partial unrolling"),
#   30|                                   cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/BranchFolding.cpp:73: constructor_uses_global_object: The constructor of global object "FlagEnableTailMerge" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FlagEnableTailMerge" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   71|   STATISTIC(NumTailCalls,  "Number of tail calls optimized");
#   72|   
#   73|-> static cl::opt<cl::boolOrDefault> FlagEnableTailMerge("enable-tail-merge",
#   74|                                 cl::init(cl::BOU_UNSET), cl::Hidden);
#   75|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/BranchFolding.cpp:78: constructor_uses_global_object: The constructor of global object "TailMergeThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TailMergeThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   76|   // Throttle for huge numbers of predecessors (compile speed problems)
#   77|   static cl::opt<unsigned>
#   78|-> TailMergeThreshold("tail-merge-threshold",
#   79|             cl::desc("Max number of predecessors to consider tail merging"),
#   80|             cl::init(150), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/BranchFolding.cpp:85: constructor_uses_global_object: The constructor of global object "TailMergeSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TailMergeSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   83|   // TODO: This should be replaced with a target query.
#   84|   static cl::opt<unsigned>
#   85|-> TailMergeSize("tail-merge-size",
#   86|                 cl::desc("Min number of instructions to consider tail merging"),
#   87|                 cl::init(3), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CFIInstrInserter.cpp:31: constructor_uses_global_object: The constructor of global object "VerifyCFI" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyCFI" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   29|   using namespace llvm;
#   30|   
#   31|-> static cl::opt<bool> VerifyCFI("verify-cfiinstrs",
#   32|       cl::desc("Verify Call Frame Information instructions"),
#   33|       cl::init(false),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:135: constructor_uses_global_object: The constructor of global object "DisableBranchOpts" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableBranchOpts" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  133|   STATISTIC(NumStoreExtractExposed, "Number of store(extractelement) exposed");
#  134|   
#  135|-> static cl::opt<bool> DisableBranchOpts(
#  136|       "disable-cgp-branch-opts", cl::Hidden, cl::init(false),
#  137|       cl::desc("Disable branch optimizations in CodeGenPrepare"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:140: constructor_uses_global_object: The constructor of global object "DisableGCOpts" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableGCOpts" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  138|   
#  139|   static cl::opt<bool>
#  140|->     DisableGCOpts("disable-cgp-gc-opts", cl::Hidden, cl::init(false),
#  141|                     cl::desc("Disable GC optimizations in CodeGenPrepare"));
#  142|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:144: constructor_uses_global_object: The constructor of global object "DisableSelectToBranch" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSelectToBranch" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  142|   
#  143|   static cl::opt<bool>
#  144|->     DisableSelectToBranch("disable-cgp-select2branch", cl::Hidden,
#  145|                             cl::init(false),
#  146|                             cl::desc("Disable select to branch conversion."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:149: constructor_uses_global_object: The constructor of global object "AddrSinkUsingGEPs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AddrSinkUsingGEPs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  147|   
#  148|   static cl::opt<bool>
#  149|->     AddrSinkUsingGEPs("addr-sink-using-gep", cl::Hidden, cl::init(true),
#  150|                         cl::desc("Address sinking in CGP using GEPs."));
#  151|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:153: constructor_uses_global_object: The constructor of global object "EnableAndCmpSinking" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableAndCmpSinking" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  151|   
#  152|   static cl::opt<bool>
#  153|->     EnableAndCmpSinking("enable-andcmp-sinking", cl::Hidden, cl::init(true),
#  154|                           cl::desc("Enable sinkinig and/cmp into branches."));
#  155|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:156: constructor_uses_global_object: The constructor of global object "DisableStoreExtract" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableStoreExtract" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  154|                           cl::desc("Enable sinkinig and/cmp into branches."));
#  155|   
#  156|-> static cl::opt<bool> DisableStoreExtract(
#  157|       "disable-cgp-store-extract", cl::Hidden, cl::init(false),
#  158|       cl::desc("Disable store(extract) optimizations in CodeGenPrepare"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:160: constructor_uses_global_object: The constructor of global object "StressStoreExtract" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StressStoreExtract" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  158|       cl::desc("Disable store(extract) optimizations in CodeGenPrepare"));
#  159|   
#  160|-> static cl::opt<bool> StressStoreExtract(
#  161|       "stress-cgp-store-extract", cl::Hidden, cl::init(false),
#  162|       cl::desc("Stress test store(extract) optimizations in CodeGenPrepare"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:164: constructor_uses_global_object: The constructor of global object "DisableExtLdPromotion" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableExtLdPromotion" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  162|       cl::desc("Stress test store(extract) optimizations in CodeGenPrepare"));
#  163|   
#  164|-> static cl::opt<bool> DisableExtLdPromotion(
#  165|       "disable-cgp-ext-ld-promotion", cl::Hidden, cl::init(false),
#  166|       cl::desc("Disable ext(promotable(ld)) -> promoted(ext(ld)) optimization in "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:169: constructor_uses_global_object: The constructor of global object "StressExtLdPromotion" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StressExtLdPromotion" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  167|                "CodeGenPrepare"));
#  168|   
#  169|-> static cl::opt<bool> StressExtLdPromotion(
#  170|       "stress-cgp-ext-ld-promotion", cl::Hidden, cl::init(false),
#  171|       cl::desc("Stress test ext(promotable(ld)) -> promoted(ext(ld)) "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:174: constructor_uses_global_object: The constructor of global object "DisablePreheaderProtect" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisablePreheaderProtect" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  172|                "optimization in CodeGenPrepare"));
#  173|   
#  174|-> static cl::opt<bool> DisablePreheaderProtect(
#  175|       "disable-preheader-prot", cl::Hidden, cl::init(false),
#  176|       cl::desc("Disable protection against removing loop preheaders"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:178: constructor_uses_global_object: The constructor of global object "ProfileGuidedSectionPrefix" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ProfileGuidedSectionPrefix" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  176|       cl::desc("Disable protection against removing loop preheaders"));
#  177|   
#  178|-> static cl::opt<bool> ProfileGuidedSectionPrefix(
#  179|       "profile-guided-section-prefix", cl::Hidden, cl::init(true),
#  180|       cl::desc("Use profile info to add section prefix for hot/cold functions"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:182: constructor_uses_global_object: The constructor of global object "ProfileUnknownInSpecialSection" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ProfileUnknownInSpecialSection" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  180|       cl::desc("Use profile info to add section prefix for hot/cold functions"));
#  181|   
#  182|-> static cl::opt<bool> ProfileUnknownInSpecialSection(
#  183|       "profile-unknown-in-special-section", cl::Hidden,
#  184|       cl::desc("In profiling mode like sampleFDO, if a function doesn't have "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:192: constructor_uses_global_object: The constructor of global object "BBSectionsGuidedSectionPrefix" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BBSectionsGuidedSectionPrefix" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  190|                "RAM for example. "));
#  191|   
#  192|-> static cl::opt<bool> BBSectionsGuidedSectionPrefix(
#  193|       "bbsections-guided-section-prefix", cl::Hidden, cl::init(true),
#  194|       cl::desc("Use the basic-block-sections profile to determine the text "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:201: constructor_uses_global_object: The constructor of global object "FreqRatioToSkipMerge" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FreqRatioToSkipMerge" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  199|                "profiles."));
#  200|   
#  201|-> static cl::opt<unsigned> FreqRatioToSkipMerge(
#  202|       "cgp-freq-ratio-to-skip-merge", cl::Hidden, cl::init(2),
#  203|       cl::desc("Skip merging empty blocks if (frequency of empty block) / "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:206: constructor_uses_global_object: The constructor of global object "ForceSplitStore" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForceSplitStore" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  204|                "(frequency of destination block) is greater than this ratio"));
#  205|   
#  206|-> static cl::opt<bool> ForceSplitStore(
#  207|       "force-split-store", cl::Hidden, cl::init(false),
#  208|       cl::desc("Force store splitting no matter what the target query says."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:210: constructor_uses_global_object: The constructor of global object "EnableTypePromotionMerge" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableTypePromotionMerge" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  208|       cl::desc("Force store splitting no matter what the target query says."));
#  209|   
#  210|-> static cl::opt<bool> EnableTypePromotionMerge(
#  211|       "cgp-type-promotion-merge", cl::Hidden,
#  212|       cl::desc("Enable merging of redundant sexts when one is dominating"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:216: constructor_uses_global_object: The constructor of global object "DisableComplexAddrModes" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableComplexAddrModes" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  214|       cl::init(true));
#  215|   
#  216|-> static cl::opt<bool> DisableComplexAddrModes(
#  217|       "disable-complex-addr-modes", cl::Hidden, cl::init(false),
#  218|       cl::desc("Disables combining addressing modes with different parts "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:222: constructor_uses_global_object: The constructor of global object "AddrSinkNewPhis" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AddrSinkNewPhis" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  220|   
#  221|   static cl::opt<bool>
#  222|->     AddrSinkNewPhis("addr-sink-new-phis", cl::Hidden, cl::init(false),
#  223|                       cl::desc("Allow creation of Phis in Address sinking."));
#  224|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:225: constructor_uses_global_object: The constructor of global object "AddrSinkNewSelects" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AddrSinkNewSelects" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  223|                       cl::desc("Allow creation of Phis in Address sinking."));
#  224|   
#  225|-> static cl::opt<bool> AddrSinkNewSelects(
#  226|       "addr-sink-new-select", cl::Hidden, cl::init(true),
#  227|       cl::desc("Allow creation of selects in Address sinking."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:229: constructor_uses_global_object: The constructor of global object "AddrSinkCombineBaseReg" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AddrSinkCombineBaseReg" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  227|       cl::desc("Allow creation of selects in Address sinking."));
#  228|   
#  229|-> static cl::opt<bool> AddrSinkCombineBaseReg(
#  230|       "addr-sink-combine-base-reg", cl::Hidden, cl::init(true),
#  231|       cl::desc("Allow combining of BaseReg field in Address sinking."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:233: constructor_uses_global_object: The constructor of global object "AddrSinkCombineBaseGV" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AddrSinkCombineBaseGV" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  231|       cl::desc("Allow combining of BaseReg field in Address sinking."));
#  232|   
#  233|-> static cl::opt<bool> AddrSinkCombineBaseGV(
#  234|       "addr-sink-combine-base-gv", cl::Hidden, cl::init(true),
#  235|       cl::desc("Allow combining of BaseGV field in Address sinking."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:237: constructor_uses_global_object: The constructor of global object "AddrSinkCombineBaseOffs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AddrSinkCombineBaseOffs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  235|       cl::desc("Allow combining of BaseGV field in Address sinking."));
#  236|   
#  237|-> static cl::opt<bool> AddrSinkCombineBaseOffs(
#  238|       "addr-sink-combine-base-offs", cl::Hidden, cl::init(true),
#  239|       cl::desc("Allow combining of BaseOffs field in Address sinking."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:241: constructor_uses_global_object: The constructor of global object "AddrSinkCombineScaledReg" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AddrSinkCombineScaledReg" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  239|       cl::desc("Allow combining of BaseOffs field in Address sinking."));
#  240|   
#  241|-> static cl::opt<bool> AddrSinkCombineScaledReg(
#  242|       "addr-sink-combine-scaled-reg", cl::Hidden, cl::init(true),
#  243|       cl::desc("Allow combining of ScaledReg field in Address sinking."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:246: constructor_uses_global_object: The constructor of global object "EnableGEPOffsetSplit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGEPOffsetSplit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  244|   
#  245|   static cl::opt<bool>
#  246|->     EnableGEPOffsetSplit("cgp-split-large-offset-gep", cl::Hidden,
#  247|                            cl::init(true),
#  248|                            cl::desc("Enable splitting large offset of GEP."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:250: constructor_uses_global_object: The constructor of global object "EnableICMP_EQToICMP_ST" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableICMP_EQToICMP_ST" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  248|                            cl::desc("Enable splitting large offset of GEP."));
#  249|   
#  250|-> static cl::opt<bool> EnableICMP_EQToICMP_ST(
#  251|       "cgp-icmp-eq2icmp-st", cl::Hidden, cl::init(false),
#  252|       cl::desc("Enable ICMP_EQ to ICMP_S(L|G)T conversion."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:255: constructor_uses_global_object: The constructor of global object "VerifyBFIUpdates" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyBFIUpdates" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  253|   
#  254|   static cl::opt<bool>
#  255|->     VerifyBFIUpdates("cgp-verify-bfi-updates", cl::Hidden, cl::init(false),
#  256|                        cl::desc("Enable BFI update verification for "
#  257|                                 "CodeGenPrepare."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:260: constructor_uses_global_object: The constructor of global object "OptimizePhiTypes" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OptimizePhiTypes" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  258|   
#  259|   static cl::opt<bool>
#  260|->     OptimizePhiTypes("cgp-optimize-phi-types", cl::Hidden, cl::init(true),
#  261|                        cl::desc("Enable converting phi types in CodeGenPrepare"));
#  262|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:264: constructor_uses_global_object: The constructor of global object "HugeFuncThresholdInCGPP" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HugeFuncThresholdInCGPP" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  262|   
#  263|   static cl::opt<unsigned>
#  264|->     HugeFuncThresholdInCGPP("cgpp-huge-func", cl::init(10000), cl::Hidden,
#  265|                               cl::desc("Least BB number of huge function."));
#  266|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/CodeGenPrepare.cpp:268: constructor_uses_global_object: The constructor of global object "MaxAddressUsersToScan" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxAddressUsersToScan" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  266|   
#  267|   static cl::opt<unsigned>
#  268|->     MaxAddressUsersToScan("cgp-max-address-users-to-scan", cl::init(100),
#  269|                             cl::Hidden,
#  270|                             cl::desc("Max number of address users to look at"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ComplexDeinterleavingPass.cpp:83: constructor_uses_global_object: The constructor of global object "ComplexDeinterleavingEnabled" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ComplexDeinterleavingEnabled" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   81|   STATISTIC(NumComplexTransformations, "Amount of complex patterns transformed");
#   82|   
#   83|-> static cl::opt<bool> ComplexDeinterleavingEnabled(
#   84|       "enable-complex-deinterleaving",
#   85|       cl::desc("Enable generation of complex instructions"), cl::init(true),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/DFAPacketizer.cpp:48: constructor_uses_global_object: The constructor of global object "InstrLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InstrLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   46|   #define DEBUG_TYPE "packets"
#   47|   
#   48|-> static cl::opt<unsigned> InstrLimit("dfa-instr-limit", cl::Hidden,
#   49|     cl::init(0), cl::desc("If present, stops packetizing after N instructions"));
#   50|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/EarlyIfConversion.cpp:48: constructor_uses_global_object: The constructor of global object "BlockInstrLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BlockInstrLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   46|   // This bypasses all other heuristics, so it should be set fairly high.
#   47|   static cl::opt<unsigned>
#   48|-> BlockInstrLimit("early-ifcvt-limit", cl::init(30), cl::Hidden,
#   49|     cl::desc("Maximum number of instructions per speculated block."));
#   50|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/EarlyIfConversion.cpp:52: constructor_uses_global_object: The constructor of global object "Stress" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Stress" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   50|   
#   51|   // Stress testing mode - disable heuristics.
#   52|-> static cl::opt<bool> Stress("stress-early-ifcvt", cl::Hidden,
#   53|     cl::desc("Turn all knobs to 11"));
#   54|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/EdgeBundles.cpp:26: constructor_uses_global_object: The constructor of global object "ViewEdgeBundles" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ViewEdgeBundles" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   24|   
#   25|   static cl::opt<bool>
#   26|-> ViewEdgeBundles("view-edge-bundles", cl::Hidden,
#   27|                   cl::desc("Pop up a window to show edge bundle graphs"));
#   28|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ExpandLargeDivRem.cpp:36: constructor_uses_global_object: The constructor of global object "ExpandDivRemBits" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ExpandDivRemBits" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   34|   
#   35|   static cl::opt<unsigned>
#   36|->     ExpandDivRemBits("expand-div-rem-bits", cl::Hidden,
#   37|                        cl::init(llvm::IntegerType::MAX_INT_BITS),
#   38|                        cl::desc("div and rem instructions on integers with "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ExpandLargeFpConvert.cpp:35: constructor_uses_global_object: The constructor of global object "ExpandFpConvertBits" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ExpandFpConvertBits" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|   
#   34|   static cl::opt<unsigned>
#   35|->     ExpandFpConvertBits("expand-fp-convert-bits", cl::Hidden,
#   36|                        cl::init(llvm::IntegerType::MAX_INT_BITS),
#   37|                        cl::desc("fp convert instructions on integers with "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ExpandMemCmp.cpp:47: constructor_uses_global_object: The constructor of global object "MemCmpEqZeroNumLoadsPerBlock" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MemCmpEqZeroNumLoadsPerBlock" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   45|   STATISTIC(NumMemCmpInlined, "Number of inlined memcmp calls");
#   46|   
#   47|-> static cl::opt<unsigned> MemCmpEqZeroNumLoadsPerBlock(
#   48|       "memcmp-num-loads-per-block", cl::Hidden, cl::init(1),
#   49|       cl::desc("The number of loads per basic block for inline expansion of "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ExpandMemCmp.cpp:52: constructor_uses_global_object: The constructor of global object "MaxLoadsPerMemcmp" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxLoadsPerMemcmp" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   50|                "memcmp that is only being compared against zero."));
#   51|   
#   52|-> static cl::opt<unsigned> MaxLoadsPerMemcmp(
#   53|       "max-loads-per-memcmp", cl::Hidden,
#   54|       cl::desc("Set maximum number of loads used in expanded memcmp"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ExpandMemCmp.cpp:56: constructor_uses_global_object: The constructor of global object "MaxLoadsPerMemcmpOptSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxLoadsPerMemcmpOptSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   54|       cl::desc("Set maximum number of loads used in expanded memcmp"));
#   55|   
#   56|-> static cl::opt<unsigned> MaxLoadsPerMemcmpOptSize(
#   57|       "max-loads-per-memcmp-opt-size", cl::Hidden,
#   58|       cl::desc("Set maximum number of loads used in expanded memcmp for -Os/Oz"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ExpandVectorPredication.cpp:48: constructor_uses_global_object: The constructor of global object "EVLTransformOverride[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EVLTransformOverride[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   46|   
#   47|   // Override options.
#   48|-> static cl::opt<std::string> EVLTransformOverride(
#   49|       "expandvp-override-evl-transform", cl::init(""), cl::Hidden,
#   50|       cl::desc("Options: <empty>" VPINTERNAL_VPLEGAL_CASES

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ExpandVectorPredication.cpp:56: constructor_uses_global_object: The constructor of global object "MaskTransformOverride[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaskTransformOverride[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   54|                "testing)."));
#   55|   
#   56|-> static cl::opt<std::string> MaskTransformOverride(
#   57|       "expandvp-override-mask-transform", cl::init(""), cl::Hidden,
#   58|       cl::desc("Options: <empty>" VPINTERNAL_VPLEGAL_CASES

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/FixupStatepointCallerSaved.cpp:40: constructor_uses_global_object: The constructor of global object "FixupSCSExtendSlotSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FixupSCSExtendSlotSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   38|   STATISTIC(NumSpillSlotsExtended, "Number of spill slots extended");
#   39|   
#   40|-> static cl::opt<bool> FixupSCSExtendSlotSize(
#   41|       "fixup-scs-extend-slot-size", cl::Hidden, cl::init(false),
#   42|       cl::desc("Allow spill in spill slot of greater size than register size"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/FixupStatepointCallerSaved.cpp:45: constructor_uses_global_object: The constructor of global object "PassGCPtrInCSR" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PassGCPtrInCSR" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   43|       cl::Hidden);
#   44|   
#   45|-> static cl::opt<bool> PassGCPtrInCSR(
#   46|       "fixup-allow-gcptr-in-csr", cl::Hidden, cl::init(false),
#   47|       cl::desc("Allow passing GC Pointer arguments in callee saved registers"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/FixupStatepointCallerSaved.cpp:49: constructor_uses_global_object: The constructor of global object "EnableCopyProp" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableCopyProp" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   47|       cl::desc("Allow passing GC Pointer arguments in callee saved registers"));
#   48|   
#   49|-> static cl::opt<bool> EnableCopyProp(
#   50|       "fixup-scs-enable-copy-propagation", cl::Hidden, cl::init(true),
#   51|       cl::desc("Enable simple copy propagation during register reloading"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/FixupStatepointCallerSaved.cpp:55: constructor_uses_global_object: The constructor of global object "MaxStatepointsWithRegs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxStatepointsWithRegs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   53|   // This is purely debugging option.
#   54|   // It may be handy for investigating statepoint spilling issues.
#   55|-> static cl::opt<unsigned> MaxStatepointsWithRegs(
#   56|       "fixup-max-csr-statepoints", cl::Hidden,
#   57|       cl::desc("Max number of statepoints allowed to pass GC Ptrs in registers"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/GlobalISel/Combiner.cpp:31: constructor_uses_global_object: The constructor of global object "llvm::GICombinerOptionCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "llvm::GICombinerOptionCategory" might be created before "GlobalParser" is available.
#   29|   
#   30|   namespace llvm {
#   31|-> cl::OptionCategory GICombinerOptionCategory(
#   32|       "GlobalISel Combiner",
#   33|       "Control the rules which are enabled. These options all take a comma "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/GlobalISel/CombinerHelper.cpp:47: constructor_uses_global_object: The constructor of global object "ForceLegalIndexing" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForceLegalIndexing" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   45|   // addressing.
#   46|   static cl::opt<bool>
#   47|->     ForceLegalIndexing("force-legal-indexing", cl::Hidden, cl::init(false),
#   48|                          cl::desc("Force all indexed operations to be "
#   49|                                   "legal for the GlobalISel combiner"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/GlobalISel/IRTranslator.cpp:98: constructor_uses_global_object: The constructor of global object "EnableCSEInIRTranslator" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableCSEInIRTranslator" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   96|   
#   97|   static cl::opt<bool>
#   98|->     EnableCSEInIRTranslator("enable-cse-in-irtranslator",
#   99|                               cl::desc("Should enable CSE in irtranslator"),
#  100|                               cl::Optional, cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/GlobalISel/Legalizer.cpp:39: constructor_uses_global_object: The constructor of global object "EnableCSEInLegalizer" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableCSEInLegalizer" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   37|   
#   38|   static cl::opt<bool>
#   39|->     EnableCSEInLegalizer("enable-cse-in-legalizer",
#   40|                            cl::desc("Should enable CSE in Legalizer"),
#   41|                            cl::Optional, cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/GlobalISel/Legalizer.cpp:44: constructor_uses_global_object: The constructor of global object "AllowGInsertAsArtifact" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AllowGInsertAsArtifact" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   42|   
#   43|   // This is a temporary hack, should be removed soon.
#   44|-> static cl::opt<bool> AllowGInsertAsArtifact(
#   45|       "allow-ginsert-as-artifact",
#   46|       cl::desc("Allow G_INSERT to be considered an artifact. Hack around AMDGPU "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/GlobalISel/LegalizerInfo.cpp:32: constructor_uses_global_object: The constructor of global object "llvm::DisableGISelLegalityCheck" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::DisableGISelLegalityCheck" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   30|   #define DEBUG_TYPE "legalizer-info"
#   31|   
#   32|-> cl::opt<bool> llvm::DisableGISelLegalityCheck(
#   33|       "disable-gisel-legality-check",
#   34|       cl::desc("Don't verify that MIR is fully legal between GlobalISel passes"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/GlobalISel/RegBankSelect.cpp:53: constructor_uses_global_object: The constructor of global object "RegBankSelectMode" itself makes use of global object "llvm::cl::AllSubCommands" defined in another compilation unit.  The order of construction is unspecified, so "RegBankSelectMode" might be created before "llvm::cl::AllSubCommands" is available.
#   51|   using namespace llvm;
#   52|   
#   53|-> static cl::opt<RegBankSelect::Mode> RegBankSelectMode(
#   54|       cl::desc("Mode of the RegBankSelect pass"), cl::Hidden, cl::Optional,
#   55|       cl::values(clEnumValN(RegBankSelect::Mode::Fast, "regbankselect-fast",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/GlobalMerge.cpp:108: constructor_uses_global_object: The constructor of global object "EnableGlobalMerge" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGlobalMerge" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  106|   // FIXME: This is only useful as a last-resort way to disable the pass.
#  107|   static cl::opt<bool>
#  108|-> EnableGlobalMerge("enable-global-merge", cl::Hidden,
#  109|                     cl::desc("Enable the global merge pass"),
#  110|                     cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/GlobalMerge.cpp:113: constructor_uses_global_object: The constructor of global object "GlobalMergeMaxOffset" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "GlobalMergeMaxOffset" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  111|   
#  112|   static cl::opt<unsigned>
#  113|-> GlobalMergeMaxOffset("global-merge-max-offset", cl::Hidden,
#  114|                        cl::desc("Set maximum offset for global merge pass"),
#  115|                        cl::init(0));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/GlobalMerge.cpp:117: constructor_uses_global_object: The constructor of global object "GlobalMergeGroupByUse" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "GlobalMergeGroupByUse" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  115|                        cl::init(0));
#  116|   
#  117|-> static cl::opt<bool> GlobalMergeGroupByUse(
#  118|       "global-merge-group-by-use", cl::Hidden,
#  119|       cl::desc("Improve global merge pass to look at uses"), cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/GlobalMerge.cpp:121: constructor_uses_global_object: The constructor of global object "GlobalMergeIgnoreSingleUse" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "GlobalMergeIgnoreSingleUse" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  119|       cl::desc("Improve global merge pass to look at uses"), cl::init(true));
#  120|   
#  121|-> static cl::opt<bool> GlobalMergeIgnoreSingleUse(
#  122|       "global-merge-ignore-single-use", cl::Hidden,
#  123|       cl::desc("Improve global merge pass to ignore globals only used alone"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/GlobalMerge.cpp:127: constructor_uses_global_object: The constructor of global object "EnableGlobalMergeOnConst" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGlobalMergeOnConst" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  125|   
#  126|   static cl::opt<bool>
#  127|-> EnableGlobalMergeOnConst("global-merge-on-const", cl::Hidden,
#  128|                            cl::desc("Enable global merge pass on constants"),
#  129|                            cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/GlobalMerge.cpp:134: constructor_uses_global_object: The constructor of global object "EnableGlobalMergeOnExternal" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGlobalMergeOnExternal" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  132|   // it if only we are sure this optimization could always benefit all targets.
#  133|   static cl::opt<cl::boolOrDefault>
#  134|-> EnableGlobalMergeOnExternal("global-merge-on-external", cl::Hidden,
#  135|        cl::desc("Enable global merge pass on external linkage"));
#  136|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/HardwareLoops.cpp:53: constructor_uses_global_object: The constructor of global object "ForceHardwareLoops" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForceHardwareLoops" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   51|   
#   52|   static cl::opt<bool>
#   53|-> ForceHardwareLoops("force-hardware-loops", cl::Hidden, cl::init(false),
#   54|                      cl::desc("Force hardware loops intrinsics to be inserted"));
#   55|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/HardwareLoops.cpp:57: constructor_uses_global_object: The constructor of global object "ForceHardwareLoopPHI" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForceHardwareLoopPHI" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   55|   
#   56|   static cl::opt<bool>
#   57|-> ForceHardwareLoopPHI(
#   58|     "force-hardware-loop-phi", cl::Hidden, cl::init(false),
#   59|     cl::desc("Force hardware loop counter to be updated through a phi"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/HardwareLoops.cpp:62: constructor_uses_global_object: The constructor of global object "ForceNestedLoop" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForceNestedLoop" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   60|   
#   61|   static cl::opt<bool>
#   62|-> ForceNestedLoop("force-nested-hardware-loop", cl::Hidden, cl::init(false),
#   63|                   cl::desc("Force allowance of nested hardware loops"));
#   64|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/HardwareLoops.cpp:66: constructor_uses_global_object: The constructor of global object "LoopDecrement" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LoopDecrement" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   64|   
#   65|   static cl::opt<unsigned>
#   66|-> LoopDecrement("hardware-loop-decrement", cl::Hidden, cl::init(1),
#   67|               cl::desc("Set the loop decrement value"));
#   68|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/HardwareLoops.cpp:70: constructor_uses_global_object: The constructor of global object "CounterBitWidth" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CounterBitWidth" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   68|   
#   69|   static cl::opt<unsigned>
#   70|-> CounterBitWidth("hardware-loop-counter-bitwidth", cl::Hidden, cl::init(32),
#   71|                   cl::desc("Set the loop counter bitwidth"));
#   72|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/HardwareLoops.cpp:74: constructor_uses_global_object: The constructor of global object "ForceGuardLoopEntry" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForceGuardLoopEntry" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   72|   
#   73|   static cl::opt<bool>
#   74|-> ForceGuardLoopEntry(
#   75|     "force-hardware-loop-guard", cl::Hidden, cl::init(false),
#   76|     cl::desc("Force generation of loop guard intrinsic"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/IfConversion.cpp:61: constructor_uses_global_object: The constructor of global object "IfCvtFnStart" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "IfCvtFnStart" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   59|   
#   60|   // Hidden options for help debugging.
#   61|-> static cl::opt<int> IfCvtFnStart("ifcvt-fn-start", cl::init(-1), cl::Hidden);
#   62|   static cl::opt<int> IfCvtFnStop("ifcvt-fn-stop", cl::init(-1), cl::Hidden);
#   63|   static cl::opt<int> IfCvtLimit("ifcvt-limit", cl::init(-1), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/IfConversion.cpp:62: constructor_uses_global_object: The constructor of global object "IfCvtFnStop" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "IfCvtFnStop" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   60|   // Hidden options for help debugging.
#   61|   static cl::opt<int> IfCvtFnStart("ifcvt-fn-start", cl::init(-1), cl::Hidden);
#   62|-> static cl::opt<int> IfCvtFnStop("ifcvt-fn-stop", cl::init(-1), cl::Hidden);
#   63|   static cl::opt<int> IfCvtLimit("ifcvt-limit", cl::init(-1), cl::Hidden);
#   64|   static cl::opt<bool> DisableSimple("disable-ifcvt-simple",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/IfConversion.cpp:63: constructor_uses_global_object: The constructor of global object "IfCvtLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "IfCvtLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   61|   static cl::opt<int> IfCvtFnStart("ifcvt-fn-start", cl::init(-1), cl::Hidden);
#   62|   static cl::opt<int> IfCvtFnStop("ifcvt-fn-stop", cl::init(-1), cl::Hidden);
#   63|-> static cl::opt<int> IfCvtLimit("ifcvt-limit", cl::init(-1), cl::Hidden);
#   64|   static cl::opt<bool> DisableSimple("disable-ifcvt-simple",
#   65|                                      cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/IfConversion.cpp:64: constructor_uses_global_object: The constructor of global object "DisableSimple" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSimple" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   62|   static cl::opt<int> IfCvtFnStop("ifcvt-fn-stop", cl::init(-1), cl::Hidden);
#   63|   static cl::opt<int> IfCvtLimit("ifcvt-limit", cl::init(-1), cl::Hidden);
#   64|-> static cl::opt<bool> DisableSimple("disable-ifcvt-simple",
#   65|                                      cl::init(false), cl::Hidden);
#   66|   static cl::opt<bool> DisableSimpleF("disable-ifcvt-simple-false",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/IfConversion.cpp:66: constructor_uses_global_object: The constructor of global object "DisableSimpleF" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSimpleF" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   64|   static cl::opt<bool> DisableSimple("disable-ifcvt-simple",
#   65|                                      cl::init(false), cl::Hidden);
#   66|-> static cl::opt<bool> DisableSimpleF("disable-ifcvt-simple-false",
#   67|                                       cl::init(false), cl::Hidden);
#   68|   static cl::opt<bool> DisableTriangle("disable-ifcvt-triangle",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/IfConversion.cpp:68: constructor_uses_global_object: The constructor of global object "DisableTriangle" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableTriangle" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   66|   static cl::opt<bool> DisableSimpleF("disable-ifcvt-simple-false",
#   67|                                       cl::init(false), cl::Hidden);
#   68|-> static cl::opt<bool> DisableTriangle("disable-ifcvt-triangle",
#   69|                                        cl::init(false), cl::Hidden);
#   70|   static cl::opt<bool> DisableTriangleR("disable-ifcvt-triangle-rev",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/IfConversion.cpp:70: constructor_uses_global_object: The constructor of global object "DisableTriangleR" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableTriangleR" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   68|   static cl::opt<bool> DisableTriangle("disable-ifcvt-triangle",
#   69|                                        cl::init(false), cl::Hidden);
#   70|-> static cl::opt<bool> DisableTriangleR("disable-ifcvt-triangle-rev",
#   71|                                         cl::init(false), cl::Hidden);
#   72|   static cl::opt<bool> DisableTriangleF("disable-ifcvt-triangle-false",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/IfConversion.cpp:72: constructor_uses_global_object: The constructor of global object "DisableTriangleF" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableTriangleF" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   70|   static cl::opt<bool> DisableTriangleR("disable-ifcvt-triangle-rev",
#   71|                                         cl::init(false), cl::Hidden);
#   72|-> static cl::opt<bool> DisableTriangleF("disable-ifcvt-triangle-false",
#   73|                                         cl::init(false), cl::Hidden);
#   74|   static cl::opt<bool> DisableDiamond("disable-ifcvt-diamond",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/IfConversion.cpp:74: constructor_uses_global_object: The constructor of global object "DisableDiamond" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableDiamond" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   72|   static cl::opt<bool> DisableTriangleF("disable-ifcvt-triangle-false",
#   73|                                         cl::init(false), cl::Hidden);
#   74|-> static cl::opt<bool> DisableDiamond("disable-ifcvt-diamond",
#   75|                                       cl::init(false), cl::Hidden);
#   76|   static cl::opt<bool> DisableForkedDiamond("disable-ifcvt-forked-diamond",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/IfConversion.cpp:76: constructor_uses_global_object: The constructor of global object "DisableForkedDiamond" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableForkedDiamond" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   74|   static cl::opt<bool> DisableDiamond("disable-ifcvt-diamond",
#   75|                                       cl::init(false), cl::Hidden);
#   76|-> static cl::opt<bool> DisableForkedDiamond("disable-ifcvt-forked-diamond",
#   77|                                           cl::init(false), cl::Hidden);
#   78|   static cl::opt<bool> IfCvtBranchFold("ifcvt-branch-fold",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/IfConversion.cpp:78: constructor_uses_global_object: The constructor of global object "IfCvtBranchFold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "IfCvtBranchFold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   76|   static cl::opt<bool> DisableForkedDiamond("disable-ifcvt-forked-diamond",
#   77|                                           cl::init(false), cl::Hidden);
#   78|-> static cl::opt<bool> IfCvtBranchFold("ifcvt-branch-fold",
#   79|                                        cl::init(true), cl::Hidden);
#   80|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ImplicitNullChecks.cpp:62: constructor_uses_global_object: The constructor of global object "PageSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PageSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   60|   using namespace llvm;
#   61|   
#   62|-> static cl::opt<int> PageSize("imp-null-check-page-size",
#   63|                                cl::desc("The page size of the target in bytes"),
#   64|                                cl::init(4096), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ImplicitNullChecks.cpp:66: constructor_uses_global_object: The constructor of global object "MaxInstsToConsider" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxInstsToConsider" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   64|                                cl::init(4096), cl::Hidden);
#   65|   
#   66|-> static cl::opt<unsigned> MaxInstsToConsider(
#   67|       "imp-null-max-insts-to-consider",
#   68|       cl::desc("The max number of instructions to consider hoisting loads over "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/InlineSpiller.cpp:75: constructor_uses_global_object: The constructor of global object "DisableHoisting" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableHoisting" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   73|   STATISTIC(NumRemats,          "Number of rematerialized defs for spilling");
#   74|   
#   75|-> static cl::opt<bool> DisableHoisting("disable-spill-hoist", cl::Hidden,
#   76|                                        cl::desc("Disable inline spill hoisting"));
#   77|   static cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/InlineSpiller.cpp:78: constructor_uses_global_object: The constructor of global object "RestrictStatepointRemat" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RestrictStatepointRemat" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   76|                                        cl::desc("Disable inline spill hoisting"));
#   77|   static cl::opt<bool>
#   78|-> RestrictStatepointRemat("restrict-statepoint-remat",
#   79|                          cl::init(false), cl::Hidden,
#   80|                          cl::desc("Restrict remat for statepoint operands"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/InterleavedAccessPass.cpp:78: constructor_uses_global_object: The constructor of global object "LowerInterleavedAccesses" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LowerInterleavedAccesses" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   76|   #define DEBUG_TYPE "interleaved-access"
#   77|   
#   78|-> static cl::opt<bool> LowerInterleavedAccesses(
#   79|       "lower-interleaved-accesses",
#   80|       cl::desc("Enable lowering interleaved accesses to intrinsics"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/InterleavedLoadCombinePass.cpp:57: constructor_uses_global_object: The constructor of global object "<unnamed>::DisableInterleavedLoadCombine" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DisableInterleavedLoadCombine" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   55|   
#   56|   /// Option to disable the pass
#   57|-> static cl::opt<bool> DisableInterleavedLoadCombine(
#   58|       "disable-" DEBUG_TYPE, cl::init(false), cl::Hidden,
#   59|       cl::desc("Disable combining of interleaved loads"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/LLVMTargetMachine.cpp:37: constructor_uses_global_object: The constructor of global object "EnableTrapUnreachable" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableTrapUnreachable" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   35|   
#   36|   static cl::opt<bool>
#   37|->     EnableTrapUnreachable("trap-unreachable", cl::Hidden,
#   38|                             cl::desc("Enable generating trap for unreachable"));
#   39|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:141: constructor_uses_global_object: The constructor of global object "EmulateOldLDV" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EmulateOldLDV" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  139|   // Act more like the VarLoc implementation, by propagating some locations too
#  140|   // far and ignoring some transfers.
#  141|-> static cl::opt<bool> EmulateOldLDV("emulate-old-livedebugvalues", cl::Hidden,
#  142|                                      cl::desc("Act like old LiveDebugValues did"),
#  143|                                      cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:155: constructor_uses_global_object: The constructor of global object "StackWorkingSetLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StackWorkingSetLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  153|   // consuming all the developer's memory.
#  154|   static cl::opt<unsigned>
#  155|->     StackWorkingSetLimit("livedebugvalues-max-stack-slots", cl::Hidden,
#  156|                            cl::desc("livedebugvalues-stack-ws-limit"),
#  157|                            cl::init(250));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/LiveDebugValues/LiveDebugValues.cpp:41: constructor_uses_global_object: The constructor of global object "ForceInstrRefLDV" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForceInstrRefLDV" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   39|   
#   40|   static cl::opt<bool>
#   41|->     ForceInstrRefLDV("force-instr-ref-livedebugvalues", cl::Hidden,
#   42|                        cl::desc("Use instruction-ref based LiveDebugValues with "
#   43|                                 "normal DBG_VALUE inputs"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/LiveDebugValues/LiveDebugValues.cpp:46: constructor_uses_global_object: The constructor of global object "ValueTrackingVariableLocations" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ValueTrackingVariableLocations" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   44|                        cl::init(false));
#   45|   
#   46|-> static cl::opt<cl::boolOrDefault> ValueTrackingVariableLocations(
#   47|       "experimental-debug-variable-locations",
#   48|       cl::desc("Use experimental new value-tracking variable locations"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/LiveDebugValues/LiveDebugValues.cpp:52: constructor_uses_global_object: The constructor of global object "InputBBLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InputBBLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   50|   // Options to prevent pathological compile-time behavior. If InputBBLimit and
#   51|   // InputDbgValueLimit are both exceeded, range extension is disabled.
#   52|-> static cl::opt<unsigned> InputBBLimit(
#   53|       "livedebugvalues-input-bb-limit",
#   54|       cl::desc("Maximum input basic blocks before DBG_VALUE limit applies"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/LiveDebugValues/LiveDebugValues.cpp:56: constructor_uses_global_object: The constructor of global object "InputDbgValueLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InputDbgValueLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   54|       cl::desc("Maximum input basic blocks before DBG_VALUE limit applies"),
#   55|       cl::init(10000), cl::Hidden);
#   56|-> static cl::opt<unsigned> InputDbgValueLimit(
#   57|       "livedebugvalues-input-dbg-value-limit",
#   58|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/LiveDebugVariables.cpp:70: constructor_uses_global_object: The constructor of global object "EnableLDV" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableLDV" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   68|   
#   69|   static cl::opt<bool>
#   70|-> EnableLDV("live-debug-variables", cl::init(true),
#   71|             cl::desc("Enable the live debug variables pass"), cl::Hidden);
#   72|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/LiveIntervals.cpp:79: constructor_uses_global_object: The constructor of global object "llvm::UseSegmentSetForPhysRegs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::UseSegmentSetForPhysRegs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   77|   namespace llvm {
#   78|   
#   79|-> cl::opt<bool> UseSegmentSetForPhysRegs(
#   80|       "use-segment-set-for-physregs", cl::Hidden, cl::init(true),
#   81|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MIRCanonicalizerPass.cpp:41: constructor_uses_global_object: The constructor of global object "CanonicalizeFunctionNumber" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CanonicalizeFunctionNumber" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   39|   
#   40|   static cl::opt<unsigned>
#   41|->     CanonicalizeFunctionNumber("canon-nth-function", cl::Hidden, cl::init(~0u),
#   42|                                  cl::value_desc("N"),
#   43|                                  cl::desc("Function number to canonicalize."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MIRFSDiscriminator.cpp:38: constructor_uses_global_object: The constructor of global object "ImprovedFSDiscriminator" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ImprovedFSDiscriminator" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   36|   // TODO(xur): Remove this option and related code once we make true as the
#   37|   // default.
#   38|-> cl::opt<bool> ImprovedFSDiscriminator(
#   39|       "improved-fs-discriminator", cl::Hidden, cl::init(false),
#   40|       cl::desc("New FS discriminators encoding (incompatible with the original "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MIRPrinter.cpp:65: constructor_uses_global_object: The constructor of global object "SimplifyMIR" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SimplifyMIR" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|   using namespace llvm;
#   64|   
#   65|-> static cl::opt<bool> SimplifyMIR(
#   66|       "simplify-mir", cl::Hidden,
#   67|       cl::desc("Leave out unnecessary information when printing MIR"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MIRPrinter.cpp:69: constructor_uses_global_object: The constructor of global object "PrintLocations" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintLocations" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   67|       cl::desc("Leave out unnecessary information when printing MIR"));
#   68|   
#   69|-> static cl::opt<bool> PrintLocations("mir-debug-loc", cl::Hidden, cl::init(true),
#   70|                                       cl::desc("Print MIR debug-locations"));
#   71|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MIRSampleProfile.cpp:44: constructor_uses_global_object: The constructor of global object "ShowFSBranchProb" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ShowFSBranchProb" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   42|   #define DEBUG_TYPE "fs-profile-loader"
#   43|   
#   44|-> static cl::opt<bool> ShowFSBranchProb(
#   45|       "show-fs-branchprob", cl::Hidden, cl::init(false),
#   46|       cl::desc("Print setting flow sensitive branch probabilities"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MIRSampleProfile.cpp:47: constructor_uses_global_object: The constructor of global object "FSProfileDebugProbDiffThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FSProfileDebugProbDiffThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   45|       "show-fs-branchprob", cl::Hidden, cl::init(false),
#   46|       cl::desc("Print setting flow sensitive branch probabilities"));
#   47|-> static cl::opt<unsigned> FSProfileDebugProbDiffThreshold(
#   48|       "fs-profile-debug-prob-diff-threshold", cl::init(10),
#   49|       cl::desc("Only show debug message if the branch probility is greater than "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MIRSampleProfile.cpp:52: constructor_uses_global_object: The constructor of global object "FSProfileDebugBWThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FSProfileDebugBWThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   50|                "this value (in percentage)."));
#   51|   
#   52|-> static cl::opt<unsigned> FSProfileDebugBWThreshold(
#   53|       "fs-profile-debug-bw-threshold", cl::init(10000),
#   54|       cl::desc("Only show debug message if the source branch weight is greater "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MIRSampleProfile.cpp:57: constructor_uses_global_object: The constructor of global object "ViewBFIBefore" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ViewBFIBefore" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   55|                " than this value."));
#   56|   
#   57|-> static cl::opt<bool> ViewBFIBefore("fs-viewbfi-before", cl::Hidden,
#   58|                                      cl::init(false),
#   59|                                      cl::desc("View BFI before MIR loader"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MIRSampleProfile.cpp:60: constructor_uses_global_object: The constructor of global object "ViewBFIAfter" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ViewBFIAfter" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   58|                                      cl::init(false),
#   59|                                      cl::desc("View BFI before MIR loader"));
#   60|-> static cl::opt<bool> ViewBFIAfter("fs-viewbfi-after", cl::Hidden,
#   61|                                     cl::init(false),
#   62|                                     cl::desc("View BFI after MIR loader"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MIRVRegNamerUtils.cpp:19: constructor_uses_global_object: The constructor of global object "UseStableNamerHash" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseStableNamerHash" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   17|   
#   18|   static cl::opt<bool>
#   19|->     UseStableNamerHash("mir-vreg-namer-use-stable-hash", cl::init(false),
#   20|                          cl::Hidden,
#   21|                          cl::desc("Use Stable Hashing for MIR VReg Renaming"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MLRegallocEvictAdvisor.cpp:57: constructor_uses_global_object: The constructor of global object "InteractiveChannelBaseName[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InteractiveChannelBaseName[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   55|   #endif
#   56|   
#   57|-> static cl::opt<std::string> InteractiveChannelBaseName(
#   58|       "regalloc-evict-interactive-channel-base", cl::Hidden,
#   59|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MLRegallocPriorityAdvisor.cpp:44: constructor_uses_global_object: The constructor of global object "InteractiveChannelBaseName[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InteractiveChannelBaseName[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   42|   using namespace llvm;
#   43|   
#   44|-> static cl::opt<std::string> InteractiveChannelBaseName(
#   45|       "regalloc-priority-interactive-channel-base", cl::Hidden,
#   46|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBasicBlock.cpp:45: constructor_uses_global_object: The constructor of global object "PrintSlotIndexes" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintSlotIndexes" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   43|   #define DEBUG_TYPE "codegen"
#   44|   
#   45|-> static cl::opt<bool> PrintSlotIndexes(
#   46|       "print-slotindexes",
#   47|       cl::desc("When printing machine IR, annotate instructions and blocks with "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockFrequencyInfo.cpp:33: constructor_uses_global_object: The constructor of global object "llvm::ViewMachineBlockFreqPropagationDAG" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ViewMachineBlockFreqPropagationDAG" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   31|   
#   32|   namespace llvm {
#   33|-> static cl::opt<GVDAGType> ViewMachineBlockFreqPropagationDAG(
#   34|       "view-machine-block-freq-propagation-dags", cl::Hidden,
#   35|       cl::desc("Pop up a window to show a dag displaying how machine block "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockFrequencyInfo.cpp:48: constructor_uses_global_object: The constructor of global object "llvm::ViewBlockLayoutWithBFI" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ViewBlockLayoutWithBFI" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   46|   
#   47|   // Similar option above, but used to control BFI display only after MBP pass
#   48|-> cl::opt<GVDAGType> ViewBlockLayoutWithBFI(
#   49|       "view-block-layout-with-bfi", cl::Hidden,
#   50|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockFrequencyInfo.cpp:72: constructor_uses_global_object: The constructor of global object "llvm::PrintMachineBlockFreq" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::PrintMachineBlockFreq" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   70|   extern cl::opt<unsigned> ViewHotFreqPercent;
#   71|   
#   72|-> static cl::opt<bool> PrintMachineBlockFreq(
#   73|       "print-machine-bfi", cl::init(false), cl::Hidden,
#   74|       cl::desc("Print the machine block frequency info."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:87: constructor_uses_global_object: The constructor of global object "AlignAllBlock" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AlignAllBlock" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   85|             "Potential frequency of taking unconditional branches");
#   86|   
#   87|-> static cl::opt<unsigned> AlignAllBlock(
#   88|       "align-all-blocks",
#   89|       cl::desc("Force the alignment of all blocks in the function in log2 format "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:93: constructor_uses_global_object: The constructor of global object "AlignAllNonFallThruBlocks" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AlignAllNonFallThruBlocks" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   91|       cl::init(0), cl::Hidden);
#   92|   
#   93|-> static cl::opt<unsigned> AlignAllNonFallThruBlocks(
#   94|       "align-all-nofallthru-blocks",
#   95|       cl::desc("Force the alignment of all blocks that have no fall-through "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:100: constructor_uses_global_object: The constructor of global object "MaxBytesForAlignmentOverride" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxBytesForAlignmentOverride" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   98|       cl::init(0), cl::Hidden);
#   99|   
#  100|-> static cl::opt<unsigned> MaxBytesForAlignmentOverride(
#  101|       "max-bytes-for-alignment",
#  102|       cl::desc("Forces the maximum bytes allowed to be emitted when padding for "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:107: constructor_uses_global_object: The constructor of global object "ExitBlockBias" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ExitBlockBias" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  105|   
#  106|   // FIXME: Find a good default for this flag and remove the flag.
#  107|-> static cl::opt<unsigned> ExitBlockBias(
#  108|       "block-placement-exit-block-bias",
#  109|       cl::desc("Block frequency percentage a loop exit block needs "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:116: constructor_uses_global_object: The constructor of global object "LoopToColdBlockRatio" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LoopToColdBlockRatio" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  114|   // - Outlining: placement of a basic block outside the chain or hot path.
#  115|   
#  116|-> static cl::opt<unsigned> LoopToColdBlockRatio(
#  117|       "loop-to-cold-block-ratio",
#  118|       cl::desc("Outline loop blocks from loop chain if (frequency of loop) / "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:122: constructor_uses_global_object: The constructor of global object "ForceLoopColdBlock" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForceLoopColdBlock" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  120|       cl::init(5), cl::Hidden);
#  121|   
#  122|-> static cl::opt<bool> ForceLoopColdBlock(
#  123|       "force-loop-cold-block",
#  124|       cl::desc("Force outlining cold blocks from loops."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:128: constructor_uses_global_object: The constructor of global object "PreciseRotationCost" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PreciseRotationCost" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  126|   
#  127|   static cl::opt<bool>
#  128|->     PreciseRotationCost("precise-rotation-cost",
#  129|                           cl::desc("Model the cost of loop rotation more "
#  130|                                    "precisely by using profile data."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:134: constructor_uses_global_object: The constructor of global object "ForcePreciseRotationCost" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForcePreciseRotationCost" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  132|   
#  133|   static cl::opt<bool>
#  134|->     ForcePreciseRotationCost("force-precise-rotation-cost",
#  135|                                cl::desc("Force the use of precise cost "
#  136|                                         "loop rotation strategy."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:139: constructor_uses_global_object: The constructor of global object "MisfetchCost" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MisfetchCost" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  137|                                cl::init(false), cl::Hidden);
#  138|   
#  139|-> static cl::opt<unsigned> MisfetchCost(
#  140|       "misfetch-cost",
#  141|       cl::desc("Cost that models the probabilistic risk of an instruction "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:146: constructor_uses_global_object: The constructor of global object "JumpInstCost" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "JumpInstCost" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  144|       cl::init(1), cl::Hidden);
#  145|   
#  146|-> static cl::opt<unsigned> JumpInstCost("jump-inst-cost",
#  147|                                         cl::desc("Cost of jump instructions."),
#  148|                                         cl::init(1), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:150: constructor_uses_global_object: The constructor of global object "TailDupPlacement" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TailDupPlacement" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  148|                                         cl::init(1), cl::Hidden);
#  149|   static cl::opt<bool>
#  150|-> TailDupPlacement("tail-dup-placement",
#  151|                 cl::desc("Perform tail duplication during placement. "
#  152|                          "Creates more fallthrough opportunites in "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:157: constructor_uses_global_object: The constructor of global object "BranchFoldPlacement" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BranchFoldPlacement" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  155|   
#  156|   static cl::opt<bool>
#  157|-> BranchFoldPlacement("branch-fold-placement",
#  158|                 cl::desc("Perform branch folding during placement. "
#  159|                          "Reduces code size."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:163: constructor_uses_global_object: The constructor of global object "TailDupPlacementThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TailDupPlacementThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  161|   
#  162|   // Heuristic for tail duplication.
#  163|-> static cl::opt<unsigned> TailDupPlacementThreshold(
#  164|       "tail-dup-placement-threshold",
#  165|       cl::desc("Instruction cutoff for tail duplication during layout. "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:171: constructor_uses_global_object: The constructor of global object "TailDupPlacementAggressiveThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TailDupPlacementAggressiveThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  169|   
#  170|   // Heuristic for aggressive tail duplication.
#  171|-> static cl::opt<unsigned> TailDupPlacementAggressiveThreshold(
#  172|       "tail-dup-placement-aggressive-threshold",
#  173|       cl::desc("Instruction cutoff for aggressive tail duplication during "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:179: constructor_uses_global_object: The constructor of global object "TailDupPlacementPenalty" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TailDupPlacementPenalty" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  177|   
#  178|   // Heuristic for tail duplication.
#  179|-> static cl::opt<unsigned> TailDupPlacementPenalty(
#  180|       "tail-dup-placement-penalty",
#  181|       cl::desc("Cost penalty for blocks that can avoid breaking CFG by copying. "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:189: constructor_uses_global_object: The constructor of global object "TailDupProfilePercentThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TailDupProfilePercentThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  187|   
#  188|   // Heuristic for tail duplication if profile count is used in cost model.
#  189|-> static cl::opt<unsigned> TailDupProfilePercentThreshold(
#  190|       "tail-dup-profile-percent-threshold",
#  191|       cl::desc("If profile count information is used in tail duplication cost "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:197: constructor_uses_global_object: The constructor of global object "TriangleChainCount" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TriangleChainCount" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  195|   
#  196|   // Heuristic for triangle chains.
#  197|-> static cl::opt<unsigned> TriangleChainCount(
#  198|       "triangle-chain-count",
#  199|       cl::desc("Number of triangle-shaped-CFG's that need to be in a row for the "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBlockPlacement.cpp:209: constructor_uses_global_object: The constructor of global object "RenumberBlocksBeforeView" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RenumberBlocksBeforeView" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  207|   // With this option on, the basic blocks are renumbered in function layout
#  208|   // order. For debugging only.
#  209|-> static cl::opt<bool> RenumberBlocksBeforeView(
#  210|       "renumber-blocks-before-view",
#  211|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBranchProbabilityInfo.cpp:28: constructor_uses_global_object: The constructor of global object "llvm::StaticLikelyProb" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::StaticLikelyProb" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   26|   namespace llvm {
#   27|   cl::opt<unsigned>
#   28|->     StaticLikelyProb("static-likely-prob",
#   29|                        cl::desc("branch probability threshold in percentage"
#   30|                                 "to be considered very likely"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineBranchProbabilityInfo.cpp:33: constructor_uses_global_object: The constructor of global object "llvm::ProfileLikelyProb" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ProfileLikelyProb" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   31|                        cl::init(80), cl::Hidden);
#   32|   
#   33|-> cl::opt<unsigned> ProfileLikelyProb(
#   34|       "profile-likely-prob",
#   35|       cl::desc("branch probability threshold in percentage to be considered"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineCFGPrinter.cpp:28: constructor_uses_global_object: The constructor of global object "MCFGFuncName[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MCFGFuncName[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   26|   
#   27|   static cl::opt<std::string>
#   28|->     MCFGFuncName("mcfg-func-name", cl::Hidden,
#   29|                    cl::desc("The name of a function (or its substring)"
#   30|                             " whose CFG is viewed/printed."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineCFGPrinter.cpp:32: constructor_uses_global_object: The constructor of global object "MCFGDotFilenamePrefix[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MCFGDotFilenamePrefix[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   30|                             " whose CFG is viewed/printed."));
#   31|   
#   32|-> static cl::opt<std::string> MCFGDotFilenamePrefix(
#   33|       "mcfg-dot-filename-prefix", cl::Hidden,
#   34|       cl::desc("The prefix used for the Machine CFG dot file names."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineCFGPrinter.cpp:37: constructor_uses_global_object: The constructor of global object "CFGOnly" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CFGOnly" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   35|   
#   36|   static cl::opt<bool>
#   37|->     CFGOnly("dot-mcfg-only", cl::init(false), cl::Hidden,
#   38|               cl::desc("Print only the CFG without blocks body"));
#   39|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineCSE.cpp:65: constructor_uses_global_object: The constructor of global object "CSUsesThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CSUsesThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|   // Threshold to avoid excessive cost to compute isProfitableToCSE.
#   64|   static cl::opt<int>
#   65|->     CSUsesThreshold("csuses-threshold", cl::Hidden, cl::init(1024),
#   66|                       cl::desc("Threshold for the size of CSUses"));
#   67|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineCombiner.cpp:42: constructor_uses_global_object: The constructor of global object "inc_threshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "inc_threshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   40|   
#   41|   static cl::opt<unsigned>
#   42|-> inc_threshold("machine-combiner-inc-threshold", cl::Hidden,
#   43|                 cl::desc("Incremental depth computation will be used for basic "
#   44|                          "blocks with more instructions."), cl::init(500));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineCombiner.cpp:46: constructor_uses_global_object: The constructor of global object "dump_intrs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "dump_intrs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   44|                          "blocks with more instructions."), cl::init(500));
#   45|   
#   46|-> static cl::opt<bool> dump_intrs("machine-combiner-dump-subst-intrs", cl::Hidden,
#   47|                                   cl::desc("Dump all substituted intrs"),
#   48|                                   cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineCombiner.cpp:57: constructor_uses_global_object: The constructor of global object "VerifyPatternOrder" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyPatternOrder" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   55|       cl::init(true));
#   56|   #else
#   57|-> static cl::opt<bool> VerifyPatternOrder(
#   58|       "machine-combiner-verify-pattern-order", cl::Hidden,
#   59|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineCopyPropagation.cpp:88: constructor_uses_global_object: The constructor of global object "MCPUseCopyInstr" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MCPUseCopyInstr" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   86|                 "Controls which register COPYs are forwarded");
#   87|   
#   88|-> static cl::opt<bool> MCPUseCopyInstr("mcp-use-is-copy-instr", cl::init(false),
#   89|                                        cl::Hidden);
#   90|   static cl::opt<cl::boolOrDefault>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineCopyPropagation.cpp:91: constructor_uses_global_object: The constructor of global object "EnableSpillageCopyElimination" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSpillageCopyElimination" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   89|                                        cl::Hidden);
#   90|   static cl::opt<cl::boolOrDefault>
#   91|->     EnableSpillageCopyElimination("enable-spill-copy-elim", cl::Hidden);
#   92|   
#   93|   namespace {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineDominators.cpp:33: constructor_uses_global_object: The constructor of global object "VerifyMachineDomInfoX" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyMachineDomInfoX" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   31|   } // namespace llvm
#   32|   
#   33|-> static cl::opt<bool, true> VerifyMachineDomInfoX(
#   34|       "verify-machine-dom-info", cl::location(VerifyMachineDomInfo), cl::Hidden,
#   35|       cl::desc("Verify machine dominator info (time consuming)"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineFunction.cpp:84: constructor_uses_global_object: The constructor of global object "AlignAllFunctions" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AlignAllFunctions" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   82|   #define DEBUG_TYPE "codegen"
#   83|   
#   84|-> static cl::opt<unsigned> AlignAllFunctions(
#   85|       "align-all-functions",
#   86|       cl::desc("Force the alignment of all functions in log2 format (e.g. 4 "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineFunctionSplitter.cpp:53: constructor_uses_global_object: The constructor of global object "PercentileCutoff" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PercentileCutoff" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   51|   // Intel CPUs.
#   52|   static cl::opt<unsigned>
#   53|->     PercentileCutoff("mfs-psi-cutoff",
#   54|                        cl::desc("Percentile profile summary cutoff used to "
#   55|                                 "determine cold blocks. Unused if set to zero."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineFunctionSplitter.cpp:58: constructor_uses_global_object: The constructor of global object "ColdCountThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ColdCountThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   56|                        cl::init(999950), cl::Hidden);
#   57|   
#   58|-> static cl::opt<unsigned> ColdCountThreshold(
#   59|       "mfs-count-threshold",
#   60|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineFunctionSplitter.cpp:64: constructor_uses_global_object: The constructor of global object "SplitAllEHCode" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SplitAllEHCode" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   62|       cl::init(1), cl::Hidden);
#   63|   
#   64|-> static cl::opt<bool> SplitAllEHCode(
#   65|       "mfs-split-ehcode",
#   66|       cl::desc("Splits all EH code and it's descendants by default."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineLICM.cpp:62: constructor_uses_global_object: The constructor of global object "AvoidSpeculation" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AvoidSpeculation" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   60|   
#   61|   static cl::opt<bool>
#   62|-> AvoidSpeculation("avoid-speculation",
#   63|                    cl::desc("MachineLICM should avoid speculation"),
#   64|                    cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineLICM.cpp:67: constructor_uses_global_object: The constructor of global object "HoistCheapInsts" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HoistCheapInsts" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   65|   
#   66|   static cl::opt<bool>
#   67|-> HoistCheapInsts("hoist-cheap-insts",
#   68|                   cl::desc("MachineLICM should hoist even cheap instructions"),
#   69|                   cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineLICM.cpp:72: constructor_uses_global_object: The constructor of global object "HoistConstStores" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HoistConstStores" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   70|   
#   71|   static cl::opt<bool>
#   72|-> HoistConstStores("hoist-const-stores",
#   73|                    cl::desc("Hoist invariant stores"),
#   74|                    cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineLICM.cpp:78: constructor_uses_global_object: The constructor of global object "BlockFrequencyRatioThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BlockFrequencyRatioThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   76|   // is based on empirical data on a single target and is subject to tuning.
#   77|   static cl::opt<unsigned>
#   78|-> BlockFrequencyRatioThreshold("block-freq-ratio-threshold",
#   79|                                cl::desc("Do not hoist instructions if target"
#   80|                                "block is N times hotter than the source."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineLICM.cpp:86: constructor_uses_global_object: The constructor of global object "DisableHoistingToHotterBlocks" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableHoistingToHotterBlocks" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   84|   
#   85|   static cl::opt<UseBFI>
#   86|-> DisableHoistingToHotterBlocks("disable-hoisting-to-hotter-blocks",
#   87|                                 cl::desc("Disable hoisting instructions to"
#   88|                                 " hotter blocks"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineModuleInfo.cpp:35: constructor_uses_global_object: The constructor of global object "DisableDebugInfoPrinting" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableDebugInfoPrinting" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|   
#   34|   static cl::opt<bool>
#   35|->     DisableDebugInfoPrinting("disable-debug-info-print", cl::Hidden,
#   36|                                cl::desc("Disable debug info printing"));
#   37|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineOperand.cpp:36: constructor_uses_global_object: The constructor of global object "PrintRegMaskNumRegs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintRegMaskNumRegs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   34|   
#   35|   static cl::opt<int>
#   36|->     PrintRegMaskNumRegs("print-regmask-num-regs",
#   37|                           cl::desc("Number of registers to limit to when "
#   38|                                    "printing regmask operands in IR dumps. "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineOutliner.cpp:106: constructor_uses_global_object: The constructor of global object "EnableLinkOnceODROutlining" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableLinkOnceODROutlining" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  104|   // this is off by default. It should, however, be the default behaviour in
#  105|   // LTO.
#  106|-> static cl::opt<bool> EnableLinkOnceODROutlining(
#  107|       "enable-linkonceodr-outlining", cl::Hidden,
#  108|       cl::desc("Enable the machine outliner on linkonceodr functions"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineOutliner.cpp:114: constructor_uses_global_object: The constructor of global object "OutlinerReruns" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OutlinerReruns" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  112|   /// as the outliner will run at least one time. The default value is set to 0,
#  113|   /// meaning the outliner will run one time and rerun zero times after that.
#  114|-> static cl::opt<unsigned> OutlinerReruns(
#  115|       "machine-outliner-reruns", cl::init(0), cl::Hidden,
#  116|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineOutliner.cpp:119: constructor_uses_global_object: The constructor of global object "OutlinerBenefitThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OutlinerBenefitThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  117|           "Number of times to rerun the outliner after the initial outline"));
#  118|   
#  119|-> static cl::opt<unsigned> OutlinerBenefitThreshold(
#  120|       "outliner-benefit-threshold", cl::init(1), cl::Hidden,
#  121|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachinePipeliner.cpp:114: constructor_uses_global_object: The constructor of global object "EnableSWP" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSWP" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  112|   
#  113|   /// A command line option to turn software pipelining on or off.
#  114|-> static cl::opt<bool> EnableSWP("enable-pipeliner", cl::Hidden, cl::init(true),
#  115|                                  cl::desc("Enable Software Pipelining"));
#  116|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachinePipeliner.cpp:118: constructor_uses_global_object: The constructor of global object "EnableSWPOptSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSWPOptSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  116|   
#  117|   /// A command line option to enable SWP at -Os.
#  118|-> static cl::opt<bool> EnableSWPOptSize("enable-pipeliner-opt-size",
#  119|                                         cl::desc("Enable SWP at Os."), cl::Hidden,
#  120|                                         cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachinePipeliner.cpp:123: constructor_uses_global_object: The constructor of global object "SwpMaxMii" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SwpMaxMii" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  121|   
#  122|   /// A command line argument to limit minimum initial interval for pipelining.
#  123|-> static cl::opt<int> SwpMaxMii("pipeliner-max-mii",
#  124|                                 cl::desc("Size limit for the MII."),
#  125|                                 cl::Hidden, cl::init(27));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachinePipeliner.cpp:129: constructor_uses_global_object: The constructor of global object "SwpForceII" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SwpForceII" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  127|   /// A command line argument to force pipeliner to use specified initial
#  128|   /// interval.
#  129|-> static cl::opt<int> SwpForceII("pipeliner-force-ii",
#  130|                                  cl::desc("Force pipeliner to use specified II."),
#  131|                                  cl::Hidden, cl::init(-1));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachinePipeliner.cpp:135: constructor_uses_global_object: The constructor of global object "SwpMaxStages" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SwpMaxStages" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  133|   /// A command line argument to limit the number of stages in the pipeline.
#  134|   static cl::opt<int>
#  135|->     SwpMaxStages("pipeliner-max-stages",
#  136|                    cl::desc("Maximum stages allowed in the generated scheduled."),
#  137|                    cl::Hidden, cl::init(3));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachinePipeliner.cpp:142: constructor_uses_global_object: The constructor of global object "SwpPruneDeps" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SwpPruneDeps" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  140|   /// an unrelated Phi.
#  141|   static cl::opt<bool>
#  142|->     SwpPruneDeps("pipeliner-prune-deps",
#  143|                    cl::desc("Prune dependences between unrelated Phi nodes."),
#  144|                    cl::Hidden, cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachinePipeliner.cpp:149: constructor_uses_global_object: The constructor of global object "SwpPruneLoopCarried" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SwpPruneLoopCarried" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  147|   /// dependences.
#  148|   static cl::opt<bool>
#  149|->     SwpPruneLoopCarried("pipeliner-prune-loop-carried",
#  150|                           cl::desc("Prune loop carried order dependences."),
#  151|                           cl::Hidden, cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachinePipeliner.cpp:157: constructor_uses_global_object: The constructor of global object "SwpIgnoreRecMII" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SwpIgnoreRecMII" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  155|   #endif
#  156|   
#  157|-> static cl::opt<bool> SwpIgnoreRecMII("pipeliner-ignore-recmii",
#  158|                                        cl::ReallyHidden,
#  159|                                        cl::desc("Ignore RecMII"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachinePipeliner.cpp:161: constructor_uses_global_object: The constructor of global object "SwpShowResMask" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SwpShowResMask" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  159|                                        cl::desc("Ignore RecMII"));
#  160|   
#  161|-> static cl::opt<bool> SwpShowResMask("pipeliner-show-mask", cl::Hidden,
#  162|                                       cl::init(false));
#  163|   static cl::opt<bool> SwpDebugResource("pipeliner-dbg-res", cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachinePipeliner.cpp:163: constructor_uses_global_object: The constructor of global object "SwpDebugResource" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SwpDebugResource" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  161|   static cl::opt<bool> SwpShowResMask("pipeliner-show-mask", cl::Hidden,
#  162|                                       cl::init(false));
#  163|-> static cl::opt<bool> SwpDebugResource("pipeliner-dbg-res", cl::Hidden,
#  164|                                         cl::init(false));
#  165|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachinePipeliner.cpp:166: constructor_uses_global_object: The constructor of global object "EmitTestAnnotations" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EmitTestAnnotations" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  164|                                         cl::init(false));
#  165|   
#  166|-> static cl::opt<bool> EmitTestAnnotations(
#  167|       "pipeliner-annotate-for-testing", cl::Hidden, cl::init(false),
#  168|       cl::desc("Instead of emitting the pipelined code, annotate instructions "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachinePipeliner.cpp:172: constructor_uses_global_object: The constructor of global object "ExperimentalCodeGen" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ExperimentalCodeGen" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  170|                "-modulo-schedule-test pass"));
#  171|   
#  172|-> static cl::opt<bool> ExperimentalCodeGen(
#  173|       "pipeliner-experimental-cg", cl::Hidden, cl::init(false),
#  174|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachinePipeliner.cpp:180: constructor_uses_global_object: The constructor of global object "llvm::SwpEnableCopyToPhi" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::SwpEnableCopyToPhi" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  178|   
#  179|   // A command line option to enable the CopyToPhi DAG mutation.
#  180|-> cl::opt<bool> SwpEnableCopyToPhi("pipeliner-enable-copytophi", cl::ReallyHidden,
#  181|                                    cl::init(true),
#  182|                                    cl::desc("Enable CopyToPhi DAG Mutation"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachinePipeliner.cpp:186: constructor_uses_global_object: The constructor of global object "llvm::SwpForceIssueWidth" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::SwpForceIssueWidth" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  184|   /// A command line argument to force pipeliner to use specified issue
#  185|   /// width.
#  186|-> cl::opt<int> SwpForceIssueWidth(
#  187|       "pipeliner-force-issue-width",
#  188|       cl::desc("Force pipeliner to use specified issue width."), cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineRegisterInfo.cpp:37: constructor_uses_global_object: The constructor of global object "EnableSubRegLiveness" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSubRegLiveness" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   35|   using namespace llvm;
#   36|   
#   37|-> static cl::opt<bool> EnableSubRegLiveness("enable-subreg-liveness", cl::Hidden,
#   38|     cl::init(true), cl::desc("Enable subregister liveness tracking."));
#   39|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineScheduler.cpp:80: constructor_uses_global_object: The constructor of global object "llvm::ForceTopDown" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ForceTopDown" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   78|   namespace llvm {
#   79|   
#   80|-> cl::opt<bool> ForceTopDown("misched-topdown", cl::Hidden,
#   81|                              cl::desc("Force top-down list scheduling"));
#   82|   cl::opt<bool> ForceBottomUp("misched-bottomup", cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineScheduler.cpp:82: constructor_uses_global_object: The constructor of global object "llvm::ForceBottomUp" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ForceBottomUp" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   80|   cl::opt<bool> ForceTopDown("misched-topdown", cl::Hidden,
#   81|                              cl::desc("Force top-down list scheduling"));
#   82|-> cl::opt<bool> ForceBottomUp("misched-bottomup", cl::Hidden,
#   83|                               cl::desc("Force bottom-up list scheduling"));
#   84|   cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineScheduler.cpp:85: constructor_uses_global_object: The constructor of global object "llvm::DumpCriticalPathLength" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::DumpCriticalPathLength" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   83|                               cl::desc("Force bottom-up list scheduling"));
#   84|   cl::opt<bool>
#   85|-> DumpCriticalPathLength("misched-dcpl", cl::Hidden,
#   86|                          cl::desc("Print critical path length to stdout"));
#   87|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineScheduler.cpp:88: constructor_uses_global_object: The constructor of global object "llvm::VerifyScheduling" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::VerifyScheduling" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   86|                          cl::desc("Print critical path length to stdout"));
#   87|   
#   88|-> cl::opt<bool> VerifyScheduling(
#   89|       "verify-misched", cl::Hidden,
#   90|       cl::desc("Verify machine instrs before and after machine scheduling"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineScheduler.cpp:132: constructor_uses_global_object: The constructor of global object "ReadyListLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ReadyListLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  130|   /// Avoid quadratic complexity in unusually large basic blocks by limiting the
#  131|   /// size of the ready lists.
#  132|-> static cl::opt<unsigned> ReadyListLimit("misched-limit", cl::Hidden,
#  133|     cl::desc("Limit ready list to N instructions"), cl::init(256));
#  134|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineScheduler.cpp:135: constructor_uses_global_object: The constructor of global object "EnableRegPressure" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableRegPressure" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  133|     cl::desc("Limit ready list to N instructions"), cl::init(256));
#  134|   
#  135|-> static cl::opt<bool> EnableRegPressure("misched-regpressure", cl::Hidden,
#  136|     cl::desc("Enable register pressure scheduling."), cl::init(true));
#  137|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineScheduler.cpp:138: constructor_uses_global_object: The constructor of global object "EnableCyclicPath" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableCyclicPath" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  136|     cl::desc("Enable register pressure scheduling."), cl::init(true));
#  137|   
#  138|-> static cl::opt<bool> EnableCyclicPath("misched-cyclicpath", cl::Hidden,
#  139|     cl::desc("Enable cyclic critical path analysis."), cl::init(true));
#  140|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineScheduler.cpp:141: constructor_uses_global_object: The constructor of global object "EnableMemOpCluster" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMemOpCluster" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  139|     cl::desc("Enable cyclic critical path analysis."), cl::init(true));
#  140|   
#  141|-> static cl::opt<bool> EnableMemOpCluster("misched-cluster", cl::Hidden,
#  142|                                           cl::desc("Enable memop clustering."),
#  143|                                           cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineScheduler.cpp:145: constructor_uses_global_object: The constructor of global object "ForceFastCluster" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForceFastCluster" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  143|                                           cl::init(true));
#  144|   static cl::opt<bool>
#  145|->     ForceFastCluster("force-fast-cluster", cl::Hidden,
#  146|                        cl::desc("Switch to fast cluster algorithm with the lost "
#  147|                                 "of some fusion opportunities"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineScheduler.cpp:150: constructor_uses_global_object: The constructor of global object "FastClusterThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FastClusterThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  148|                        cl::init(false));
#  149|   static cl::opt<unsigned>
#  150|->     FastClusterThreshold("fast-cluster-threshold", cl::Hidden,
#  151|                            cl::desc("The threshold for fast cluster"),
#  152|                            cl::init(1000));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineScheduler.cpp:173: constructor_uses_global_object: The constructor of global object "MIResourceCutOff" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MIResourceCutOff" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  171|   
#  172|   static cl::opt<unsigned>
#  173|->     MIResourceCutOff("misched-resource-cutoff", cl::Hidden,
#  174|                        cl::desc("Number of intervals to track"), cl::init(10));
#  175|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineScheduler.cpp:310: constructor_uses_global_object: The constructor of global object "MachineSchedOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MachineSchedOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  308|   static cl::opt<MachineSchedRegistry::ScheduleDAGCtor, false,
#  309|                  RegisterPassParser<MachineSchedRegistry>>
#  310|-> MachineSchedOpt("misched",
#  311|                   cl::init(&useDefaultMachineSched), cl::Hidden,
#  312|                   cl::desc("Machine instruction scheduler to use"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineScheduler.cpp:318: constructor_uses_global_object: The constructor of global object "EnableMachineSched" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMachineSched" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  316|                        useDefaultMachineSched);
#  317|   
#  318|-> static cl::opt<bool> EnableMachineSched(
#  319|       "enable-misched",
#  320|       cl::desc("Enable the machine instruction scheduling pass."), cl::init(true),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineScheduler.cpp:323: constructor_uses_global_object: The constructor of global object "EnablePostRAMachineSched" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnablePostRAMachineSched" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  321|       cl::Hidden);
#  322|   
#  323|-> static cl::opt<bool> EnablePostRAMachineSched(
#  324|       "enable-post-misched",
#  325|       cl::desc("Enable the post-ra machine instruction scheduling pass."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineSink.cpp:68: constructor_uses_global_object: The constructor of global object "SplitEdges" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SplitEdges" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   66|   
#   67|   static cl::opt<bool>
#   68|-> SplitEdges("machine-sink-split",
#   69|              cl::desc("Split critical edges during machine sinking"),
#   70|              cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineSink.cpp:73: constructor_uses_global_object: The constructor of global object "UseBlockFreqInfo" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseBlockFreqInfo" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   71|   
#   72|   static cl::opt<bool>
#   73|-> UseBlockFreqInfo("machine-sink-bfi",
#   74|              cl::desc("Use block frequency info to find successors to sink"),
#   75|              cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineSink.cpp:77: constructor_uses_global_object: The constructor of global object "SplitEdgeProbabilityThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SplitEdgeProbabilityThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   75|              cl::init(true), cl::Hidden);
#   76|   
#   77|-> static cl::opt<unsigned> SplitEdgeProbabilityThreshold(
#   78|       "machine-sink-split-probability-threshold",
#   79|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineSink.cpp:86: constructor_uses_global_object: The constructor of global object "SinkLoadInstsPerBlockThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SinkLoadInstsPerBlockThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   84|       cl::init(40), cl::Hidden);
#   85|   
#   86|-> static cl::opt<unsigned> SinkLoadInstsPerBlockThreshold(
#   87|       "machine-sink-load-instrs-threshold",
#   88|       cl::desc("Do not try to find alias store for a load if there is a in-path "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineSink.cpp:92: constructor_uses_global_object: The constructor of global object "SinkLoadBlocksThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SinkLoadBlocksThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   90|       cl::init(2000), cl::Hidden);
#   91|   
#   92|-> static cl::opt<unsigned> SinkLoadBlocksThreshold(
#   93|       "machine-sink-load-blocks-threshold",
#   94|       cl::desc("Do not try to find alias store for a load if the block number in "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineSink.cpp:99: constructor_uses_global_object: The constructor of global object "SinkInstsIntoCycle" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SinkInstsIntoCycle" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   97|   
#   98|   static cl::opt<bool>
#   99|->     SinkInstsIntoCycle("sink-insts-to-avoid-spills",
#  100|                          cl::desc("Sink instructions into cycles to avoid "
#  101|                                   "register spills"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineSink.cpp:104: constructor_uses_global_object: The constructor of global object "SinkIntoCycleLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SinkIntoCycleLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  102|                          cl::init(false), cl::Hidden);
#  103|   
#  104|-> static cl::opt<unsigned> SinkIntoCycleLimit(
#  105|       "machine-sink-cycle-limit",
#  106|       cl::desc("The maximum number of instructions considered for cycle sinking."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MachineStripDebug.cpp:27: constructor_uses_global_object: The constructor of global object "<unnamed>::OnlyDebugifiedDefault" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OnlyDebugifiedDefault" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   25|   namespace {
#   26|   cl::opt<bool>
#   27|->     OnlyDebugifiedDefault("mir-strip-debugify-only",
#   28|                             cl::desc("Should mir-strip-debug only strip debug "
#   29|                                      "info from debugified modules by default"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/MacroFusion.cpp:31: constructor_uses_global_object: The constructor of global object "EnableMacroFusion" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMacroFusion" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   29|   using namespace llvm;
#   30|   
#   31|-> static cl::opt<bool> EnableMacroFusion("misched-fusion", cl::Hidden,
#   32|     cl::desc("Enable scheduling for macro fusion."), cl::init(true));
#   33|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/PHIElimination.cpp:50: constructor_uses_global_object: The constructor of global object "DisableEdgeSplitting" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableEdgeSplitting" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   48|   
#   49|   static cl::opt<bool>
#   50|-> DisableEdgeSplitting("disable-phi-elim-edge-splitting", cl::init(false),
#   51|                        cl::Hidden, cl::desc("Disable critical edge splitting "
#   52|                                             "during PHI elimination"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/PHIElimination.cpp:55: constructor_uses_global_object: The constructor of global object "SplitAllCriticalEdges" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SplitAllCriticalEdges" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   53|   
#   54|   static cl::opt<bool>
#   55|-> SplitAllCriticalEdges("phi-elim-split-all-critical-edges", cl::init(false),
#   56|                         cl::Hidden, cl::desc("Split all critical edges during "
#   57|                                              "PHI elimination"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/PHIElimination.cpp:59: constructor_uses_global_object: The constructor of global object "NoPhiElimLiveOutEarlyExit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "NoPhiElimLiveOutEarlyExit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   57|                                              "PHI elimination"));
#   58|   
#   59|-> static cl::opt<bool> NoPhiElimLiveOutEarlyExit(
#   60|       "no-phi-elim-live-out-early-exit", cl::init(false), cl::Hidden,
#   61|       cl::desc("Do not use an early exit if isLiveOutPastPHIs returns true."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/PeepholeOptimizer.cpp:106: constructor_uses_global_object: The constructor of global object "Aggressive" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Aggressive" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  104|   // Optimize Extensions
#  105|   static cl::opt<bool>
#  106|-> Aggressive("aggressive-ext-opt", cl::Hidden,
#  107|              cl::desc("Aggressive extension optimization"));
#  108|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/PeepholeOptimizer.cpp:110: constructor_uses_global_object: The constructor of global object "DisablePeephole" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisablePeephole" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  108|   
#  109|   static cl::opt<bool>
#  110|-> DisablePeephole("disable-peephole", cl::Hidden, cl::init(false),
#  111|                   cl::desc("Disable the peephole optimizer"));
#  112|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/PeepholeOptimizer.cpp:117: constructor_uses_global_object: The constructor of global object "DisableAdvCopyOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableAdvCopyOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  115|   /// bails on everything that is not a copy or a bitcast.
#  116|   static cl::opt<bool>
#  117|-> DisableAdvCopyOpt("disable-adv-copy-opt", cl::Hidden, cl::init(false),
#  118|                     cl::desc("Disable advanced copy optimization"));
#  119|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/PeepholeOptimizer.cpp:120: constructor_uses_global_object: The constructor of global object "DisableNAPhysCopyOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableNAPhysCopyOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  118|                     cl::desc("Disable advanced copy optimization"));
#  119|   
#  120|-> static cl::opt<bool> DisableNAPhysCopyOpt(
#  121|       "disable-non-allocatable-phys-copy-opt", cl::Hidden, cl::init(false),
#  122|       cl::desc("Disable non-allocatable physical register copy optimization"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/PeepholeOptimizer.cpp:126: constructor_uses_global_object: The constructor of global object "RewritePHILimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RewritePHILimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  124|   // Limit the number of PHI instructions to process
#  125|   // in PeepholeOptimizer::getNextSource.
#  126|-> static cl::opt<unsigned> RewritePHILimit(
#  127|       "rewrite-phi-limit", cl::Hidden, cl::init(10),
#  128|       cl::desc("Limit the length of PHI chains to lookup"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/PeepholeOptimizer.cpp:132: constructor_uses_global_object: The constructor of global object "MaxRecurrenceChain" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxRecurrenceChain" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  130|   // Limit the length of recurrence chain when evaluating the benefit of
#  131|   // commuting operands.
#  132|-> static cl::opt<unsigned> MaxRecurrenceChain(
#  133|       "recurrence-chain-limit", cl::Hidden, cl::init(3),
#  134|       cl::desc("Maximum length of recurrence chain when evaluating the benefit "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/PostRASchedulerList.cpp:54: constructor_uses_global_object: The constructor of global object "EnablePostRAScheduler" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnablePostRAScheduler" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|   // override the target.
#   53|   static cl::opt<bool>
#   54|-> EnablePostRAScheduler("post-RA-scheduler",
#   55|                          cl::desc("Enable scheduling after register allocation"),
#   56|                          cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/PostRASchedulerList.cpp:58: constructor_uses_global_object: The constructor of global object "EnableAntiDepBreaking[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableAntiDepBreaking[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   56|                          cl::init(false), cl::Hidden);
#   57|   static cl::opt<std::string>
#   58|-> EnableAntiDepBreaking("break-anti-dependencies",
#   59|                         cl::desc("Break post-RA scheduling anti-dependencies: "
#   60|                                  "\"critical\", \"all\", or \"none\""),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/PostRASchedulerList.cpp:65: constructor_uses_global_object: The constructor of global object "DebugDiv" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DebugDiv" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|   // If DebugDiv > 0 then only schedule MBB with (ID % DebugDiv) == DebugMod
#   64|   static cl::opt<int>
#   65|-> DebugDiv("postra-sched-debugdiv",
#   66|                         cl::desc("Debug control MBBs that are scheduled"),
#   67|                         cl::init(0), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/PostRASchedulerList.cpp:69: constructor_uses_global_object: The constructor of global object "DebugMod" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DebugMod" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   67|                         cl::init(0), cl::Hidden);
#   68|   static cl::opt<int>
#   69|-> DebugMod("postra-sched-debugmod",
#   70|                         cl::desc("Debug control MBBs that are scheduled"),
#   71|                         cl::init(0), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/PreISelIntrinsicLowering.cpp:38: constructor_uses_global_object: The constructor of global object "MemIntrinsicExpandSizeThresholdOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MemIntrinsicExpandSizeThresholdOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   36|   /// size larger than this will be expanded by the pass. Calls of unknown or
#   37|   /// lower size will be left for expansion in codegen.
#   38|-> static cl::opt<int64_t> MemIntrinsicExpandSizeThresholdOpt(
#   39|       "mem-intrinsic-expand-size",
#   40|       cl::desc("Set minimum mem intrinsic size to expand in IR"), cl::init(-1),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RDFLiveness.cpp:55: constructor_uses_global_object: The constructor of global object "MaxRecNest" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxRecNest" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   53|   using namespace llvm;
#   54|   
#   55|-> static cl::opt<unsigned> MaxRecNest("rdf-liveness-max-rec", cl::init(25),
#   56|                                       cl::Hidden,
#   57|                                       cl::desc("Maximum recursion level"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocBase.cpp:43: constructor_uses_global_object: The constructor of global object "VerifyRegAlloc" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyRegAlloc" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   41|   // MachineVerifier.
#   42|   static cl::opt<bool, true>
#   43|->     VerifyRegAlloc("verify-regalloc", cl::location(RegAllocBase::VerifyEnabled),
#   44|                      cl::Hidden, cl::desc("Verify during register allocation"));
#   45|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocEvictionAdvisor.cpp:28: constructor_uses_global_object: The constructor of global object "Mode" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Mode" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   26|   using namespace llvm;
#   27|   
#   28|-> static cl::opt<RegAllocEvictionAdvisorAnalysis::AdvisorMode> Mode(
#   29|       "regalloc-enable-advisor", cl::Hidden,
#   30|       cl::init(RegAllocEvictionAdvisorAnalysis::AdvisorMode::Default),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocEvictionAdvisor.cpp:40: constructor_uses_global_object: The constructor of global object "EnableLocalReassignment" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableLocalReassignment" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   38|                      "development", "for training")));
#   39|   
#   40|-> static cl::opt<bool> EnableLocalReassignment(
#   41|       "enable-local-reassign", cl::Hidden,
#   42|       cl::desc("Local reassignment can yield better allocation decisions, but "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocEvictionAdvisor.cpp:47: constructor_uses_global_object: The constructor of global object "llvm::EvictInterferenceCutoff" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::EvictInterferenceCutoff" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   45|   
#   46|   namespace llvm {
#   47|-> cl::opt<unsigned> EvictInterferenceCutoff(
#   48|       "regalloc-eviction-max-interference-cutoff", cl::Hidden,
#   49|       cl::desc("Number of interferences after which we declare "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocFast.cpp:57: constructor_uses_global_object: The constructor of global object "IgnoreMissingDefs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "IgnoreMissingDefs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   55|   
#   56|   // FIXME: Remove this switch when all testcases are fixed!
#   57|-> static cl::opt<bool> IgnoreMissingDefs("rafast-ignore-missing-defs",
#   58|                                          cl::Hidden);
#   59|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocGreedy.cpp:86: constructor_uses_global_object: The constructor of global object "SplitSpillMode" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SplitSpillMode" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   84|   STATISTIC(NumEvicted,      "Number of interferences evicted");
#   85|   
#   86|-> static cl::opt<SplitEditor::ComplementSpillMode> SplitSpillMode(
#   87|       "split-spill-mode", cl::Hidden,
#   88|       cl::desc("Spill mode for splitting live ranges"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocGreedy.cpp:95: constructor_uses_global_object: The constructor of global object "LastChanceRecoloringMaxDepth" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LastChanceRecoloringMaxDepth" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   93|   
#   94|   static cl::opt<unsigned>
#   95|-> LastChanceRecoloringMaxDepth("lcr-max-depth", cl::Hidden,
#   96|                                cl::desc("Last chance recoloring max depth"),
#   97|                                cl::init(5));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocGreedy.cpp:99: constructor_uses_global_object: The constructor of global object "LastChanceRecoloringMaxInterference" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LastChanceRecoloringMaxInterference" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   97|                                cl::init(5));
#   98|   
#   99|-> static cl::opt<unsigned> LastChanceRecoloringMaxInterference(
#  100|       "lcr-max-interf", cl::Hidden,
#  101|       cl::desc("Last chance recoloring maximum number of considered"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocGreedy.cpp:105: constructor_uses_global_object: The constructor of global object "ExhaustiveSearch" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ExhaustiveSearch" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  103|       cl::init(8));
#  104|   
#  105|-> static cl::opt<bool> ExhaustiveSearch(
#  106|       "exhaustive-register-search", cl::NotHidden,
#  107|       cl::desc("Exhaustive Search for registers bypassing the depth "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocGreedy.cpp:111: constructor_uses_global_object: The constructor of global object "EnableDeferredSpilling" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableDeferredSpilling" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  109|       cl::Hidden);
#  110|   
#  111|-> static cl::opt<bool> EnableDeferredSpilling(
#  112|       "enable-deferred-spilling", cl::Hidden,
#  113|       cl::desc("Instead of spilling a variable right away, defer the actual "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocGreedy.cpp:121: constructor_uses_global_object: The constructor of global object "CSRFirstTimeCost" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CSRFirstTimeCost" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  119|   // FIXME: Find a good default for this flag and remove the flag.
#  120|   static cl::opt<unsigned>
#  121|-> CSRFirstTimeCost("regalloc-csr-first-time-cost",
#  122|                 cl::desc("Cost for first time use of callee-saved register."),
#  123|                 cl::init(0), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocGreedy.cpp:125: constructor_uses_global_object: The constructor of global object "GrowRegionComplexityBudget" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "GrowRegionComplexityBudget" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  123|                 cl::init(0), cl::Hidden);
#  124|   
#  125|-> static cl::opt<unsigned long> GrowRegionComplexityBudget(
#  126|       "grow-region-complexity-budget",
#  127|       cl::desc("growRegion() does not scale with the number of BB edges, so "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocGreedy.cpp:131: constructor_uses_global_object: The constructor of global object "GreedyRegClassPriorityTrumpsGlobalness" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "GreedyRegClassPriorityTrumpsGlobalness" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  129|       cl::init(10000), cl::Hidden);
#  130|   
#  131|-> static cl::opt<bool> GreedyRegClassPriorityTrumpsGlobalness(
#  132|       "greedy-regclass-priority-trumps-globalness",
#  133|       cl::desc("Change the greedy register allocator's live range priority "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocGreedy.cpp:138: constructor_uses_global_object: The constructor of global object "GreedyReverseLocalAssignment" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "GreedyReverseLocalAssignment" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  136|       cl::Hidden);
#  137|   
#  138|-> static cl::opt<bool> GreedyReverseLocalAssignment(
#  139|       "greedy-reverse-local-assignment",
#  140|       cl::desc("Reverse allocation order of local live ranges, such that "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocPBQP.cpp:99: constructor_uses_global_object: The constructor of global object "PBQPCoalescing" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PBQPCoalescing" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   97|   
#   98|   static cl::opt<bool>
#   99|-> PBQPCoalescing("pbqp-coalescing",
#  100|                   cl::desc("Attempt coalescing during PBQP register allocation."),
#  101|                   cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocPriorityAdvisor.cpp:23: constructor_uses_global_object: The constructor of global object "Mode" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Mode" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   21|   using namespace llvm;
#   22|   
#   23|-> static cl::opt<RegAllocPriorityAdvisorAnalysis::AdvisorMode> Mode(
#   24|       "regalloc-enable-priority-advisor", cl::Hidden,
#   25|       cl::init(RegAllocPriorityAdvisorAnalysis::AdvisorMode::Default),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocScore.cpp:29: constructor_uses_global_object: The constructor of global object "CopyWeight" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CopyWeight" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   27|   
#   28|   using namespace llvm;
#   29|-> cl::opt<double> CopyWeight("regalloc-copy-weight", cl::init(0.2), cl::Hidden);
#   30|   cl::opt<double> LoadWeight("regalloc-load-weight", cl::init(4.0), cl::Hidden);
#   31|   cl::opt<double> StoreWeight("regalloc-store-weight", cl::init(1.0), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocScore.cpp:30: constructor_uses_global_object: The constructor of global object "LoadWeight" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LoadWeight" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   28|   using namespace llvm;
#   29|   cl::opt<double> CopyWeight("regalloc-copy-weight", cl::init(0.2), cl::Hidden);
#   30|-> cl::opt<double> LoadWeight("regalloc-load-weight", cl::init(4.0), cl::Hidden);
#   31|   cl::opt<double> StoreWeight("regalloc-store-weight", cl::init(1.0), cl::Hidden);
#   32|   cl::opt<double> CheapRematWeight("regalloc-cheap-remat-weight", cl::init(0.2),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocScore.cpp:31: constructor_uses_global_object: The constructor of global object "StoreWeight" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StoreWeight" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   29|   cl::opt<double> CopyWeight("regalloc-copy-weight", cl::init(0.2), cl::Hidden);
#   30|   cl::opt<double> LoadWeight("regalloc-load-weight", cl::init(4.0), cl::Hidden);
#   31|-> cl::opt<double> StoreWeight("regalloc-store-weight", cl::init(1.0), cl::Hidden);
#   32|   cl::opt<double> CheapRematWeight("regalloc-cheap-remat-weight", cl::init(0.2),
#   33|                                    cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocScore.cpp:32: constructor_uses_global_object: The constructor of global object "CheapRematWeight" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CheapRematWeight" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   30|   cl::opt<double> LoadWeight("regalloc-load-weight", cl::init(4.0), cl::Hidden);
#   31|   cl::opt<double> StoreWeight("regalloc-store-weight", cl::init(1.0), cl::Hidden);
#   32|-> cl::opt<double> CheapRematWeight("regalloc-cheap-remat-weight", cl::init(0.2),
#   33|                                    cl::Hidden);
#   34|   cl::opt<double> ExpensiveRematWeight("regalloc-expensive-remat-weight",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegAllocScore.cpp:34: constructor_uses_global_object: The constructor of global object "ExpensiveRematWeight" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ExpensiveRematWeight" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   32|   cl::opt<double> CheapRematWeight("regalloc-cheap-remat-weight", cl::init(0.2),
#   33|                                    cl::Hidden);
#   34|-> cl::opt<double> ExpensiveRematWeight("regalloc-expensive-remat-weight",
#   35|                                        cl::init(1.0), cl::Hidden);
#   36|   #define DEBUG_TYPE "regalloc-score"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegisterClassInfo.cpp:37: constructor_uses_global_object: The constructor of global object "StressRA" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StressRA" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   35|   
#   36|   static cl::opt<unsigned>
#   37|-> StressRA("stress-regalloc", cl::Hidden, cl::init(0), cl::value_desc("N"),
#   38|            cl::desc("Limit all regclasses to N registers"));
#   39|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegisterCoalescer.cpp:75: constructor_uses_global_object: The constructor of global object "EnableJoining" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableJoining" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   73|   STATISTIC(NumShrinkToUses,  "Number of shrinkToUses called");
#   74|   
#   75|-> static cl::opt<bool> EnableJoining("join-liveintervals",
#   76|                                      cl::desc("Coalesce copies (default=true)"),
#   77|                                      cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegisterCoalescer.cpp:79: constructor_uses_global_object: The constructor of global object "UseTerminalRule" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseTerminalRule" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   77|                                      cl::init(true), cl::Hidden);
#   78|   
#   79|-> static cl::opt<bool> UseTerminalRule("terminal-rule",
#   80|                                        cl::desc("Apply the terminal rule"),
#   81|                                        cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegisterCoalescer.cpp:85: constructor_uses_global_object: The constructor of global object "EnableJoinSplits" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableJoinSplits" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   83|   /// Temporary flag to test critical edge unsplitting.
#   84|   static cl::opt<bool>
#   85|-> EnableJoinSplits("join-splitedges",
#   86|     cl::desc("Coalesce copies on split edges (default=subtarget)"), cl::Hidden);
#   87|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegisterCoalescer.cpp:90: constructor_uses_global_object: The constructor of global object "EnableGlobalCopies" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGlobalCopies" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   88|   /// Temporary flag to test global copy optimization.
#   89|   static cl::opt<cl::boolOrDefault>
#   90|-> EnableGlobalCopies("join-globalcopies",
#   91|     cl::desc("Coalesce copies that span blocks (default=subtarget)"),
#   92|     cl::init(cl::BOU_UNSET), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegisterCoalescer.cpp:95: constructor_uses_global_object: The constructor of global object "VerifyCoalescing" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyCoalescing" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   93|   
#   94|   static cl::opt<bool>
#   95|-> VerifyCoalescing("verify-coalescing",
#   96|            cl::desc("Verify machine instrs before and after register coalescing"),
#   97|            cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegisterCoalescer.cpp:99: constructor_uses_global_object: The constructor of global object "LateRematUpdateThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LateRematUpdateThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   97|            cl::Hidden);
#   98|   
#   99|-> static cl::opt<unsigned> LateRematUpdateThreshold(
#  100|       "late-remat-update-threshold", cl::Hidden,
#  101|       cl::desc("During rematerialization for a copy, if the def instruction has "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegisterCoalescer.cpp:108: constructor_uses_global_object: The constructor of global object "LargeIntervalSizeThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LargeIntervalSizeThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  106|       cl::init(100));
#  107|   
#  108|-> static cl::opt<unsigned> LargeIntervalSizeThreshold(
#  109|       "large-interval-size-threshold", cl::Hidden,
#  110|       cl::desc("If the valnos size of an interval is larger than the threshold, "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegisterCoalescer.cpp:114: constructor_uses_global_object: The constructor of global object "LargeIntervalFreqThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LargeIntervalFreqThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  112|       cl::init(100));
#  113|   
#  114|-> static cl::opt<unsigned> LargeIntervalFreqThreshold(
#  115|       "large-interval-freq-threshold", cl::Hidden,
#  116|       cl::desc("For a large interval, if it is coalesed with other live "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/RegisterUsageInfo.cpp:31: constructor_uses_global_object: The constructor of global object "DumpRegUsage" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DumpRegUsage" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   29|   using namespace llvm;
#   30|   
#   31|-> static cl::opt<bool> DumpRegUsage(
#   32|       "print-regusage", cl::init(false), cl::Hidden,
#   33|       cl::desc("print register usage details collected for analysis."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SafeStack.cpp:97: constructor_uses_global_object: The constructor of global object "SafeStackUsePointerAddress" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SafeStackUsePointerAddress" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   95|   /// access safe stack pointer.
#   96|   static cl::opt<bool>
#   97|->     SafeStackUsePointerAddress("safestack-use-pointer-address",
#   98|                                     cl::init(false), cl::Hidden);
#   99|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SafeStack.cpp:100: constructor_uses_global_object: The constructor of global object "ClColoring" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ClColoring" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   98|                                     cl::init(false), cl::Hidden);
#   99|   
#  100|-> static cl::opt<bool> ClColoring("safe-stack-coloring",
#  101|                                   cl::desc("enable safe stack coloring"),
#  102|                                   cl::Hidden, cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SafeStackLayout.cpp:23: constructor_uses_global_object: The constructor of global object "ClLayout" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ClLayout" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   21|   #define DEBUG_TYPE "safestacklayout"
#   22|   
#   23|-> static cl::opt<bool> ClLayout("safe-stack-layout",
#   24|                                 cl::desc("enable safe stack layout"), cl::Hidden,
#   25|                                 cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ScheduleDAGInstrs.cpp:65: constructor_uses_global_object: The constructor of global object "EnableAASchedMI" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableAASchedMI" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|   
#   64|   static cl::opt<bool>
#   65|->     EnableAASchedMI("enable-aa-sched-mi", cl::Hidden,
#   66|                       cl::desc("Enable use of AA during MI DAG construction"));
#   67|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ScheduleDAGInstrs.cpp:68: constructor_uses_global_object: The constructor of global object "UseTBAA" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseTBAA" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   66|                       cl::desc("Enable use of AA during MI DAG construction"));
#   67|   
#   68|-> static cl::opt<bool> UseTBAA("use-tbaa-in-sched-mi", cl::Hidden,
#   69|       cl::init(true), cl::desc("Enable use of TBAA during MI DAG construction"));
#   70|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ScheduleDAGInstrs.cpp:77: constructor_uses_global_object: The constructor of global object "HugeRegion" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HugeRegion" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   75|   // When Stores and Loads maps (or NonAliasStores and NonAliasLoads)
#   76|   // together hold this many SUs, a reduction of maps will be done.
#   77|-> static cl::opt<unsigned> HugeRegion("dag-maps-huge-region", cl::Hidden,
#   78|       cl::init(1000), cl::desc("The limit to use while constructing the DAG "
#   79|                                "prior to scheduling, at which point a trade-off "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ScheduleDAGInstrs.cpp:82: constructor_uses_global_object: The constructor of global object "ReductionSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ReductionSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   80|                                "is made to avoid excessive compile time."));
#   81|   
#   82|-> static cl::opt<unsigned> ReductionSize(
#   83|       "dag-maps-reduction-size", cl::Hidden,
#   84|       cl::desc("A huge scheduling region will have maps reduced by this many "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectOptimize.cpp:62: constructor_uses_global_object: The constructor of global object "ColdOperandThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ColdOperandThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   60|   STATISTIC(NumSelectsConverted, "Number of selects converted");
#   61|   
#   62|-> static cl::opt<unsigned> ColdOperandThreshold(
#   63|       "cold-operand-threshold",
#   64|       cl::desc("Maximum frequency of path for an operand to be considered cold."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectOptimize.cpp:67: constructor_uses_global_object: The constructor of global object "ColdOperandMaxCostMultiplier" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ColdOperandMaxCostMultiplier" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   65|       cl::init(20), cl::Hidden);
#   66|   
#   67|-> static cl::opt<unsigned> ColdOperandMaxCostMultiplier(
#   68|       "cold-operand-max-cost-multiplier",
#   69|       cl::desc("Maximum cost multiplier of TCC_expensive for the dependence "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectOptimize.cpp:74: constructor_uses_global_object: The constructor of global object "GainGradientThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "GainGradientThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   72|   
#   73|   static cl::opt<unsigned>
#   74|->     GainGradientThreshold("select-opti-loop-gradient-gain-threshold",
#   75|                             cl::desc("Gradient gain threshold (%)."),
#   76|                             cl::init(25), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectOptimize.cpp:79: constructor_uses_global_object: The constructor of global object "GainCycleThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "GainCycleThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   77|   
#   78|   static cl::opt<unsigned>
#   79|->     GainCycleThreshold("select-opti-loop-cycle-gain-threshold",
#   80|                          cl::desc("Minimum gain per loop (in cycles) threshold."),
#   81|                          cl::init(4), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectOptimize.cpp:83: constructor_uses_global_object: The constructor of global object "GainRelativeThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "GainRelativeThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   81|                          cl::init(4), cl::Hidden);
#   82|   
#   83|-> static cl::opt<unsigned> GainRelativeThreshold(
#   84|       "select-opti-loop-relative-gain-threshold",
#   85|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectOptimize.cpp:89: constructor_uses_global_object: The constructor of global object "MispredictDefaultRate" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MispredictDefaultRate" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   87|       cl::init(8), cl::Hidden);
#   88|   
#   89|-> static cl::opt<unsigned> MispredictDefaultRate(
#   90|       "mispredict-default-rate", cl::Hidden, cl::init(25),
#   91|       cl::desc("Default mispredict rate (initialized to 25%)."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectOptimize.cpp:94: constructor_uses_global_object: The constructor of global object "DisableLoopLevelHeuristics" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableLoopLevelHeuristics" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   92|   
#   93|   static cl::opt<bool>
#   94|->     DisableLoopLevelHeuristics("disable-loop-level-heuristics", cl::Hidden,
#   95|                                  cl::init(false),
#   96|                                  cl::desc("Disable loop-level heuristics."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:91: constructor_uses_global_object: The constructor of global object "CombinerGlobalAA" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CombinerGlobalAA" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   89|   
#   90|   static cl::opt<bool>
#   91|-> CombinerGlobalAA("combiner-global-alias-analysis", cl::Hidden,
#   92|                    cl::desc("Enable DAG combiner's use of IR alias analysis"));
#   93|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:95: constructor_uses_global_object: The constructor of global object "UseTBAA" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseTBAA" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   93|   
#   94|   static cl::opt<bool>
#   95|-> UseTBAA("combiner-use-tbaa", cl::Hidden, cl::init(true),
#   96|           cl::desc("Enable DAG combiner's use of TBAA"));
#   97|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:108: constructor_uses_global_object: The constructor of global object "StressLoadSlicing" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StressLoadSlicing" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  106|   /// is enabled, load slicing bypasses most of its profitability guards.
#  107|   static cl::opt<bool>
#  108|-> StressLoadSlicing("combiner-stress-load-slicing", cl::Hidden,
#  109|                     cl::desc("Bypass the profitability model of load slicing"),
#  110|                     cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:113: constructor_uses_global_object: The constructor of global object "MaySplitLoadIndex" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaySplitLoadIndex" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  111|   
#  112|   static cl::opt<bool>
#  113|->   MaySplitLoadIndex("combiner-split-load-index", cl::Hidden, cl::init(true),
#  114|                       cl::desc("DAG combiner may split indexing from loads"));
#  115|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:117: constructor_uses_global_object: The constructor of global object "EnableStoreMerging" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableStoreMerging" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  115|   
#  116|   static cl::opt<bool>
#  117|->     EnableStoreMerging("combiner-store-merging", cl::Hidden, cl::init(true),
#  118|                          cl::desc("DAG combiner enable merging multiple stores "
#  119|                                   "into a wider store"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:121: constructor_uses_global_object: The constructor of global object "TokenFactorInlineLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TokenFactorInlineLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  119|                                   "into a wider store"));
#  120|   
#  121|-> static cl::opt<unsigned> TokenFactorInlineLimit(
#  122|       "combiner-tokenfactor-inline-limit", cl::Hidden, cl::init(2048),
#  123|       cl::desc("Limit the number of operands to inline for Token Factors"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:125: constructor_uses_global_object: The constructor of global object "StoreMergeDependenceLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StoreMergeDependenceLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  123|       cl::desc("Limit the number of operands to inline for Token Factors"));
#  124|   
#  125|-> static cl::opt<unsigned> StoreMergeDependenceLimit(
#  126|       "combiner-store-merge-dependence-limit", cl::Hidden, cl::init(10),
#  127|       cl::desc("Limit the number of times for the same StoreNode and RootNode "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:130: constructor_uses_global_object: The constructor of global object "EnableReduceLoadOpStoreWidth" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableReduceLoadOpStoreWidth" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  128|                "to bail out in store merging dependence check"));
#  129|   
#  130|-> static cl::opt<bool> EnableReduceLoadOpStoreWidth(
#  131|       "combiner-reduce-load-op-store-width", cl::Hidden, cl::init(true),
#  132|       cl::desc("DAG combiner enable reducing the width of load/op/store "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:135: constructor_uses_global_object: The constructor of global object "EnableShrinkLoadReplaceStoreWithStore" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableShrinkLoadReplaceStoreWithStore" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  133|                "sequence"));
#  134|   
#  135|-> static cl::opt<bool> EnableShrinkLoadReplaceStoreWithStore(
#  136|       "combiner-shrink-load-replace-store-with-store", cl::Hidden, cl::init(true),
#  137|       cl::desc("DAG combiner enable load/<replace bytes>/store with "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:140: constructor_uses_global_object: The constructor of global object "EnableVectorFCopySignExtendRound" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableVectorFCopySignExtendRound" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  138|                "a narrower store"));
#  139|   
#  140|-> static cl::opt<bool> EnableVectorFCopySignExtendRound(
#  141|       "combiner-vector-fcopysign-extend-round", cl::Hidden, cl::init(false),
#  142|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:26: constructor_uses_global_object: The constructor of global object "EnableExpensiveChecks" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableExpensiveChecks" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   24|   
#   25|   static cl::opt<bool>
#   26|-> EnableExpensiveChecks("enable-legalize-types-checking", cl::Hidden);
#   27|   
#   28|   /// Do extensive, expensive, basic correctness checking.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:36: constructor_uses_global_object: The constructor of global object "DisableDFASched" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableDFASched" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   34|   
#   35|   static cl::opt<bool>
#   36|->     DisableDFASched("disable-dfa-sched", cl::Hidden,
#   37|                       cl::desc("Disable use of DFA during scheduling"));
#   38|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:39: constructor_uses_global_object: The constructor of global object "RegPressureThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RegPressureThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   37|                       cl::desc("Disable use of DFA during scheduling"));
#   38|   
#   39|-> static cl::opt<int> RegPressureThreshold(
#   40|       "dfa-sched-reg-pressure-threshold", cl::Hidden, cl::init(5),
#   41|       cl::desc("Track reg pressure and switch priority to in-depth"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:92: constructor_uses_global_object: The constructor of global object "DisableSchedCycles" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSchedCycles" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   90|                         createILPListDAGScheduler);
#   91|   
#   92|-> static cl::opt<bool> DisableSchedCycles(
#   93|     "disable-sched-cycles", cl::Hidden, cl::init(false),
#   94|     cl::desc("Disable cycle-level precision during preRA scheduling"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:98: constructor_uses_global_object: The constructor of global object "DisableSchedRegPressure" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSchedRegPressure" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   96|   // Temporary sched=list-ilp flags until the heuristics are robust.
#   97|   // Some options are also available under sched=list-hybrid.
#   98|-> static cl::opt<bool> DisableSchedRegPressure(
#   99|     "disable-sched-reg-pressure", cl::Hidden, cl::init(false),
#  100|     cl::desc("Disable regpressure priority in sched=list-ilp"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:101: constructor_uses_global_object: The constructor of global object "DisableSchedLiveUses" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSchedLiveUses" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   99|     "disable-sched-reg-pressure", cl::Hidden, cl::init(false),
#  100|     cl::desc("Disable regpressure priority in sched=list-ilp"));
#  101|-> static cl::opt<bool> DisableSchedLiveUses(
#  102|     "disable-sched-live-uses", cl::Hidden, cl::init(true),
#  103|     cl::desc("Disable live use priority in sched=list-ilp"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:104: constructor_uses_global_object: The constructor of global object "DisableSchedVRegCycle" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSchedVRegCycle" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  102|     "disable-sched-live-uses", cl::Hidden, cl::init(true),
#  103|     cl::desc("Disable live use priority in sched=list-ilp"));
#  104|-> static cl::opt<bool> DisableSchedVRegCycle(
#  105|     "disable-sched-vrcycle", cl::Hidden, cl::init(false),
#  106|     cl::desc("Disable virtual register cycle interference checks"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:107: constructor_uses_global_object: The constructor of global object "DisableSchedPhysRegJoin" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSchedPhysRegJoin" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  105|     "disable-sched-vrcycle", cl::Hidden, cl::init(false),
#  106|     cl::desc("Disable virtual register cycle interference checks"));
#  107|-> static cl::opt<bool> DisableSchedPhysRegJoin(
#  108|     "disable-sched-physreg-join", cl::Hidden, cl::init(false),
#  109|     cl::desc("Disable physreg def-use affinity"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:110: constructor_uses_global_object: The constructor of global object "DisableSchedStalls" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSchedStalls" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  108|     "disable-sched-physreg-join", cl::Hidden, cl::init(false),
#  109|     cl::desc("Disable physreg def-use affinity"));
#  110|-> static cl::opt<bool> DisableSchedStalls(
#  111|     "disable-sched-stalls", cl::Hidden, cl::init(true),
#  112|     cl::desc("Disable no-stall priority in sched=list-ilp"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:113: constructor_uses_global_object: The constructor of global object "DisableSchedCriticalPath" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSchedCriticalPath" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  111|     "disable-sched-stalls", cl::Hidden, cl::init(true),
#  112|     cl::desc("Disable no-stall priority in sched=list-ilp"));
#  113|-> static cl::opt<bool> DisableSchedCriticalPath(
#  114|     "disable-sched-critical-path", cl::Hidden, cl::init(false),
#  115|     cl::desc("Disable critical path priority in sched=list-ilp"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:116: constructor_uses_global_object: The constructor of global object "DisableSchedHeight" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSchedHeight" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  114|     "disable-sched-critical-path", cl::Hidden, cl::init(false),
#  115|     cl::desc("Disable critical path priority in sched=list-ilp"));
#  116|-> static cl::opt<bool> DisableSchedHeight(
#  117|     "disable-sched-height", cl::Hidden, cl::init(false),
#  118|     cl::desc("Disable scheduled-height priority in sched=list-ilp"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:119: constructor_uses_global_object: The constructor of global object "Disable2AddrHack" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Disable2AddrHack" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  117|     "disable-sched-height", cl::Hidden, cl::init(false),
#  118|     cl::desc("Disable scheduled-height priority in sched=list-ilp"));
#  119|-> static cl::opt<bool> Disable2AddrHack(
#  120|     "disable-2addr-hack", cl::Hidden, cl::init(true),
#  121|     cl::desc("Disable scheduler's two-address hack"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:123: constructor_uses_global_object: The constructor of global object "MaxReorderWindow" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxReorderWindow" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  121|     cl::desc("Disable scheduler's two-address hack"));
#  122|   
#  123|-> static cl::opt<int> MaxReorderWindow(
#  124|     "max-sched-reorder", cl::Hidden, cl::init(6),
#  125|     cl::desc("Number of instructions to allow ahead of the critical path "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:128: constructor_uses_global_object: The constructor of global object "AvgIPC" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AvgIPC" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  126|              "in sched=list-ilp"));
#  127|   
#  128|-> static cl::opt<unsigned> AvgIPC(
#  129|     "sched-avg-ipc", cl::Hidden, cl::init(1),
#  130|     cl::desc("Average inst/cycle whan no target itinerary exists."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:44: constructor_uses_global_object: The constructor of global object "HighLatencyCycles" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HighLatencyCycles" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   42|   // without a target itinerary. The choice of number here has more to do with
#   43|   // balancing scheduler heuristics than with the actual machine latency.
#   44|-> static cl::opt<int> HighLatencyCycles(
#   45|     "sched-high-latency-cycles", cl::Hidden, cl::init(10),
#   46|     cl::desc("Roughly estimate the number of cycles that 'long latency'"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:101: constructor_uses_global_object: The constructor of global object "EnableMemCpyDAGOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMemCpyDAGOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   99|   #define DEBUG_TYPE "selectiondag"
#  100|   
#  101|-> static cl::opt<bool> EnableMemCpyDAGOpt("enable-memcpy-dag-opt",
#  102|          cl::Hidden, cl::init(true),
#  103|          cl::desc("Gang up loads and stores generated by inlining of memcpy"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:105: constructor_uses_global_object: The constructor of global object "MaxLdStGlue" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxLdStGlue" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  103|          cl::desc("Gang up loads and stores generated by inlining of memcpy"));
#  104|   
#  105|-> static cl::opt<int> MaxLdStGlue("ldstmemcpy-glue-max",
#  106|          cl::desc("Number limit for gluing ld/st of memcpy."),
#  107|          cl::Hidden, cl::init(0));

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:5456: var_decl: Declaring variable "apf".
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:5458: uninit_use_in_call: Using uninitialized value "apf.U" when calling "convertFromAPInt".
# 5456|         APFloat apf(EVTToAPFloatSemantics(VT),
# 5457|                     APInt::getZero(VT.getSizeInBits()));
# 5458|->       (void)apf.convertFromAPInt(Val,
# 5459|                                    Opcode==ISD::SINT_TO_FP,
# 5460|                                    APFloat::rmNearestTiesToEven);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:119: constructor_uses_global_object: The constructor of global object "InsertAssertAlign" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InsertAssertAlign" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  117|   
#  118|   static cl::opt<bool>
#  119|->     InsertAssertAlign("insert-assert-align", cl::init(true),
#  120|                         cl::desc("Insert the experimental `assertalign` node."),
#  121|                         cl::ReallyHidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:124: constructor_uses_global_object: The constructor of global object "LimitFPPrecision" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LimitFPPrecision" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  122|   
#  123|   static cl::opt<unsigned, true>
#  124|->     LimitFPPrecision("limit-float-precision",
#  125|                        cl::desc("Generate low-precision inline sequences "
#  126|                                 "for some float libcalls"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:130: constructor_uses_global_object: The constructor of global object "SwitchPeelThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SwitchPeelThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  128|                        cl::init(0));
#  129|   
#  130|-> static cl::opt<unsigned> SwitchPeelThreshold(
#  131|       "switch-peel-threshold", cl::Hidden, cl::init(66),
#  132|       cl::desc("Set the case probability threshold for peeling the case from a "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/SelectionDAGDumper.cpp:54: constructor_uses_global_object: The constructor of global object "VerboseDAGDumping" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerboseDAGDumping" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|   
#   53|   static cl::opt<bool>
#   54|-> VerboseDAGDumping("dag-dump-verbose", cl::Hidden,
#   55|                     cl::desc("Display more information when dumping selection "
#   56|                              "DAG nodes."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:126: constructor_uses_global_object: The constructor of global object "EnableFastISelAbort" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableFastISelAbort" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  124|             "Number of entry blocks where fast isel failed to lower arguments");
#  125|   
#  126|-> static cl::opt<int> EnableFastISelAbort(
#  127|       "fast-isel-abort", cl::Hidden,
#  128|       cl::desc("Enable abort calls when \"fast\" instruction selection "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:134: constructor_uses_global_object: The constructor of global object "EnableFastISelFallbackReport" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableFastISelFallbackReport" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  132|                "to SelectionDAG."));
#  133|   
#  134|-> static cl::opt<bool> EnableFastISelFallbackReport(
#  135|       "fast-isel-report-on-fallback", cl::Hidden,
#  136|       cl::desc("Emit a diagnostic when \"fast\" instruction selection "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:140: constructor_uses_global_object: The constructor of global object "UseMBPI" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseMBPI" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  138|   
#  139|   static cl::opt<bool>
#  140|-> UseMBPI("use-mbpi",
#  141|           cl::desc("use Machine Branch Probability Info"),
#  142|           cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:198: constructor_uses_global_object: The constructor of global object "ISHeuristic" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ISHeuristic" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  196|   static cl::opt<RegisterScheduler::FunctionPassCtor, false,
#  197|                  RegisterPassParser<RegisterScheduler>>
#  198|-> ISHeuristic("pre-RA-sched",
#  199|               cl::init(&createDefaultScheduler), cl::Hidden,
#  200|               cl::desc("Instruction schedulers available (before register"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:65: constructor_uses_global_object: The constructor of global object "UseRegistersForDeoptValues" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseRegistersForDeoptValues" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|             "Maximum number of stack slots required for a singe statepoint");
#   64|   
#   65|-> cl::opt<bool> UseRegistersForDeoptValues(
#   66|       "use-registers-for-deopt-values", cl::Hidden, cl::init(false),
#   67|       cl::desc("Allow using registers for non pointer deopt args"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:69: constructor_uses_global_object: The constructor of global object "UseRegistersForGCPointersInLandingPad" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseRegistersForGCPointersInLandingPad" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   67|       cl::desc("Allow using registers for non pointer deopt args"));
#   68|   
#   69|-> cl::opt<bool> UseRegistersForGCPointersInLandingPad(
#   70|       "use-registers-for-gc-values-in-landing-pad", cl::Hidden, cl::init(false),
#   71|       cl::desc("Allow using registers for gc pointer in landing pad"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:73: constructor_uses_global_object: The constructor of global object "MaxRegistersForGCPointers" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxRegistersForGCPointers" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   71|       cl::desc("Allow using registers for gc pointer in landing pad"));
#   72|   
#   73|-> cl::opt<unsigned> MaxRegistersForGCPointers(
#   74|       "max-registers-for-gc-values", cl::Hidden, cl::init(0),
#   75|       cl::desc("Max number of VRegs allowed to pass GC pointer meta args in"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ShrinkWrap.cpp:99: constructor_uses_global_object: The constructor of global object "EnableShrinkWrapOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableShrinkWrapOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   97|   
#   98|   static cl::opt<cl::boolOrDefault>
#   99|-> EnableShrinkWrapOpt("enable-shrink-wrap", cl::Hidden,
#  100|                       cl::desc("enable the shrink-wrapping pass"));
#  101|   static cl::opt<bool> EnablePostShrinkWrapOpt(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/ShrinkWrap.cpp:101: constructor_uses_global_object: The constructor of global object "EnablePostShrinkWrapOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnablePostShrinkWrapOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   99|   EnableShrinkWrapOpt("enable-shrink-wrap", cl::Hidden,
#  100|                       cl::desc("enable the shrink-wrapping pass"));
#  101|-> static cl::opt<bool> EnablePostShrinkWrapOpt(
#  102|       "enable-shrink-wrap-region-split", cl::init(true), cl::Hidden,
#  103|       cl::desc("enable splitting of the restore block if possible"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/StackColoring.cpp:67: constructor_uses_global_object: The constructor of global object "DisableColoring" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableColoring" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   65|   
#   66|   static cl::opt<bool>
#   67|-> DisableColoring("no-stack-coloring",
#   68|           cl::init(false), cl::Hidden,
#   69|           cl::desc("Disable stack coloring"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/StackColoring.cpp:77: constructor_uses_global_object: The constructor of global object "ProtectFromEscapedAllocas" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ProtectFromEscapedAllocas" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   75|   /// is treated as overriding LifetimeStartOnFirstUse below.
#   76|   static cl::opt<bool>
#   77|-> ProtectFromEscapedAllocas("protect-from-escaped-allocas",
#   78|                             cl::init(false), cl::Hidden,
#   79|                             cl::desc("Do not optimize lifetime zones that "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/StackColoring.cpp:87: constructor_uses_global_object: The constructor of global object "LifetimeStartOnFirstUse" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LifetimeStartOnFirstUse" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   85|   /// more info.
#   86|   static cl::opt<bool>
#   87|-> LifetimeStartOnFirstUse("stackcoloring-lifetime-start-on-first-use",
#   88|           cl::init(true), cl::Hidden,
#   89|           cl::desc("Treat stack lifetimes as starting on first use, not on START marker."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/StackMapLivenessAnalysis.cpp:31: constructor_uses_global_object: The constructor of global object "EnablePatchPointLiveness" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnablePatchPointLiveness" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   29|   #define DEBUG_TYPE "stackmaps"
#   30|   
#   31|-> static cl::opt<bool> EnablePatchPointLiveness(
#   32|       "enable-patchpoint-liveness", cl::Hidden, cl::init(true),
#   33|       cl::desc("Enable PatchPoint Liveness Analysis Pass"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/StackMaps.cpp:42: constructor_uses_global_object: The constructor of global object "StackMapVersion" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StackMapVersion" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   40|   #define DEBUG_TYPE "stackmaps"
#   41|   
#   42|-> static cl::opt<int> StackMapVersion(
#   43|       "stackmap-version", cl::init(3), cl::Hidden,
#   44|       cl::desc("Specify the stackmap encoding version (default = 3)"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/StackProtector.cpp:62: constructor_uses_global_object: The constructor of global object "EnableSelectionDAGSP" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSelectionDAGSP" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   60|                           " taken.");
#   61|   
#   62|-> static cl::opt<bool> EnableSelectionDAGSP("enable-selectiondag-sp",
#   63|                                             cl::init(true), cl::Hidden);
#   64|   static cl::opt<bool> DisableCheckNoReturn("disable-check-noreturn-call",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/StackProtector.cpp:64: constructor_uses_global_object: The constructor of global object "DisableCheckNoReturn" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableCheckNoReturn" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   62|   static cl::opt<bool> EnableSelectionDAGSP("enable-selectiondag-sp",
#   63|                                             cl::init(true), cl::Hidden);
#   64|-> static cl::opt<bool> DisableCheckNoReturn("disable-check-noreturn-call",
#   65|                                             cl::init(false), cl::Hidden);
#   66|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/StackSlotColoring.cpp:50: constructor_uses_global_object: The constructor of global object "DisableSharing" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSharing" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   48|   
#   49|   static cl::opt<bool>
#   50|-> DisableSharing("no-stack-slot-sharing",
#   51|                cl::init(false), cl::Hidden,
#   52|                cl::desc("Suppress slot sharing during stack coloring"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/StackSlotColoring.cpp:54: constructor_uses_global_object: The constructor of global object "DCELimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DCELimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|                cl::desc("Suppress slot sharing during stack coloring"));
#   53|   
#   54|-> static cl::opt<int> DCELimit("ssc-dce-limit", cl::init(-1), cl::Hidden);
#   55|   
#   56|   STATISTIC(NumEliminated, "Number of stack slots eliminated due to coloring");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TailDuplicator.cpp:60: constructor_uses_global_object: The constructor of global object "TailDuplicateSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TailDuplicateSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   58|   
#   59|   // Heuristic for tail duplication.
#   60|-> static cl::opt<unsigned> TailDuplicateSize(
#   61|       "tail-dup-size",
#   62|       cl::desc("Maximum instructions to consider tail duplicating"), cl::init(2),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TailDuplicator.cpp:65: constructor_uses_global_object: The constructor of global object "TailDupIndirectBranchSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TailDupIndirectBranchSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|       cl::Hidden);
#   64|   
#   65|-> static cl::opt<unsigned> TailDupIndirectBranchSize(
#   66|       "tail-dup-indirect-size",
#   67|       cl::desc("Maximum instructions to consider tail duplicating blocks that "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TailDuplicator.cpp:72: constructor_uses_global_object: The constructor of global object "TailDupVerify" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TailDupVerify" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   70|   
#   71|   static cl::opt<bool>
#   72|->     TailDupVerify("tail-dup-verify",
#   73|                     cl::desc("Verify sanity of PHI instructions during taildup"),
#   74|                     cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TailDuplicator.cpp:76: constructor_uses_global_object: The constructor of global object "TailDupLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TailDupLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   74|                     cl::init(false), cl::Hidden);
#   75|   
#   76|-> static cl::opt<unsigned> TailDupLimit("tail-dup-limit", cl::init(~0U),
#   77|                                         cl::Hidden);
#   78|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetInstrInfo.cpp:40: constructor_uses_global_object: The constructor of global object "DisableHazardRecognizer" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableHazardRecognizer" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   38|   using namespace llvm;
#   39|   
#   40|-> static cl::opt<bool> DisableHazardRecognizer(
#   41|     "disable-sched-hazard", cl::Hidden, cl::init(false),
#   42|     cl::desc("Disable hazard detection during preRA scheduling"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetLoweringBase.cpp:68: constructor_uses_global_object: The constructor of global object "JumpIsExpensiveOverride" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "JumpIsExpensiveOverride" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   66|   using namespace llvm;
#   67|   
#   68|-> static cl::opt<bool> JumpIsExpensiveOverride(
#   69|       "jump-is-expensive", cl::init(false),
#   70|       cl::desc("Do not create extra branches to split comparison logic."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetLoweringBase.cpp:73: constructor_uses_global_object: The constructor of global object "MinimumJumpTableEntries" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MinimumJumpTableEntries" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   71|       cl::Hidden);
#   72|   
#   73|-> static cl::opt<unsigned> MinimumJumpTableEntries
#   74|     ("min-jump-table-entries", cl::init(4), cl::Hidden,
#   75|      cl::desc("Set minimum number of entries to use a jump table."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetLoweringBase.cpp:77: constructor_uses_global_object: The constructor of global object "MaximumJumpTableSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaximumJumpTableSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   75|      cl::desc("Set minimum number of entries to use a jump table."));
#   76|   
#   77|-> static cl::opt<unsigned> MaximumJumpTableSize
#   78|     ("max-jump-table-size", cl::init(UINT_MAX), cl::Hidden,
#   79|      cl::desc("Set maximum size of jump tables."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetLoweringBase.cpp:83: constructor_uses_global_object: The constructor of global object "JumpTableDensity" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "JumpTableDensity" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   81|   /// Minimum jump table density for normal functions.
#   82|   static cl::opt<unsigned>
#   83|->     JumpTableDensity("jump-table-density", cl::init(10), cl::Hidden,
#   84|                        cl::desc("Minimum density for building a jump table in "
#   85|                                 "a normal function"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetLoweringBase.cpp:88: constructor_uses_global_object: The constructor of global object "OptsizeJumpTableDensity" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OptsizeJumpTableDensity" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   86|   
#   87|   /// Minimum jump table density for -Os or -Oz functions.
#   88|-> static cl::opt<unsigned> OptsizeJumpTableDensity(
#   89|       "optsize-jump-table-density", cl::init(40), cl::Hidden,
#   90|       cl::desc("Minimum density for building a jump table in "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetLoweringBase.cpp:97: constructor_uses_global_object: The constructor of global object "DisableStrictNodeMutation" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableStrictNodeMutation" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   95|   // during development. When the backend supports strict float operation, this
#   96|   // option will be meaningless.
#   97|-> static cl::opt<bool> DisableStrictNodeMutation("disable-strictnode-mutation",
#   98|          cl::desc("Don't mutate strict-float node to a legalize node"),
#   99|          cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetLoweringObjectFileImpl.cpp:74: constructor_uses_global_object: The constructor of global object "JumpTableInFunctionSection" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "JumpTableInFunctionSection" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   72|   using namespace dwarf;
#   73|   
#   74|-> static cl::opt<bool> JumpTableInFunctionSection(
#   75|       "jumptable-in-function-section", cl::Hidden, cl::init(false),
#   76|       cl::desc("Putting Jump Table in function section"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:58: constructor_uses_global_object: The constructor of global object "EnableIPRA" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableIPRA" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   56|   
#   57|   static cl::opt<bool>
#   58|->     EnableIPRA("enable-ipra", cl::init(false), cl::Hidden,
#   59|                  cl::desc("Enable interprocedural register allocation "
#   60|                           "to reduce load/store at procedure calls."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:61: constructor_uses_global_object: The constructor of global object "DisablePostRASched" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisablePostRASched" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   59|                  cl::desc("Enable interprocedural register allocation "
#   60|                           "to reduce load/store at procedure calls."));
#   61|-> static cl::opt<bool> DisablePostRASched("disable-post-ra", cl::Hidden,
#   62|       cl::desc("Disable Post Regalloc Scheduler"));
#   63|   static cl::opt<bool> DisableBranchFold("disable-branch-fold", cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:63: constructor_uses_global_object: The constructor of global object "DisableBranchFold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableBranchFold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   61|   static cl::opt<bool> DisablePostRASched("disable-post-ra", cl::Hidden,
#   62|       cl::desc("Disable Post Regalloc Scheduler"));
#   63|-> static cl::opt<bool> DisableBranchFold("disable-branch-fold", cl::Hidden,
#   64|       cl::desc("Disable branch folding"));
#   65|   static cl::opt<bool> DisableTailDuplicate("disable-tail-duplicate", cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:65: constructor_uses_global_object: The constructor of global object "DisableTailDuplicate" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableTailDuplicate" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|   static cl::opt<bool> DisableBranchFold("disable-branch-fold", cl::Hidden,
#   64|       cl::desc("Disable branch folding"));
#   65|-> static cl::opt<bool> DisableTailDuplicate("disable-tail-duplicate", cl::Hidden,
#   66|       cl::desc("Disable tail duplication"));
#   67|   static cl::opt<bool> DisableEarlyTailDup("disable-early-taildup", cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:67: constructor_uses_global_object: The constructor of global object "DisableEarlyTailDup" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableEarlyTailDup" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   65|   static cl::opt<bool> DisableTailDuplicate("disable-tail-duplicate", cl::Hidden,
#   66|       cl::desc("Disable tail duplication"));
#   67|-> static cl::opt<bool> DisableEarlyTailDup("disable-early-taildup", cl::Hidden,
#   68|       cl::desc("Disable pre-register allocation tail duplication"));
#   69|   static cl::opt<bool> DisableBlockPlacement("disable-block-placement",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:69: constructor_uses_global_object: The constructor of global object "DisableBlockPlacement" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableBlockPlacement" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   67|   static cl::opt<bool> DisableEarlyTailDup("disable-early-taildup", cl::Hidden,
#   68|       cl::desc("Disable pre-register allocation tail duplication"));
#   69|-> static cl::opt<bool> DisableBlockPlacement("disable-block-placement",
#   70|       cl::Hidden, cl::desc("Disable probability-driven block placement"));
#   71|   static cl::opt<bool> EnableBlockPlacementStats("enable-block-placement-stats",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:71: constructor_uses_global_object: The constructor of global object "EnableBlockPlacementStats" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableBlockPlacementStats" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   69|   static cl::opt<bool> DisableBlockPlacement("disable-block-placement",
#   70|       cl::Hidden, cl::desc("Disable probability-driven block placement"));
#   71|-> static cl::opt<bool> EnableBlockPlacementStats("enable-block-placement-stats",
#   72|       cl::Hidden, cl::desc("Collect probability-driven block placement stats"));
#   73|   static cl::opt<bool> DisableSSC("disable-ssc", cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:73: constructor_uses_global_object: The constructor of global object "DisableSSC" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSSC" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   71|   static cl::opt<bool> EnableBlockPlacementStats("enable-block-placement-stats",
#   72|       cl::Hidden, cl::desc("Collect probability-driven block placement stats"));
#   73|-> static cl::opt<bool> DisableSSC("disable-ssc", cl::Hidden,
#   74|       cl::desc("Disable Stack Slot Coloring"));
#   75|   static cl::opt<bool> DisableMachineDCE("disable-machine-dce", cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:75: constructor_uses_global_object: The constructor of global object "DisableMachineDCE" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableMachineDCE" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   73|   static cl::opt<bool> DisableSSC("disable-ssc", cl::Hidden,
#   74|       cl::desc("Disable Stack Slot Coloring"));
#   75|-> static cl::opt<bool> DisableMachineDCE("disable-machine-dce", cl::Hidden,
#   76|       cl::desc("Disable Machine Dead Code Elimination"));
#   77|   static cl::opt<bool> DisableEarlyIfConversion("disable-early-ifcvt", cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:77: constructor_uses_global_object: The constructor of global object "DisableEarlyIfConversion" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableEarlyIfConversion" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   75|   static cl::opt<bool> DisableMachineDCE("disable-machine-dce", cl::Hidden,
#   76|       cl::desc("Disable Machine Dead Code Elimination"));
#   77|-> static cl::opt<bool> DisableEarlyIfConversion("disable-early-ifcvt", cl::Hidden,
#   78|       cl::desc("Disable Early If-conversion"));
#   79|   static cl::opt<bool> DisableMachineLICM("disable-machine-licm", cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:79: constructor_uses_global_object: The constructor of global object "DisableMachineLICM" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableMachineLICM" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   77|   static cl::opt<bool> DisableEarlyIfConversion("disable-early-ifcvt", cl::Hidden,
#   78|       cl::desc("Disable Early If-conversion"));
#   79|-> static cl::opt<bool> DisableMachineLICM("disable-machine-licm", cl::Hidden,
#   80|       cl::desc("Disable Machine LICM"));
#   81|   static cl::opt<bool> DisableMachineCSE("disable-machine-cse", cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:81: constructor_uses_global_object: The constructor of global object "DisableMachineCSE" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableMachineCSE" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   79|   static cl::opt<bool> DisableMachineLICM("disable-machine-licm", cl::Hidden,
#   80|       cl::desc("Disable Machine LICM"));
#   81|-> static cl::opt<bool> DisableMachineCSE("disable-machine-cse", cl::Hidden,
#   82|       cl::desc("Disable Machine Common Subexpression Elimination"));
#   83|   static cl::opt<cl::boolOrDefault> OptimizeRegAlloc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:83: constructor_uses_global_object: The constructor of global object "OptimizeRegAlloc" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OptimizeRegAlloc" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   81|   static cl::opt<bool> DisableMachineCSE("disable-machine-cse", cl::Hidden,
#   82|       cl::desc("Disable Machine Common Subexpression Elimination"));
#   83|-> static cl::opt<cl::boolOrDefault> OptimizeRegAlloc(
#   84|       "optimize-regalloc", cl::Hidden,
#   85|       cl::desc("Enable optimized register allocation compilation path."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:86: constructor_uses_global_object: The constructor of global object "DisablePostRAMachineLICM" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisablePostRAMachineLICM" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   84|       "optimize-regalloc", cl::Hidden,
#   85|       cl::desc("Enable optimized register allocation compilation path."));
#   86|-> static cl::opt<bool> DisablePostRAMachineLICM("disable-postra-machine-licm",
#   87|       cl::Hidden,
#   88|       cl::desc("Disable Machine LICM"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:89: constructor_uses_global_object: The constructor of global object "DisableMachineSink" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableMachineSink" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   87|       cl::Hidden,
#   88|       cl::desc("Disable Machine LICM"));
#   89|-> static cl::opt<bool> DisableMachineSink("disable-machine-sink", cl::Hidden,
#   90|       cl::desc("Disable Machine Sinking"));
#   91|   static cl::opt<bool> DisablePostRAMachineSink("disable-postra-machine-sink",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:91: constructor_uses_global_object: The constructor of global object "DisablePostRAMachineSink" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisablePostRAMachineSink" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   89|   static cl::opt<bool> DisableMachineSink("disable-machine-sink", cl::Hidden,
#   90|       cl::desc("Disable Machine Sinking"));
#   91|-> static cl::opt<bool> DisablePostRAMachineSink("disable-postra-machine-sink",
#   92|       cl::Hidden,
#   93|       cl::desc("Disable PostRA Machine Sinking"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:94: constructor_uses_global_object: The constructor of global object "DisableLSR" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableLSR" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   92|       cl::Hidden,
#   93|       cl::desc("Disable PostRA Machine Sinking"));
#   94|-> static cl::opt<bool> DisableLSR("disable-lsr", cl::Hidden,
#   95|       cl::desc("Disable Loop Strength Reduction Pass"));
#   96|   static cl::opt<bool> DisableConstantHoisting("disable-constant-hoisting",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:96: constructor_uses_global_object: The constructor of global object "DisableConstantHoisting" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableConstantHoisting" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   94|   static cl::opt<bool> DisableLSR("disable-lsr", cl::Hidden,
#   95|       cl::desc("Disable Loop Strength Reduction Pass"));
#   96|-> static cl::opt<bool> DisableConstantHoisting("disable-constant-hoisting",
#   97|       cl::Hidden, cl::desc("Disable ConstantHoisting"));
#   98|   static cl::opt<bool> DisableCGP("disable-cgp", cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:98: constructor_uses_global_object: The constructor of global object "DisableCGP" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableCGP" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   96|   static cl::opt<bool> DisableConstantHoisting("disable-constant-hoisting",
#   97|       cl::Hidden, cl::desc("Disable ConstantHoisting"));
#   98|-> static cl::opt<bool> DisableCGP("disable-cgp", cl::Hidden,
#   99|       cl::desc("Disable Codegen Prepare"));
#  100|   static cl::opt<bool> DisableCopyProp("disable-copyprop", cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:100: constructor_uses_global_object: The constructor of global object "DisableCopyProp" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableCopyProp" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   98|   static cl::opt<bool> DisableCGP("disable-cgp", cl::Hidden,
#   99|       cl::desc("Disable Codegen Prepare"));
#  100|-> static cl::opt<bool> DisableCopyProp("disable-copyprop", cl::Hidden,
#  101|       cl::desc("Disable Copy Propagation pass"));
#  102|   static cl::opt<bool> DisablePartialLibcallInlining("disable-partial-libcall-inlining",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:102: constructor_uses_global_object: The constructor of global object "DisablePartialLibcallInlining" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisablePartialLibcallInlining" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  100|   static cl::opt<bool> DisableCopyProp("disable-copyprop", cl::Hidden,
#  101|       cl::desc("Disable Copy Propagation pass"));
#  102|-> static cl::opt<bool> DisablePartialLibcallInlining("disable-partial-libcall-inlining",
#  103|       cl::Hidden, cl::desc("Disable Partial Libcall Inlining"));
#  104|   static cl::opt<bool> DisableAtExitBasedGlobalDtorLowering(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:104: constructor_uses_global_object: The constructor of global object "DisableAtExitBasedGlobalDtorLowering" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableAtExitBasedGlobalDtorLowering" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  102|   static cl::opt<bool> DisablePartialLibcallInlining("disable-partial-libcall-inlining",
#  103|       cl::Hidden, cl::desc("Disable Partial Libcall Inlining"));
#  104|-> static cl::opt<bool> DisableAtExitBasedGlobalDtorLowering(
#  105|       "disable-atexit-based-global-dtor-lowering", cl::Hidden,
#  106|       cl::desc("For MachO, disable atexit()-based global destructor lowering"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:107: constructor_uses_global_object: The constructor of global object "EnableImplicitNullChecks" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableImplicitNullChecks" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  105|       "disable-atexit-based-global-dtor-lowering", cl::Hidden,
#  106|       cl::desc("For MachO, disable atexit()-based global destructor lowering"));
#  107|-> static cl::opt<bool> EnableImplicitNullChecks(
#  108|       "enable-implicit-null-checks",
#  109|       cl::desc("Fold null checks into faulting memory operations"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:111: constructor_uses_global_object: The constructor of global object "DisableMergeICmps" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableMergeICmps" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  109|       cl::desc("Fold null checks into faulting memory operations"),
#  110|       cl::init(false), cl::Hidden);
#  111|-> static cl::opt<bool> DisableMergeICmps("disable-mergeicmps",
#  112|       cl::desc("Disable MergeICmps Pass"),
#  113|       cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:114: constructor_uses_global_object: The constructor of global object "PrintLSR" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintLSR" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  112|       cl::desc("Disable MergeICmps Pass"),
#  113|       cl::init(false), cl::Hidden);
#  114|-> static cl::opt<bool> PrintLSR("print-lsr-output", cl::Hidden,
#  115|       cl::desc("Print LLVM IR produced by the loop-reduce pass"));
#  116|   static cl::opt<bool> PrintISelInput("print-isel-input", cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:116: constructor_uses_global_object: The constructor of global object "PrintISelInput" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintISelInput" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  114|   static cl::opt<bool> PrintLSR("print-lsr-output", cl::Hidden,
#  115|       cl::desc("Print LLVM IR produced by the loop-reduce pass"));
#  116|-> static cl::opt<bool> PrintISelInput("print-isel-input", cl::Hidden,
#  117|       cl::desc("Print LLVM IR input to isel pass"));
#  118|   static cl::opt<bool> PrintGCInfo("print-gc", cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:118: constructor_uses_global_object: The constructor of global object "PrintGCInfo" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintGCInfo" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  116|   static cl::opt<bool> PrintISelInput("print-isel-input", cl::Hidden,
#  117|       cl::desc("Print LLVM IR input to isel pass"));
#  118|-> static cl::opt<bool> PrintGCInfo("print-gc", cl::Hidden,
#  119|       cl::desc("Dump garbage collector data"));
#  120|   static cl::opt<cl::boolOrDefault>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:121: constructor_uses_global_object: The constructor of global object "VerifyMachineCode" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyMachineCode" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  119|       cl::desc("Dump garbage collector data"));
#  120|   static cl::opt<cl::boolOrDefault>
#  121|->     VerifyMachineCode("verify-machineinstrs", cl::Hidden,
#  122|                         cl::desc("Verify generated machine code"));
#  123|   static cl::opt<cl::boolOrDefault>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:124: constructor_uses_global_object: The constructor of global object "DebugifyAndStripAll" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DebugifyAndStripAll" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  122|                         cl::desc("Verify generated machine code"));
#  123|   static cl::opt<cl::boolOrDefault>
#  124|->     DebugifyAndStripAll("debugify-and-strip-all-safe", cl::Hidden,
#  125|                           cl::desc("Debugify MIR before and Strip debug after "
#  126|                                    "each pass except those known to be unsafe "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:128: constructor_uses_global_object: The constructor of global object "DebugifyCheckAndStripAll" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DebugifyCheckAndStripAll" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  126|                                    "each pass except those known to be unsafe "
#  127|                                    "when debug info is present"));
#  128|-> static cl::opt<cl::boolOrDefault> DebugifyCheckAndStripAll(
#  129|       "debugify-check-and-strip-all-safe", cl::Hidden,
#  130|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:135: constructor_uses_global_object: The constructor of global object "EnableMachineOutliner" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMachineOutliner" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  133|           "present"));
#  134|   // Enable or disable the MachineOutliner.
#  135|-> static cl::opt<RunOutliner> EnableMachineOutliner(
#  136|       "enable-machine-outliner", cl::desc("Enable the machine outliner"),
#  137|       cl::Hidden, cl::ValueOptional, cl::init(RunOutliner::TargetDefault),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:147: constructor_uses_global_object: The constructor of global object "DisableCFIFixup" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableCFIFixup" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  145|   // the pipeline is controlled via the target options, this option serves as
#  146|   // manual override.
#  147|-> static cl::opt<bool> DisableCFIFixup("disable-cfi-fixup", cl::Hidden,
#  148|                                        cl::desc("Disable the CFI fixup pass"));
#  149|   // Enable or disable FastISel. Both options are needed, because

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:153: constructor_uses_global_object: The constructor of global object "EnableFastISelOption" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableFastISelOption" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  151|   // able to enable or disable fast-isel independently from -O0.
#  152|   static cl::opt<cl::boolOrDefault>
#  153|-> EnableFastISelOption("fast-isel", cl::Hidden,
#  154|     cl::desc("Enable the \"fast\" instruction selector"));
#  155|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:156: constructor_uses_global_object: The constructor of global object "EnableGlobalISelOption" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGlobalISelOption" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  154|     cl::desc("Enable the \"fast\" instruction selector"));
#  155|   
#  156|-> static cl::opt<cl::boolOrDefault> EnableGlobalISelOption(
#  157|       "global-isel", cl::Hidden,
#  158|       cl::desc("Enable the \"global\" instruction selector"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:163: constructor_uses_global_object: The constructor of global object "PrintAfterISel" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintAfterISel" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  161|   //        first...
#  162|   static cl::opt<bool>
#  163|->     PrintAfterISel("print-after-isel", cl::init(false), cl::Hidden,
#  164|                      cl::desc("Print machine instrs after ISel"));
#  165|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:166: constructor_uses_global_object: The constructor of global object "EnableGlobalISelAbort" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGlobalISelAbort" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  164|                      cl::desc("Print machine instrs after ISel"));
#  165|   
#  166|-> static cl::opt<GlobalISelAbortMode> EnableGlobalISelAbort(
#  167|       "global-isel-abort", cl::Hidden,
#  168|       cl::desc("Enable abort calls when \"global\" instruction selection "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:178: constructor_uses_global_object: The constructor of global object "DisableRAFSProfileLoader" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableRAFSProfileLoader" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  176|   // Disable MIRProfileLoader before RegAlloc. This is for for debugging and
#  177|   // tuning purpose.
#  178|-> static cl::opt<bool> DisableRAFSProfileLoader(
#  179|       "disable-ra-fsprofile-loader", cl::init(false), cl::Hidden,
#  180|       cl::desc("Disable MIRProfileLoader before RegAlloc"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:183: constructor_uses_global_object: The constructor of global object "DisableLayoutFSProfileLoader" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableLayoutFSProfileLoader" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  181|   // Disable MIRProfileLoader before BloackPlacement. This is for for debugging
#  182|   // and tuning purpose.
#  183|-> static cl::opt<bool> DisableLayoutFSProfileLoader(
#  184|       "disable-layout-fsprofile-loader", cl::init(false), cl::Hidden,
#  185|       cl::desc("Disable MIRProfileLoader before BlockPlacement"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:188: constructor_uses_global_object: The constructor of global object "FSProfileFile[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FSProfileFile[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  186|   // Specify FSProfile file name.
#  187|   static cl::opt<std::string>
#  188|->     FSProfileFile("fs-profile-file", cl::init(""), cl::value_desc("filename"),
#  189|                     cl::desc("Flow Sensitive profile file name."), cl::Hidden);
#  190|   // Specify Remapping file for FSProfile.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:191: constructor_uses_global_object: The constructor of global object "FSRemappingFile[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FSRemappingFile[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  189|                     cl::desc("Flow Sensitive profile file name."), cl::Hidden);
#  190|   // Specify Remapping file for FSProfile.
#  191|-> static cl::opt<std::string> FSRemappingFile(
#  192|       "fs-remapping-file", cl::init(""), cl::value_desc("filename"),
#  193|       cl::desc("Flow Sensitive profile remapping file name."), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:200: constructor_uses_global_object: The constructor of global object "MISchedPostRA" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MISchedPostRA" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  198|   // Targets can return true in targetSchedulesPostRAScheduling() and
#  199|   // insert a PostRA scheduling pass wherever it wants.
#  200|-> static cl::opt<bool> MISchedPostRA(
#  201|       "misched-postra", cl::Hidden,
#  202|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:206: constructor_uses_global_object: The constructor of global object "EarlyLiveIntervals" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EarlyLiveIntervals" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  204|   
#  205|   // Experimental option to run live interval analysis early.
#  206|-> static cl::opt<bool> EarlyLiveIntervals("early-live-intervals", cl::Hidden,
#  207|       cl::desc("Run live interval analysis earlier in the pipeline"));
#  208|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:218: constructor_uses_global_object: The constructor of global object "StartAfterOpt[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StartAfterOpt[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  216|   
#  217|   static cl::opt<std::string>
#  218|->     StartAfterOpt(StringRef(StartAfterOptName),
#  219|                     cl::desc("Resume compilation after a specific pass"),
#  220|                     cl::value_desc("pass-name"), cl::init(""), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:223: constructor_uses_global_object: The constructor of global object "StartBeforeOpt[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StartBeforeOpt[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  221|   
#  222|   static cl::opt<std::string>
#  223|->     StartBeforeOpt(StringRef(StartBeforeOptName),
#  224|                      cl::desc("Resume compilation before a specific pass"),
#  225|                      cl::value_desc("pass-name"), cl::init(""), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:228: constructor_uses_global_object: The constructor of global object "StopAfterOpt[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StopAfterOpt[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  226|   
#  227|   static cl::opt<std::string>
#  228|->     StopAfterOpt(StringRef(StopAfterOptName),
#  229|                    cl::desc("Stop compilation after a specific pass"),
#  230|                    cl::value_desc("pass-name"), cl::init(""), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:233: constructor_uses_global_object: The constructor of global object "StopBeforeOpt[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StopBeforeOpt[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  231|   
#  232|   static cl::opt<std::string>
#  233|->     StopBeforeOpt(StringRef(StopBeforeOptName),
#  234|                     cl::desc("Stop compilation before a specific pass"),
#  235|                     cl::value_desc("pass-name"), cl::init(""), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:238: constructor_uses_global_object: The constructor of global object "EnableMachineFunctionSplitter" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMachineFunctionSplitter" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  236|   
#  237|   /// Enable the machine function splitter pass.
#  238|-> static cl::opt<bool> EnableMachineFunctionSplitter(
#  239|       "enable-split-machine-functions", cl::Hidden,
#  240|       cl::desc("Split out cold blocks from machine functions based on profile "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:244: constructor_uses_global_object: The constructor of global object "DisableExpandReductions" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableExpandReductions" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  242|   
#  243|   /// Disable the expand reductions pass for testing.
#  244|-> static cl::opt<bool> DisableExpandReductions(
#  245|       "disable-expand-reductions", cl::init(false), cl::Hidden,
#  246|       cl::desc("Disable the expand reduction intrinsics pass from running"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:249: constructor_uses_global_object: The constructor of global object "DisableSelectOptimize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSelectOptimize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  247|   
#  248|   /// Disable the select optimization pass.
#  249|-> static cl::opt<bool> DisableSelectOptimize(
#  250|       "disable-select-optimize", cl::init(true), cl::Hidden,
#  251|       cl::desc("Disable the select-optimization pass from running"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetPassConfig.cpp:1102: constructor_uses_global_object: The constructor of global object "RegAlloc" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RegAlloc" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 1100|   static cl::opt<RegisterRegAlloc::FunctionPassCtor, false,
# 1101|                  RegisterPassParser<RegisterRegAlloc>>
# 1102|->     RegAlloc("regalloc", cl::Hidden, cl::init(&useDefaultRegisterAllocator),
# 1103|                cl::desc("Register allocator to use"));
# 1104|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetRegisterInfo.cpp:48: constructor_uses_global_object: The constructor of global object "HugeSizeForSplit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HugeSizeForSplit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   46|   
#   47|   static cl::opt<unsigned>
#   48|->     HugeSizeForSplit("huge-size-for-split", cl::Hidden,
#   49|                        cl::desc("A threshold of live range size which may cause "
#   50|                                 "high compile time cost in global splitting."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetSchedule.cpp:33: constructor_uses_global_object: The constructor of global object "EnableSchedModel" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSchedModel" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   31|   using namespace llvm;
#   32|   
#   33|-> static cl::opt<bool> EnableSchedModel("schedmodel", cl::Hidden, cl::init(true),
#   34|     cl::desc("Use TargetSchedModel for latency lookup"));
#   35|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TargetSchedule.cpp:36: constructor_uses_global_object: The constructor of global object "EnableSchedItins" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSchedItins" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   34|     cl::desc("Use TargetSchedModel for latency lookup"));
#   35|   
#   36|-> static cl::opt<bool> EnableSchedItins("scheditins", cl::Hidden, cl::init(true),
#   37|     cl::desc("Use InstrItineraryData for latency lookup"));
#   38|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TwoAddressInstructionPass.cpp:76: constructor_uses_global_object: The constructor of global object "EnableRescheduling" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableRescheduling" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   74|   // Temporary flag to disable rescheduling.
#   75|   static cl::opt<bool>
#   76|-> EnableRescheduling("twoaddr-reschedule",
#   77|                      cl::desc("Coalesce copies by rescheduling (default=true)"),
#   78|                      cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TwoAddressInstructionPass.cpp:82: constructor_uses_global_object: The constructor of global object "MaxDataFlowEdge" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxDataFlowEdge" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   80|   // Limit the number of dataflow edges to traverse when evaluating the benefit
#   81|   // of commuting operands.
#   82|-> static cl::opt<unsigned> MaxDataFlowEdge(
#   83|       "dataflow-edge-limit", cl::Hidden, cl::init(3),
#   84|       cl::desc("Maximum number of dataflow edges to traverse when evaluating "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/TypePromotion.cpp:47: constructor_uses_global_object: The constructor of global object "DisablePromotion" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisablePromotion" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   45|   using namespace llvm;
#   46|   
#   47|-> static cl::opt<bool> DisablePromotion("disable-type-promotion", cl::Hidden,
#   48|                                         cl::init(false),
#   49|                                         cl::desc("Disable type promotion pass"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/VLIWMachineScheduler.cpp:44: constructor_uses_global_object: The constructor of global object "IgnoreBBRegPressure" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "IgnoreBBRegPressure" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   42|   #define DEBUG_TYPE "machine-scheduler"
#   43|   
#   44|-> static cl::opt<bool> IgnoreBBRegPressure("ignore-bb-reg-pressure", cl::Hidden,
#   45|                                            cl::init(false));
#   46|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/VLIWMachineScheduler.cpp:47: constructor_uses_global_object: The constructor of global object "UseNewerCandidate" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseNewerCandidate" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   45|                                            cl::init(false));
#   46|   
#   47|-> static cl::opt<bool> UseNewerCandidate("use-newer-candidate", cl::Hidden,
#   48|                                          cl::init(true));
#   49|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/VLIWMachineScheduler.cpp:50: constructor_uses_global_object: The constructor of global object "SchedDebugVerboseLevel" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SchedDebugVerboseLevel" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   48|                                          cl::init(true));
#   49|   
#   50|-> static cl::opt<unsigned> SchedDebugVerboseLevel("misched-verbose-level",
#   51|                                                   cl::Hidden, cl::init(1));
#   52|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/VLIWMachineScheduler.cpp:55: constructor_uses_global_object: The constructor of global object "CheckEarlyAvail" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CheckEarlyAvail" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   53|   // Check if the scheduler should penalize instructions that are available to
#   54|   // early due to a zero-latency dependence.
#   55|-> static cl::opt<bool> CheckEarlyAvail("check-early-avail", cl::Hidden,
#   56|                                        cl::init(true));
#   57|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/VLIWMachineScheduler.cpp:61: constructor_uses_global_object: The constructor of global object "RPThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RPThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   59|   // We compute the maximum number of registers needed and divided by the total
#   60|   // available. Then, we compare the result to this value.
#   61|-> static cl::opt<float> RPThreshold("vliw-misched-reg-pressure", cl::Hidden,
#   62|                                     cl::init(0.75f),
#   63|                                     cl::desc("High register pressure threhold."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/WinEHPrepare.cpp:43: constructor_uses_global_object: The constructor of global object "DisableDemotion" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableDemotion" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   41|   #define DEBUG_TYPE "winehprepare"
#   42|   
#   43|-> static cl::opt<bool> DisableDemotion(
#   44|       "disable-demotion", cl::Hidden,
#   45|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/WinEHPrepare.cpp:49: constructor_uses_global_object: The constructor of global object "DisableCleanups" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableCleanups" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   47|       cl::init(false));
#   48|   
#   49|-> static cl::opt<bool> DisableCleanups(
#   50|       "disable-cleanups", cl::Hidden,
#   51|       cl::desc("Do not remove implausible terminators or other similar cleanups"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/CodeGen/WinEHPrepare.cpp:54: constructor_uses_global_object: The constructor of global object "DemoteCatchSwitchPHIOnlyOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DemoteCatchSwitchPHIOnlyOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|       cl::init(false));
#   53|   
#   54|-> static cl::opt<bool> DemoteCatchSwitchPHIOnlyOpt(
#   55|       "demote-catchswitch-only", cl::Hidden,
#   56|       cl::desc("Demote catchswitch BBs only (for wasm EH)"), cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/DWP/DWP.cpp:28: constructor_uses_global_object: The constructor of global object "MCTargetOptionsFlags" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MCTargetOptionsFlags" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   26|   using namespace llvm::object;
#   27|   
#   28|-> static mc::RegisterMCTargetOptionsFlags MCTargetOptionsFlags;
#   29|   
#   30|   // Returns the size of debug_str_offsets section headers in bytes.

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/DebugInfo/GSYM/GsymCreator.cpp:482: var_decl: Declaring variable "DstFI".
llvm-17.0.6.src/lib/DebugInfo/GSYM/GsymCreator.cpp:506: uninit_use_in_call: Using uninitialized value "DstFI". Field "DstFI.EncodingCache.InlineElts" is uninitialized when calling "push_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
#  504|     }
#  505|     std::lock_guard<std::mutex> Guard(Mutex);
#  506|->   Funcs.push_back(DstFI);
#  507|     return Funcs.back().cacheEncoding();
#  508|   }

Error: Y2K38_SAFETY (CWE-197):
llvm-17.0.6.src/lib/DebugInfo/PDB/Native/PDBFileBuilder.cpp:360: store_truncates_time_t: A "time_t" value is stored in an integer with too few bits to accommodate it.  The expression "Sig.operator bool() ? *Sig : time(NULL)" is cast to "llvm::support::detail::packed_endian_specific_integral<unsigned int, (llvm::support::endianness)1, 1ul, 1ul>::value_type".
#  358|       H->Guid = Info->getGuid();
#  359|       std::optional<uint32_t> Sig = Info->getSignature();
#  360|->     H->Signature = Sig ? *Sig : time(nullptr);
#  361|     }
#  362|   

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Debuginfod/Debuginfod.cpp:67: var_decl: Declaring variable "DebuginfodUrls".
llvm-17.0.6.src/lib/Debuginfod/Debuginfod.cpp:69: uninit_use: Using uninitialized value "DebuginfodUrls". Field "DebuginfodUrls.InlineElts" is uninitialized.
#   67|     SmallVector<StringRef> DebuginfodUrls;
#   68|     StringRef(DebuginfodUrlsEnv).split(DebuginfodUrls, " ");
#   69|->   return DebuginfodUrls;
#   70|   }
#   71|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/ExecutionEngine/Interpreter/Execution.cpp:34: constructor_uses_global_object: The constructor of global object "PrintVolatile" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintVolatile" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   32|   STATISTIC(NumDynamicInsts, "Number of dynamic instructions executed");
#   33|   
#   34|-> static cl::opt<bool> PrintVolatile("interpreter-print-volatile", cl::Hidden,
#   35|             cl::desc("make the interpreter print every volatile load and store"));
#   36|   

Error: WRAPPER_ESCAPE (CWE-825):
llvm-17.0.6.src/lib/ExecutionEngine/Orc/Core.cpp:2511: extract: Calling "back" which extracts wrapped state from "IPLS->CurDefGeneratorStack".
llvm-17.0.6.src/lib/ExecutionEngine/Orc/Core.cpp:2511: identity_transfer: Member function call "IPLS->CurDefGeneratorStack.back()->lock()" returns "IPLS->CurDefGeneratorStack.back()" ("this").
llvm-17.0.6.src/lib/ExecutionEngine/Orc/Core.cpp:2511: assign: Assigning: "DG" = "IPLS->CurDefGeneratorStack.back()->lock()".
llvm-17.0.6.src/lib/ExecutionEngine/Orc/Core.cpp:2512: invalidate: Calling "pop_back" invalidates the internal representation of "IPLS->CurDefGeneratorStack".
llvm-17.0.6.src/lib/ExecutionEngine/Orc/Core.cpp:2514: use_after_free: Using invalidated internal representation of "IPLS->CurDefGeneratorStack".
# 2512|         IPLS->CurDefGeneratorStack.pop_back();
# 2513|   
# 2514|->       if (!DG)
# 2515|           return IPLS->fail(make_error<StringError>(
# 2516|               "DefinitionGenerator removed while lookup in progress",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Frontend/OpenMP/OMPIRBuilder.cpp:55: constructor_uses_global_object: The constructor of global object "OptimisticAttributes" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OptimisticAttributes" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   53|   
#   54|   static cl::opt<bool>
#   55|->     OptimisticAttributes("openmp-ir-builder-optimistic-attributes", cl::Hidden,
#   56|                            cl::desc("Use optimistic attributes describing "
#   57|                                     "'as-if' properties of runtime calls."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Frontend/OpenMP/OMPIRBuilder.cpp:60: constructor_uses_global_object: The constructor of global object "UnrollThresholdFactor" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UnrollThresholdFactor" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   58|                            cl::init(false));
#   59|   
#   60|-> static cl::opt<double> UnrollThresholdFactor(
#   61|       "openmp-ir-builder-unroll-threshold-factor", cl::Hidden,
#   62|       cl::desc("Factor for the unroll threshold to account for code "

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Frontend/OpenMP/OMPIRBuilder.cpp:933: var_decl: Declaring variable "Return" without initializer.
llvm-17.0.6.src/lib/Frontend/OpenMP/OMPIRBuilder.cpp:960: uninit_use_in_call: Using uninitialized value "Return" when calling "CreateIsNotNull".
#  958|     BasicBlock *OffloadContBlock =
#  959|         BasicBlock::Create(Builder.getContext(), "omp_offload.cont");
#  960|->   Value *Failed = Builder.CreateIsNotNull(Return);
#  961|     Builder.CreateCondBr(Failed, OffloadFailedBlock, OffloadContBlock);
#  962|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/AutoUpgrade.cpp:49: constructor_uses_global_object: The constructor of global object "DisableAutoUpgradeDebugInfo" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableAutoUpgradeDebugInfo" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   47|   
#   48|   static cl::opt<bool>
#   49|->     DisableAutoUpgradeDebugInfo("disable-auto-upgrade-debug-info",
#   50|                                   cl::desc("Disable autoupgrade of debug info"));
#   51|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/DebugInfoMetadata.cpp:32: constructor_uses_global_object: The constructor of global object "llvm::EnableFSDiscriminator" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::EnableFSDiscriminator" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   30|   namespace llvm {
#   31|   // Use FS-AFDO discriminator.
#   32|-> cl::opt<bool> EnableFSDiscriminator(
#   33|       "enable-fs-discriminator", cl::Hidden,
#   34|       cl::desc("Enable adding flow sensitive discriminators"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/DiagnosticHandler.cpp:46: constructor_uses_global_object: The constructor of global object "<unnamed>::PassRemarks[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::PassRemarks[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   44|   // -pass-remarks
#   45|   //    Command line flag to enable emitOptimizationRemark()
#   46|-> static cl::opt<PassRemarksOpt, true, cl::parser<std::string>> PassRemarks(
#   47|       "pass-remarks", cl::value_desc("pattern"),
#   48|       cl::desc("Enable optimization remarks from passes whose name match "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/DiagnosticHandler.cpp:54: constructor_uses_global_object: The constructor of global object "<unnamed>::PassRemarksMissed[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::PassRemarksMissed[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|   // -pass-remarks-missed
#   53|   //    Command line flag to enable emitOptimizationRemarkMissed()
#   54|-> static cl::opt<PassRemarksOpt, true, cl::parser<std::string>> PassRemarksMissed(
#   55|       "pass-remarks-missed", cl::value_desc("pattern"),
#   56|       cl::desc("Enable missed optimization remarks from passes whose name match "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/DiagnosticHandler.cpp:63: constructor_uses_global_object: The constructor of global object "<unnamed>::PassRemarksAnalysis[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::PassRemarksAnalysis[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   61|   //    Command line flag to enable emitOptimizationRemarkAnalysis()
#   62|   static cl::opt<PassRemarksOpt, true, cl::parser<std::string>>
#   63|->     PassRemarksAnalysis(
#   64|           "pass-remarks-analysis", cl::value_desc("pattern"),
#   65|           cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/Dominators.cpp:41: constructor_uses_global_object: The constructor of global object "VerifyDomInfoX" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyDomInfoX" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   39|   bool llvm::VerifyDomInfo = false;
#   40|   static cl::opt<bool, true>
#   41|->     VerifyDomInfoX("verify-dom-info", cl::location(VerifyDomInfo), cl::Hidden,
#   42|                      cl::desc("Verify dominator info (time consuming)"));
#   43|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/Function.cpp:79: constructor_uses_global_object: The constructor of global object "NonGlobalValueMaxNameSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "NonGlobalValueMaxNameSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   77|   template class llvm::SymbolTableListTraits<BasicBlock>;
#   78|   
#   79|-> static cl::opt<unsigned> NonGlobalValueMaxNameSize(
#   80|       "non-global-value-max-name-size", cl::Hidden, cl::init(1024),
#   81|       cl::desc("Maximum size for the name of non-global values."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/Instructions.cpp:51: constructor_uses_global_object: The constructor of global object "DisableI2pP2iOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableI2pP2iOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   49|   using namespace llvm;
#   50|   
#   51|-> static cl::opt<bool> DisableI2pP2iOpt(
#   52|       "disable-i2p-p2i-opt", cl::init(false),
#   53|       cl::desc("Disables inttoptr/ptrtoint roundtrip optimization"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/LegacyPassManager.cpp:50: constructor_uses_global_object: The constructor of global object "PassDebugging" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PassDebugging" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   48|   } // namespace
#   49|   
#   50|-> static cl::opt<enum PassDebugLevel> PassDebugging(
#   51|       "debug-pass", cl::Hidden,
#   52|       cl::desc("Print legacy PassManager debugging information"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/ModuleSummaryIndex.cpp:29: constructor_uses_global_object: The constructor of global object "PropagateAttrs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PropagateAttrs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   27|             "Number of live global variables marked write only");
#   28|   
#   29|-> static cl::opt<bool> PropagateAttrs("propagate-attrs", cl::init(true),
#   30|                                       cl::Hidden,
#   31|                                       cl::desc("Propagate attributes in index"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/ModuleSummaryIndex.cpp:33: constructor_uses_global_object: The constructor of global object "ImportConstantsWithRefs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ImportConstantsWithRefs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   31|                                       cl::desc("Propagate attributes in index"));
#   32|   
#   33|-> static cl::opt<bool> ImportConstantsWithRefs(
#   34|       "import-constants-with-refs", cl::init(true), cl::Hidden,
#   35|       cl::desc("Import constant global variables with references"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/OptBisect.cpp:28: constructor_uses_global_object: The constructor of global object "OptBisectLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OptBisectLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   26|   }
#   27|   
#   28|-> static cl::opt<int> OptBisectLimit("opt-bisect-limit", cl::Hidden,
#   29|                                      cl::init(OptBisect::Disabled), cl::Optional,
#   30|                                      cl::cb<void, int>([](int Limit) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/PassTimingInfo.cpp:40: constructor_uses_global_object: The constructor of global object "llvm::EnableTiming" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::EnableTiming" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   38|   bool TimePassesPerRun = false;
#   39|   
#   40|-> static cl::opt<bool, true> EnableTiming(
#   41|       "time-passes", cl::location(TimePassesIsEnabled), cl::Hidden,
#   42|       cl::desc("Time each pass, printing elapsed time for each on exit"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/PassTimingInfo.cpp:44: constructor_uses_global_object: The constructor of global object "llvm::EnableTimingPerRun" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::EnableTimingPerRun" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   42|       cl::desc("Time each pass, printing elapsed time for each on exit"));
#   43|   
#   44|-> static cl::opt<bool, true> EnableTimingPerRun(
#   45|       "time-passes-per-run", cl::location(TimePassesPerRun), cl::Hidden,
#   46|       cl::desc("Time each pass run, printing elapsed time for each run on exit"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/PrintPasses.cpp:21: constructor_uses_global_object: The constructor of global object "PrintBefore[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintBefore[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   19|   // Print IR out before/after specified passes.
#   20|   static cl::list<std::string>
#   21|->     PrintBefore("print-before",
#   22|                   llvm::cl::desc("Print IR before specified passes"),
#   23|                   cl::CommaSeparated, cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/PrintPasses.cpp:26: constructor_uses_global_object: The constructor of global object "PrintAfter[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintAfter[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   24|   
#   25|   static cl::list<std::string>
#   26|->     PrintAfter("print-after", llvm::cl::desc("Print IR after specified passes"),
#   27|                  cl::CommaSeparated, cl::Hidden);
#   28|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/PrintPasses.cpp:29: constructor_uses_global_object: The constructor of global object "PrintBeforeAll" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintBeforeAll" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   27|                  cl::CommaSeparated, cl::Hidden);
#   28|   
#   29|-> static cl::opt<bool> PrintBeforeAll("print-before-all",
#   30|                                       llvm::cl::desc("Print IR before each pass"),
#   31|                                       cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/PrintPasses.cpp:32: constructor_uses_global_object: The constructor of global object "PrintAfterAll" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintAfterAll" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   30|                                       llvm::cl::desc("Print IR before each pass"),
#   31|                                       cl::init(false), cl::Hidden);
#   32|-> static cl::opt<bool> PrintAfterAll("print-after-all",
#   33|                                      llvm::cl::desc("Print IR after each pass"),
#   34|                                      cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/PrintPasses.cpp:60: constructor_uses_global_object: The constructor of global object "llvm::PrintChanged" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::PrintChanged" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   58|   // have the necessary facilities, the error message will be shown in place of
#   59|   // the expected output.
#   60|-> cl::opt<ChangePrinter> llvm::PrintChanged(
#   61|       "print-changed", cl::desc("Print changed IRs"), cl::Hidden,
#   62|       cl::ValueOptional, cl::init(ChangePrinter::None),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/PrintPasses.cpp:82: constructor_uses_global_object: The constructor of global object "DiffBinary[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DiffBinary[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   80|   // An option for specifying the diff used by print-changed=[diff | diff-quiet]
#   81|   static cl::opt<std::string>
#   82|->     DiffBinary("print-changed-diff-path", cl::Hidden, cl::init("diff"),
#   83|                  cl::desc("system diff used by change reporters"));
#   84|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/PrintPasses.cpp:86: constructor_uses_global_object: The constructor of global object "PrintModuleScope" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintModuleScope" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   84|   
#   85|   static cl::opt<bool>
#   86|->     PrintModuleScope("print-module-scope",
#   87|                        cl::desc("When printing IR for print-[before|after]{-all} "
#   88|                                 "always print a module IR"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/PrintPasses.cpp:93: constructor_uses_global_object: The constructor of global object "FilterPasses[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FilterPasses[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   91|   // See the description for -print-changed for an explanation of the use
#   92|   // of this option.
#   93|-> static cl::list<std::string> FilterPasses(
#   94|       "filter-passes", cl::value_desc("pass names"),
#   95|       cl::desc("Only consider IR changes for passes whose names "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/PrintPasses.cpp:100: constructor_uses_global_object: The constructor of global object "PrintFuncsList[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintFuncsList[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   98|   
#   99|   static cl::list<std::string>
#  100|->     PrintFuncsList("filter-print-funcs", cl::value_desc("function names"),
#  101|                      cl::desc("Only print IR for functions whose name "
#  102|                               "match this for all print-[before|after][-all] "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/SafepointIRVerifier.cpp:58: constructor_uses_global_object: The constructor of global object "PrintOnly" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintOnly" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   56|   /// when verification fails, report a message to the console (for FileCheck
#   57|   /// usage) and continue execution as if nothing happened.
#   58|-> static cl::opt<bool> PrintOnly("safepoint-ir-verifier-print-only",
#   59|                                  cl::init(false));
#   60|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/Value.cpp:39: constructor_uses_global_object: The constructor of global object "UseDerefAtPointSemantics" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseDerefAtPointSemantics" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   37|   using namespace llvm;
#   38|   
#   39|-> static cl::opt<unsigned> UseDerefAtPointSemantics(
#   40|       "use-dereferenceable-at-point-semantics", cl::Hidden, cl::init(false),
#   41|       cl::desc("Deref attributes and metadata infer facts at definition only"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/IR/Verifier.cpp:128: constructor_uses_global_object: The constructor of global object "VerifyNoAliasScopeDomination" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyNoAliasScopeDomination" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  126|   using namespace llvm;
#  127|   
#  128|-> static cl::opt<bool> VerifyNoAliasScopeDomination(
#  129|       "verify-noalias-scope-decl-dom", cl::Hidden, cl::init(false),
#  130|       cl::desc("Ensure that llvm.experimental.noalias.scope.decl for identical "

Error: OVERRUN (CWE-119):
llvm-17.0.6.src/lib/IR/Verifier.cpp:5216: assignment: Assigning: "Kind" = "llvm::Attribute::getAttrKindFromName(Elem.Tag->getKey())". The value of "Kind" is now between 0 and 87 (inclusive).
llvm-17.0.6.src/lib/IR/Verifier.cpp:5231: cond_between: Checking "Kind == None" implies that "Kind" is between 1 and 87 (inclusive) on the false branch.
llvm-17.0.6.src/lib/IR/Verifier.cpp:5237: overrun-call: Overrunning callee's array of size 84 by passing argument "Kind" (which evaluates to 87) in call to "canUseAsParamAttr".
# 5235|           Check(isa<ConstantInt>(Call.getOperand(Elem.Begin + 1)),
# 5236|                 "the second argument should be a constant integral value", Call);
# 5237|->       } else if (Attribute::canUseAsParamAttr(Kind)) {
# 5238|           Check((ArgCount) == 1, "this attribute should have one argument", Call);
# 5239|         } else if (Attribute::canUseAsFnAttr(Kind)) {

Error: OVERRUN (CWE-119):
llvm-17.0.6.src/lib/IR/Verifier.cpp:5216: assignment: Assigning: "Kind" = "llvm::Attribute::getAttrKindFromName(Elem.Tag->getKey())". The value of "Kind" is now between 0 and 87 (inclusive).
llvm-17.0.6.src/lib/IR/Verifier.cpp:5231: cond_between: Checking "Kind == None" implies that "Kind" is between 1 and 87 (inclusive) on the false branch.
llvm-17.0.6.src/lib/IR/Verifier.cpp:5239: overrun-call: Overrunning callee's array of size 84 by passing argument "Kind" (which evaluates to 87) in call to "canUseAsFnAttr".
# 5237|         } else if (Attribute::canUseAsParamAttr(Kind)) {
# 5238|           Check((ArgCount) == 1, "this attribute should have one argument", Call);
# 5239|->       } else if (Attribute::canUseAsFnAttr(Kind)) {
# 5240|           Check((ArgCount) == 0, "this attribute has no argument", Call);
# 5241|         }

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/LTO.cpp:69: constructor_uses_global_object: The constructor of global object "DumpThinCGSCCs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DumpThinCGSCCs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   67|   
#   68|   static cl::opt<bool>
#   69|->     DumpThinCGSCCs("dump-thin-cg-sccs", cl::init(false), cl::Hidden,
#   70|                      cl::desc("Dump the SCCs in the ThinLTO index's callgraph"));
#   71|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/LTO.cpp:74: constructor_uses_global_object: The constructor of global object "llvm::EnableLTOInternalization" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::EnableLTOInternalization" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   72|   namespace llvm {
#   73|   /// Enable global value internalization in LTO.
#   74|-> cl::opt<bool> EnableLTOInternalization(
#   75|       "enable-lto-internalization", cl::init(true), cl::Hidden,
#   76|       cl::desc("Enable global value internalization in LTO"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/LTOBackend.cpp:61: constructor_uses_global_object: The constructor of global object "EmbedBitcode" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EmbedBitcode" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   59|   };
#   60|   
#   61|-> static cl::opt<LTOBitcodeEmbedding> EmbedBitcode(
#   62|       "lto-embed-bitcode", cl::init(LTOBitcodeEmbedding::DoNotEmbed),
#   63|       cl::values(clEnumValN(LTOBitcodeEmbedding::DoNotEmbed, "none",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/LTOBackend.cpp:72: constructor_uses_global_object: The constructor of global object "ThinLTOAssumeMerged" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ThinLTOAssumeMerged" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   70|       cl::desc("Embed LLVM bitcode in object files produced by LTO"));
#   71|   
#   72|-> static cl::opt<bool> ThinLTOAssumeMerged(
#   73|       "thinlto-assume-merged", cl::init(false),
#   74|       cl::desc("Assume the input has already undergone ThinLTO function "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/LTOCodeGenerator.cpp:74: constructor_uses_global_object: The constructor of global object "llvm::LTODiscardValueNames" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::LTODiscardValueNames" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   72|   
#   73|   namespace llvm {
#   74|-> cl::opt<bool> LTODiscardValueNames(
#   75|       "lto-discard-value-names",
#   76|       cl::desc("Strip names from Value during LTO (other than GlobalValue)."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/LTOCodeGenerator.cpp:84: constructor_uses_global_object: The constructor of global object "llvm::RemarksWithHotness" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::RemarksWithHotness" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   82|       cl::Hidden);
#   83|   
#   84|-> cl::opt<bool> RemarksWithHotness(
#   85|       "lto-pass-remarks-with-hotness",
#   86|       cl::desc("With PGO, include profile count in optimization remarks"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/LTOCodeGenerator.cpp:90: constructor_uses_global_object: The constructor of global object "llvm::RemarksHotnessThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::RemarksHotnessThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   88|   
#   89|   cl::opt<std::optional<uint64_t>, false, remarks::HotnessThresholdParser>
#   90|->     RemarksHotnessThreshold(
#   91|           "lto-pass-remarks-hotness-threshold",
#   92|           cl::desc("Minimum profile count required for an "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/LTOCodeGenerator.cpp:98: constructor_uses_global_object: The constructor of global object "llvm::RemarksFilename[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::RemarksFilename[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   96|   
#   97|   cl::opt<std::string>
#   98|->     RemarksFilename("lto-pass-remarks-output",
#   99|                       cl::desc("Output filename for pass remarks"),
#  100|                       cl::value_desc("filename"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/LTOCodeGenerator.cpp:103: constructor_uses_global_object: The constructor of global object "llvm::RemarksPasses[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::RemarksPasses[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  101|   
#  102|   cl::opt<std::string>
#  103|->     RemarksPasses("lto-pass-remarks-filter",
#  104|                     cl::desc("Only record optimization remarks from passes whose "
#  105|                              "names match the given regular expression"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/LTOCodeGenerator.cpp:108: constructor_uses_global_object: The constructor of global object "llvm::RemarksFormat[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::RemarksFormat[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  106|                     cl::value_desc("regex"));
#  107|   
#  108|-> cl::opt<std::string> RemarksFormat(
#  109|       "lto-pass-remarks-format",
#  110|       cl::desc("The format used for serializing remarks (default: YAML)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/LTOCodeGenerator.cpp:113: constructor_uses_global_object: The constructor of global object "llvm::LTOStatsFile[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::LTOStatsFile[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  111|       cl::value_desc("format"), cl::init("yaml"));
#  112|   
#  113|-> cl::opt<std::string> LTOStatsFile(
#  114|       "lto-stats-file",
#  115|       cl::desc("Save statistics to the specified file"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/LTOCodeGenerator.cpp:118: constructor_uses_global_object: The constructor of global object "llvm::AIXSystemAssemblerPath[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::AIXSystemAssemblerPath[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  116|       cl::Hidden);
#  117|   
#  118|-> cl::opt<std::string> AIXSystemAssemblerPath(
#  119|       "lto-aix-system-assembler",
#  120|       cl::desc("Path to a system assembler, picked up on AIX only"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/LTOCodeGenerator.cpp:124: constructor_uses_global_object: The constructor of global object "llvm::LTORunCSIRInstr" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::LTORunCSIRInstr" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  122|   
#  123|   cl::opt<bool>
#  124|->     LTORunCSIRInstr("cs-profile-generate",
#  125|                       cl::desc("Perform context sensitive PGO instrumentation"));
#  126|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/LTOCodeGenerator.cpp:128: constructor_uses_global_object: The constructor of global object "llvm::LTOCSIRProfile[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::LTOCSIRProfile[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  126|   
#  127|   cl::opt<std::string>
#  128|->     LTOCSIRProfile("cs-profile-path",
#  129|                      cl::desc("Context sensitive profile file path"));
#  130|   } // namespace llvm

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/SummaryBasedOptimizations.cpp:22: constructor_uses_global_object: The constructor of global object "ThinLTOSynthesizeEntryCounts" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ThinLTOSynthesizeEntryCounts" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   20|   using namespace llvm;
#   21|   
#   22|-> static cl::opt<bool> ThinLTOSynthesizeEntryCounts(
#   23|       "thinlto-synthesize-entry-counts", cl::init(false), cl::Hidden,
#   24|       cl::desc("Synthesize entry counts based on the summary"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/LTO/ThinLTOCodeGenerator.cpp:92: constructor_uses_global_object: The constructor of global object "<unnamed>::ThreadCount" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ThreadCount" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   90|   // thred per core, as indicated by the usage of
#   91|   // heavyweight_hardware_concurrency() below.
#   92|-> static cl::opt<int> ThreadCount("threads", cl::init(0));
#   93|   
#   94|   // Simple helper to save temporary files for debug.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/MC/MCAsmInfo.cpp:27: constructor_uses_global_object: The constructor of global object "DwarfExtendedLoc" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DwarfExtendedLoc" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   25|   enum DefaultOnOff { Default, Enable, Disable };
#   26|   }
#   27|-> static cl::opt<DefaultOnOff> DwarfExtendedLoc(
#   28|       "dwarf-extended-loc", cl::Hidden,
#   29|       cl::desc("Disable emission of the extended flags in .loc directives."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/MC/MCAsmInfo.cpp:35: constructor_uses_global_object: The constructor of global object "llvm::UseLEB128Directives" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::UseLEB128Directives" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|   
#   34|   namespace llvm {
#   35|-> cl::opt<cl::boolOrDefault> UseLEB128Directives(
#   36|       "use-leb128-directives", cl::Hidden,
#   37|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/MC/MCParser/MCAsmParser.cpp:25: constructor_uses_global_object: The constructor of global object "llvm::AsmMacroMaxNestingDepth" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::AsmMacroMaxNestingDepth" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   23|   
#   24|   namespace llvm {
#   25|-> cl::opt<unsigned> AsmMacroMaxNestingDepth(
#   26|       "asm-macro-max-nesting-depth", cl::init(20), cl::Hidden,
#   27|       cl::desc("The maximum nesting depth allowed for assembly macros."));

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/MC/WasmObjectWriter.cpp:1657: var_decl: Declaring variable "Global".
llvm-17.0.6.src/lib/MC/WasmObjectWriter.cpp:1682: uninit_use_in_call: Using uninitialized value "Global". Field "Global.InitExpr.Inst.Value" is uninitialized when calling "push_back".
# 1680|             assert(WasmIndices.count(&WS) == 0);
# 1681|             WasmIndices[&WS] = Global.Index;
# 1682|->           Globals.push_back(Global);
# 1683|           } else {
# 1684|             // An import; the index was assigned above

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Object/IRSymtab.cpp:44: constructor_uses_global_object: The constructor of global object "DisableBitcodeVersionUpgrade" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableBitcodeVersionUpgrade" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   42|   using namespace irsymtab;
#   43|   
#   44|-> static cl::opt<bool> DisableBitcodeVersionUpgrade(
#   45|       "disable-bitcode-version-upgrade", cl::Hidden,
#   46|       cl::desc("Disable automatic bitcode upgrade for version mismatch"));

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Object/WasmObjectFile.cpp:626: var_decl: Declaring variable "Info".
llvm-17.0.6.src/lib/Object/WasmObjectFile.cpp:798: uninit_use_in_call: Using uninitialized value "Info". Field "Info" is uninitialized when calling "emplace_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
#  796|                                                   Twine(Info.Name),
#  797|                                               object_error::parse_failed);
#  798|->     LinkingData.SymbolTable.emplace_back(Info);
#  799|       Symbols.emplace_back(LinkingData.SymbolTable.back(), GlobalType, TableType,
#  800|                            Signature);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilder.cpp:271: constructor_uses_global_object: The constructor of global object "llvm::PrintPipelinePasses" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::PrintPipelinePasses" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  269|   
#  270|   namespace llvm {
#  271|-> cl::opt<bool> PrintPipelinePasses(
#  272|       "print-pipeline-passes",
#  273|       cl::desc("Print a '-passes' compatible string describing the pipeline "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:138: constructor_uses_global_object: The constructor of global object "UseInlineAdvisor" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseInlineAdvisor" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  136|   using namespace llvm;
#  137|   
#  138|-> static cl::opt<InliningAdvisorMode> UseInlineAdvisor(
#  139|       "enable-ml-inliner", cl::init(InliningAdvisorMode::Default), cl::Hidden,
#  140|       cl::desc("Enable ML policy for inliner. Currently trained for -Oz only"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:148: constructor_uses_global_object: The constructor of global object "EnableSyntheticCounts" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSyntheticCounts" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  146|                             "Use release mode (AOT-compiled model)")));
#  147|   
#  148|-> static cl::opt<bool> EnableSyntheticCounts(
#  149|       "enable-npm-synthetic-counts", cl::Hidden,
#  150|       cl::desc("Run synthetic function entry count generation "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:155: constructor_uses_global_object: The constructor of global object "EnablePGOInlineDeferral" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnablePGOInlineDeferral" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  153|   /// Flag to enable inline deferral during PGO.
#  154|   static cl::opt<bool>
#  155|->     EnablePGOInlineDeferral("enable-npm-pgo-inline-deferral", cl::init(true),
#  156|                               cl::Hidden,
#  157|                               cl::desc("Enable inline deferral during PGO"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:159: constructor_uses_global_object: The constructor of global object "EnableModuleInliner" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableModuleInliner" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  157|                               cl::desc("Enable inline deferral during PGO"));
#  158|   
#  159|-> static cl::opt<bool> EnableModuleInliner("enable-module-inliner",
#  160|                                            cl::init(false), cl::Hidden,
#  161|                                            cl::desc("Enable module inliner"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:163: constructor_uses_global_object: The constructor of global object "PerformMandatoryInliningsFirst" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PerformMandatoryInliningsFirst" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  161|                                            cl::desc("Enable module inliner"));
#  162|   
#  163|-> static cl::opt<bool> PerformMandatoryInliningsFirst(
#  164|       "mandatory-inlining-first", cl::init(true), cl::Hidden,
#  165|       cl::desc("Perform mandatory inlinings module-wide, before performing "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:168: constructor_uses_global_object: The constructor of global object "EnableEagerlyInvalidateAnalyses" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableEagerlyInvalidateAnalyses" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  166|                "inlining"));
#  167|   
#  168|-> static cl::opt<bool> EnableEagerlyInvalidateAnalyses(
#  169|       "eagerly-invalidate-analyses", cl::init(true), cl::Hidden,
#  170|       cl::desc("Eagerly invalidate more analyses in default pipelines"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:172: constructor_uses_global_object: The constructor of global object "EnableMergeFunctions" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMergeFunctions" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  170|       cl::desc("Eagerly invalidate more analyses in default pipelines"));
#  171|   
#  172|-> static cl::opt<bool> EnableMergeFunctions(
#  173|       "enable-merge-functions", cl::init(false), cl::Hidden,
#  174|       cl::desc("Enable function merging as part of the optimization pipeline"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:176: constructor_uses_global_object: The constructor of global object "EnablePostPGOLoopRotation" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnablePostPGOLoopRotation" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  174|       cl::desc("Enable function merging as part of the optimization pipeline"));
#  175|   
#  176|-> static cl::opt<bool> EnablePostPGOLoopRotation(
#  177|       "enable-post-pgo-loop-rotation", cl::init(true), cl::Hidden,
#  178|       cl::desc("Run the loop rotation transformation after PGO instrumentation"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:180: constructor_uses_global_object: The constructor of global object "EnableGlobalAnalyses" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGlobalAnalyses" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  178|       cl::desc("Run the loop rotation transformation after PGO instrumentation"));
#  179|   
#  180|-> static cl::opt<bool> EnableGlobalAnalyses(
#  181|       "enable-global-analyses", cl::init(true), cl::Hidden,
#  182|       cl::desc("Enable inter-procedural analyses"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:185: constructor_uses_global_object: The constructor of global object "RunPartialInlining" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RunPartialInlining" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  183|   
#  184|   static cl::opt<bool>
#  185|->     RunPartialInlining("enable-partial-inlining", cl::init(false), cl::Hidden,
#  186|                          cl::desc("Run Partial inlinining pass"));
#  187|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:188: constructor_uses_global_object: The constructor of global object "ExtraVectorizerPasses" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ExtraVectorizerPasses" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  186|                          cl::desc("Run Partial inlinining pass"));
#  187|   
#  188|-> static cl::opt<bool> ExtraVectorizerPasses(
#  189|       "extra-vectorizer-passes", cl::init(false), cl::Hidden,
#  190|       cl::desc("Run cleanup optimization passes after vectorization"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:192: constructor_uses_global_object: The constructor of global object "RunNewGVN" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RunNewGVN" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  190|       cl::desc("Run cleanup optimization passes after vectorization"));
#  191|   
#  192|-> static cl::opt<bool> RunNewGVN("enable-newgvn", cl::init(false), cl::Hidden,
#  193|                                  cl::desc("Run the NewGVN pass"));
#  194|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:195: constructor_uses_global_object: The constructor of global object "EnableLoopInterchange" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableLoopInterchange" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  193|                                  cl::desc("Run the NewGVN pass"));
#  194|   
#  195|-> static cl::opt<bool> EnableLoopInterchange(
#  196|       "enable-loopinterchange", cl::init(false), cl::Hidden,
#  197|       cl::desc("Enable the experimental LoopInterchange Pass"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:199: constructor_uses_global_object: The constructor of global object "EnableUnrollAndJam" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableUnrollAndJam" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  197|       cl::desc("Enable the experimental LoopInterchange Pass"));
#  198|   
#  199|-> static cl::opt<bool> EnableUnrollAndJam("enable-unroll-and-jam",
#  200|                                           cl::init(false), cl::Hidden,
#  201|                                           cl::desc("Enable Unroll And Jam Pass"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:203: constructor_uses_global_object: The constructor of global object "EnableLoopFlatten" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableLoopFlatten" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  201|                                           cl::desc("Enable Unroll And Jam Pass"));
#  202|   
#  203|-> static cl::opt<bool> EnableLoopFlatten("enable-loop-flatten", cl::init(false),
#  204|                                          cl::Hidden,
#  205|                                          cl::desc("Enable the LoopFlatten Pass"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:208: constructor_uses_global_object: The constructor of global object "EnableDFAJumpThreading" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableDFAJumpThreading" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  206|   
#  207|   static cl::opt<bool>
#  208|->     EnableDFAJumpThreading("enable-dfa-jump-thread",
#  209|                              cl::desc("Enable DFA jump threading"),
#  210|                              cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:213: constructor_uses_global_object: The constructor of global object "EnableHotColdSplit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableHotColdSplit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  211|   
#  212|   static cl::opt<bool>
#  213|->     EnableHotColdSplit("hot-cold-split",
#  214|                          cl::desc("Enable hot-cold splitting pass"));
#  215|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:216: constructor_uses_global_object: The constructor of global object "EnableIROutliner" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableIROutliner" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  214|                          cl::desc("Enable hot-cold splitting pass"));
#  215|   
#  216|-> static cl::opt<bool> EnableIROutliner("ir-outliner", cl::init(false),
#  217|                                         cl::Hidden,
#  218|                                         cl::desc("Enable ir outliner pass"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:221: constructor_uses_global_object: The constructor of global object "DisablePreInliner" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisablePreInliner" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  219|   
#  220|   static cl::opt<bool>
#  221|->     DisablePreInliner("disable-preinline", cl::init(false), cl::Hidden,
#  222|                         cl::desc("Disable pre-instrumentation inliner"));
#  223|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:224: constructor_uses_global_object: The constructor of global object "PreInlineThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PreInlineThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  222|                         cl::desc("Disable pre-instrumentation inliner"));
#  223|   
#  224|-> static cl::opt<int> PreInlineThreshold(
#  225|       "preinline-threshold", cl::Hidden, cl::init(75),
#  226|       cl::desc("Control the amount of inlining in pre-instrumentation inliner "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:230: constructor_uses_global_object: The constructor of global object "EnableGVNHoist" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGVNHoist" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  228|   
#  229|   static cl::opt<bool>
#  230|->     EnableGVNHoist("enable-gvn-hoist",
#  231|                      cl::desc("Enable the GVN hoisting pass (default = off)"));
#  232|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:234: constructor_uses_global_object: The constructor of global object "EnableGVNSink" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGVNSink" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  232|   
#  233|   static cl::opt<bool>
#  234|->     EnableGVNSink("enable-gvn-sink",
#  235|                     cl::desc("Enable the GVN sinking pass (default = off)"));
#  236|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:240: constructor_uses_global_object: The constructor of global object "EnableCHR" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableCHR" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  238|   // profile loading.
#  239|   static cl::opt<bool>
#  240|->     EnableCHR("enable-chr", cl::init(true), cl::Hidden,
#  241|                 cl::desc("Enable control height reduction optimization (CHR)"));
#  242|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:243: constructor_uses_global_object: The constructor of global object "FlattenedProfileUsed" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FlattenedProfileUsed" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  241|                 cl::desc("Enable control height reduction optimization (CHR)"));
#  242|   
#  243|-> static cl::opt<bool> FlattenedProfileUsed(
#  244|       "flattened-profile-used", cl::init(false), cl::Hidden,
#  245|       cl::desc("Indicate the sample profile being used is flattened, i.e., "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:248: constructor_uses_global_object: The constructor of global object "EnableOrderFileInstrumentation" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableOrderFileInstrumentation" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  246|                "no inline hierachy exists in the profile"));
#  247|   
#  248|-> static cl::opt<bool> EnableOrderFileInstrumentation(
#  249|       "enable-order-file-instrumentation", cl::init(false), cl::Hidden,
#  250|       cl::desc("Enable order file instrumentation (default = off)"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:253: constructor_uses_global_object: The constructor of global object "EnableMatrix" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMatrix" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  251|   
#  252|   static cl::opt<bool>
#  253|->     EnableMatrix("enable-matrix", cl::init(false), cl::Hidden,
#  254|                    cl::desc("Enable lowering of the matrix intrinsics"));
#  255|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:256: constructor_uses_global_object: The constructor of global object "EnableConstraintElimination" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableConstraintElimination" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  254|                    cl::desc("Enable lowering of the matrix intrinsics"));
#  255|   
#  256|-> static cl::opt<bool> EnableConstraintElimination(
#  257|       "enable-constraint-elimination", cl::init(true), cl::Hidden,
#  258|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:261: constructor_uses_global_object: The constructor of global object "AttributorRun" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AttributorRun" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  259|           "Enable pass to eliminate conditions based on linear constraints"));
#  260|   
#  261|-> static cl::opt<AttributorRunOption> AttributorRun(
#  262|       "attributor-enable", cl::Hidden, cl::init(AttributorRunOption::NONE),
#  263|       cl::desc("Enable the attributor inter-procedural deduction pass"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/PassBuilderPipelines.cpp:273: constructor_uses_global_object: The constructor of global object "EnableMemProfContextDisambiguation" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMemProfContextDisambiguation" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  271|                             "disable attributor runs")));
#  272|   
#  273|-> cl::opt<bool> EnableMemProfContextDisambiguation(
#  274|       "enable-memprof-context-disambiguation", cl::init(false), cl::Hidden,
#  275|       cl::ZeroOrMore, cl::desc("Enable MemProf context disambiguation"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/StandardInstrumentations.cpp:47: constructor_uses_global_object: The constructor of global object "VerifyAnalysisInvalidation" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyAnalysisInvalidation" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   45|   using namespace llvm;
#   46|   
#   47|-> static cl::opt<bool> VerifyAnalysisInvalidation("verify-analysis-invalidation",
#   48|                                                   cl::Hidden,
#   49|   #ifdef EXPENSIVE_CHECKS

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/StandardInstrumentations.cpp:60: constructor_uses_global_object: The constructor of global object "PrintChangedBefore" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintChangedBefore" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   58|   // of this option.  Note that this option has no effect without -print-changed.
#   59|   static cl::opt<bool>
#   60|->     PrintChangedBefore("print-before-changed",
#   61|                          cl::desc("Print before passes that change them"),
#   62|                          cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/StandardInstrumentations.cpp:67: constructor_uses_global_object: The constructor of global object "DotBinary[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DotBinary[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   65|   // print-changed=[dot-cfg | dot-cfg-quiet]
#   66|   static cl::opt<std::string>
#   67|->     DotBinary("print-changed-dot-path", cl::Hidden, cl::init("dot"),
#   68|                 cl::desc("system dot used by change reporters"));
#   69|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/StandardInstrumentations.cpp:74: constructor_uses_global_object: The constructor of global object "BeforeColour[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BeforeColour[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   72|   // https://graphviz.org/pdf/dotguide.pdf
#   73|   static cl::opt<std::string>
#   74|->     BeforeColour("dot-cfg-before-color",
#   75|                    cl::desc("Color for dot-cfg before elements"), cl::Hidden,
#   76|                    cl::init("red"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/StandardInstrumentations.cpp:81: constructor_uses_global_object: The constructor of global object "AfterColour[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AfterColour[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   79|   // https://graphviz.org/pdf/dotguide.pdf
#   80|   static cl::opt<std::string>
#   81|->     AfterColour("dot-cfg-after-color",
#   82|                   cl::desc("Color for dot-cfg after elements"), cl::Hidden,
#   83|                   cl::init("forestgreen"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/StandardInstrumentations.cpp:88: constructor_uses_global_object: The constructor of global object "CommonColour[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CommonColour[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   86|   // https://graphviz.org/pdf/dotguide.pdf
#   87|   static cl::opt<std::string>
#   88|->     CommonColour("dot-cfg-common-color",
#   89|                    cl::desc("Color for dot-cfg common elements"), cl::Hidden,
#   90|                    cl::init("black"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/StandardInstrumentations.cpp:94: constructor_uses_global_object: The constructor of global object "DotCfgDir[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DotCfgDir[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   92|   // An option that determines where the generated website file (named
#   93|   // passes.html) and the associated pdf files (named diff_*.pdf) are saved.
#   94|-> static cl::opt<std::string> DotCfgDir(
#   95|       "dot-cfg-dir",
#   96|       cl::desc("Generate dot files into specified directory for changed IRs"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/StandardInstrumentations.cpp:100: constructor_uses_global_object: The constructor of global object "PrintOnCrashPath[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintOnCrashPath[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   98|   
#   99|   // Options to print the IR that was being processed when a pass crashes.
#  100|-> static cl::opt<std::string> PrintOnCrashPath(
#  101|       "print-on-crash-path",
#  102|       cl::desc("Print the last form of the IR before crash to a file"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/StandardInstrumentations.cpp:105: constructor_uses_global_object: The constructor of global object "PrintOnCrash" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintOnCrash" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  103|       cl::Hidden);
#  104|   
#  105|-> static cl::opt<bool> PrintOnCrash(
#  106|       "print-on-crash",
#  107|       cl::desc("Print the last form of the IR before crash (use -print-on-crash-path to dump to a file)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/StandardInstrumentations.cpp:110: constructor_uses_global_object: The constructor of global object "OptBisectPrintIRPath[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OptBisectPrintIRPath[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  108|       cl::Hidden);
#  109|   
#  110|-> static cl::opt<std::string> OptBisectPrintIRPath(
#  111|       "opt-bisect-print-ir-path",
#  112|       cl::desc("Print IR to path when opt-bisect-limit is reached"), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/StandardInstrumentations.cpp:114: constructor_uses_global_object: The constructor of global object "PrintPassNumbers" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintPassNumbers" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  112|       cl::desc("Print IR to path when opt-bisect-limit is reached"), cl::Hidden);
#  113|   
#  114|-> static cl::opt<bool> PrintPassNumbers(
#  115|       "print-pass-numbers", cl::init(false), cl::Hidden,
#  116|       cl::desc("Print pass names and their ordinals"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/StandardInstrumentations.cpp:119: constructor_uses_global_object: The constructor of global object "PrintAtPassNumber" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintAtPassNumber" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  117|   
#  118|   static cl::opt<unsigned>
#  119|->     PrintAtPassNumber("print-at-pass-number", cl::init(0), cl::Hidden,
#  120|                   cl::desc("Print IR at pass with this number as "
#  121|                            "reported by print-passes-names"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Passes/StandardInstrumentations.cpp:133: constructor_uses_global_object: The constructor of global object "<unnamed>::TestChanged[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::TestChanged[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  131|   // The usual modifier options work as expected.
#  132|   static cl::opt<std::string>
#  133|->     TestChanged("exec-on-ir-change", cl::Hidden, cl::init(""),
#  134|                   cl::desc("exe called with module IR after each pass that "
#  135|                            "changes it"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/ProfileData/InstrProf.cpp:61: constructor_uses_global_object: The constructor of global object "StaticFuncFullModulePrefix" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StaticFuncFullModulePrefix" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   59|   using namespace llvm;
#   60|   
#   61|-> static cl::opt<bool> StaticFuncFullModulePrefix(
#   62|       "static-func-full-module-prefix", cl::init(true), cl::Hidden,
#   63|       cl::desc("Use full module build paths in the profile counter names for "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/ProfileData/InstrProf.cpp:74: constructor_uses_global_object: The constructor of global object "StaticFuncStripDirNamePrefix" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StaticFuncStripDirNamePrefix" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   72|   // the source directory name not being stripped. A non-zero option value here
#   73|   // can potentially prevent some inter-module indirect-call-promotions.
#   74|-> static cl::opt<unsigned> StaticFuncStripDirNamePrefix(
#   75|       "static-func-strip-dirname-prefix", cl::init(0), cl::Hidden,
#   76|       cl::desc("Strip specified level of directory name from source path in "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/ProfileData/InstrProf.cpp:213: constructor_uses_global_object: The constructor of global object "llvm::DoInstrProfNameCompression" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::DoInstrProfNameCompression" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  211|   namespace llvm {
#  212|   
#  213|-> cl::opt<bool> DoInstrProfNameCompression(
#  214|       "enable-name-compression",
#  215|       cl::desc("Enable name/filename string compression"), cl::init(true));

Error: WRAPPER_ESCAPE (CWE-825):
llvm-17.0.6.src/lib/ProfileData/InstrProfCorrelator.cpp:74: extract: Calling "get" which extracts wrapped state from temporary of type "std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >".
llvm-17.0.6.src/lib/ProfileData/InstrProfCorrelator.cpp:74: assign: Assigning: "<temporary>" = "llvm::InstrProfCorrelator::get(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >(std::move(*BufferOrErr)))".
llvm-17.0.6.src/lib/ProfileData/InstrProfCorrelator.cpp:74: escape: The internal representation of temporary of type "std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >" escapes, but is destroyed when it exits scope.
#   72|       return std::move(Err);
#   73|   
#   74|->   return get(std::move(*BufferOrErr));
#   75|   }
#   76|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/ProfileData/ProfileSummaryBuilder.cpp:22: constructor_uses_global_object: The constructor of global object "llvm::UseContextLessSummary" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::UseContextLessSummary" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   20|   
#   21|   namespace llvm {
#   22|-> cl::opt<bool> UseContextLessSummary(
#   23|       "profile-summary-contextless", cl::Hidden,
#   24|       cl::desc("Merge context profiles before calculating thresholds."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/ProfileData/ProfileSummaryBuilder.cpp:33: constructor_uses_global_object: The constructor of global object "llvm::ProfileSummaryCutoffHot" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ProfileSummaryCutoffHot" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   31|   // threshold for determining cold count (everything <= this threshold is
#   32|   // considered cold).
#   33|-> cl::opt<int> ProfileSummaryCutoffHot(
#   34|       "profile-summary-cutoff-hot", cl::Hidden, cl::init(990000),
#   35|       cl::desc("A count is hot if it exceeds the minimum count to"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/ProfileData/ProfileSummaryBuilder.cpp:38: constructor_uses_global_object: The constructor of global object "llvm::ProfileSummaryCutoffCold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ProfileSummaryCutoffCold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   36|                " reach this percentile of total counts."));
#   37|   
#   38|-> cl::opt<int> ProfileSummaryCutoffCold(
#   39|       "profile-summary-cutoff-cold", cl::Hidden, cl::init(999999),
#   40|       cl::desc("A count is cold if it is below the minimum count"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/ProfileData/ProfileSummaryBuilder.cpp:43: constructor_uses_global_object: The constructor of global object "llvm::ProfileSummaryHugeWorkingSetSizeThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ProfileSummaryHugeWorkingSetSizeThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   41|                " to reach this percentile of total counts."));
#   42|   
#   43|-> cl::opt<unsigned> ProfileSummaryHugeWorkingSetSizeThreshold(
#   44|       "profile-summary-huge-working-set-size-threshold", cl::Hidden,
#   45|       cl::init(15000),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/ProfileData/ProfileSummaryBuilder.cpp:50: constructor_uses_global_object: The constructor of global object "llvm::ProfileSummaryLargeWorkingSetSizeThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ProfileSummaryLargeWorkingSetSizeThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   48|                " percentile exceeds this count."));
#   49|   
#   50|-> cl::opt<unsigned> ProfileSummaryLargeWorkingSetSizeThreshold(
#   51|       "profile-summary-large-working-set-size-threshold", cl::Hidden,
#   52|       cl::init(12500),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/ProfileData/ProfileSummaryBuilder.cpp:59: constructor_uses_global_object: The constructor of global object "llvm::ProfileSummaryHotCount" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ProfileSummaryHotCount" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   57|   // The next two options override the counts derived from summary computation and
#   58|   // are useful for debugging purposes.
#   59|-> cl::opt<uint64_t> ProfileSummaryHotCount(
#   60|       "profile-summary-hot-count", cl::ReallyHidden,
#   61|       cl::desc("A fixed hot count that overrides the count derived from"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/ProfileData/ProfileSummaryBuilder.cpp:64: constructor_uses_global_object: The constructor of global object "llvm::ProfileSummaryColdCount" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ProfileSummaryColdCount" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   62|                " profile-summary-cutoff-hot"));
#   63|   
#   64|-> cl::opt<uint64_t> ProfileSummaryColdCount(
#   65|       "profile-summary-cold-count", cl::ReallyHidden,
#   66|       cl::desc("A fixed cold count that overrides the count derived from"

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/ProfileData/RawMemProfReader.cpp:90: var_decl: Declaring variable "Items".
llvm-17.0.6.src/lib/ProfileData/RawMemProfReader.cpp:95: uninit_use: Using uninitialized value "Items". Field "Items.InlineElts" is uninitialized.
#   93|           Ptr + I * sizeof(SegmentEntry)));
#   94|     }
#   95|->   return Items;
#   96|   }
#   97|   

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/ProfileData/RawMemProfReader.cpp:104: var_decl: Declaring variable "Items".
llvm-17.0.6.src/lib/ProfileData/RawMemProfReader.cpp:112: uninit_use: Using uninitialized value "Items". Field "Items.InlineElts" is uninitialized.
#  110|       Ptr += sizeof(MemInfoBlock);
#  111|     }
#  112|->   return Items;
#  113|   }
#  114|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/ProfileData/SampleProf.cpp:30: constructor_uses_global_object: The constructor of global object "ProfileSymbolListCutOff" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ProfileSymbolListCutOff" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   28|   using namespace sampleprof;
#   29|   
#   30|-> static cl::opt<uint64_t> ProfileSymbolListCutOff(
#   31|       "profile-symbol-list-cutoff", cl::Hidden, cl::init(-1),
#   32|       cl::desc("Cutoff value about how many symbols in profile symbol list "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/ProfileData/SampleProf.cpp:35: constructor_uses_global_object: The constructor of global object "GenerateMergedBaseProfiles" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "GenerateMergedBaseProfiles" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|                "will be used. This is very useful for performance debugging"));
#   34|   
#   35|-> static cl::opt<bool> GenerateMergedBaseProfiles(
#   36|       "generate-merged-base-profiles",
#   37|       cl::desc("When generating nested context-sensitive profiles, always "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/ProfileData/SampleProfReader.cpp:56: constructor_uses_global_object: The constructor of global object "ProfileIsFSDisciminator" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ProfileIsFSDisciminator" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   54|   // It only applies to text, and binary format profiles.
#   55|   // For ext-binary format profiles, the flag is set in the summary.
#   56|-> static cl::opt<bool> ProfileIsFSDisciminator(
#   57|       "profile-isfs", cl::Hidden, cl::init(false),
#   58|       cl::desc("Profile uses flow sensitive discriminators"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Remarks/RemarkStreamer.cpp:20: constructor_uses_global_object: The constructor of global object "EnableRemarksSection" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableRemarksSection" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   18|   using namespace llvm::remarks;
#   19|   
#   20|-> static cl::opt<cl::boolOrDefault> EnableRemarksSection(
#   21|       "remarks-section",
#   22|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/TableGen/Main.cpp:41: constructor_uses_global_object: The constructor of global object "OutputFilename[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OutputFilename[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   39|   
#   40|   static cl::opt<std::string>
#   41|-> OutputFilename("o", cl::desc("Output filename"), cl::value_desc("filename"),
#   42|                  cl::init("-"));
#   43|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/TableGen/Main.cpp:45: constructor_uses_global_object: The constructor of global object "DependFilename[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DependFilename[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   43|   
#   44|   static cl::opt<std::string>
#   45|-> DependFilename("d",
#   46|                  cl::desc("Dependency filename"),
#   47|                  cl::value_desc("filename"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/TableGen/Main.cpp:51: constructor_uses_global_object: The constructor of global object "InputFilename[abi:cxx11]" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "InputFilename[abi:cxx11]" might be created before "GlobalParser" is available.
#   49|   
#   50|   static cl::opt<std::string>
#   51|-> InputFilename(cl::Positional, cl::desc("<input file>"), cl::init("-"));
#   52|   
#   53|   static cl::list<std::string>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/TableGen/Main.cpp:54: constructor_uses_global_object: The constructor of global object "IncludeDirs[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "IncludeDirs[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|   
#   53|   static cl::list<std::string>
#   54|-> IncludeDirs("I", cl::desc("Directory of include files"),
#   55|               cl::value_desc("directory"), cl::Prefix);
#   56|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/TableGen/Main.cpp:58: constructor_uses_global_object: The constructor of global object "MacroNames[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MacroNames[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   56|   
#   57|   static cl::list<std::string>
#   58|-> MacroNames("D", cl::desc("Name of the macro to be defined"),
#   59|               cl::value_desc("macro name"), cl::Prefix);
#   60|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/TableGen/Main.cpp:62: constructor_uses_global_object: The constructor of global object "WriteIfChanged" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "WriteIfChanged" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   60|   
#   61|   static cl::opt<bool>
#   62|-> WriteIfChanged("write-if-changed", cl::desc("Only write output if it changed"));
#   63|   
#   64|   static cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/TableGen/Main.cpp:65: constructor_uses_global_object: The constructor of global object "TimePhases" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TimePhases" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|   
#   64|   static cl::opt<bool>
#   65|-> TimePhases("time-phases", cl::desc("Time phases of parser and backend"));
#   66|   
#   67|   static cl::opt<bool> NoWarnOnUnusedTemplateArgs(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/TableGen/Main.cpp:67: constructor_uses_global_object: The constructor of global object "NoWarnOnUnusedTemplateArgs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "NoWarnOnUnusedTemplateArgs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   65|   TimePhases("time-phases", cl::desc("Time phases of parser and backend"));
#   66|   
#   67|-> static cl::opt<bool> NoWarnOnUnusedTemplateArgs(
#   68|       "no-warn-on-unused-template-args",
#   69|       cl::desc("Disable unused template argument warnings."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/TableGen/TableGenBackendSkeleton.cpp:64: constructor_uses_global_object: The constructor of global object "Y" itself makes use of global object "llvm::TableGen::Emitter::Action" defined in another compilation unit.  The order of construction is unspecified, so "Y" might be created before "llvm::TableGen::Emitter::Action" is available.
#   62|   }
#   63|   
#   64|-> static TableGen::Emitter::Opt Y("gen-skeleton-entry", EmitSkeleton,
#   65|                                   "Generate example skeleton entry");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/TableGen/TableGenBackendSkeleton.cpp:64: constructor_uses_global_object: The constructor of global object "Y" itself makes use of global object "llvm::cl::AllSubCommands" defined in another compilation unit.  The order of construction is unspecified, so "Y" might be created before "llvm::cl::AllSubCommands" is available.
#   62|   }
#   63|   
#   64|-> static TableGen::Emitter::Opt Y("gen-skeleton-entry", EmitSkeleton,
#   65|                                   "Generate example skeleton entry");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:52: constructor_uses_global_object: The constructor of global object "TransformAll" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TransformAll" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   50|   // destination register is the correct color. Used for testing.
#   51|   static cl::opt<bool>
#   52|-> TransformAll("aarch64-a57-fp-load-balancing-force-all",
#   53|                cl::desc("Always modify dest registers regardless of color"),
#   54|                cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:59: constructor_uses_global_object: The constructor of global object "OverrideBalance" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OverrideBalance" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   57|   // color always. Used for testing.
#   58|   static cl::opt<unsigned>
#   59|-> OverrideBalance("aarch64-a57-fp-load-balancing-override",
#   60|                 cl::desc("Ignore balance information, always return "
#   61|                          "(1: Even, 2: Odd)."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp:54: constructor_uses_global_object: The constructor of global object "TransformAll" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TransformAll" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|   // them. For stress-testing the transformation function.
#   53|   static cl::opt<bool>
#   54|-> TransformAll("aarch64-simd-scalar-force-all",
#   55|                cl::desc("Force use of AdvSIMD scalar instructions everywhere"),
#   56|                cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64ConditionalCompares.cpp:46: constructor_uses_global_object: The constructor of global object "BlockInstrLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BlockInstrLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   44|   // Absolute maximum number of instructions allowed per speculated block.
#   45|   // This bypasses all other heuristics, so it should be set fairly high.
#   46|-> static cl::opt<unsigned> BlockInstrLimit(
#   47|       "aarch64-ccmp-limit", cl::init(30), cl::Hidden,
#   48|       cl::desc("Maximum number of instructions per speculated block."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64ConditionalCompares.cpp:51: constructor_uses_global_object: The constructor of global object "Stress" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Stress" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   49|   
#   50|   // Stress testing mode - disable heuristics.
#   51|-> static cl::opt<bool> Stress("aarch64-stress-ccmp", cl::Hidden,
#   52|                               cl::desc("Turn all knobs to 11"));
#   53|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64FrameLowering.cpp:238: constructor_uses_global_object: The constructor of global object "EnableRedZone" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableRedZone" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  236|   #define DEBUG_TYPE "frame-info"
#  237|   
#  238|-> static cl::opt<bool> EnableRedZone("aarch64-redzone",
#  239|                                      cl::desc("enable use of redzone on AArch64"),
#  240|                                      cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64FrameLowering.cpp:243: constructor_uses_global_object: The constructor of global object "ReverseCSRRestoreSeq" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ReverseCSRRestoreSeq" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  241|   
#  242|   static cl::opt<bool>
#  243|->     ReverseCSRRestoreSeq("reverse-csr-restore-seq",
#  244|                            cl::desc("reverse the CSR restore sequence"),
#  245|                            cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64FrameLowering.cpp:247: constructor_uses_global_object: The constructor of global object "StackTaggingMergeSetTag" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StackTaggingMergeSetTag" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  245|                            cl::init(false), cl::Hidden);
#  246|   
#  247|-> static cl::opt<bool> StackTaggingMergeSetTag(
#  248|       "stack-tagging-merge-settag",
#  249|       cl::desc("merge settag instruction in function epilog"), cl::init(true),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64FrameLowering.cpp:252: constructor_uses_global_object: The constructor of global object "OrderFrameObjects" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OrderFrameObjects" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  250|       cl::Hidden);
#  251|   
#  252|-> static cl::opt<bool> OrderFrameObjects("aarch64-order-frame-objects",
#  253|                                          cl::desc("sort stack allocations"),
#  254|                                          cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64FrameLowering.cpp:256: constructor_uses_global_object: The constructor of global object "EnableHomogeneousPrologEpilog" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableHomogeneousPrologEpilog" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  254|                                          cl::init(true), cl::Hidden);
#  255|   
#  256|-> cl::opt<bool> EnableHomogeneousPrologEpilog(
#  257|       "homogeneous-prolog-epilog", cl::Hidden,
#  258|       cl::desc("Emit homogeneous prologue and epilogue for the size "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64ISelLowering.cpp:114: constructor_uses_global_object: The constructor of global object "EnableAArch64ELFLocalDynamicTLSGeneration" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableAArch64ELFLocalDynamicTLSGeneration" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  112|   // well in the GNU bfd and gold linkers at the moment. Therefore, by
#  113|   // default, for now, fall back to GeneralDynamic code generation.
#  114|-> cl::opt<bool> EnableAArch64ELFLocalDynamicTLSGeneration(
#  115|       "aarch64-elf-ldtls-generation", cl::Hidden,
#  116|       cl::desc("Allow AArch64 Local Dynamic TLS code generation"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64ISelLowering.cpp:120: constructor_uses_global_object: The constructor of global object "EnableOptimizeLogicalImm" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableOptimizeLogicalImm" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  118|   
#  119|   static cl::opt<bool>
#  120|-> EnableOptimizeLogicalImm("aarch64-enable-logical-imm", cl::Hidden,
#  121|                            cl::desc("Enable AArch64 logical imm instruction "
#  122|                                     "optimization"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64ISelLowering.cpp:130: constructor_uses_global_object: The constructor of global object "EnableCombineMGatherIntrinsics" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableCombineMGatherIntrinsics" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  128|   // than the GLD1 nodes added for the SVE gather load intrinsics.
#  129|   static cl::opt<bool>
#  130|-> EnableCombineMGatherIntrinsics("aarch64-enable-mgather-combine", cl::Hidden,
#  131|                                   cl::desc("Combine extends of AArch64 masked "
#  132|                                            "gather intrinsics"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64ISelLowering.cpp:138: constructor_uses_global_object: The constructor of global object "MaxXors" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxXors" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  136|   // bottleneck after this transform on high end CPU. So this max leaf node
#  137|   // limitation is guard cmp+ccmp will be profitable.
#  138|-> static cl::opt<unsigned> MaxXors("aarch64-max-xors", cl::init(16), cl::Hidden,
#  139|                                    cl::desc("Maximum of xors"));
#  140|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64InstrInfo.cpp:60: constructor_uses_global_object: The constructor of global object "TBZDisplacementBits" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TBZDisplacementBits" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   58|   #include "AArch64GenInstrInfo.inc"
#   59|   
#   60|-> static cl::opt<unsigned> TBZDisplacementBits(
#   61|       "aarch64-tbz-offset-bits", cl::Hidden, cl::init(14),
#   62|       cl::desc("Restrict range of TB[N]Z instructions (DEBUG)"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64InstrInfo.cpp:64: constructor_uses_global_object: The constructor of global object "CBZDisplacementBits" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CBZDisplacementBits" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   62|       cl::desc("Restrict range of TB[N]Z instructions (DEBUG)"));
#   63|   
#   64|-> static cl::opt<unsigned> CBZDisplacementBits(
#   65|       "aarch64-cbz-offset-bits", cl::Hidden, cl::init(19),
#   66|       cl::desc("Restrict range of CB[N]Z instructions (DEBUG)"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64InstrInfo.cpp:69: constructor_uses_global_object: The constructor of global object "BCCDisplacementBits" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BCCDisplacementBits" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   67|   
#   68|   static cl::opt<unsigned>
#   69|->     BCCDisplacementBits("aarch64-bcc-offset-bits", cl::Hidden, cl::init(19),
#   70|                           cl::desc("Restrict range of Bcc instructions (DEBUG)"));
#   71|   

Error: WRAPPER_ESCAPE (CWE-825):
llvm-17.0.6.src/lib/Target/AArch64/AArch64InstrInfo.cpp:7276: extract: Calling "operator []" which extracts wrapped state from parameter "RepeatedSequenceLocs".
llvm-17.0.6.src/lib/Target/AArch64/AArch64InstrInfo.cpp:7276: assign: Assigning: "FirstCand" = "RepeatedSequenceLocs[0UL]".
llvm-17.0.6.src/lib/Target/AArch64/AArch64InstrInfo.cpp:7565: invalidate: Calling "operator =" invalidates the internal representation of parameter "RepeatedSequenceLocs".
llvm-17.0.6.src/lib/Target/AArch64/AArch64InstrInfo.cpp:7639: use_after_free: Using invalidated internal representation of parameter "RepeatedSequenceLocs".
# 7637|       // link register.
# 7638|       bool ModStackToSaveLR = false;
# 7639|->     if (std::any_of(FirstCand.front(), FirstCand.back(),
# 7640|                       [](const MachineInstr &MI) { return MI.isCall(); }))
# 7641|         ModStackToSaveLR = true;
llvm-17.0.6.src/lib/Target/AArch64/AArch64InstrInfo.cpp:7639: note: trimmed 1 message(s) with length over 512

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp:71: constructor_uses_global_object: The constructor of global object "LdStLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LdStLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   69|   
#   70|   // The LdStLimit limits how far we search for load/store pairs.
#   71|-> static cl::opt<unsigned> LdStLimit("aarch64-load-store-scan-limit",
#   72|                                      cl::init(20), cl::Hidden);
#   73|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp:76: constructor_uses_global_object: The constructor of global object "UpdateLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UpdateLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   74|   // The UpdateLimit limits how far we search for update instructions when we form
#   75|   // pre-/post-index instructions.
#   76|-> static cl::opt<unsigned> UpdateLimit("aarch64-update-scan-limit", cl::init(100),
#   77|                                        cl::Hidden);
#   78|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp:80: constructor_uses_global_object: The constructor of global object "EnableRenaming" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableRenaming" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   78|   
#   79|   // Enable register renaming to find additional store pairing opportunities.
#   80|-> static cl::opt<bool> EnableRenaming("aarch64-load-store-renaming",
#   81|                                       cl::init(true), cl::Hidden);
#   82|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64LowerHomogeneousPrologEpilog.cpp:37: constructor_uses_global_object: The constructor of global object "FrameHelperSizeThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FrameHelperSizeThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   35|     "AArch64 homogeneous prolog/epilog lowering pass"
#   36|   
#   37|-> cl::opt<int> FrameHelperSizeThreshold(
#   38|       "frame-helper-size-threshold", cl::init(2), cl::Hidden,
#   39|       cl::desc("The minimum number of instructions that are outlined in a frame "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64PromoteConstant.cpp:56: constructor_uses_global_object: The constructor of global object "Stress" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Stress" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   54|   
#   55|   // Stress testing mode - disable heuristics.
#   56|-> static cl::opt<bool> Stress("aarch64-stress-promote-const", cl::Hidden,
#   57|                               cl::desc("Promote all vector constants"));
#   58|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64SpeculationHardening.cpp:119: constructor_uses_global_object: The constructor of global object "HardenLoads" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HardenLoads" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  117|   #define AARCH64_SPECULATION_HARDENING_NAME "AArch64 speculation hardening pass"
#  118|   
#  119|-> static cl::opt<bool> HardenLoads("aarch64-slh-loads", cl::Hidden,
#  120|                                    cl::desc("Sanitize loads from memory."),
#  121|                                    cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64StackTagging.cpp:66: constructor_uses_global_object: The constructor of global object "ClMergeInit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ClMergeInit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   64|   #define DEBUG_TYPE "aarch64-stack-tagging"
#   65|   
#   66|-> static cl::opt<bool> ClMergeInit(
#   67|       "stack-tagging-merge-init", cl::Hidden, cl::init(true),
#   68|       cl::desc("merge stack variable initializers with tagging when possible"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64StackTagging.cpp:71: constructor_uses_global_object: The constructor of global object "ClUseStackSafety" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ClUseStackSafety" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   69|   
#   70|   static cl::opt<bool>
#   71|->     ClUseStackSafety("stack-tagging-use-stack-safety", cl::Hidden,
#   72|                        cl::init(true),
#   73|                        cl::desc("Use Stack Safety analysis results"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64StackTagging.cpp:75: constructor_uses_global_object: The constructor of global object "ClScanLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ClScanLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   73|                        cl::desc("Use Stack Safety analysis results"));
#   74|   
#   75|-> static cl::opt<unsigned> ClScanLimit("stack-tagging-merge-init-scan-limit",
#   76|                                        cl::init(40), cl::Hidden);
#   77|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64StackTagging.cpp:79: constructor_uses_global_object: The constructor of global object "ClMergeInitSizeLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ClMergeInitSizeLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   77|   
#   78|   static cl::opt<unsigned>
#   79|->     ClMergeInitSizeLimit("stack-tagging-merge-init-size-limit", cl::init(272),
#   80|                            cl::Hidden);
#   81|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64StackTagging.cpp:82: constructor_uses_global_object: The constructor of global object "ClMaxLifetimes" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ClMaxLifetimes" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   80|                            cl::Hidden);
#   81|   
#   82|-> static cl::opt<size_t> ClMaxLifetimes(
#   83|       "stack-tagging-max-lifetimes-for-alloca", cl::Hidden, cl::init(3),
#   84|       cl::ReallyHidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64StackTaggingPreRA.cpp:38: constructor_uses_global_object: The constructor of global object "ClUncheckedLdSt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ClUncheckedLdSt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   36|   enum UncheckedLdStMode { UncheckedNever, UncheckedSafe, UncheckedAlways };
#   37|   
#   38|-> cl::opt<UncheckedLdStMode> ClUncheckedLdSt(
#   39|       "stack-tagging-unchecked-ld-st", cl::Hidden,
#   40|       cl::init(UncheckedSafe),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64StackTaggingPreRA.cpp:52: constructor_uses_global_object: The constructor of global object "ClFirstSlot" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ClFirstSlot" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   50|   
#   51|   static cl::opt<bool>
#   52|->     ClFirstSlot("stack-tagging-first-slot-opt", cl::Hidden, cl::init(true),
#   53|                   cl::desc("Apply first slot optimization for stack tagging "
#   54|                            "(eliminate ADDG Rt, Rn, 0, 0)."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64Subtarget.cpp:38: constructor_uses_global_object: The constructor of global object "EnableEarlyIfConvert" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableEarlyIfConvert" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   36|   
#   37|   static cl::opt<bool>
#   38|-> EnableEarlyIfConvert("aarch64-early-ifcvt", cl::desc("Enable the early if "
#   39|                        "converter pass"), cl::init(true), cl::Hidden);
#   40|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64Subtarget.cpp:43: constructor_uses_global_object: The constructor of global object "UseAddressTopByteIgnored" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseAddressTopByteIgnored" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   41|   // If OS supports TBI, use this flag to enable it.
#   42|   static cl::opt<bool>
#   43|-> UseAddressTopByteIgnored("aarch64-use-tbi", cl::desc("Assume that top byte of "
#   44|                            "an address is ignored"), cl::init(false), cl::Hidden);
#   45|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64Subtarget.cpp:47: constructor_uses_global_object: The constructor of global object "UseNonLazyBind" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseNonLazyBind" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   45|   
#   46|   static cl::opt<bool>
#   47|->     UseNonLazyBind("aarch64-enable-nonlazybind",
#   48|                      cl::desc("Call nonlazybind functions via direct GOT load"),
#   49|                      cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64Subtarget.cpp:51: constructor_uses_global_object: The constructor of global object "UseAA" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseAA" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   49|                      cl::init(false), cl::Hidden);
#   50|   
#   51|-> static cl::opt<bool> UseAA("aarch64-use-aa", cl::init(true),
#   52|                              cl::desc("Enable the use of AA during codegen."));
#   53|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64Subtarget.cpp:54: constructor_uses_global_object: The constructor of global object "OverrideVectorInsertExtractBaseCost" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OverrideVectorInsertExtractBaseCost" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|                              cl::desc("Enable the use of AA during codegen."));
#   53|   
#   54|-> static cl::opt<unsigned> OverrideVectorInsertExtractBaseCost(
#   55|       "aarch64-insert-extract-base-cost",
#   56|       cl::desc("Base cost of vector insert/extract element"), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64Subtarget.cpp:62: constructor_uses_global_object: The constructor of global object "ReservedRegsForRA[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ReservedRegsForRA[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   60|   // to function call.
#   61|   static cl::list<std::string>
#   62|-> ReservedRegsForRA("reserve-regs-for-regalloc", cl::desc("Reserve physical "
#   63|                     "registers, so they can't be used by register allocator. "
#   64|                     "Should only be used for testing register allocator."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64Subtarget.cpp:67: constructor_uses_global_object: The constructor of global object "ForceStreamingCompatibleSVE" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForceStreamingCompatibleSVE" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   65|                     cl::CommaSeparated, cl::Hidden);
#   66|   
#   67|-> static cl::opt<bool> ForceStreamingCompatibleSVE(
#   68|       "force-streaming-compatible-sve",
#   69|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:58: constructor_uses_global_object: The constructor of global object "EnableCCMP" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableCCMP" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   56|   using namespace llvm;
#   57|   
#   58|-> static cl::opt<bool> EnableCCMP("aarch64-enable-ccmp",
#   59|                                   cl::desc("Enable the CCMP formation pass"),
#   60|                                   cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:63: constructor_uses_global_object: The constructor of global object "EnableCondBrTuning" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableCondBrTuning" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   61|   
#   62|   static cl::opt<bool>
#   63|->     EnableCondBrTuning("aarch64-enable-cond-br-tune",
#   64|                          cl::desc("Enable the conditional branch tuning pass"),
#   65|                          cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:67: constructor_uses_global_object: The constructor of global object "EnableAArch64CopyPropagation" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableAArch64CopyPropagation" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   65|                          cl::init(true), cl::Hidden);
#   66|   
#   67|-> static cl::opt<bool> EnableAArch64CopyPropagation(
#   68|       "aarch64-enable-copy-propagation",
#   69|       cl::desc("Enable the copy propagation with AArch64 copy instr"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:72: constructor_uses_global_object: The constructor of global object "EnableMCR" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMCR" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   70|       cl::init(true), cl::Hidden);
#   71|   
#   72|-> static cl::opt<bool> EnableMCR("aarch64-enable-mcr",
#   73|                                  cl::desc("Enable the machine combiner pass"),
#   74|                                  cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:76: constructor_uses_global_object: The constructor of global object "EnableStPairSuppress" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableStPairSuppress" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   74|                                  cl::init(true), cl::Hidden);
#   75|   
#   76|-> static cl::opt<bool> EnableStPairSuppress("aarch64-enable-stp-suppress",
#   77|                                             cl::desc("Suppress STP for AArch64"),
#   78|                                             cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:80: constructor_uses_global_object: The constructor of global object "EnableAdvSIMDScalar" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableAdvSIMDScalar" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   78|                                             cl::init(true), cl::Hidden);
#   79|   
#   80|-> static cl::opt<bool> EnableAdvSIMDScalar(
#   81|       "aarch64-enable-simd-scalar",
#   82|       cl::desc("Enable use of AdvSIMD scalar integer instructions"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:86: constructor_uses_global_object: The constructor of global object "EnablePromoteConstant" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnablePromoteConstant" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   84|   
#   85|   static cl::opt<bool>
#   86|->     EnablePromoteConstant("aarch64-enable-promote-const",
#   87|                             cl::desc("Enable the promote constant pass"),
#   88|                             cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:90: constructor_uses_global_object: The constructor of global object "EnableCollectLOH" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableCollectLOH" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   88|                             cl::init(true), cl::Hidden);
#   89|   
#   90|-> static cl::opt<bool> EnableCollectLOH(
#   91|       "aarch64-enable-collect-loh",
#   92|       cl::desc("Enable the pass that emits the linker optimization hints (LOH)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:96: constructor_uses_global_object: The constructor of global object "EnableDeadRegisterElimination" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableDeadRegisterElimination" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   94|   
#   95|   static cl::opt<bool>
#   96|->     EnableDeadRegisterElimination("aarch64-enable-dead-defs", cl::Hidden,
#   97|                                     cl::desc("Enable the pass that removes dead"
#   98|                                              " definitons and replaces stores to"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:103: constructor_uses_global_object: The constructor of global object "EnableRedundantCopyElimination" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableRedundantCopyElimination" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  101|                                     cl::init(true));
#  102|   
#  103|-> static cl::opt<bool> EnableRedundantCopyElimination(
#  104|       "aarch64-enable-copyelim",
#  105|       cl::desc("Enable the redundant copy elimination pass"), cl::init(true),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:108: constructor_uses_global_object: The constructor of global object "EnableLoadStoreOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableLoadStoreOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  106|       cl::Hidden);
#  107|   
#  108|-> static cl::opt<bool> EnableLoadStoreOpt("aarch64-enable-ldst-opt",
#  109|                                           cl::desc("Enable the load/store pair"
#  110|                                                    " optimization pass"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:113: constructor_uses_global_object: The constructor of global object "EnableAtomicTidy" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableAtomicTidy" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  111|                                           cl::init(true), cl::Hidden);
#  112|   
#  113|-> static cl::opt<bool> EnableAtomicTidy(
#  114|       "aarch64-enable-atomic-cfg-tidy", cl::Hidden,
#  115|       cl::desc("Run SimplifyCFG after expanding atomic operations"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:120: constructor_uses_global_object: The constructor of global object "EnableEarlyIfConversion" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableEarlyIfConversion" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  118|   
#  119|   static cl::opt<bool>
#  120|-> EnableEarlyIfConversion("aarch64-enable-early-ifcvt", cl::Hidden,
#  121|                           cl::desc("Run early if-conversion"),
#  122|                           cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:125: constructor_uses_global_object: The constructor of global object "EnableCondOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableCondOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  123|   
#  124|   static cl::opt<bool>
#  125|->     EnableCondOpt("aarch64-enable-condopt",
#  126|                     cl::desc("Enable the condition optimizer pass"),
#  127|                     cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:130: constructor_uses_global_object: The constructor of global object "EnableGEPOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGEPOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  128|   
#  129|   static cl::opt<bool>
#  130|->     EnableGEPOpt("aarch64-enable-gep-opt", cl::Hidden,
#  131|                    cl::desc("Enable optimizations on complex GEPs"),
#  132|                    cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:135: constructor_uses_global_object: The constructor of global object "EnableSelectOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSelectOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  133|   
#  134|   static cl::opt<bool>
#  135|->     EnableSelectOpt("aarch64-select-opt", cl::Hidden,
#  136|                       cl::desc("Enable select to branch optimizations"),
#  137|                       cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:140: constructor_uses_global_object: The constructor of global object "BranchRelaxation" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BranchRelaxation" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  138|   
#  139|   static cl::opt<bool>
#  140|->     BranchRelaxation("aarch64-enable-branch-relax", cl::Hidden, cl::init(true),
#  141|                        cl::desc("Relax out of range conditional branches"));
#  142|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:143: constructor_uses_global_object: The constructor of global object "EnableCompressJumpTables" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableCompressJumpTables" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  141|                        cl::desc("Relax out of range conditional branches"));
#  142|   
#  143|-> static cl::opt<bool> EnableCompressJumpTables(
#  144|       "aarch64-enable-compress-jump-tables", cl::Hidden, cl::init(true),
#  145|       cl::desc("Use smallest entry possible for jump tables"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:149: constructor_uses_global_object: The constructor of global object "EnableGlobalMerge" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGlobalMerge" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  147|   // FIXME: Unify control over GlobalMerge.
#  148|   static cl::opt<cl::boolOrDefault>
#  149|->     EnableGlobalMerge("aarch64-enable-global-merge", cl::Hidden,
#  150|                         cl::desc("Enable the global merge pass"));
#  151|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:153: constructor_uses_global_object: The constructor of global object "EnableLoopDataPrefetch" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableLoopDataPrefetch" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  151|   
#  152|   static cl::opt<bool>
#  153|->     EnableLoopDataPrefetch("aarch64-enable-loop-data-prefetch", cl::Hidden,
#  154|                              cl::desc("Enable the loop data prefetch pass"),
#  155|                              cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:157: constructor_uses_global_object: The constructor of global object "EnableGlobalISelAtO" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGlobalISelAtO" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  155|                              cl::init(true));
#  156|   
#  157|-> static cl::opt<int> EnableGlobalISelAtO(
#  158|       "aarch64-enable-global-isel-at-O", cl::Hidden,
#  159|       cl::desc("Enable GlobalISel at or below an opt level (-1 to disable)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:163: constructor_uses_global_object: The constructor of global object "EnableSVEIntrinsicOpts" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSVEIntrinsicOpts" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  161|   
#  162|   static cl::opt<bool>
#  163|->     EnableSVEIntrinsicOpts("aarch64-enable-sve-intrinsic-opts", cl::Hidden,
#  164|                              cl::desc("Enable SVE intrinsic opts"),
#  165|                              cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:167: constructor_uses_global_object: The constructor of global object "EnableFalkorHWPFFix" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableFalkorHWPFFix" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  165|                              cl::init(true));
#  166|   
#  167|-> static cl::opt<bool> EnableFalkorHWPFFix("aarch64-enable-falkor-hwpf-fix",
#  168|                                            cl::init(true), cl::Hidden);
#  169|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:171: constructor_uses_global_object: The constructor of global object "EnableBranchTargets" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableBranchTargets" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  169|   
#  170|   static cl::opt<bool>
#  171|->     EnableBranchTargets("aarch64-enable-branch-targets", cl::Hidden,
#  172|                           cl::desc("Enable the AArch64 branch target pass"),
#  173|                           cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:175: constructor_uses_global_object: The constructor of global object "SVEVectorBitsMaxOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SVEVectorBitsMaxOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  173|                           cl::init(true));
#  174|   
#  175|-> static cl::opt<unsigned> SVEVectorBitsMaxOpt(
#  176|       "aarch64-sve-vector-bits-max",
#  177|       cl::desc("Assume SVE vector registers are at most this big, "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:181: constructor_uses_global_object: The constructor of global object "SVEVectorBitsMinOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SVEVectorBitsMinOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  179|       cl::init(0), cl::Hidden);
#  180|   
#  181|-> static cl::opt<unsigned> SVEVectorBitsMinOpt(
#  182|       "aarch64-sve-vector-bits-min",
#  183|       cl::desc("Assume SVE vector registers are at least this big, "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:189: constructor_uses_global_object: The constructor of global object "EnableGISelLoadStoreOptPreLegal" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGISelLoadStoreOptPreLegal" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  187|   extern cl::opt<bool> EnableHomogeneousPrologEpilog;
#  188|   
#  189|-> static cl::opt<bool> EnableGISelLoadStoreOptPreLegal(
#  190|       "aarch64-enable-gisel-ldst-prelegal",
#  191|       cl::desc("Enable GlobalISel's pre-legalizer load/store optimization pass"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetMachine.cpp:194: constructor_uses_global_object: The constructor of global object "EnableGISelLoadStoreOptPostLegal" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGISelLoadStoreOptPostLegal" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  192|       cl::init(true), cl::Hidden);
#  193|   
#  194|-> static cl::opt<bool> EnableGISelLoadStoreOptPostLegal(
#  195|       "aarch64-enable-gisel-ldst-postlegal",
#  196|       cl::desc("Enable GlobalISel's post-legalizer load/store optimization pass"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:33: constructor_uses_global_object: The constructor of global object "EnableFalkorHWPFUnrollFix" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableFalkorHWPFUnrollFix" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   31|   #define DEBUG_TYPE "aarch64tti"
#   32|   
#   33|-> static cl::opt<bool> EnableFalkorHWPFUnrollFix("enable-falkor-hwpf-unroll-fix",
#   34|                                                  cl::init(true), cl::Hidden);
#   35|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:36: constructor_uses_global_object: The constructor of global object "SVEGatherOverhead" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SVEGatherOverhead" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   34|                                                  cl::init(true), cl::Hidden);
#   35|   
#   36|-> static cl::opt<unsigned> SVEGatherOverhead("sve-gather-overhead", cl::init(10),
#   37|                                              cl::Hidden);
#   38|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:39: constructor_uses_global_object: The constructor of global object "SVEScatterOverhead" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SVEScatterOverhead" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   37|                                              cl::Hidden);
#   38|   
#   39|-> static cl::opt<unsigned> SVEScatterOverhead("sve-scatter-overhead",
#   40|                                               cl::init(10), cl::Hidden);
#   41|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:42: constructor_uses_global_object: The constructor of global object "SVETailFoldInsnThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SVETailFoldInsnThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   40|                                               cl::init(10), cl::Hidden);
#   41|   
#   42|-> static cl::opt<unsigned> SVETailFoldInsnThreshold("sve-tail-folding-insn-threshold",
#   43|                                                     cl::init(15), cl::Hidden);
#   44|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:46: constructor_uses_global_object: The constructor of global object "NeonNonConstStrideOverhead" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "NeonNonConstStrideOverhead" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   44|   
#   45|   static cl::opt<unsigned>
#   46|->     NeonNonConstStrideOverhead("neon-nonconst-stride-overhead", cl::init(10),
#   47|                                  cl::Hidden);
#   48|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:158: constructor_uses_global_object: The constructor of global object "SVETailFolding[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SVETailFolding[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  156|   TailFoldingOption TailFoldingOptionLoc;
#  157|   
#  158|-> cl::opt<TailFoldingOption, true, cl::parser<std::string>> SVETailFolding(
#  159|       "sve-tail-folding",
#  160|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:184: constructor_uses_global_object: The constructor of global object "EnableFixedwidthAutovecInStreamingMode" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableFixedwidthAutovecInStreamingMode" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  182|   // code-generator is changed to use SVE instead of NEON for all fixed-width
#  183|   // operations.
#  184|-> static cl::opt<bool> EnableFixedwidthAutovecInStreamingMode(
#  185|       "enable-fixedwidth-autovec-in-streaming-mode", cl::init(false), cl::Hidden);
#  186|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:190: constructor_uses_global_object: The constructor of global object "EnableScalableAutovecInStreamingMode" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableScalableAutovecInStreamingMode" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  188|   // and code-generator have been changed to avoid using scalable vector
#  189|   // instructions that are not legal in streaming SVE mode.
#  190|-> static cl::opt<bool> EnableScalableAutovecInStreamingMode(
#  191|       "enable-scalable-autovec-in-streaming-mode", cl::init(false), cl::Hidden);
#  192|   

Error: OVERRUN (CWE-119):
llvm-17.0.6.src/lib/Target/AArch64/MCTargetDesc/AArch64AsmBackend.cpp:75: cond_between: Checking "Kind >= FirstLiteralRelocationKind" implies that "Kind" is between 0 and 255 (inclusive) on the false branch.
llvm-17.0.6.src/lib/Target/AArch64/MCTargetDesc/AArch64AsmBackend.cpp:78: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 128 and 255 (inclusive) on the false branch.
llvm-17.0.6.src/lib/Target/AArch64/MCTargetDesc/AArch64AsmBackend.cpp:83: illegal_address: "Infos[Kind - FirstTargetFixupKind]" evaluates to an address that is at byte offset 3048 of an array of 336 bytes.
#   81|       assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&
#   82|              "Invalid kind!");
#   83|->     return Infos[Kind - FirstTargetFixupKind];
#   84|     }
#   85|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/MCTargetDesc/AArch64MCAsmInfo.cpp:27: constructor_uses_global_object: The constructor of global object "AsmWriterVariant" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AsmWriterVariant" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   25|   };
#   26|   
#   27|-> static cl::opt<AsmWriterVariantTy> AsmWriterVariant(
#   28|       "aarch64-neon-syntax", cl::init(Default),
#   29|       cl::desc("Choose style of NEON code to emit from AArch64 backend:"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AArch64/MCTargetDesc/AArch64TargetStreamer.cpp:26: constructor_uses_global_object: The constructor of global object "MarkBTIProperty" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MarkBTIProperty" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   24|   using namespace llvm;
#   25|   
#   26|-> static cl::opt<bool> MarkBTIProperty(
#   27|       "aarch64-mark-bti-property", cl::Hidden,
#   28|       cl::desc("Add .note.gnu.property with BTI to assembly files"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUAlwaysInlinePass.cpp:27: constructor_uses_global_object: The constructor of global object "<unnamed>::StressCalls" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::StressCalls" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   25|   namespace {
#   26|   
#   27|-> static cl::opt<bool> StressCalls(
#   28|     "amdgpu-stress-function-calls",
#   29|     cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:42: constructor_uses_global_object: The constructor of global object "<unnamed>::WidenLoads" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::WidenLoads" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   40|   namespace {
#   41|   
#   42|-> static cl::opt<bool> WidenLoads(
#   43|     "amdgpu-codegenprepare-widen-constant-loads",
#   44|     cl::desc("Widen sub-dword constant address space loads in AMDGPUCodeGenPrepare"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:48: constructor_uses_global_object: The constructor of global object "<unnamed>::Widen16BitOps" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Widen16BitOps" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   46|     cl::init(false));
#   47|   
#   48|-> static cl::opt<bool> Widen16BitOps(
#   49|     "amdgpu-codegenprepare-widen-16-bit-ops",
#   50|     cl::desc("Widen uniform 16-bit instructions to 32-bit in AMDGPUCodeGenPrepare"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:55: constructor_uses_global_object: The constructor of global object "<unnamed>::ScalarizeLargePHIs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ScalarizeLargePHIs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   53|   
#   54|   static cl::opt<bool>
#   55|->     ScalarizeLargePHIs("amdgpu-codegenprepare-break-large-phis",
#   56|                          cl::desc("Break large PHI nodes for DAGISel"),
#   57|                          cl::ReallyHidden, cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:60: constructor_uses_global_object: The constructor of global object "<unnamed>::ForceScalarizeLargePHIs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ForceScalarizeLargePHIs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   58|   
#   59|   static cl::opt<bool>
#   60|->     ForceScalarizeLargePHIs("amdgpu-codegenprepare-force-break-large-phis",
#   61|                               cl::desc("For testing purposes, always break large "
#   62|                                        "PHIs even if it isn't profitable."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:65: constructor_uses_global_object: The constructor of global object "<unnamed>::ScalarizeLargePHIsThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ScalarizeLargePHIsThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|                               cl::ReallyHidden, cl::init(false));
#   64|   
#   65|-> static cl::opt<unsigned> ScalarizeLargePHIsThreshold(
#   66|       "amdgpu-codegenprepare-break-large-phis-threshold",
#   67|       cl::desc("Minimum type size in bits for breaking large PHI nodes"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:70: constructor_uses_global_object: The constructor of global object "<unnamed>::UseMul24Intrin" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::UseMul24Intrin" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   68|       cl::ReallyHidden, cl::init(32));
#   69|   
#   70|-> static cl::opt<bool> UseMul24Intrin(
#   71|     "amdgpu-codegenprepare-mul24",
#   72|     cl::desc("Introduce mul24 intrinsics in AMDGPUCodeGenPrepare"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:77: constructor_uses_global_object: The constructor of global object "<unnamed>::ExpandDiv64InIR" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ExpandDiv64InIR" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   75|   
#   76|   // Legalize 64-bit division by using the generic IR expansion.
#   77|-> static cl::opt<bool> ExpandDiv64InIR(
#   78|     "amdgpu-codegenprepare-expand-div64",
#   79|     cl::desc("Expand 64-bit division in AMDGPUCodeGenPrepare"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:85: constructor_uses_global_object: The constructor of global object "<unnamed>::DisableIDivExpand" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DisableIDivExpand" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   83|   // Leave all division operations as they are. This supersedes ExpandDiv64InIR
#   84|   // and is used for testing the legalizer.
#   85|-> static cl::opt<bool> DisableIDivExpand(
#   86|     "amdgpu-codegenprepare-disable-idiv-expansion",
#   87|     cl::desc("Prevent expanding integer division in AMDGPUCodeGenPrepare"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:92: constructor_uses_global_object: The constructor of global object "<unnamed>::DisableFDivExpand" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DisableFDivExpand" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   90|   
#   91|   // Disable processing of fdiv so we can better test the backend implementations.
#   92|-> static cl::opt<bool> DisableFDivExpand(
#   93|     "amdgpu-codegenprepare-disable-fdiv-expansion",
#   94|     cl::desc("Prevent expanding floating point division in AMDGPUCodeGenPrepare"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUHSAMetadataStreamer.cpp:41: constructor_uses_global_object: The constructor of global object "llvm::DumpHSAMetadata" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::DumpHSAMetadata" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   39|   namespace llvm {
#   40|   
#   41|-> static cl::opt<bool> DumpHSAMetadata(
#   42|       "amdgpu-dump-hsa-metadata",
#   43|       cl::desc("Dump AMDGPU HSA Metadata"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUHSAMetadataStreamer.cpp:44: constructor_uses_global_object: The constructor of global object "llvm::VerifyHSAMetadata" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::VerifyHSAMetadata" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   42|       "amdgpu-dump-hsa-metadata",
#   43|       cl::desc("Dump AMDGPU HSA Metadata"));
#   44|-> static cl::opt<bool> VerifyHSAMetadata(
#   45|       "amdgpu-verify-hsa-metadata",
#   46|       cl::desc("Verify AMDGPU HSA Metadata"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp:34: constructor_uses_global_object: The constructor of global object "<unnamed>::EnableExactSolver" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::EnableExactSolver" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   32|   namespace {
#   33|   
#   34|-> static cl::opt<bool> EnableExactSolver(
#   35|       "amdgpu-igrouplp-exact-solver", cl::Hidden,
#   36|       cl::desc("Whether to use the exponential time solver to fit "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp:41: constructor_uses_global_object: The constructor of global object "<unnamed>::CutoffForExact" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::CutoffForExact" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   39|       cl::init(false));
#   40|   
#   41|-> static cl::opt<unsigned> CutoffForExact(
#   42|       "amdgpu-igrouplp-exact-solver-cutoff", cl::init(0), cl::Hidden,
#   43|       cl::desc("The maximum number of scheduling group conflicts "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp:50: constructor_uses_global_object: The constructor of global object "<unnamed>::MaxBranchesExplored" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::MaxBranchesExplored" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   48|                "the solver (e.g. by amdgpu-igrouplp-exact-solver"));
#   49|   
#   50|-> static cl::opt<uint64_t> MaxBranchesExplored(
#   51|       "amdgpu-igrouplp-exact-solver-max-branches", cl::init(0), cl::Hidden,
#   52|       cl::desc("The amount of branches that we are willing to explore with"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp:55: constructor_uses_global_object: The constructor of global object "<unnamed>::UseCostHeur" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::UseCostHeur" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   53|                "the exact algorithm before giving up."));
#   54|   
#   55|-> static cl::opt<bool> UseCostHeur(
#   56|       "amdgpu-igrouplp-exact-solver-cost-heur", cl::init(true), cl::Hidden,
#   57|       cl::desc("Whether to use the cost heuristic to make choices as we "

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp:596: var_decl: Declaring variable "Match" without initializer.
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp:603: uninit_use_in_call: Using uninitialized value "Match" when calling "isFull".
#  601|   
#  602|       if (UseCostHeur) {
#  603|->       if (Match->isFull()) {
#  604|           ReadyList.push_back(std::pair(*I, MissPenalty));
#  605|           continue;

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp:742: var_decl: Declaring variable "Match" without initializer.
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp:751: uninit_use_in_call: Using uninitialized value "Match" when calling "isFull".
#  749|                         << (int)Match->getMask() << "\n");
#  750|   
#  751|->     if (Match->isFull()) {
#  752|         LLVM_DEBUG(dbgs() << "SGID # " << CandSGID << " is full\n");
#  753|         continue;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUISelLowering.cpp:34: constructor_uses_global_object: The constructor of global object "AMDGPUBypassSlowDiv" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AMDGPUBypassSlowDiv" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   32|   #include "AMDGPUGenCallingConv.inc"
#   33|   
#   34|-> static cl::opt<bool> AMDGPUBypassSlowDiv(
#   35|     "amdgpu-bypass-slow-div",
#   36|     cl::desc("Skip 64-bit divide for dynamic 32-bit values"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp:36: constructor_uses_global_object: The constructor of global object "AllowRiskySelect" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AllowRiskySelect" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   34|   using namespace MIPatternMatch;
#   35|   
#   36|-> static cl::opt<bool> AllowRiskySelect(
#   37|     "amdgpu-global-isel-risky-select",
#   38|     cl::desc("Allow GlobalISel to select cases that are likely to not work yet"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPULateCodeGenPrepare.cpp:35: constructor_uses_global_object: The constructor of global object "WidenLoads" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "WidenLoads" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|   // only but not dword aligned.
#   34|   static cl::opt<bool>
#   35|->     WidenLoads("amdgpu-late-codegenprepare-widen-constant-loads",
#   36|                  cl::desc("Widen sub-dword constant address space loads in "
#   37|                           "AMDGPULateCodeGenPrepare"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:41: constructor_uses_global_object: The constructor of global object "EnableNewLegality" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableNewLegality" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   39|   
#   40|   // Hack until load/store selection patterns support any tuple of legal types.
#   41|-> static cl::opt<bool> EnableNewLegality(
#   42|     "amdgpu-global-isel-new-legality",
#   43|     cl::desc("Use GlobalISel desired legality, rather than try to use"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPULibCalls.cpp:30: constructor_uses_global_object: The constructor of global object "EnablePreLink" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnablePreLink" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   28|   using namespace llvm;
#   29|   
#   30|-> static cl::opt<bool> EnablePreLink("amdgpu-prelink",
#   31|     cl::desc("Enable pre-link mode optimizations"),
#   32|     cl::init(false),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPULibCalls.cpp:35: constructor_uses_global_object: The constructor of global object "UseNative[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseNative[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|     cl::Hidden);
#   34|   
#   35|-> static cl::list<std::string> UseNative("amdgpu-use-native",
#   36|     cl::desc("Comma separated list of functions to replace with native, or all"),
#   37|     cl::CommaSeparated, cl::ValueOptional,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPULibFunc.cpp:28: constructor_uses_global_object: The constructor of global object "EnableOCLManglingMismatchWA" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableOCLManglingMismatchWA" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   26|   using namespace llvm;
#   27|   
#   28|-> static cl::opt<bool> EnableOCLManglingMismatchWA(
#   29|       "amdgpu-enable-ocl-mangling-mismatch-workaround", cl::init(true),
#   30|       cl::ReallyHidden,

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPULibFunc.cpp:380: var_decl: Declaring variable "P".
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPULibFunc.cpp:381: uninit_use: Using uninitialized value "P". Field "P.Reserved" is uninitialized.
#  379|   AMDGPULibFunc::Param ParamIterator::getNextParam() {
#  380|     AMDGPULibFunc::Param P;
#  381|->   if (Index >= int(sizeof Rule.Param/sizeof Rule.Param[0])) return P;
#  382|   
#  383|     const char R = Rule.Param[Index];

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPULibFunc.cpp:380: var_decl: Declaring variable "P".
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPULibFunc.cpp:464: uninit_use: Using uninitialized value "P". Field "P.Reserved" is uninitialized.
#  462|     }
#  463|     ++Index;
#  464|->   return P;
#  465|   }
#  466|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:218: constructor_uses_global_object: The constructor of global object "<unnamed>::SuperAlignLDSGlobals" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::SuperAlignLDSGlobals" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  216|   namespace {
#  217|   
#  218|-> cl::opt<bool> SuperAlignLDSGlobals(
#  219|       "amdgpu-super-align-lds-globals",
#  220|       cl::desc("Increase alignment of LDS if it is not on align boundary"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:224: constructor_uses_global_object: The constructor of global object "<unnamed>::LoweringKindLoc" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::LoweringKindLoc" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  222|   
#  223|   enum class LoweringKind { module, table, kernel, hybrid };
#  224|-> cl::opt<LoweringKind> LoweringKindLoc(
#  225|       "amdgpu-lower-module-lds-strategy",
#  226|       cl::desc("Specify lowering strategy for function LDS access:"), cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUPerfHintAnalysis.cpp:35: constructor_uses_global_object: The constructor of global object "MemBoundThresh" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MemBoundThresh" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|   
#   34|   static cl::opt<unsigned>
#   35|->     MemBoundThresh("amdgpu-membound-threshold", cl::init(50), cl::Hidden,
#   36|                      cl::desc("Function mem bound threshold in %"));
#   37|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUPerfHintAnalysis.cpp:39: constructor_uses_global_object: The constructor of global object "LimitWaveThresh" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LimitWaveThresh" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   37|   
#   38|   static cl::opt<unsigned>
#   39|->     LimitWaveThresh("amdgpu-limit-wave-threshold", cl::init(50), cl::Hidden,
#   40|                       cl::desc("Kernel limit wave threshold in %"));
#   41|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUPerfHintAnalysis.cpp:43: constructor_uses_global_object: The constructor of global object "IAWeight" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "IAWeight" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   41|   
#   42|   static cl::opt<unsigned>
#   43|->     IAWeight("amdgpu-indirect-access-weight", cl::init(1000), cl::Hidden,
#   44|                cl::desc("Indirect access memory instruction weight"));
#   45|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUPerfHintAnalysis.cpp:47: constructor_uses_global_object: The constructor of global object "LSWeight" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LSWeight" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   45|   
#   46|   static cl::opt<unsigned>
#   47|->     LSWeight("amdgpu-large-stride-weight", cl::init(1000), cl::Hidden,
#   48|                cl::desc("Large stride memory access weight"));
#   49|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUPerfHintAnalysis.cpp:51: constructor_uses_global_object: The constructor of global object "LargeStrideThresh" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LargeStrideThresh" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   49|   
#   50|   static cl::opt<unsigned>
#   51|->     LargeStrideThresh("amdgpu-large-stride-threshold", cl::init(64), cl::Hidden,
#   52|                         cl::desc("Large stride memory access threshold"));
#   53|   

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUPrintfRuntimeBinding.cpp:105: tainted_data_return: Called function "CurFmt.find_last_of(llvm::StringRef("%"), 18446744073709551615UL)", and a possible return value is known to be less than zero.
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUPrintfRuntimeBinding.cpp:105: assign: Assigning: "pTag" = "CurFmt.find_last_of(llvm::StringRef("%"), 18446744073709551615UL)".
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUPrintfRuntimeBinding.cpp:108: overflow_sink: "--pTag", which might have underflowed, is passed to "CurFmt[--pTag]".
#  106|       if (pTag != StringRef::npos) {
#  107|         ArgDump = true;
#  108|->       while (pTag && CurFmt[--pTag] == '%') {
#  109|           ArgDump = !ArgDump;
#  110|         }

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp:53: constructor_uses_global_object: The constructor of global object "<unnamed>::DisablePromoteAllocaToVector" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DisablePromoteAllocaToVector" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   51|   
#   52|   static cl::opt<bool>
#   53|->     DisablePromoteAllocaToVector("disable-promote-alloca-to-vector",
#   54|                                    cl::desc("Disable promote alloca to vector"),
#   55|                                    cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp:58: constructor_uses_global_object: The constructor of global object "<unnamed>::DisablePromoteAllocaToLDS" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DisablePromoteAllocaToLDS" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   56|   
#   57|   static cl::opt<bool>
#   58|->     DisablePromoteAllocaToLDS("disable-promote-alloca-to-lds",
#   59|                                 cl::desc("Disable promote alloca to LDS"),
#   60|                                 cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp:62: constructor_uses_global_object: The constructor of global object "<unnamed>::PromoteAllocaToVectorLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::PromoteAllocaToVectorLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   60|                                 cl::init(false));
#   61|   
#   62|-> static cl::opt<unsigned> PromoteAllocaToVectorLimit(
#   63|       "amdgpu-promote-alloca-to-vector-limit",
#   64|       cl::desc("Maximum byte size to consider promote alloca to vector"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUResourceUsageAnalysis.cpp:49: constructor_uses_global_object: The constructor of global object "AssumedStackSizeForExternalCall" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AssumedStackSizeForExternalCall" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   47|   // time if we don't know the true stack size. Assume a smaller number if this is
#   48|   // only due to dynamic / non-entry block allocas.
#   49|-> static cl::opt<uint32_t> AssumedStackSizeForExternalCall(
#   50|       "amdgpu-assume-external-call-stack-size",
#   51|       cl::desc("Assumed stack use of any external call (in bytes)"), cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUResourceUsageAnalysis.cpp:54: constructor_uses_global_object: The constructor of global object "AssumedStackSizeForDynamicSizeObjects" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AssumedStackSizeForDynamicSizeObjects" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|       cl::init(16384));
#   53|   
#   54|-> static cl::opt<uint32_t> AssumedStackSizeForDynamicSizeObjects(
#   55|       "amdgpu-assume-dynamic-stack-object-size",
#   56|       cl::desc("Assumed extra stack use if there are any "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp:62: constructor_uses_global_object: The constructor of global object "AnyAddressSpace" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AnyAddressSpace" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   60|   using namespace llvm;
#   61|   
#   62|-> static cl::opt<bool> AnyAddressSpace(
#   63|     "amdgpu-any-address-space-out-arguments",
#   64|     cl::desc("Replace pointer out arguments with "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp:69: constructor_uses_global_object: The constructor of global object "MaxNumRetRegs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxNumRetRegs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   67|     cl::init(false));
#   68|   
#   69|-> static cl::opt<unsigned> MaxNumRetRegs(
#   70|     "amdgpu-max-return-arg-num-regs",
#   71|     cl::desc("Approximately limit number of return registers for replacing out arguments"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUSetWavePriority.cpp:29: constructor_uses_global_object: The constructor of global object "DefaultVALUInstsThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DefaultVALUInstsThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   27|   #define DEBUG_TYPE "amdgpu-set-wave-priority"
#   28|   
#   29|-> static cl::opt<unsigned> DefaultVALUInstsThreshold(
#   30|       "amdgpu-set-wave-priority-valu-insts-threshold",
#   31|       cl::desc("VALU instruction count threshold for adjusting wave priority"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUSubtarget.cpp:43: constructor_uses_global_object: The constructor of global object "EnablePowerSched" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnablePowerSched" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   41|   #undef AMDGPUSubtarget
#   42|   
#   43|-> static cl::opt<bool> EnablePowerSched(
#   44|     "amdgpu-enable-power-sched",
#   45|     cl::desc("Enable scheduling to minimize mAI power bursts"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUSubtarget.cpp:48: constructor_uses_global_object: The constructor of global object "EnableVGPRIndexMode" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableVGPRIndexMode" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   46|     cl::init(false));
#   47|   
#   48|-> static cl::opt<bool> EnableVGPRIndexMode(
#   49|     "amdgpu-vgpr-index-mode",
#   50|     cl::desc("Use GPR indexing mode instead of movrel for vector indexing"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUSubtarget.cpp:53: constructor_uses_global_object: The constructor of global object "UseAA" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseAA" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   51|     cl::init(false));
#   52|   
#   53|-> static cl::opt<bool> UseAA("amdgpu-use-aa-in-codegen",
#   54|                              cl::desc("Enable the use of AA during codegen."),
#   55|                              cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUSubtarget.cpp:57: constructor_uses_global_object: The constructor of global object "NSAThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "NSAThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   55|                              cl::init(true));
#   56|   
#   57|-> static cl::opt<unsigned> NSAThreshold("amdgpu-nsa-threshold",
#   58|                                         cl::desc("Number of addresses from which to enable MIMG NSA."),
#   59|                                         cl::init(3), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:107: constructor_uses_global_object: The constructor of global object "<unnamed>::SGPRRegAlloc" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::SGPRRegAlloc" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  105|   static cl::opt<SGPRRegisterRegAlloc::FunctionPassCtor, false,
#  106|                  RegisterPassParser<SGPRRegisterRegAlloc>>
#  107|-> SGPRRegAlloc("sgpr-regalloc", cl::Hidden, cl::init(&useDefaultRegisterAllocator),
#  108|                cl::desc("Register allocator to use for SGPRs"));
#  109|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:112: constructor_uses_global_object: The constructor of global object "<unnamed>::VGPRRegAlloc" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::VGPRRegAlloc" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  110|   static cl::opt<VGPRRegisterRegAlloc::FunctionPassCtor, false,
#  111|                  RegisterPassParser<VGPRRegisterRegAlloc>>
#  112|-> VGPRRegAlloc("vgpr-regalloc", cl::Hidden, cl::init(&useDefaultRegisterAllocator),
#  113|                cl::desc("Register allocator to use for VGPRs"));
#  114|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:176: constructor_uses_global_object: The constructor of global object "EnableSROA" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSROA" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  174|   }
#  175|   
#  176|-> static cl::opt<bool> EnableSROA(
#  177|     "amdgpu-sroa",
#  178|     cl::desc("Run SROA after promote alloca pass"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:183: constructor_uses_global_object: The constructor of global object "EnableEarlyIfConversion" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableEarlyIfConversion" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  181|   
#  182|   static cl::opt<bool>
#  183|-> EnableEarlyIfConversion("amdgpu-early-ifcvt", cl::Hidden,
#  184|                           cl::desc("Run early if-conversion"),
#  185|                           cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:188: constructor_uses_global_object: The constructor of global object "OptExecMaskPreRA" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OptExecMaskPreRA" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  186|   
#  187|   static cl::opt<bool>
#  188|-> OptExecMaskPreRA("amdgpu-opt-exec-mask-pre-ra", cl::Hidden,
#  189|               cl::desc("Run pre-RA exec mask optimizations"),
#  190|               cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:193: constructor_uses_global_object: The constructor of global object "LowerCtorDtor" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LowerCtorDtor" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  191|   
#  192|   static cl::opt<bool>
#  193|->     LowerCtorDtor("amdgpu-lower-global-ctor-dtor",
#  194|                     cl::desc("Lower GPU ctor / dtors to globals on the device."),
#  195|                     cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:198: constructor_uses_global_object: The constructor of global object "EnableLoadStoreVectorizer" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableLoadStoreVectorizer" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  196|   
#  197|   // Option to disable vectorizer for tests.
#  198|-> static cl::opt<bool> EnableLoadStoreVectorizer(
#  199|     "amdgpu-load-store-vectorizer",
#  200|     cl::desc("Enable load store vectorizer"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:205: constructor_uses_global_object: The constructor of global object "ScalarizeGlobal" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ScalarizeGlobal" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  203|   
#  204|   // Option to control global loads scalarization
#  205|-> static cl::opt<bool> ScalarizeGlobal(
#  206|     "amdgpu-scalarize-global-loads",
#  207|     cl::desc("Enable global load scalarization"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:212: constructor_uses_global_object: The constructor of global object "InternalizeSymbols" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InternalizeSymbols" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  210|   
#  211|   // Option to run internalize pass.
#  212|-> static cl::opt<bool> InternalizeSymbols(
#  213|     "amdgpu-internalize-symbols",
#  214|     cl::desc("Enable elimination of non-kernel functions and unused globals"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:219: constructor_uses_global_object: The constructor of global object "EarlyInlineAll" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EarlyInlineAll" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  217|   
#  218|   // Option to inline all early.
#  219|-> static cl::opt<bool> EarlyInlineAll(
#  220|     "amdgpu-early-inline-all",
#  221|     cl::desc("Inline all functions early"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:225: constructor_uses_global_object: The constructor of global object "RemoveIncompatibleFunctions" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RemoveIncompatibleFunctions" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  223|     cl::Hidden);
#  224|   
#  225|-> static cl::opt<bool> RemoveIncompatibleFunctions(
#  226|       "amdgpu-enable-remove-incompatible-functions", cl::Hidden,
#  227|       cl::desc("Enable removal of functions when they"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:231: constructor_uses_global_object: The constructor of global object "EnableSDWAPeephole" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSDWAPeephole" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  229|       cl::init(true));
#  230|   
#  231|-> static cl::opt<bool> EnableSDWAPeephole(
#  232|     "amdgpu-sdwa-peephole",
#  233|     cl::desc("Enable SDWA peepholer"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:236: constructor_uses_global_object: The constructor of global object "EnableDPPCombine" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableDPPCombine" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  234|     cl::init(true));
#  235|   
#  236|-> static cl::opt<bool> EnableDPPCombine(
#  237|     "amdgpu-dpp-combine",
#  238|     cl::desc("Enable DPP combiner"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:242: constructor_uses_global_object: The constructor of global object "EnableAMDGPUAliasAnalysis" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableAMDGPUAliasAnalysis" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  240|   
#  241|   // Enable address space based alias analysis
#  242|-> static cl::opt<bool> EnableAMDGPUAliasAnalysis("enable-amdgpu-aa", cl::Hidden,
#  243|     cl::desc("Enable AMDGPU Alias Analysis"),
#  244|     cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:247: constructor_uses_global_object: The constructor of global object "LateCFGStructurize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LateCFGStructurize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  245|   
#  246|   // Option to run late CFG structurizer
#  247|-> static cl::opt<bool, true> LateCFGStructurize(
#  248|     "amdgpu-late-structurize",
#  249|     cl::desc("Enable late CFG structurization"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:254: constructor_uses_global_object: The constructor of global object "EnableLibCallSimplify" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableLibCallSimplify" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  252|   
#  253|   // Enable lib calls simplifications
#  254|-> static cl::opt<bool> EnableLibCallSimplify(
#  255|     "amdgpu-simplify-libcall",
#  256|     cl::desc("Enable amdgpu library simplifications"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:260: constructor_uses_global_object: The constructor of global object "EnableLowerKernelArguments" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableLowerKernelArguments" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  258|     cl::Hidden);
#  259|   
#  260|-> static cl::opt<bool> EnableLowerKernelArguments(
#  261|     "amdgpu-ir-lower-kernel-arguments",
#  262|     cl::desc("Lower kernel argument loads in IR pass"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:266: constructor_uses_global_object: The constructor of global object "EnableRegReassign" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableRegReassign" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  264|     cl::Hidden);
#  265|   
#  266|-> static cl::opt<bool> EnableRegReassign(
#  267|     "amdgpu-reassign-regs",
#  268|     cl::desc("Enable register reassign optimizations on gfx10+"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:272: constructor_uses_global_object: The constructor of global object "OptVGPRLiveRange" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OptVGPRLiveRange" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  270|     cl::Hidden);
#  271|   
#  272|-> static cl::opt<bool> OptVGPRLiveRange(
#  273|       "amdgpu-opt-vgpr-liverange",
#  274|       cl::desc("Enable VGPR liverange optimizations for if-else structure"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:277: constructor_uses_global_object: The constructor of global object "AMDGPUAtomicOptimizerStrategy" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AMDGPUAtomicOptimizerStrategy" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  275|       cl::init(true), cl::Hidden);
#  276|   
#  277|-> static cl::opt<ScanOptions> AMDGPUAtomicOptimizerStrategy(
#  278|       "amdgpu-atomic-optimizer-strategy",
#  279|       cl::desc("Select DPP or Iterative strategy for scan"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:288: constructor_uses_global_object: The constructor of global object "EnableSIModeRegisterPass" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSIModeRegisterPass" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  286|   
#  287|   // Enable Mode register optimization
#  288|-> static cl::opt<bool> EnableSIModeRegisterPass(
#  289|     "amdgpu-mode-register",
#  290|     cl::desc("Enable mode register pass"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:296: constructor_uses_global_object: The constructor of global object "EnableInsertDelayAlu" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableInsertDelayAlu" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  294|   // Enable GFX11+ s_delay_alu insertion
#  295|   static cl::opt<bool>
#  296|->     EnableInsertDelayAlu("amdgpu-enable-delay-alu",
#  297|                            cl::desc("Enable s_delay_alu insertion"),
#  298|                            cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:302: constructor_uses_global_object: The constructor of global object "EnableVOPD" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableVOPD" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  300|   // Enable GFX11+ VOPD
#  301|   static cl::opt<bool>
#  302|->     EnableVOPD("amdgpu-enable-vopd",
#  303|                  cl::desc("Enable VOPD, dual issue of VALU in wave32"),
#  304|                  cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:308: constructor_uses_global_object: The constructor of global object "EnableDCEInRA" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableDCEInRA" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  306|   // Option is used in lit tests to prevent deadcoding of patterns inspected.
#  307|   static cl::opt<bool>
#  308|-> EnableDCEInRA("amdgpu-dce-in-ra",
#  309|       cl::init(true), cl::Hidden,
#  310|       cl::desc("Enable machine DCE inside regalloc"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:312: constructor_uses_global_object: The constructor of global object "EnableSetWavePriority" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSetWavePriority" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  310|       cl::desc("Enable machine DCE inside regalloc"));
#  311|   
#  312|-> static cl::opt<bool> EnableSetWavePriority("amdgpu-set-wave-priority",
#  313|                                              cl::desc("Adjust wave priority"),
#  314|                                              cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:316: constructor_uses_global_object: The constructor of global object "EnableScalarIRPasses" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableScalarIRPasses" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  314|                                              cl::init(false), cl::Hidden);
#  315|   
#  316|-> static cl::opt<bool> EnableScalarIRPasses(
#  317|     "amdgpu-scalar-ir-passes",
#  318|     cl::desc("Enable scalar IR passes"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:322: constructor_uses_global_object: The constructor of global object "EnableStructurizerWorkarounds" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableStructurizerWorkarounds" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  320|     cl::Hidden);
#  321|   
#  322|-> static cl::opt<bool> EnableStructurizerWorkarounds(
#  323|       "amdgpu-enable-structurizer-workarounds",
#  324|       cl::desc("Enable workarounds for the StructurizeCFG pass"), cl::init(true),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:327: constructor_uses_global_object: The constructor of global object "EnableLowerModuleLDS" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableLowerModuleLDS" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  325|       cl::Hidden);
#  326|   
#  327|-> static cl::opt<bool, true> EnableLowerModuleLDS(
#  328|       "amdgpu-enable-lower-module-lds", cl::desc("Enable lower module lds pass"),
#  329|       cl::location(AMDGPUTargetMachine::EnableLowerModuleLDS), cl::init(true),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:332: constructor_uses_global_object: The constructor of global object "EnablePreRAOptimizations" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnablePreRAOptimizations" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  330|       cl::Hidden);
#  331|   
#  332|-> static cl::opt<bool> EnablePreRAOptimizations(
#  333|       "amdgpu-enable-pre-ra-optimizations",
#  334|       cl::desc("Enable Pre-RA optimizations pass"), cl::init(true),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:337: constructor_uses_global_object: The constructor of global object "EnablePromoteKernelArguments" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnablePromoteKernelArguments" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  335|       cl::Hidden);
#  336|   
#  337|-> static cl::opt<bool> EnablePromoteKernelArguments(
#  338|       "amdgpu-enable-promote-kernel-arguments",
#  339|       cl::desc("Enable promotion of flat kernel pointer arguments to global"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:342: constructor_uses_global_object: The constructor of global object "EnableMaxIlpSchedStrategy" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMaxIlpSchedStrategy" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  340|       cl::Hidden, cl::init(true));
#  341|   
#  342|-> static cl::opt<bool> EnableMaxIlpSchedStrategy(
#  343|       "amdgpu-enable-max-ilp-scheduling-strategy",
#  344|       cl::desc("Enable scheduling strategy to maximize ILP for a single wave."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:347: constructor_uses_global_object: The constructor of global object "EnableRewritePartialRegUses" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableRewritePartialRegUses" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  345|       cl::Hidden, cl::init(false));
#  346|   
#  347|-> static cl::opt<bool> EnableRewritePartialRegUses(
#  348|       "amdgpu-enable-rewrite-partial-reg-uses",
#  349|       cl::desc("Enable rewrite partial reg uses pass"), cl::init(false),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp:35: constructor_uses_global_object: The constructor of global object "UnrollThresholdPrivate" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UnrollThresholdPrivate" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|   #define DEBUG_TYPE "AMDGPUtti"
#   34|   
#   35|-> static cl::opt<unsigned> UnrollThresholdPrivate(
#   36|     "amdgpu-unroll-threshold-private",
#   37|     cl::desc("Unroll threshold for AMDGPU if private memory used in a loop"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp:40: constructor_uses_global_object: The constructor of global object "UnrollThresholdLocal" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UnrollThresholdLocal" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   38|     cl::init(2700), cl::Hidden);
#   39|   
#   40|-> static cl::opt<unsigned> UnrollThresholdLocal(
#   41|     "amdgpu-unroll-threshold-local",
#   42|     cl::desc("Unroll threshold for AMDGPU if local memory used in a loop"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp:45: constructor_uses_global_object: The constructor of global object "UnrollThresholdIf" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UnrollThresholdIf" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   43|     cl::init(1000), cl::Hidden);
#   44|   
#   45|-> static cl::opt<unsigned> UnrollThresholdIf(
#   46|     "amdgpu-unroll-threshold-if",
#   47|     cl::desc("Unroll threshold increment for AMDGPU for each if statement inside loop"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp:50: constructor_uses_global_object: The constructor of global object "UnrollRuntimeLocal" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UnrollRuntimeLocal" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   48|     cl::init(200), cl::Hidden);
#   49|   
#   50|-> static cl::opt<bool> UnrollRuntimeLocal(
#   51|     "amdgpu-unroll-runtime-local",
#   52|     cl::desc("Allow runtime unroll for AMDGPU if local memory used in a loop"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp:55: constructor_uses_global_object: The constructor of global object "UnrollMaxBlockToAnalyze" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UnrollMaxBlockToAnalyze" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   53|     cl::init(true), cl::Hidden);
#   54|   
#   55|-> static cl::opt<unsigned> UnrollMaxBlockToAnalyze(
#   56|       "amdgpu-unroll-max-block-to-analyze",
#   57|       cl::desc("Inner loop block size threshold to analyze in unroll for AMDGPU"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp:60: constructor_uses_global_object: The constructor of global object "ArgAllocaCost" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ArgAllocaCost" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   58|       cl::init(32), cl::Hidden);
#   59|   
#   60|-> static cl::opt<unsigned> ArgAllocaCost("amdgpu-inline-arg-alloca-cost",
#   61|                                          cl::Hidden, cl::init(4000),
#   62|                                          cl::desc("Cost of alloca argument"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp:68: constructor_uses_global_object: The constructor of global object "ArgAllocaCutoff" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ArgAllocaCutoff" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   66|   // heuristic.
#   67|   static cl::opt<unsigned>
#   68|->     ArgAllocaCutoff("amdgpu-inline-arg-alloca-cutoff", cl::Hidden,
#   69|                       cl::init(256),
#   70|                       cl::desc("Maximum alloca size to use for inline cost"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp:73: constructor_uses_global_object: The constructor of global object "InlineMaxBB" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InlineMaxBB" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   71|   
#   72|   // Inliner constraint to achieve reasonable compilation time.
#   73|-> static cl::opt<size_t> InlineMaxBB(
#   74|       "amdgpu-inline-max-bb", cl::Hidden, cl::init(1100),
#   75|       cl::desc("Maximum number of BBs allowed in a function after inlining"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/GCNHazardRecognizer.cpp:42: constructor_uses_global_object: The constructor of global object "MFMAPaddingRatio" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MFMAPaddingRatio" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   40|   
#   41|   static cl::opt<unsigned, false, MFMAPaddingRatioParser>
#   42|->     MFMAPaddingRatio("amdgpu-mfma-padding-ratio", cl::init(0), cl::Hidden,
#   43|                        cl::desc("Fill a percentage of the latency between "
#   44|                                 "neighboring MFMA with s_nops."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/GCNPreRALongBranchReg.cpp:30: constructor_uses_global_object: The constructor of global object "<unnamed>::LongBranchFactor" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::LongBranchFactor" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   28|   namespace {
#   29|   
#   30|-> static cl::opt<double> LongBranchFactor(
#   31|       "amdgpu-long-branch-factor", cl::init(1.0), cl::Hidden,
#   32|       cl::desc("Factor to apply to what qualifies as a long branch "

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Target/AMDGPU/GCNRegPressure.cpp:192: var_decl: Declaring variable "Res".
llvm-17.0.6.src/lib/Target/AMDGPU/GCNRegPressure.cpp:209: uninit_use: Using uninitialized value "Res". Field "Res.InlineElts" is uninitialized.
#  207|         Res.push_back(RegisterMaskPair(Reg, UsedMask));
#  208|     }
#  209|->   return Res;
#  210|   }
#  211|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/GCNSchedStrategy.cpp:36: constructor_uses_global_object: The constructor of global object "DisableUnclusterHighRP" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableUnclusterHighRP" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   34|   
#   35|   static cl::opt<bool>
#   36|->     DisableUnclusterHighRP("amdgpu-disable-unclustred-high-rp-reschedule",
#   37|                              cl::Hidden,
#   38|                              cl::desc("Disable unclustred high register pressure "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/GCNSchedStrategy.cpp:41: constructor_uses_global_object: The constructor of global object "ScheduleMetricBias" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ScheduleMetricBias" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   39|                                       "reduction scheduling stage."),
#   40|                              cl::init(false));
#   41|-> static cl::opt<unsigned> ScheduleMetricBias(
#   42|       "amdgpu-schedule-metric-bias", cl::Hidden,
#   43|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/GCNSchedStrategy.cpp:49: constructor_uses_global_object: The constructor of global object "RelaxedOcc" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RelaxedOcc" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   47|   
#   48|   static cl::opt<bool>
#   49|->     RelaxedOcc("amdgpu-schedule-relaxed-occupancy", cl::Hidden,
#   50|                  cl::desc("Relax occupancy targets for kernels which are memory "
#   51|                           "bound (amdgpu-membound-threshold), or "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/MCTargetDesc/AMDGPUInstPrinter.cpp:27: constructor_uses_global_object: The constructor of global object "Keep16BitSuffixes" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Keep16BitSuffixes" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   25|   using namespace llvm::AMDGPU;
#   26|   
#   27|-> static cl::opt<bool> Keep16BitSuffixes(
#   28|     "amdgpu-keep-16-bit-reg-suffixes",
#   29|     cl::desc("Keep .l and .h suffixes in asm for debugging purposes"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/R600TargetMachine.cpp:26: constructor_uses_global_object: The constructor of global object "EnableR600StructurizeCFG" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableR600StructurizeCFG" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   24|   
#   25|   static cl::opt<bool>
#   26|->     EnableR600StructurizeCFG("r600-ir-structurize",
#   27|                                cl::desc("Use StructurizeCFG IR pass"),
#   28|                                cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/R600TargetMachine.cpp:30: constructor_uses_global_object: The constructor of global object "EnableR600IfConvert" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableR600IfConvert" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   28|                                cl::init(true));
#   29|   
#   30|-> static cl::opt<bool> EnableR600IfConvert("r600-if-convert",
#   31|                                            cl::desc("Use if conversion pass"),
#   32|                                            cl::ReallyHidden, cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/R600TargetMachine.cpp:34: constructor_uses_global_object: The constructor of global object "EnableAMDGPUFunctionCallsOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableAMDGPUFunctionCallsOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   32|                                            cl::ReallyHidden, cl::init(true));
#   33|   
#   34|-> static cl::opt<bool, true> EnableAMDGPUFunctionCallsOpt(
#   35|       "amdgpu-function-calls", cl::desc("Enable AMDGPU function call support"),
#   36|       cl::location(AMDGPUTargetMachine::EnableFunctionCalls), cl::init(true),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/SIFixSGPRCopies.cpp:79: constructor_uses_global_object: The constructor of global object "EnableM0Merge" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableM0Merge" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   77|   #define DEBUG_TYPE "si-fix-sgpr-copies"
#   78|   
#   79|-> static cl::opt<bool> EnableM0Merge(
#   80|     "amdgpu-enable-merge-m0",
#   81|     cl::desc("Merge and hoist M0 initializations"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/SIFormMemoryClauses.cpp:29: constructor_uses_global_object: The constructor of global object "MaxClause" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxClause" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   27|   // and stall. They can stall even earlier if there are outstanding counters.
#   28|   static cl::opt<unsigned>
#   29|-> MaxClause("amdgpu-max-memory-clause", cl::Hidden, cl::init(15),
#   30|             cl::desc("Maximum length of a memory clause, instructions"));
#   31|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/SIFrameLowering.cpp:23: constructor_uses_global_object: The constructor of global object "EnableSpillVGPRToAGPR" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSpillVGPRToAGPR" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   21|   #define DEBUG_TYPE "frame-info"
#   22|   
#   23|-> static cl::opt<bool> EnableSpillVGPRToAGPR(
#   24|     "amdgpu-spill-vgpr-to-agpr",
#   25|     cl::desc("Enable spilling VGPRs to AGPRs"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/SIISelLowering.cpp:51: constructor_uses_global_object: The constructor of global object "DisableLoopAlignment" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableLoopAlignment" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   49|   STATISTIC(NumTailCalls, "Number of tail calls");
#   50|   
#   51|-> static cl::opt<bool> DisableLoopAlignment(
#   52|     "amdgpu-disable-loop-alignment",
#   53|     cl::desc("Do not align and prefetch loops"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/SIISelLowering.cpp:56: constructor_uses_global_object: The constructor of global object "UseDivergentRegisterIndexing" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseDivergentRegisterIndexing" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   54|     cl::init(false));
#   55|   
#   56|-> static cl::opt<bool> UseDivergentRegisterIndexing(
#   57|     "amdgpu-use-divergent-register-indexing",
#   58|     cl::Hidden,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:50: constructor_uses_global_object: The constructor of global object "ForceEmitZeroFlag" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForceEmitZeroFlag" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   48|                 "Force emit s_waitcnt vmcnt(0) instrs");
#   49|   
#   50|-> static cl::opt<bool> ForceEmitZeroFlag(
#   51|     "amdgpu-waitcnt-forcezero",
#   52|     cl::desc("Force all waitcnt instrs to be emitted as s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)"),

Error: OVERRUN (CWE-119):
llvm-17.0.6.src/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:694: cond_at_most: Checking "Interval.first >= NUM_ALL_VGPRS" implies that "Interval.first" may be up to 512 on the false branch.
llvm-17.0.6.src/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:698: assignment: Assigning: "RegNo" = "Interval.first". The value of "RegNo" may now be up to 512.
llvm-17.0.6.src/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:698: incr: Incrementing "RegNo". The value of "RegNo" may now be up to 513.
llvm-17.0.6.src/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:699: overrun-local: Overrunning array "this->VgprVmemTypes" of 513 bytes at byte offset 513 using index "RegNo" (which evaluates to 513).
#  697|             VmemType V = getVmemType(Inst);
#  698|             for (int RegNo = Interval.first; RegNo < Interval.second; ++RegNo)
#  699|->             VgprVmemTypes[RegNo] |= 1 << V;
#  700|           }
#  701|         }

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/SIInstrInfo.cpp:55: constructor_uses_global_object: The constructor of global object "BranchOffsetBits" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BranchOffsetBits" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   53|   // long branches.
#   54|   static cl::opt<unsigned>
#   55|-> BranchOffsetBits("amdgpu-s-branch-bits", cl::ReallyHidden, cl::init(16),
#   56|                    cl::desc("Restrict range of branch instructions (DEBUG)"));
#   57|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/SIInstrInfo.cpp:58: constructor_uses_global_object: The constructor of global object "Fix16BitCopies" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Fix16BitCopies" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   56|                    cl::desc("Restrict range of branch instructions (DEBUG)"));
#   57|   
#   58|-> static cl::opt<bool> Fix16BitCopies(
#   59|     "amdgpu-fix-16-bit-physreg-copies",
#   60|     cl::desc("Fix copies between 32 and 16 bit registers by extending to 32 bit"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/SILowerControlFlow.cpp:66: constructor_uses_global_object: The constructor of global object "RemoveRedundantEndcf" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RemoveRedundantEndcf" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   64|   
#   65|   static cl::opt<bool>
#   66|-> RemoveRedundantEndcf("amdgpu-remove-redundant-endcf",
#   67|       cl::init(true), cl::ReallyHidden);
#   68|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/SIMemoryLegalizer.cpp:33: constructor_uses_global_object: The constructor of global object "AmdgcnSkipCacheInvalidations" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AmdgcnSkipCacheInvalidations" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   31|   #define PASS_NAME "SI Memory Legalizer"
#   32|   
#   33|-> static cl::opt<bool> AmdgcnSkipCacheInvalidations(
#   34|       "amdgcn-skip-cache-invalidations", cl::init(false), cl::Hidden,
#   35|       cl::desc("Use this to skip inserting cache invalidating instructions."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/SIPreEmitPeephole.cpp:25: constructor_uses_global_object: The constructor of global object "SkipThresholdFlag" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SkipThresholdFlag" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   23|   static unsigned SkipThreshold;
#   24|   
#   25|-> static cl::opt<unsigned, true> SkipThresholdFlag(
#   26|       "amdgpu-skip-threshold", cl::Hidden,
#   27|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/SIRegisterInfo.cpp:32: constructor_uses_global_object: The constructor of global object "EnableSpillSGPRToVGPR" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSpillSGPRToVGPR" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   30|   #include "AMDGPUGenRegisterInfo.inc"
#   31|   
#   32|-> static cl::opt<bool> EnableSpillSGPRToVGPR(
#   33|     "amdgpu-spill-sgpr-to-vgpr",
#   34|     cl::desc("Enable spilling SGPRs to VGPRs"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp:36: constructor_uses_global_object: The constructor of global object "AmdhsaCodeObjectVersion" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AmdhsaCodeObjectVersion" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   34|   
#   35|   static llvm::cl::opt<unsigned>
#   36|->     AmdhsaCodeObjectVersion("amdhsa-code-object-version", llvm::cl::Hidden,
#   37|                               llvm::cl::desc("AMDHSA Code Object Version"),
#   38|                               llvm::cl::init(4));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMBaseInstrInfo.cpp:80: constructor_uses_global_object: The constructor of global object "EnableARM3Addr" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableARM3Addr" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   78|   
#   79|   static cl::opt<bool>
#   80|-> EnableARM3Addr("enable-arm-3-addr-conv", cl::Hidden,
#   81|                  cl::desc("Enable ARM 2-addr to 3-addr conv"));
#   82|   

Error: WRAPPER_ESCAPE (CWE-825):
llvm-17.0.6.src/lib/Target/ARM/ARMBaseInstrInfo.cpp:5879: extract: Calling "operator []" which extracts wrapped state from parameter "RepeatedSequenceLocs".
llvm-17.0.6.src/lib/Target/ARM/ARMBaseInstrInfo.cpp:5879: assign: Assigning: "FirstCand" = "RepeatedSequenceLocs[0UL]".
llvm-17.0.6.src/lib/Target/ARM/ARMBaseInstrInfo.cpp:6067: invalidate: Calling "operator =" invalidates the internal representation of parameter "RepeatedSequenceLocs".
llvm-17.0.6.src/lib/Target/ARM/ARMBaseInstrInfo.cpp:6078: use_after_free: Using invalidated internal representation of parameter "RepeatedSequenceLocs".
# 6076|       // check if the range contains a call.  These require a save + restore of
# 6077|       // the link register.
# 6078|->     if (std::any_of(FirstCand.front(), FirstCand.back(),
# 6079|                       [](const MachineInstr &MI) { return MI.isCall(); }))
# 6080|         NumBytesToCreateFrame += Costs.SaveRestoreLROnStack;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMConstantIslandPass.cpp:78: constructor_uses_global_object: The constructor of global object "AdjustJumpTableBlocks" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AdjustJumpTableBlocks" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   76|   
#   77|   static cl::opt<bool>
#   78|-> AdjustJumpTableBlocks("arm-adjust-jump-tables", cl::Hidden, cl::init(true),
#   79|             cl::desc("Adjust basic block layout to better use TB[BH]"));
#   80|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMConstantIslandPass.cpp:82: constructor_uses_global_object: The constructor of global object "CPMaxIteration" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CPMaxIteration" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   80|   
#   81|   static cl::opt<unsigned>
#   82|-> CPMaxIteration("arm-constant-island-max-iteration", cl::Hidden, cl::init(30),
#   83|             cl::desc("The max number of iteration for converge"));
#   84|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMConstantIslandPass.cpp:85: constructor_uses_global_object: The constructor of global object "SynthesizeThumb1TBB" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SynthesizeThumb1TBB" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   83|             cl::desc("The max number of iteration for converge"));
#   84|   
#   85|-> static cl::opt<bool> SynthesizeThumb1TBB(
#   86|       "arm-synthesize-thumb-1-tbb", cl::Hidden, cl::init(true),
#   87|       cl::desc("Use compressed jump tables in Thumb-1 by synthesizing an "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMExpandPseudoInsts.cpp:35: constructor_uses_global_object: The constructor of global object "VerifyARMPseudo" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyARMPseudo" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|   
#   34|   static cl::opt<bool>
#   35|-> VerifyARMPseudo("verify-arm-pseudo-expand", cl::Hidden,
#   36|                   cl::desc("Verify machine code after expanding ARM pseudos"));
#   37|   

Error: OVERRUN (CWE-119):
llvm-17.0.6.src/lib/Target/ARM/ARMFastISel.cpp:1691: assignment: Assigning: "LC" = "UNKNOWN_LIBCALL".
llvm-17.0.6.src/lib/Target/ARM/ARMFastISel.cpp:1704: overrun-call: Overrunning callee's array of size 644 by passing argument "LC" (which evaluates to 644) in call to "ARMEmitLibcall".
# 1702|     assert(LC != RTLIB::UNKNOWN_LIBCALL && "Unsupported SDIV!");
# 1703|   
# 1704|->   return ARMEmitLibcall(I, LC);
# 1705|   }
# 1706|   

Error: OVERRUN (CWE-119):
llvm-17.0.6.src/lib/Target/ARM/ARMFastISel.cpp:1720: assignment: Assigning: "LC" = "UNKNOWN_LIBCALL".
llvm-17.0.6.src/lib/Target/ARM/ARMFastISel.cpp:1733: overrun-call: Overrunning callee's array of size 644 by passing argument "LC" (which evaluates to 644) in call to "ARMEmitLibcall".
# 1731|     assert(LC != RTLIB::UNKNOWN_LIBCALL && "Unsupported SREM!");
# 1732|   
# 1733|->   return ARMEmitLibcall(I, LC);
# 1734|   }
# 1735|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMFrameLowering.cpp:169: constructor_uses_global_object: The constructor of global object "SpillAlignedNEONRegs" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SpillAlignedNEONRegs" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  167|   
#  168|   static cl::opt<bool>
#  169|-> SpillAlignedNEONRegs("align-neon-spills", cl::Hidden, cl::init(true),
#  170|                        cl::desc("Align ARM NEON spills in prolog and epilog"));
#  171|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMHazardRecognizer.cpp:23: constructor_uses_global_object: The constructor of global object "DataBankMask" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DataBankMask" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   21|   using namespace llvm;
#   22|   
#   23|-> static cl::opt<int> DataBankMask("arm-data-bank-mask", cl::init(-1),
#   24|                                    cl::Hidden);
#   25|   static cl::opt<bool> AssumeITCMConflict("arm-assume-itcm-bankconflict",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMHazardRecognizer.cpp:25: constructor_uses_global_object: The constructor of global object "AssumeITCMConflict" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AssumeITCMConflict" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   23|   static cl::opt<int> DataBankMask("arm-data-bank-mask", cl::init(-1),
#   24|                                    cl::Hidden);
#   25|-> static cl::opt<bool> AssumeITCMConflict("arm-assume-itcm-bankconflict",
#   26|                                           cl::init(false), cl::Hidden);
#   27|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMISelDAGToDAG.cpp:46: constructor_uses_global_object: The constructor of global object "DisableShifterOp" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableShifterOp" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   44|   
#   45|   static cl::opt<bool>
#   46|-> DisableShifterOp("disable-shifter-op", cl::Hidden,
#   47|     cl::desc("Disable isel of shifter-op"),
#   48|     cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMISelLowering.cpp:131: constructor_uses_global_object: The constructor of global object "ARMInterworking" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ARMInterworking" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  129|   
#  130|   static cl::opt<bool>
#  131|-> ARMInterworking("arm-interworking", cl::Hidden,
#  132|     cl::desc("Enable / disable ARM interworking (for debugging only)"),
#  133|     cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMISelLowering.cpp:135: constructor_uses_global_object: The constructor of global object "EnableConstpoolPromotion" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableConstpoolPromotion" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  133|     cl::init(true));
#  134|   
#  135|-> static cl::opt<bool> EnableConstpoolPromotion(
#  136|       "arm-promote-constant", cl::Hidden,
#  137|       cl::desc("Enable / disable promotion of unnamed_addr constants into "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMISelLowering.cpp:140: constructor_uses_global_object: The constructor of global object "ConstpoolPromotionMaxSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ConstpoolPromotionMaxSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  138|                "constant pools"),
#  139|       cl::init(false)); // FIXME: set to true by default once PR32780 is fixed
#  140|-> static cl::opt<unsigned> ConstpoolPromotionMaxSize(
#  141|       "arm-promote-constant-max-size", cl::Hidden,
#  142|       cl::desc("Maximum size of constant to promote into a constant pool"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMISelLowering.cpp:144: constructor_uses_global_object: The constructor of global object "ConstpoolPromotionMaxTotal" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ConstpoolPromotionMaxTotal" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  142|       cl::desc("Maximum size of constant to promote into a constant pool"),
#  143|       cl::init(64));
#  144|-> static cl::opt<unsigned> ConstpoolPromotionMaxTotal(
#  145|       "arm-promote-constant-max-total", cl::Hidden,
#  146|       cl::desc("Maximum size of ALL constants to promote into a constant pool"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMISelLowering.cpp:150: constructor_uses_global_object: The constructor of global object "MVEMaxSupportedInterleaveFactor" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MVEMaxSupportedInterleaveFactor" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  148|   
#  149|   cl::opt<unsigned>
#  150|-> MVEMaxSupportedInterleaveFactor("mve-max-interleave-factor", cl::Hidden,
#  151|     cl::desc("Maximum interleave factor for MVE VLDn to generate."),
#  152|     cl::init(2));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMLoadStoreOptimizer.cpp:94: constructor_uses_global_object: The constructor of global object "AssumeMisalignedLoadStores" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AssumeMisalignedLoadStores" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   92|   /// \see mayCombineMisaligned()
#   93|   static cl::opt<bool>
#   94|-> AssumeMisalignedLoadStores("arm-assume-misaligned-load-store", cl::Hidden,
#   95|       cl::init(false), cl::desc("Be more conservative in ARM load/store opt"));
#   96|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMLoadStoreOptimizer.cpp:2196: constructor_uses_global_object: The constructor of global object "InstReorderLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "InstReorderLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
# 2194|   // Limit the number of instructions to be rescheduled.
# 2195|   // FIXME: tune this limit, and/or come up with some better heuristics.
# 2196|-> static cl::opt<unsigned> InstReorderLimit("arm-prera-ldst-opt-reorder-limit",
# 2197|                                             cl::init(8), cl::Hidden);
# 2198|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMLowOverheadLoops.cpp:80: constructor_uses_global_object: The constructor of global object "DisableTailPredication" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableTailPredication" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   78|   
#   79|   static cl::opt<bool>
#   80|-> DisableTailPredication("arm-loloops-disable-tailpred", cl::Hidden,
#   81|       cl::desc("Disable tail-predication in the ARM LowOverheadLoop pass"),
#   82|       cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMLowOverheadLoops.cpp:85: constructor_uses_global_object: The constructor of global object "DisableOmitDLS" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableOmitDLS" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   83|   
#   84|   static cl::opt<bool>
#   85|->     DisableOmitDLS("arm-disable-omit-dls", cl::Hidden,
#   86|                      cl::desc("Disable omitting 'dls lr, lr' instructions"),
#   87|                      cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMParallelDSP.cpp:45: constructor_uses_global_object: The constructor of global object "DisableParallelDSP" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableParallelDSP" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   43|   
#   44|   static cl::opt<bool>
#   45|-> DisableParallelDSP("disable-arm-parallel-dsp", cl::Hidden, cl::init(false),
#   46|                      cl::desc("Disable the ARM Parallel DSP pass"));
#   47|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMParallelDSP.cpp:49: constructor_uses_global_object: The constructor of global object "NumLoadLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "NumLoadLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   47|   
#   48|   static cl::opt<unsigned>
#   49|-> NumLoadLimit("arm-parallel-dsp-load-limit", cl::Hidden, cl::init(16),
#   50|                cl::desc("Limit the number of loads analysed"));
#   51|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMSelectionDAGInfo.cpp:22: constructor_uses_global_object: The constructor of global object "EnableMemtransferTPLoop" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMemtransferTPLoop" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   20|   #define DEBUG_TYPE "arm-selectiondag-info"
#   21|   
#   22|-> cl::opt<TPLoop::MemTransfer> EnableMemtransferTPLoop(
#   23|       "arm-memtransfer-tploop", cl::Hidden,
#   24|       cl::desc("Control conversion of memcpy to "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMSubtarget.cpp:50: constructor_uses_global_object: The constructor of global object "UseFusedMulOps" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseFusedMulOps" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   48|   
#   49|   static cl::opt<bool>
#   50|-> UseFusedMulOps("arm-use-mulops",
#   51|                  cl::init(true), cl::Hidden);
#   52|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMSubtarget.cpp:59: constructor_uses_global_object: The constructor of global object "IT" itself makes use of global object "llvm::cl::AllSubCommands" defined in another compilation unit.  The order of construction is unspecified, so "IT" might be created before "llvm::cl::AllSubCommands" is available.
#   57|   
#   58|   static cl::opt<ITMode>
#   59|->     IT(cl::desc("IT block support"), cl::Hidden, cl::init(DefaultIT),
#   60|          cl::values(clEnumValN(DefaultIT, "arm-default-it",
#   61|                                "Generate any type of IT block"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMSubtarget.cpp:68: constructor_uses_global_object: The constructor of global object "ForceFastISel" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForceFastISel" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   66|   /// currently supported (for testing only).
#   67|   static cl::opt<bool>
#   68|-> ForceFastISel("arm-force-fast-isel",
#   69|                  cl::init(false), cl::Hidden);
#   70|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMSubtarget.cpp:71: constructor_uses_global_object: The constructor of global object "EnableSubRegLiveness" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSubRegLiveness" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   69|                  cl::init(false), cl::Hidden);
#   70|   
#   71|-> static cl::opt<bool> EnableSubRegLiveness("arm-enable-subreg-liveness",
#   72|                                             cl::init(false), cl::Hidden);
#   73|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMTargetMachine.cpp:62: constructor_uses_global_object: The constructor of global object "DisableA15SDOptimization" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableA15SDOptimization" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   60|   
#   61|   static cl::opt<bool>
#   62|-> DisableA15SDOptimization("disable-a15-sd-optimization", cl::Hidden,
#   63|                      cl::desc("Inhibit optimization of S->D register accesses on A15"),
#   64|                      cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMTargetMachine.cpp:67: constructor_uses_global_object: The constructor of global object "EnableAtomicTidy" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableAtomicTidy" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   65|   
#   66|   static cl::opt<bool>
#   67|-> EnableAtomicTidy("arm-atomic-cfg-tidy", cl::Hidden,
#   68|                    cl::desc("Run SimplifyCFG after expanding atomic operations"
#   69|                             " to make use of cmpxchg flow-based information"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMTargetMachine.cpp:73: constructor_uses_global_object: The constructor of global object "EnableARMLoadStoreOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableARMLoadStoreOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   71|   
#   72|   static cl::opt<bool>
#   73|-> EnableARMLoadStoreOpt("arm-load-store-opt", cl::Hidden,
#   74|                         cl::desc("Enable ARM load/store optimization pass"),
#   75|                         cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMTargetMachine.cpp:79: constructor_uses_global_object: The constructor of global object "EnableGlobalMerge" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableGlobalMerge" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   77|   // FIXME: Unify control over GlobalMerge.
#   78|   static cl::opt<cl::boolOrDefault>
#   79|-> EnableGlobalMerge("arm-global-merge", cl::Hidden,
#   80|                     cl::desc("Enable the global merge pass"));
#   81|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMTargetTransformInfo.cpp:47: constructor_uses_global_object: The constructor of global object "EnableMaskedLoadStores" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMaskedLoadStores" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   45|   #define DEBUG_TYPE "armtti"
#   46|   
#   47|-> static cl::opt<bool> EnableMaskedLoadStores(
#   48|     "enable-arm-maskedldst", cl::Hidden, cl::init(true),
#   49|     cl::desc("Enable the generation of masked loads and stores"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMTargetTransformInfo.cpp:51: constructor_uses_global_object: The constructor of global object "DisableLowOverheadLoops" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableLowOverheadLoops" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   49|     cl::desc("Enable the generation of masked loads and stores"));
#   50|   
#   51|-> static cl::opt<bool> DisableLowOverheadLoops(
#   52|     "disable-arm-loloops", cl::Hidden, cl::init(false),
#   53|     cl::desc("Disable the generation of low-overhead loops"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/ARMTargetTransformInfo.cpp:56: constructor_uses_global_object: The constructor of global object "AllowWLSLoops" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AllowWLSLoops" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   54|   
#   55|   static cl::opt<bool>
#   56|->     AllowWLSLoops("allow-arm-wlsloops", cl::Hidden, cl::init(true),
#   57|                     cl::desc("Enable the generation of WLS loops"));
#   58|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:85: constructor_uses_global_object: The constructor of global object "<unnamed>::ImplicitItMode" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ImplicitItMode" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   83|   enum class ImplicitItModeTy { Always, Never, ARMOnly, ThumbOnly };
#   84|   
#   85|-> static cl::opt<ImplicitItModeTy> ImplicitItMode(
#   86|       "arm-implicit-it", cl::init(ImplicitItModeTy::ARMOnly),
#   87|       cl::desc("Allow conditional instructions outdside of an IT block"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:97: constructor_uses_global_object: The constructor of global object "<unnamed>::AddBuildAttributes" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::AddBuildAttributes" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   95|                             "Warn in ARM, emit implicit ITs in Thumb")));
#   96|   
#   97|-> static cl::opt<bool> AddBuildAttributes("arm-add-build-attributes",
#   98|                                           cl::init(false));
#   99|   

Error: OVERRUN (CWE-119):
llvm-17.0.6.src/lib/Target/ARM/MCTargetDesc/ARMAsmBackend.cpp:191: cond_between: Checking "Kind >= FirstLiteralRelocationKind" implies that "Kind" is between 0 and 255 (inclusive) on the false branch.
llvm-17.0.6.src/lib/Target/ARM/MCTargetDesc/ARMAsmBackend.cpp:194: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 128 and 255 (inclusive) on the false branch.
llvm-17.0.6.src/lib/Target/ARM/MCTargetDesc/ARMAsmBackend.cpp:199: illegal_address: "((this->Endian == little) ? InfosLE : InfosBE)[Kind - FirstTargetFixupKind]" evaluates to an address that is at byte offset 3048 of an array of 984 bytes.
#  197|     assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&
#  198|            "Invalid kind!");
#  199|->   return (Endian == support::little ? InfosLE
#  200|                                       : InfosBE)[Kind - FirstTargetFixupKind];
#  201|   }

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Target/ARM/MCTargetDesc/ARMAsmBackend.cpp:1091: var_decl: Declaring variable "FullSizeBytes" without initializer.
llvm-17.0.6.src/lib/Target/ARM/MCTargetDesc/ARMAsmBackend.cpp:1102: uninit_use: Using uninitialized value "FullSizeBytes".
# 1100|     // bitfields above.
# 1101|     for (unsigned i = 0; i != NumBytes; ++i) {
# 1102|->     unsigned Idx = Endian == support::little ? i : (FullSizeBytes - 1 - i);
# 1103|       Data[Offset + Idx] |= uint8_t((Value >> (i * 8)) & 0xff);
# 1104|     }

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/MLxExpansionPass.cpp:32: constructor_uses_global_object: The constructor of global object "ForceExapnd" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForceExapnd" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   30|   
#   31|   static cl::opt<bool>
#   32|-> ForceExapnd("expand-all-fp-mlx", cl::init(false), cl::Hidden);
#   33|   static cl::opt<unsigned>
#   34|   ExpandLimit("expand-limit", cl::init(~0U), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/MLxExpansionPass.cpp:34: constructor_uses_global_object: The constructor of global object "ExpandLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ExpandLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   32|   ForceExapnd("expand-all-fp-mlx", cl::init(false), cl::Hidden);
#   33|   static cl::opt<unsigned>
#   34|-> ExpandLimit("expand-limit", cl::init(~0U), cl::Hidden);
#   35|   
#   36|   STATISTIC(NumExpand, "Number of fp MLA / MLS instructions expanded");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/MVEGatherScatterLowering.cpp:50: constructor_uses_global_object: The constructor of global object "EnableMaskedGatherScatters" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMaskedGatherScatters" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   48|   #define DEBUG_TYPE "arm-mve-gather-scatter-lowering"
#   49|   
#   50|-> cl::opt<bool> EnableMaskedGatherScatters(
#   51|       "enable-arm-maskedgatscat", cl::Hidden, cl::init(true),
#   52|       cl::desc("Enable the generation of masked gathers and scatters"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/MVELaneInterleavingPass.cpp:79: constructor_uses_global_object: The constructor of global object "EnableInterleave" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableInterleave" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   77|   #define DEBUG_TYPE "mve-laneinterleave"
#   78|   
#   79|-> cl::opt<bool> EnableInterleave(
#   80|       "enable-mve-interleave", cl::Hidden, cl::init(true),
#   81|       cl::desc("Enable interleave MVE vector operation lowering"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/MVETPAndVPTOptimisationsPass.cpp:39: constructor_uses_global_object: The constructor of global object "MergeEndDec" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MergeEndDec" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   37|   
#   38|   static cl::opt<bool>
#   39|-> MergeEndDec("arm-enable-merge-loopenddec", cl::Hidden,
#   40|       cl::desc("Enable merging Loop End and Dec instructions."),
#   41|       cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/MVETPAndVPTOptimisationsPass.cpp:44: constructor_uses_global_object: The constructor of global object "SetLRPredicate" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SetLRPredicate" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   42|   
#   43|   static cl::opt<bool>
#   44|-> SetLRPredicate("arm-set-lr-predicate", cl::Hidden,
#   45|       cl::desc("Enable setting lr as a predicate in tail predication regions."),
#   46|       cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/MVETailPredication.cpp:60: constructor_uses_global_object: The constructor of global object "EnableTailPredication" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableTailPredication" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   58|   #define DESC "Transform predicated vector loops to use MVE tail predication"
#   59|   
#   60|-> cl::opt<TailPredication::Mode> EnableTailPredication(
#   61|      "tail-predication", cl::desc("MVE tail-predication pass options"),
#   62|      cl::init(TailPredication::Enabled),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/Thumb2InstrInfo.cpp:39: constructor_uses_global_object: The constructor of global object "OldT2IfCvt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OldT2IfCvt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   37|   
#   38|   static cl::opt<bool>
#   39|-> OldT2IfCvt("old-thumb2-ifcvt", cl::Hidden,
#   40|              cl::desc("Use old-style Thumb2 if-conversion heuristics"),
#   41|              cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/Thumb2InstrInfo.cpp:44: constructor_uses_global_object: The constructor of global object "PreferNoCSEL" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PreferNoCSEL" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   42|   
#   43|   static cl::opt<bool>
#   44|-> PreferNoCSEL("prefer-no-csel", cl::Hidden,
#   45|                cl::desc("Prefer predicated Move to CSEL"),
#   46|                cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/Thumb2SizeReduction.cpp:54: constructor_uses_global_object: The constructor of global object "ReduceLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ReduceLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|   STATISTIC(NumLdSts,    "Number of 32-bit load / store reduced to 16-bit ones");
#   53|   
#   54|-> static cl::opt<int> ReduceLimit("t2-reduce-limit",
#   55|                                   cl::init(-1), cl::Hidden);
#   56|   static cl::opt<int> ReduceLimit2Addr("t2-reduce-limit2",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/Thumb2SizeReduction.cpp:56: constructor_uses_global_object: The constructor of global object "ReduceLimit2Addr" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ReduceLimit2Addr" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   54|   static cl::opt<int> ReduceLimit("t2-reduce-limit",
#   55|                                   cl::init(-1), cl::Hidden);
#   56|-> static cl::opt<int> ReduceLimit2Addr("t2-reduce-limit2",
#   57|                                        cl::init(-1), cl::Hidden);
#   58|   static cl::opt<int> ReduceLimitLdSt("t2-reduce-limit3",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/ARM/Thumb2SizeReduction.cpp:58: constructor_uses_global_object: The constructor of global object "ReduceLimitLdSt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ReduceLimitLdSt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   56|   static cl::opt<int> ReduceLimit2Addr("t2-reduce-limit2",
#   57|                                        cl::init(-1), cl::Hidden);
#   58|-> static cl::opt<int> ReduceLimitLdSt("t2-reduce-limit3",
#   59|                                        cl::init(-1), cl::Hidden);
#   60|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/BPF/BPFAdjustOpt.cpp:33: constructor_uses_global_object: The constructor of global object "DisableBPFserializeICMP" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableBPFserializeICMP" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   31|   
#   32|   static cl::opt<bool>
#   33|->     DisableBPFserializeICMP("bpf-disable-serialize-icmp", cl::Hidden,
#   34|                               cl::desc("BPF: Disable Serializing ICMP insns."),
#   35|                               cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/BPF/BPFAdjustOpt.cpp:37: constructor_uses_global_object: The constructor of global object "DisableBPFavoidSpeculation" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableBPFavoidSpeculation" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   35|                               cl::init(false));
#   36|   
#   37|-> static cl::opt<bool> DisableBPFavoidSpeculation(
#   38|       "bpf-disable-avoid-speculation", cl::Hidden,
#   39|       cl::desc("BPF: Disable Avoiding Speculative Code Motion."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/BPF/BPFISelLowering.cpp:34: constructor_uses_global_object: The constructor of global object "BPFExpandMemcpyInOrder" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BPFExpandMemcpyInOrder" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   32|   #define DEBUG_TYPE "bpf-lower"
#   33|   
#   34|-> static cl::opt<bool> BPFExpandMemcpyInOrder("bpf-expand-memcpy-in-order",
#   35|     cl::Hidden, cl::init(false),
#   36|     cl::desc("Expand memcpy into load/store pairs in order"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/BPF/BPFRegisterInfo.cpp:31: constructor_uses_global_object: The constructor of global object "BPFStackSizeOption" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BPFStackSizeOption" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   29|   
#   30|   static cl::opt<int>
#   31|->     BPFStackSizeOption("bpf-stack-size",
#   32|                          cl::desc("Specify the BPF stack size limit"),
#   33|                          cl::init(512));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/BPF/BPFTargetMachine.cpp:33: constructor_uses_global_object: The constructor of global object "DisableMIPeephole" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableMIPeephole" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   31|   
#   32|   static cl::
#   33|-> opt<bool> DisableMIPeephole("disable-bpf-peephole", cl::Hidden,
#   34|                               cl::desc("Disable machine peepholes for BPF"));
#   35|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MCTargetDesc/MipsABIInfo.cpp:22: constructor_uses_global_object: The constructor of global object "EmitJalrReloc" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EmitJalrReloc" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   20|   //       and libLLVMMipsCodeGen
#   21|   cl::opt<bool>
#   22|-> EmitJalrReloc("mips-jalr-reloc", cl::Hidden,
#   23|                 cl::desc("MIPS: Emit R_{MICRO}MIPS_JALR relocation with jalr"),
#   24|                 cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MCTargetDesc/MipsTargetStreamer.cpp:34: constructor_uses_global_object: The constructor of global object "<unnamed>::RoundSectionSizes" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::RoundSectionSizes" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   32|   
#   33|   namespace {
#   34|-> static cl::opt<bool> RoundSectionSizes(
#   35|       "mips-round-section-sizes", cl::init(false),
#   36|       cl::desc("Round section sizes up to the section alignment"), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/Mips16ISelLowering.cpp:26: constructor_uses_global_object: The constructor of global object "DontExpandCondPseudos16" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DontExpandCondPseudos16" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   24|   #define DEBUG_TYPE "mips-lower"
#   25|   
#   26|-> static cl::opt<bool> DontExpandCondPseudos16(
#   27|     "mips16-dont-expand-cond-pseudo",
#   28|     cl::init(false),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsBranchExpansion.cpp:114: constructor_uses_global_object: The constructor of global object "SkipLongBranch" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SkipLongBranch" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  112|   
#  113|   static cl::opt<bool>
#  114|->     SkipLongBranch("skip-mips-long-branch", cl::init(false),
#  115|                      cl::desc("MIPS: Skip branch expansion pass."), cl::Hidden);
#  116|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsBranchExpansion.cpp:118: constructor_uses_global_object: The constructor of global object "ForceLongBranch" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForceLongBranch" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  116|   
#  117|   static cl::opt<bool>
#  118|->     ForceLongBranch("force-mips-long-branch", cl::init(false),
#  119|                       cl::desc("MIPS: Expand all branches to long format."),
#  120|                       cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsConstantIslandPass.cpp:69: constructor_uses_global_object: The constructor of global object "AlignConstantIslands" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AlignConstantIslands" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   67|   // FIXME: This option should be removed once it has received sufficient testing.
#   68|   static cl::opt<bool>
#   69|-> AlignConstantIslands("mips-align-constant-islands", cl::Hidden, cl::init(true),
#   70|             cl::desc("Align constant islands in code"));
#   71|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsConstantIslandPass.cpp:74: constructor_uses_global_object: The constructor of global object "ConstantIslandsSmallOffset" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ConstantIslandsSmallOffset" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   72|   // Rather than do make check tests with huge amounts of code, we force
#   73|   // the test to use this amount.
#   74|-> static cl::opt<int> ConstantIslandsSmallOffset(
#   75|     "mips-constant-islands-small-offset",
#   76|     cl::init(0),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsConstantIslandPass.cpp:82: constructor_uses_global_object: The constructor of global object "NoLoadRelaxation" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "NoLoadRelaxation" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   80|   // For testing purposes we tell it to not use relaxed load forms so that it
#   81|   // will split blocks.
#   82|-> static cl::opt<bool> NoLoadRelaxation(
#   83|     "mips-constant-islands-no-load-relaxation",
#   84|     cl::init(false),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsDelaySlotFiller.cpp:59: constructor_uses_global_object: The constructor of global object "DisableDelaySlotFiller" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableDelaySlotFiller" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   57|                          " are not NOP.");
#   58|   
#   59|-> static cl::opt<bool> DisableDelaySlotFiller(
#   60|     "disable-mips-delay-filler",
#   61|     cl::init(false),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsDelaySlotFiller.cpp:65: constructor_uses_global_object: The constructor of global object "DisableForwardSearch" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableForwardSearch" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|     cl::Hidden);
#   64|   
#   65|-> static cl::opt<bool> DisableForwardSearch(
#   66|     "disable-mips-df-forward-search",
#   67|     cl::init(true),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsDelaySlotFiller.cpp:71: constructor_uses_global_object: The constructor of global object "DisableSuccBBSearch" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSuccBBSearch" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   69|     cl::Hidden);
#   70|   
#   71|-> static cl::opt<bool> DisableSuccBBSearch(
#   72|     "disable-mips-df-succbb-search",
#   73|     cl::init(true),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsDelaySlotFiller.cpp:77: constructor_uses_global_object: The constructor of global object "DisableBackwardSearch" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableBackwardSearch" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   75|     cl::Hidden);
#   76|   
#   77|-> static cl::opt<bool> DisableBackwardSearch(
#   78|     "disable-mips-df-backward-search",
#   79|     cl::init(false),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsDelaySlotFiller.cpp:93: constructor_uses_global_object: The constructor of global object "MipsCompactBranchPolicy" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MipsCompactBranchPolicy" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   91|   };
#   92|   
#   93|-> static cl::opt<CompactBranchPolicy> MipsCompactBranchPolicy(
#   94|       "mips-compact-branches", cl::Optional, cl::init(CB_Optimal),
#   95|       cl::desc("MIPS Specific: Compact branch policy."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsISelLowering.cpp:86: constructor_uses_global_object: The constructor of global object "NoZeroDivCheck" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "NoZeroDivCheck" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   84|   
#   85|   static cl::opt<bool>
#   86|-> NoZeroDivCheck("mno-check-zero-division", cl::Hidden,
#   87|                  cl::desc("MIPS: Don't trap on integer division by zero."),
#   88|                  cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsMachineFunction.cpp:22: constructor_uses_global_object: The constructor of global object "FixGlobalBaseReg" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FixGlobalBaseReg" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   20|   
#   21|   static cl::opt<bool>
#   22|-> FixGlobalBaseReg("mips-fix-global-base-reg", cl::Hidden, cl::init(true),
#   23|                    cl::desc("Always use $gp as the global base register."));
#   24|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsOptimizePICCall.cpp:46: constructor_uses_global_object: The constructor of global object "LoadTargetFromGOT" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LoadTargetFromGOT" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   44|   #define DEBUG_TYPE "optimize-mips-pic-call"
#   45|   
#   46|-> static cl::opt<bool> LoadTargetFromGOT("mips-load-target-from-got",
#   47|                                          cl::init(true),
#   48|                                          cl::desc("Load target address from GOT"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsOptimizePICCall.cpp:51: constructor_uses_global_object: The constructor of global object "EraseGPOpnd" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EraseGPOpnd" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   49|                                          cl::Hidden);
#   50|   
#   51|-> static cl::opt<bool> EraseGPOpnd("mips-erase-gp-opnd",
#   52|                                    cl::init(true), cl::desc("Erase GP Operand"),
#   53|                                    cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsOs16.cpp:25: constructor_uses_global_object: The constructor of global object "Mips32FunctionMask[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Mips32FunctionMask[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   23|   #define DEBUG_TYPE "mips-os16"
#   24|   
#   25|-> static cl::opt<std::string> Mips32FunctionMask(
#   26|     "mips32-function-mask",
#   27|     cl::init(""),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsSEISelLowering.cpp:56: constructor_uses_global_object: The constructor of global object "UseMipsTailCalls" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseMipsTailCalls" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   54|   
#   55|   static cl::opt<bool>
#   56|-> UseMipsTailCalls("mips-tail-calls", cl::Hidden,
#   57|                       cl::desc("MIPS: permit tail calls."), cl::init(false));
#   58|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsSEISelLowering.cpp:59: constructor_uses_global_object: The constructor of global object "NoDPLoadStore" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "NoDPLoadStore" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   57|                       cl::desc("MIPS: permit tail calls."), cl::init(false));
#   58|   
#   59|-> static cl::opt<bool> NoDPLoadStore("mno-ldc1-sdc1", cl::init(false),
#   60|                                      cl::desc("Expand double precision loads and "
#   61|                                               "stores to their single precision "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsSubtarget.cpp:39: constructor_uses_global_object: The constructor of global object "Mixed16_32" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Mixed16_32" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   37|   //
#   38|   static cl::opt<bool>
#   39|->     Mixed16_32("mips-mixed-16-32", cl::init(false),
#   40|                  cl::desc("Allow for a mixture of Mips16 "
#   41|                           "and Mips32 code in a single output file"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsSubtarget.cpp:44: constructor_uses_global_object: The constructor of global object "Mips_Os16" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Mips_Os16" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   42|                  cl::Hidden);
#   43|   
#   44|-> static cl::opt<bool> Mips_Os16("mips-os16", cl::init(false),
#   45|                                  cl::desc("Compile all functions that don't use "
#   46|                                           "floating point as Mips 16"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsSubtarget.cpp:49: constructor_uses_global_object: The constructor of global object "Mips16HardFloat" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Mips16HardFloat" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   47|                                  cl::Hidden);
#   48|   
#   49|-> static cl::opt<bool> Mips16HardFloat("mips16-hard-float", cl::NotHidden,
#   50|                                        cl::desc("Enable mips16 hard float."),
#   51|                                        cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsSubtarget.cpp:54: constructor_uses_global_object: The constructor of global object "Mips16ConstantIslands" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Mips16ConstantIslands" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|   
#   53|   static cl::opt<bool>
#   54|->     Mips16ConstantIslands("mips16-constant-islands", cl::NotHidden,
#   55|                             cl::desc("Enable mips16 constant islands."),
#   56|                             cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsSubtarget.cpp:59: constructor_uses_global_object: The constructor of global object "GPOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "GPOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   57|   
#   58|   static cl::opt<bool>
#   59|->     GPOpt("mgpopt", cl::Hidden,
#   60|             cl::desc("Enable gp-relative addressing of mips small data items"));
#   61|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsTargetMachine.cpp:52: constructor_uses_global_object: The constructor of global object "EnableMulMulFix" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableMulMulFix" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   50|   
#   51|   static cl::opt<bool>
#   52|->     EnableMulMulFix("mfix4300", cl::init(false),
#   53|                       cl::desc("Enable the VR4300 mulmul bug fix."), cl::Hidden);
#   54|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsTargetObjectFile.cpp:24: constructor_uses_global_object: The constructor of global object "SSThreshold" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SSThreshold" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   22|   
#   23|   static cl::opt<unsigned>
#   24|-> SSThreshold("mips-ssection-threshold", cl::Hidden,
#   25|               cl::desc("Small data and bss section threshold size (default=8)"),
#   26|               cl::init(8));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsTargetObjectFile.cpp:29: constructor_uses_global_object: The constructor of global object "LocalSData" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LocalSData" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   27|   
#   28|   static cl::opt<bool>
#   29|-> LocalSData("mlocal-sdata", cl::Hidden,
#   30|              cl::desc("MIPS: Use gp_rel for object-local data."),
#   31|              cl::init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsTargetObjectFile.cpp:34: constructor_uses_global_object: The constructor of global object "ExternSData" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ExternSData" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   32|   
#   33|   static cl::opt<bool>
#   34|-> ExternSData("mextern-sdata", cl::Hidden,
#   35|               cl::desc("MIPS: Use gp_rel for data that is not defined by the "
#   36|                        "current object."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/Mips/MipsTargetObjectFile.cpp:40: constructor_uses_global_object: The constructor of global object "EmbeddedData" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EmbeddedData" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   38|   
#   39|   static cl::opt<bool>
#   40|-> EmbeddedData("membedded-data", cl::Hidden,
#   41|                cl::desc("MIPS: Try to allocate variables in the following"
#   42|                         " sections if possible: .rodata, .sdata, .data ."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:96: constructor_uses_global_object: The constructor of global object "LowerCtorDtor" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LowerCtorDtor" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   94|   
#   95|   static cl::opt<bool>
#   96|->     LowerCtorDtor("nvptx-lower-global-ctor-dtor",
#   97|                     cl::desc("Lower GPU ctor / dtors to globals on the device."),
#   98|                     cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/NVPTX/NVPTXCtorDtorLowering.cpp:31: constructor_uses_global_object: The constructor of global object "GlobalStr[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "GlobalStr[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   29|   
#   30|   static cl::opt<std::string>
#   31|->     GlobalStr("nvptx-lower-global-ctor-dtor-id",
#   32|                 cl::desc("Override unique ID of ctor/dtor globals."),
#   33|                 cl::init(""), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/NVPTX/NVPTXISelLowering.cpp:71: constructor_uses_global_object: The constructor of global object "sched4reg" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "sched4reg" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   69|   static std::atomic<unsigned> GlobalUniqueCallSite;
#   70|   
#   71|-> static cl::opt<bool> sched4reg(
#   72|       "nvptx-sched4reg",
#   73|       cl::desc("NVPTX Specific: schedule for register pressue"), cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/NVPTX/NVPTXISelLowering.cpp:75: constructor_uses_global_object: The constructor of global object "FMAContractLevelOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FMAContractLevelOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   73|       cl::desc("NVPTX Specific: schedule for register pressue"), cl::init(false));
#   74|   
#   75|-> static cl::opt<unsigned> FMAContractLevelOpt(
#   76|       "nvptx-fma-level", cl::Hidden,
#   77|       cl::desc("NVPTX Specific: FMA contraction (0: don't do it"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/NVPTX/NVPTXISelLowering.cpp:81: constructor_uses_global_object: The constructor of global object "UsePrecDivF32" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UsePrecDivF32" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   79|       cl::init(2));
#   80|   
#   81|-> static cl::opt<int> UsePrecDivF32(
#   82|       "nvptx-prec-divf32", cl::Hidden,
#   83|       cl::desc("NVPTX Specifies: 0 use div.approx, 1 use div.full, 2 use"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/NVPTX/NVPTXISelLowering.cpp:87: constructor_uses_global_object: The constructor of global object "UsePrecSqrtF32" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UsePrecSqrtF32" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   85|       cl::init(2));
#   86|   
#   87|-> static cl::opt<bool> UsePrecSqrtF32(
#   88|       "nvptx-prec-sqrtf32", cl::Hidden,
#   89|       cl::desc("NVPTX Specific: 0 use sqrt.approx, 1 use sqrt.rn."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/NVPTX/NVPTXISelLowering.cpp:92: constructor_uses_global_object: The constructor of global object "ForceMinByValParamAlign" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForceMinByValParamAlign" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   90|       cl::init(true));
#   91|   
#   92|-> static cl::opt<bool> ForceMinByValParamAlign(
#   93|       "nvptx-force-min-byval-param-align", cl::Hidden,
#   94|       cl::desc("NVPTX Specific: force 4-byte minimal alignment for byval"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/NVPTX/NVPTXSubtarget.cpp:26: constructor_uses_global_object: The constructor of global object "NoF16Math" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "NoF16Math" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   24|   
#   25|   static cl::opt<bool>
#   26|->     NoF16Math("nvptx-no-f16-math", cl::Hidden,
#   27|                 cl::desc("NVPTX Specific: Disable generation of f16 math ops."),
#   28|                 cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/NVPTX/NVPTXTargetMachine.cpp:48: constructor_uses_global_object: The constructor of global object "DisableLoadStoreVectorizer" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableLoadStoreVectorizer" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   46|   // encounter (or suspect) a bug.
#   47|   static cl::opt<bool>
#   48|->     DisableLoadStoreVectorizer("disable-nvptx-load-store-vectorizer",
#   49|                                  cl::desc("Disable load/store vectorizer"),
#   50|                                  cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/NVPTX/NVPTXTargetMachine.cpp:53: constructor_uses_global_object: The constructor of global object "DisableRequireStructuredCFG" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableRequireStructuredCFG" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   51|   
#   52|   // TODO: Remove this flag when we are confident with no regressions.
#   53|-> static cl::opt<bool> DisableRequireStructuredCFG(
#   54|       "disable-nvptx-require-structured-cfg",
#   55|       cl::desc("Transitional flag to turn off NVPTX's requirement on preserving "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/NVPTX/NVPTXTargetMachine.cpp:60: constructor_uses_global_object: The constructor of global object "UseShortPointersOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseShortPointersOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   58|       cl::init(false), cl::Hidden);
#   59|   
#   60|-> static cl::opt<bool> UseShortPointersOpt(
#   61|       "nvptx-short-ptr",
#   62|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/NVPTX/NVPTXTargetMachine.cpp:69: constructor_uses_global_object: The constructor of global object "ExitOnUnreachable" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ExitOnUnreachable" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   67|   // makes it into the LLVM-17 release.
#   68|   static cl::opt<bool>
#   69|->     ExitOnUnreachable("nvptx-exit-on-unreachable",
#   70|                         cl::desc("Lower 'unreachable' as 'exit' instruction."),
#   71|                         cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/NVPTX/NVVMIntrRange.cpp:30: constructor_uses_global_object: The constructor of global object "NVVMIntrRangeSM" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "NVVMIntrRangeSM" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   28|   
#   29|   // Add !range metadata based on limits of given SM variant.
#   30|-> static cl::opt<unsigned> NVVMIntrRangeSM("nvvm-intr-range-sm", cl::init(20),
#   31|                                            cl::Hidden, cl::desc("SM variant"));
#   32|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/NVPTX/NVVMReflect.cpp:70: constructor_uses_global_object: The constructor of global object "NVVMReflectEnabled" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "NVVMReflectEnabled" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   68|   
#   69|   static cl::opt<bool>
#   70|-> NVVMReflectEnabled("nvvm-reflect-enable", cl::init(true), cl::Hidden,
#   71|                      cl::desc("NVVM reflection, enabled by default"));
#   72|   

Error: OVERRUN (CWE-119):
llvm-17.0.6.src/lib/Target/PowerPC/MCTargetDesc/PPCAsmBackend.cpp:127: cond_between: Checking "Kind >= FirstLiteralRelocationKind" implies that "Kind" is between 0 and 255 (inclusive) on the false branch.
llvm-17.0.6.src/lib/Target/PowerPC/MCTargetDesc/PPCAsmBackend.cpp:130: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 128 and 255 (inclusive) on the false branch.
llvm-17.0.6.src/lib/Target/PowerPC/MCTargetDesc/PPCAsmBackend.cpp:135: illegal_address: "((this->Endian == little) ? InfosLE : InfosBE)[Kind - FirstTargetFixupKind]" evaluates to an address that is at byte offset 3048 of an array of 264 bytes.
#  133|       assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&
#  134|              "Invalid kind!");
#  135|->     return (Endian == support::little
#  136|                   ? InfosLE
#  137|                   : InfosBE)[Kind - FirstTargetFixupKind];

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/MCTargetDesc/PPCInstPrinter.cpp:33: constructor_uses_global_object: The constructor of global object "FullRegNames" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FullRegNames" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   31|   // to the verbose-asm setting.
#   32|   static cl::opt<bool>
#   33|-> FullRegNames("ppc-asm-full-reg-names", cl::Hidden, cl::init(false),
#   34|                cl::desc("Use full register names when printing assembly"));
#   35|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/MCTargetDesc/PPCInstPrinter.cpp:38: constructor_uses_global_object: The constructor of global object "ShowVSRNumsAsVR" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ShowVSRNumsAsVR" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   36|   // Useful for testing purposes. Prints vs{31-63} as v{0-31} respectively.
#   37|   static cl::opt<bool>
#   38|-> ShowVSRNumsAsVR("ppc-vsr-nums-as-vr", cl::Hidden, cl::init(false),
#   39|                cl::desc("Prints full register names with vs{31-63} as v{0-31}"));
#   40|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/MCTargetDesc/PPCInstPrinter.cpp:43: constructor_uses_global_object: The constructor of global object "FullRegNamesWithPercent" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FullRegNamesWithPercent" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   41|   // Prints full register names with percent symbol.
#   42|   static cl::opt<bool>
#   43|-> FullRegNamesWithPercent("ppc-reg-with-percent-prefix", cl::Hidden,
#   44|                           cl::init(false),
#   45|                           cl::desc("Prints full register names with percent"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCAsmPrinter.cpp:96: constructor_uses_global_object: The constructor of global object "EnableSSPCanaryBitInTB" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableSSPCanaryBitInTB" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   94|   STATISTIC(NumTOCEHBlock, "Number of EH Block TOC Entries.");
#   95|   
#   96|-> static cl::opt<bool> EnableSSPCanaryBitInTB(
#   97|       "aix-ssp-tb-bit", cl::init(false),
#   98|       cl::desc("Enable Passing SSP Canary info in Trackback on AIX"), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCExpandISEL.cpp:40: constructor_uses_global_object: The constructor of global object "GenerateISEL" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "GenerateISEL" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   38|   // ISEL instruction, else expand it.
#   39|   static cl::opt<bool>
#   40|->     GenerateISEL("ppc-gen-isel",
#   41|                    cl::desc("Enable generating the ISEL instruction."),
#   42|                    cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCFrameLowering.cpp:39: constructor_uses_global_object: The constructor of global object "EnablePEVectorSpills" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnablePEVectorSpills" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   37|   
#   38|   static cl::opt<bool>
#   39|-> EnablePEVectorSpills("ppc-enable-pe-vector-spills",
#   40|                        cl::desc("Enable spills in prologue to vector registers."),
#   41|                        cl::init(false), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:91: constructor_uses_global_object: The constructor of global object "ANDIGlueBug" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ANDIGlueBug" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   89|   
#   90|   // FIXME: Remove this once the bug has been fixed!
#   91|-> cl::opt<bool> ANDIGlueBug("expose-ppc-andi-glue-bug",
#   92|   cl::desc("expose the ANDI glue bug on PPC"), cl::Hidden);
#   93|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:95: constructor_uses_global_object: The constructor of global object "UseBitPermRewriter" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseBitPermRewriter" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   93|   
#   94|   static cl::opt<bool>
#   95|->     UseBitPermRewriter("ppc-use-bit-perm-rewriter", cl::init(true),
#   96|                          cl::desc("use aggressive ppc isel for bit permutations"),
#   97|                          cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:98: constructor_uses_global_object: The constructor of global object "BPermRewriterNoMasking" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BPermRewriterNoMasking" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   96|                          cl::desc("use aggressive ppc isel for bit permutations"),
#   97|                          cl::Hidden);
#   98|-> static cl::opt<bool> BPermRewriterNoMasking(
#   99|       "ppc-bit-perm-rewriter-stress-rotates",
#  100|       cl::desc("stress rotate selection in aggressive ppc isel for "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:104: constructor_uses_global_object: The constructor of global object "EnableBranchHint" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableBranchHint" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  102|       cl::Hidden);
#  103|   
#  104|-> static cl::opt<bool> EnableBranchHint(
#  105|     "ppc-use-branch-hint", cl::init(true),
#  106|       cl::desc("Enable static hinting of branches on ppc"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:109: constructor_uses_global_object: The constructor of global object "EnableTLSOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableTLSOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  107|       cl::Hidden);
#  108|   
#  109|-> static cl::opt<bool> EnableTLSOpt(
#  110|     "ppc-tls-opt", cl::init(true),
#  111|       cl::desc("Enable tls optimization peephole"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:118: constructor_uses_global_object: The constructor of global object "CmpInGPR" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CmpInGPR" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  116|     ICGPR_SextI32, ICGPR_ZextI64, ICGPR_SextI64 };
#  117|   
#  118|-> static cl::opt<ICmpInGPRType> CmpInGPR(
#  119|     "ppc-gpr-icmps", cl::Hidden, cl::init(ICGPR_All),
#  120|     cl::desc("Specify the types of comparisons to emit GPR-only code for."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCISelLowering.cpp:107: constructor_uses_global_object: The constructor of global object "DisablePPCPreinc" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisablePPCPreinc" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  105|   #define DEBUG_TYPE "ppc-lowering"
#  106|   
#  107|-> static cl::opt<bool> DisablePPCPreinc("disable-ppc-preinc",
#  108|   cl::desc("disable preincrement load/store generation on PPC"), cl::Hidden);
#  109|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCISelLowering.cpp:110: constructor_uses_global_object: The constructor of global object "DisableILPPref" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableILPPref" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  108|   cl::desc("disable preincrement load/store generation on PPC"), cl::Hidden);
#  109|   
#  110|-> static cl::opt<bool> DisableILPPref("disable-ppc-ilp-pref",
#  111|   cl::desc("disable setting the node scheduling preference to ILP on PPC"), cl::Hidden);
#  112|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCISelLowering.cpp:113: constructor_uses_global_object: The constructor of global object "DisablePPCUnaligned" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisablePPCUnaligned" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  111|   cl::desc("disable setting the node scheduling preference to ILP on PPC"), cl::Hidden);
#  112|   
#  113|-> static cl::opt<bool> DisablePPCUnaligned("disable-ppc-unaligned",
#  114|   cl::desc("disable unaligned load/store generation on PPC"), cl::Hidden);
#  115|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCISelLowering.cpp:116: constructor_uses_global_object: The constructor of global object "DisableSCO" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableSCO" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  114|   cl::desc("disable unaligned load/store generation on PPC"), cl::Hidden);
#  115|   
#  116|-> static cl::opt<bool> DisableSCO("disable-ppc-sco",
#  117|   cl::desc("disable sibling call optimization on ppc"), cl::Hidden);
#  118|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCISelLowering.cpp:119: constructor_uses_global_object: The constructor of global object "DisableInnermostLoopAlign32" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableInnermostLoopAlign32" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  117|   cl::desc("disable sibling call optimization on ppc"), cl::Hidden);
#  118|   
#  119|-> static cl::opt<bool> DisableInnermostLoopAlign32("disable-ppc-innermost-loop-align32",
#  120|   cl::desc("don't always align innermost loop to 32 bytes on ppc"), cl::Hidden);
#  121|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCISelLowering.cpp:122: constructor_uses_global_object: The constructor of global object "UseAbsoluteJumpTables" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseAbsoluteJumpTables" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  120|   cl::desc("don't always align innermost loop to 32 bytes on ppc"), cl::Hidden);
#  121|   
#  122|-> static cl::opt<bool> UseAbsoluteJumpTables("ppc-use-absolute-jumptables",
#  123|   cl::desc("use absolute jump tables on ppc"), cl::Hidden);
#  124|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCISelLowering.cpp:126: constructor_uses_global_object: The constructor of global object "DisablePerfectShuffle" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisablePerfectShuffle" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  124|   
#  125|   static cl::opt<bool>
#  126|->     DisablePerfectShuffle("ppc-disable-perfect-shuffle",
#  127|                             cl::desc("disable vector permute decomposition"),
#  128|                             cl::init(true), cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCISelLowering.cpp:130: constructor_uses_global_object: The constructor of global object "DisableAutoPairedVecSt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableAutoPairedVecSt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  128|                             cl::init(true), cl::Hidden);
#  129|   
#  130|-> cl::opt<bool> DisableAutoPairedVecSt(
#  131|       "disable-auto-paired-vec-st",
#  132|       cl::desc("disable automatically generated 32byte paired vector stores"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCInstrInfo.cpp:67: constructor_uses_global_object: The constructor of global object "DisableCTRLoopAnal" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableCTRLoopAnal" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   65|   
#   66|   static cl::
#   67|-> opt<bool> DisableCTRLoopAnal("disable-ppc-ctrloop-analysis", cl::Hidden,
#   68|               cl::desc("Disable analysis for CTR loops"));
#   69|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCInstrInfo.cpp:70: constructor_uses_global_object: The constructor of global object "DisableCmpOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisableCmpOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   68|               cl::desc("Disable analysis for CTR loops"));
#   69|   
#   70|-> static cl::opt<bool> DisableCmpOpt("disable-ppc-cmp-opt",
#   71|   cl::desc("Disable compare instruction optimization"), cl::Hidden);
#   72|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCInstrInfo.cpp:73: constructor_uses_global_object: The constructor of global object "VSXSelfCopyCrash" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VSXSelfCopyCrash" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   71|   cl::desc("Disable compare instruction optimization"), cl::Hidden);
#   72|   
#   73|-> static cl::opt<bool> VSXSelfCopyCrash("crash-on-ppc-vsx-self-copy",
#   74|   cl::desc("Causes the backend to crash instead of generating a nop VSX copy"),
#   75|   cl::Hidden);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCInstrInfo.cpp:78: constructor_uses_global_object: The constructor of global object "UseOldLatencyCalc" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseOldLatencyCalc" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   76|   
#   77|   static cl::opt<bool>
#   78|-> UseOldLatencyCalc("ppc-old-latency-calc", cl::Hidden,
#   79|     cl::desc("Use the old (incorrect) instruction latency calculation"));
#   80|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCInstrInfo.cpp:82: constructor_uses_global_object: The constructor of global object "FMARPFactor" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FMARPFactor" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   80|   
#   81|   static cl::opt<float>
#   82|->     FMARPFactor("ppc-fma-rp-factor", cl::Hidden, cl::init(1.5),
#   83|                   cl::desc("register pressure factor for the transformations."));
#   84|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCInstrInfo.cpp:85: constructor_uses_global_object: The constructor of global object "EnableFMARegPressureReduction" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableFMARegPressureReduction" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   83|                   cl::desc("register pressure factor for the transformations."));
#   84|   
#   85|-> static cl::opt<bool> EnableFMARegPressureReduction(
#   86|       "ppc-fma-rp-reduction", cl::Hidden, cl::init(true),
#   87|       cl::desc("enable register pressure reduce in machine combiner pass."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp:120: constructor_uses_global_object: The constructor of global object "MaxVarsPrep" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxVarsPrep" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  118|   
#  119|   static cl::opt<unsigned>
#  120|->     MaxVarsPrep("ppc-formprep-max-vars", cl::Hidden, cl::init(24),
#  121|                   cl::desc("Potential common base number threshold per function "
#  122|                            "for PPC loop prep"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp:124: constructor_uses_global_object: The constructor of global object "PreferUpdateForm" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PreferUpdateForm" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  122|                            "for PPC loop prep"));
#  123|   
#  124|-> static cl::opt<bool> PreferUpdateForm("ppc-formprep-prefer-update",
#  125|                                    cl::init(true), cl::Hidden,
#  126|     cl::desc("prefer update form when ds form is also a update form"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp:128: constructor_uses_global_object: The constructor of global object "EnableUpdateFormForNonConstInc" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableUpdateFormForNonConstInc" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  126|     cl::desc("prefer update form when ds form is also a update form"));
#  127|   
#  128|-> static cl::opt<bool> EnableUpdateFormForNonConstInc(
#  129|       "ppc-formprep-update-nonconst-inc", cl::init(false), cl::Hidden,
#  130|       cl::desc("prepare update form when the load/store increment is a loop "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-17.0.6.src/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp:133: error[too-many]: 3010 occurrences of constructor_uses_global_object exceeded the specified limit 1024
llvm-17.0.6.src/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp:133: note: 1986 occurrences of constructor_uses_global_object were discarded because of this

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp:300: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp:300: assign: Assigning: "MemoryOperand" = "llvm::X86II::getMemoryOperandNo(TSFlags)".
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp:307: overflow: The expression "MemoryOperand + AddrSegmentReg" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp:307: overflow_sink: "MemoryOperand + AddrSegmentReg", which might have overflowed, is passed to "Inst->getOperand(MemoryOperand + AddrSegmentReg)".
#  305|     if (MemoryOperand >= 0) {
#  306|       // Check for explicit segment override on memory operand.
#  307|->     SegmentReg = Inst.getOperand(MemoryOperand + X86::AddrSegmentReg).getReg();
#  308|     }
#  309|   

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp:300: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp:300: assign: Assigning: "MemoryOperand" = "llvm::X86II::getMemoryOperandNo(TSFlags)".
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp:302: overflow: The expression "MemoryOperand" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp:339: overflow: The expression "MemoryOperand + AddrBaseReg" is deemed overflowed because at least one of its arguments has overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp:339: cast_overflow: An assign that casts to a different type, which might trigger an overflow.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp:340: overflow_sink: "BaseRegNum", which might have underflowed, is passed to "Inst->getOperand(BaseRegNum)".
#  338|     if (MemoryOperand >= 0) {
#  339|       unsigned BaseRegNum = MemoryOperand + X86::AddrBaseReg;
#  340|->     unsigned BaseReg = Inst.getOperand(BaseRegNum).getReg();
#  341|       if (BaseReg == X86::ESP || BaseReg == X86::EBP)
#  342|         return X86::SS_Encoding;

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86InstPrinterCommon.cpp:390: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86InstPrinterCommon.cpp:390: assign: Assigning: "MemoryOperand" = "llvm::X86II::getMemoryOperandNo(TSFlags)".
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86InstPrinterCommon.cpp:395: overflow_sink: "MemoryOperand", which might be negative, is passed to "llvm::X86_MC::needsAddressSizeOverride(MI, STI, MemoryOperand, TSFlags)".
#  393|   
#  394|     // Address-Size override prefix
#  395|->   if (Flags & X86::IP_HAS_AD_SIZE &&
#  396|         !X86_MC::needsAddressSizeOverride(*MI, STI, MemoryOperand, TSFlags)) {
#  397|       if (STI.hasFeature(X86::Is16Bit) || STI.hasFeature(X86::Is64Bit))

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp:793: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp:793: assign: Assigning: "MemoryOperand" = "llvm::X86II::getMemoryOperandNo(TSFlags)".
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp:796: overflow: The expression "MemoryOperand" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp:797: overflow: The expression "MemoryOperand + AddrSegmentReg" is deemed overflowed because at least one of its arguments has overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp:797: overflow_sink: "MemoryOperand + AddrSegmentReg", which might have underflowed, is passed to "this->emitSegmentOverridePrefix(MemoryOperand + AddrSegmentReg, MI, CB)".
#  795|     if (MemoryOperand != -1) {
#  796|       MemoryOperand += CurOp;
#  797|->     emitSegmentOverridePrefix(MemoryOperand + X86::AddrSegmentReg, MI, CB);
#  798|     }
#  799|   

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp:793: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp:793: assign: Assigning: "MemoryOperand" = "llvm::X86II::getMemoryOperandNo(TSFlags)".
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp:796: overflow: The expression "MemoryOperand" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp:808: overflow_sink: "MemoryOperand", which might be negative, is passed to "llvm::X86_MC::needsAddressSizeOverride(MI, STI, MemoryOperand, TSFlags)".
#  806|   
#  807|     // Emit the address size opcode prefix as needed.
#  808|->   if (X86_MC::needsAddressSizeOverride(MI, STI, MemoryOperand, TSFlags) ||
#  809|         Flags & X86::IP_HAS_AD_SIZE)
#  810|       emitByte(0x67, CB);

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:647: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:647: assign: Assigning: "MemOpStart" = "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:652: overflow: The expression "MemOpStart + AddrSegmentReg" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:652: overflow_sink: "MemOpStart + AddrSegmentReg", which might be negative, is passed to "Inst->getOperand(MemOpStart + AddrSegmentReg)".
#  650|     MemOpStart += X86II::getOperandBias(MCID);
#  651|   
#  652|->   const MCOperand &SegReg = Inst.getOperand(MemOpStart + X86::AddrSegmentReg);
#  653|     const MCOperand &BaseReg = Inst.getOperand(MemOpStart + X86::AddrBaseReg);
#  654|     const MCOperand &IndexReg = Inst.getOperand(MemOpStart + X86::AddrIndexReg);

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:647: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:647: assign: Assigning: "MemOpStart" = "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:650: overflow: The expression "MemOpStart" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:653: overflow: The expression "MemOpStart + AddrBaseReg" is deemed overflowed because at least one of its arguments has overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:653: overflow_sink: "MemOpStart + AddrBaseReg", which might have underflowed, is passed to "Inst->getOperand(MemOpStart + AddrBaseReg)".
#  651|   
#  652|     const MCOperand &SegReg = Inst.getOperand(MemOpStart + X86::AddrSegmentReg);
#  653|->   const MCOperand &BaseReg = Inst.getOperand(MemOpStart + X86::AddrBaseReg);
#  654|     const MCOperand &IndexReg = Inst.getOperand(MemOpStart + X86::AddrIndexReg);
#  655|     const MCOperand &ScaleAmt = Inst.getOperand(MemOpStart + X86::AddrScaleAmt);

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:647: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:647: assign: Assigning: "MemOpStart" = "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:654: overflow: The expression "MemOpStart + AddrIndexReg" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:654: overflow_sink: "MemOpStart + AddrIndexReg", which might be negative, is passed to "Inst->getOperand(MemOpStart + AddrIndexReg)".
#  652|     const MCOperand &SegReg = Inst.getOperand(MemOpStart + X86::AddrSegmentReg);
#  653|     const MCOperand &BaseReg = Inst.getOperand(MemOpStart + X86::AddrBaseReg);
#  654|->   const MCOperand &IndexReg = Inst.getOperand(MemOpStart + X86::AddrIndexReg);
#  655|     const MCOperand &ScaleAmt = Inst.getOperand(MemOpStart + X86::AddrScaleAmt);
#  656|     const MCOperand &Disp = Inst.getOperand(MemOpStart + X86::AddrDisp);

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:647: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:647: assign: Assigning: "MemOpStart" = "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:655: overflow: The expression "MemOpStart + AddrScaleAmt" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:655: overflow_sink: "MemOpStart + AddrScaleAmt", which might be negative, is passed to "Inst->getOperand(MemOpStart + AddrScaleAmt)".
#  653|     const MCOperand &BaseReg = Inst.getOperand(MemOpStart + X86::AddrBaseReg);
#  654|     const MCOperand &IndexReg = Inst.getOperand(MemOpStart + X86::AddrIndexReg);
#  655|->   const MCOperand &ScaleAmt = Inst.getOperand(MemOpStart + X86::AddrScaleAmt);
#  656|     const MCOperand &Disp = Inst.getOperand(MemOpStart + X86::AddrDisp);
#  657|     if (SegReg.getReg() != 0 || IndexReg.getReg() != 0 || ScaleAmt.getImm() != 1 ||

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:647: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:647: assign: Assigning: "MemOpStart" = "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:656: overflow: The expression "MemOpStart + AddrDisp" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:656: overflow_sink: "MemOpStart + AddrDisp", which might be negative, is passed to "Inst->getOperand(MemOpStart + AddrDisp)".
#  654|     const MCOperand &IndexReg = Inst.getOperand(MemOpStart + X86::AddrIndexReg);
#  655|     const MCOperand &ScaleAmt = Inst.getOperand(MemOpStart + X86::AddrScaleAmt);
#  656|->   const MCOperand &Disp = Inst.getOperand(MemOpStart + X86::AddrDisp);
#  657|     if (SegReg.getReg() != 0 || IndexReg.getReg() != 0 || ScaleAmt.getImm() != 1 ||
#  658|         !Disp.isImm())

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:674: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:674: assign: Assigning: "MemOpStart" = "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:678: overflow: The expression "MemOpStart + AddrSegmentReg" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:678: overflow_sink: "MemOpStart + AddrSegmentReg", which might be negative, is passed to "Inst->getOperand(MemOpStart + AddrSegmentReg)".
#  676|       return std::nullopt;
#  677|     MemOpStart += X86II::getOperandBias(MCID);
#  678|->   const MCOperand &SegReg = Inst.getOperand(MemOpStart + X86::AddrSegmentReg);
#  679|     const MCOperand &BaseReg = Inst.getOperand(MemOpStart + X86::AddrBaseReg);
#  680|     const MCOperand &IndexReg = Inst.getOperand(MemOpStart + X86::AddrIndexReg);

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:674: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:674: assign: Assigning: "MemOpStart" = "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:677: overflow: The expression "MemOpStart" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:679: overflow: The expression "MemOpStart + AddrBaseReg" is deemed overflowed because at least one of its arguments has overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:679: overflow_sink: "MemOpStart + AddrBaseReg", which might have underflowed, is passed to "Inst->getOperand(MemOpStart + AddrBaseReg)".
#  677|     MemOpStart += X86II::getOperandBias(MCID);
#  678|     const MCOperand &SegReg = Inst.getOperand(MemOpStart + X86::AddrSegmentReg);
#  679|->   const MCOperand &BaseReg = Inst.getOperand(MemOpStart + X86::AddrBaseReg);
#  680|     const MCOperand &IndexReg = Inst.getOperand(MemOpStart + X86::AddrIndexReg);
#  681|     const MCOperand &ScaleAmt = Inst.getOperand(MemOpStart + X86::AddrScaleAmt);

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:674: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:674: assign: Assigning: "MemOpStart" = "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:680: overflow: The expression "MemOpStart + AddrIndexReg" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:680: overflow_sink: "MemOpStart + AddrIndexReg", which might be negative, is passed to "Inst->getOperand(MemOpStart + AddrIndexReg)".
#  678|     const MCOperand &SegReg = Inst.getOperand(MemOpStart + X86::AddrSegmentReg);
#  679|     const MCOperand &BaseReg = Inst.getOperand(MemOpStart + X86::AddrBaseReg);
#  680|->   const MCOperand &IndexReg = Inst.getOperand(MemOpStart + X86::AddrIndexReg);
#  681|     const MCOperand &ScaleAmt = Inst.getOperand(MemOpStart + X86::AddrScaleAmt);
#  682|     const MCOperand &Disp = Inst.getOperand(MemOpStart + X86::AddrDisp);

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:674: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:674: assign: Assigning: "MemOpStart" = "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:681: overflow: The expression "MemOpStart + AddrScaleAmt" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:681: overflow_sink: "MemOpStart + AddrScaleAmt", which might be negative, is passed to "Inst->getOperand(MemOpStart + AddrScaleAmt)".
#  679|     const MCOperand &BaseReg = Inst.getOperand(MemOpStart + X86::AddrBaseReg);
#  680|     const MCOperand &IndexReg = Inst.getOperand(MemOpStart + X86::AddrIndexReg);
#  681|->   const MCOperand &ScaleAmt = Inst.getOperand(MemOpStart + X86::AddrScaleAmt);
#  682|     const MCOperand &Disp = Inst.getOperand(MemOpStart + X86::AddrDisp);
#  683|     // Must be a simple rip-relative address.

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:674: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:674: assign: Assigning: "MemOpStart" = "llvm::X86II::getMemoryOperandNo(MCID.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:682: overflow: The expression "MemOpStart + AddrDisp" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp:682: overflow_sink: "MemOpStart + AddrDisp", which might be negative, is passed to "Inst->getOperand(MemOpStart + AddrDisp)".
#  680|     const MCOperand &IndexReg = Inst.getOperand(MemOpStart + X86::AddrIndexReg);
#  681|     const MCOperand &ScaleAmt = Inst.getOperand(MemOpStart + X86::AddrScaleAmt);
#  682|->   const MCOperand &Disp = Inst.getOperand(MemOpStart + X86::AddrDisp);
#  683|     // Must be a simple rip-relative address.
#  684|     if (BaseReg.getReg() != X86::RIP || SegReg.getReg() != 0 ||

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86DomainReassignment.cpp:529: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86DomainReassignment.cpp:529: assign: Assigning: "MemOpStart" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86DomainReassignment.cpp:534: cast_underflow: An assign of a possibly negative number to an unsigned type, which might trigger an underflow.
llvm-17.0.6.src/lib/Target/X86/X86DomainReassignment.cpp:537: overflow_sink: "MemOpIdx", which might be negative, is passed to "MI->getOperand(MemOpIdx)".
#  535|                   MemOpEnd = MemOpStart + X86::AddrNumOperands;
#  536|          MemOpIdx < MemOpEnd; ++MemOpIdx) {
#  537|->     const MachineOperand &Op = MI.getOperand(MemOpIdx);
#  538|       if (Op.isReg() && Op.getReg() == Reg)
#  539|         return true;

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86FixupLEAs.cpp:653: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86FixupLEAs.cpp:653: assign: Assigning: "AddrOffset" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86FixupLEAs.cpp:655: overflow: The expression "AddrOffset" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86FixupLEAs.cpp:656: overflow: The expression "AddrOffset + AddrBaseReg" is deemed overflowed because at least one of its arguments has overflowed.
llvm-17.0.6.src/lib/Target/X86/X86FixupLEAs.cpp:656: overflow_sink: "AddrOffset + AddrBaseReg", which might have underflowed, is passed to "MI->getOperand(AddrOffset + AddrBaseReg)".
#  654|     if (AddrOffset >= 0) {
#  655|       AddrOffset += X86II::getOperandBias(Desc);
#  656|->     MachineOperand &p = MI.getOperand(AddrOffset + X86::AddrBaseReg);
#  657|       if (p.isReg() && p.getReg() != X86::ESP) {
#  658|         seekLEAFixup(p, I, MBB);

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86FixupLEAs.cpp:653: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86FixupLEAs.cpp:653: assign: Assigning: "AddrOffset" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86FixupLEAs.cpp:660: overflow: The expression "AddrOffset + AddrIndexReg" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86FixupLEAs.cpp:660: overflow_sink: "AddrOffset + AddrIndexReg", which might have overflowed, is passed to "MI->getOperand(AddrOffset + AddrIndexReg)".
#  658|         seekLEAFixup(p, I, MBB);
#  659|       }
#  660|->     MachineOperand &q = MI.getOperand(AddrOffset + X86::AddrIndexReg);
#  661|       if (q.isReg() && q.getReg() != X86::ESP) {
#  662|         seekLEAFixup(q, I, MBB);

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Target/X86/X86ISelLowering.cpp:53485: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::IEEEsingle(), AI)".
llvm-17.0.6.src/lib/Target/X86/X86ISelLowering.cpp:53485: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#53483|           return CI->getValue() == AI;
#53484|         if (const auto *CF = dyn_cast<ConstantFP>(CP->getConstVal()))
#53485|->         return CF->getValue() == APFloat(APFloat::IEEEsingle(), AI);
#53486|       }
#53487|       return false;

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:199: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Current->getDesc().TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:199: assign: Assigning: "Offset" = "llvm::X86II::getMemoryOperandNo(Current->getDesc().TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:203: overflow: The expression "Offset + Bias" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:203: cast_overflow: An assign that casts to a different type, which might trigger an overflow.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:205: overflow_sink: "MemOpOffset", which might have overflowed, is passed to "<unnamed>::IsMemOpCompatibleWithPrefetch(*Current, MemOpOffset)".
#  203|         int MemOpOffset = Offset + Bias;
#  204|         // FIXME(mtrofin): ORE message when the recommendation cannot be taken.
#  205|->       if (!IsMemOpCompatibleWithPrefetch(*Current, MemOpOffset))
#  206|           continue;
#  207|         Prefetches.clear();

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:199: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Current->getDesc().TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:199: assign: Assigning: "Offset" = "llvm::X86II::getMemoryOperandNo(Current->getDesc().TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:203: overflow: The expression "Offset + Bias" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:203: cast_overflow: An assign that casts to a different type, which might trigger an overflow.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:229: overflow: The expression "MemOpOffset + AddrBaseReg" is deemed overflowed because at least one of its arguments has overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:229: overflow_sink: "MemOpOffset + AddrBaseReg", which might have underflowed, is passed to "Current->getOperand(MemOpOffset + AddrBaseReg)".
#  227|           // FIXME(mtrofin): consider adding a:
#  228|           //     MachineInstrBuilder::set(unsigned offset, op).
#  229|->         MIB.addReg(Current->getOperand(MemOpOffset + X86::AddrBaseReg).getReg())
#  230|               .addImm(
#  231|                   Current->getOperand(MemOpOffset + X86::AddrScaleAmt).getImm())

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:199: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Current->getDesc().TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:199: assign: Assigning: "Offset" = "llvm::X86II::getMemoryOperandNo(Current->getDesc().TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:203: cast_overflow: An assign that casts to a different type, which might trigger an overflow.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:229: overflow: The expression "MemOpOffset + AddrDisp" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:229: overflow_sink: "MemOpOffset + AddrDisp", which might have overflowed, is passed to "Current->getOperand(MemOpOffset + AddrDisp)".
#  227|           // FIXME(mtrofin): consider adding a:
#  228|           //     MachineInstrBuilder::set(unsigned offset, op).
#  229|->         MIB.addReg(Current->getOperand(MemOpOffset + X86::AddrBaseReg).getReg())
#  230|               .addImm(
#  231|                   Current->getOperand(MemOpOffset + X86::AddrScaleAmt).getImm())

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:199: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Current->getDesc().TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:199: assign: Assigning: "Offset" = "llvm::X86II::getMemoryOperandNo(Current->getDesc().TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:203: cast_overflow: An assign that casts to a different type, which might trigger an overflow.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:229: overflow: The expression "MemOpOffset + AddrIndexReg" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:229: overflow_sink: "MemOpOffset + AddrIndexReg", which might have overflowed, is passed to "Current->getOperand(MemOpOffset + AddrIndexReg)".
#  227|           // FIXME(mtrofin): consider adding a:
#  228|           //     MachineInstrBuilder::set(unsigned offset, op).
#  229|->         MIB.addReg(Current->getOperand(MemOpOffset + X86::AddrBaseReg).getReg())
#  230|               .addImm(
#  231|                   Current->getOperand(MemOpOffset + X86::AddrScaleAmt).getImm())

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:199: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Current->getDesc().TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:199: assign: Assigning: "Offset" = "llvm::X86II::getMemoryOperandNo(Current->getDesc().TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:203: cast_overflow: An assign that casts to a different type, which might trigger an overflow.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:229: overflow: The expression "MemOpOffset + AddrScaleAmt" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:229: overflow_sink: "MemOpOffset + AddrScaleAmt", which might have overflowed, is passed to "Current->getOperand(MemOpOffset + AddrScaleAmt)".
#  227|           // FIXME(mtrofin): consider adding a:
#  228|           //     MachineInstrBuilder::set(unsigned offset, op).
#  229|->         MIB.addReg(Current->getOperand(MemOpOffset + X86::AddrBaseReg).getReg())
#  230|               .addImm(
#  231|                   Current->getOperand(MemOpOffset + X86::AddrScaleAmt).getImm())

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:199: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Current->getDesc().TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:199: assign: Assigning: "Offset" = "llvm::X86II::getMemoryOperandNo(Current->getDesc().TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:203: cast_overflow: An assign that casts to a different type, which might trigger an overflow.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:229: overflow: The expression "MemOpOffset + AddrSegmentReg" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InsertPrefetch.cpp:229: overflow_sink: "MemOpOffset + AddrSegmentReg", which might have overflowed, is passed to "Current->getOperand(MemOpOffset + AddrSegmentReg)".
#  227|           // FIXME(mtrofin): consider adding a:
#  228|           //     MachineInstrBuilder::set(unsigned offset, op).
#  229|->         MIB.addReg(Current->getOperand(MemOpOffset + X86::AddrBaseReg).getReg())
#  230|               .addImm(
#  231|                   Current->getOperand(MemOpOffset + X86::AddrScaleAmt).getImm())

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3220: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3220: assign: Assigning: "MemRefBegin" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3224: overflow: The expression "MemRefBegin + AddrDisp" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3224: overflow_sink: "MemRefBegin + AddrDisp", which might be negative, is passed to "MI->getOperand(MemRefBegin + AddrDisp)".
# 3222|     MemRefBegin += X86II::getOperandBias(Desc);
# 3223|   
# 3224|->   const MachineOperand &MO = MI.getOperand(MemRefBegin + X86::AddrDisp);
# 3225|     if (!MO.isJTI())
# 3226|       return -1;

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3809: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3809: assign: Assigning: "MemRefBegin" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3813: overflow: The expression "MemRefBegin" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3815: overflow: The expression "MemRefBegin + AddrBaseReg" is deemed overflowed because at least one of its arguments has overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3815: overflow_sink: "MemRefBegin + AddrBaseReg", which might have underflowed, is passed to "MemI->getOperand(MemRefBegin + AddrBaseReg)".
# 3813|     MemRefBegin += X86II::getOperandBias(Desc);
# 3814|   
# 3815|->   auto &BaseOp = MemI.getOperand(MemRefBegin + X86::AddrBaseReg);
# 3816|     if (!BaseOp.isReg()) // Can be an MO_FrameIndex
# 3817|       return std::nullopt;

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3809: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3809: assign: Assigning: "MemRefBegin" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3819: overflow: The expression "MemRefBegin + AddrDisp" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3819: overflow_sink: "MemRefBegin + AddrDisp", which might have overflowed, is passed to "MemI->getOperand(MemRefBegin + AddrDisp)".
# 3817|       return std::nullopt;
# 3818|   
# 3819|->   const MachineOperand &DispMO = MemI.getOperand(MemRefBegin + X86::AddrDisp);
# 3820|     // Displacement can be symbolic
# 3821|     if (!DispMO.isImm())

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3809: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3809: assign: Assigning: "MemRefBegin" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3826: overflow: The expression "MemRefBegin + AddrIndexReg" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3826: overflow_sink: "MemRefBegin + AddrIndexReg", which might have overflowed, is passed to "MemI->getOperand(MemRefBegin + AddrIndexReg)".
# 3824|     ExtAddrMode AM;
# 3825|     AM.BaseReg = BaseOp.getReg();
# 3826|->   AM.ScaledReg = MemI.getOperand(MemRefBegin + X86::AddrIndexReg).getReg();
# 3827|     AM.Scale = MemI.getOperand(MemRefBegin + X86::AddrScaleAmt).getImm();
# 3828|     AM.Displacement = DispMO.getImm();

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3809: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3809: assign: Assigning: "MemRefBegin" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3827: overflow: The expression "MemRefBegin + AddrScaleAmt" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3827: overflow_sink: "MemRefBegin + AddrScaleAmt", which might have overflowed, is passed to "MemI->getOperand(MemRefBegin + AddrScaleAmt)".
# 3825|     AM.BaseReg = BaseOp.getReg();
# 3826|     AM.ScaledReg = MemI.getOperand(MemRefBegin + X86::AddrIndexReg).getReg();
# 3827|->   AM.Scale = MemI.getOperand(MemRefBegin + X86::AddrScaleAmt).getImm();
# 3828|     AM.Displacement = DispMO.getImm();
# 3829|     return AM;

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3906: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3906: assign: Assigning: "MemRefBegin" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3910: overflow: The expression "MemRefBegin" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3912: overflow: The expression "MemRefBegin + AddrBaseReg" is deemed overflowed because at least one of its arguments has overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3912: overflow_sink: "MemRefBegin + AddrBaseReg", which might have underflowed, is passed to "MemOp->getOperand(MemRefBegin + AddrBaseReg)".
# 3910|     MemRefBegin += X86II::getOperandBias(Desc);
# 3911|   
# 3912|->   const MachineOperand *BaseOp =
# 3913|         &MemOp.getOperand(MemRefBegin + X86::AddrBaseReg);
# 3914|     if (!BaseOp->isReg()) // Can be an MO_FrameIndex

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3906: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3906: assign: Assigning: "MemRefBegin" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3917: overflow: The expression "MemRefBegin + AddrScaleAmt" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3917: overflow_sink: "MemRefBegin + AddrScaleAmt", which might have overflowed, is passed to "MemOp->getOperand(MemRefBegin + AddrScaleAmt)".
# 3915|       return false;
# 3916|   
# 3917|->   if (MemOp.getOperand(MemRefBegin + X86::AddrScaleAmt).getImm() != 1)
# 3918|       return false;
# 3919|   

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3906: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3906: assign: Assigning: "MemRefBegin" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3920: overflow: The expression "MemRefBegin + AddrIndexReg" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3920: overflow_sink: "MemRefBegin + AddrIndexReg", which might have overflowed, is passed to "MemOp->getOperand(MemRefBegin + AddrIndexReg)".
# 3918|       return false;
# 3919|   
# 3920|->   if (MemOp.getOperand(MemRefBegin + X86::AddrIndexReg).getReg() !=
# 3921|         X86::NoRegister)
# 3922|       return false;

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3906: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3906: assign: Assigning: "MemRefBegin" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3924: overflow: The expression "MemRefBegin + AddrDisp" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86InstrInfo.cpp:3924: overflow_sink: "MemRefBegin + AddrDisp", which might have overflowed, is passed to "MemOp->getOperand(MemRefBegin + AddrDisp)".
# 3922|       return false;
# 3923|   
# 3924|->   const MachineOperand &DispMO = MemOp.getOperand(MemRefBegin + X86::AddrDisp);
# 3925|   
# 3926|     // Displacement can be symbolic

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86LoadValueInjectionLoadHardening.cpp:776: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86LoadValueInjectionLoadHardening.cpp:776: assign: Assigning: "MemRefBeginIdx" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86LoadValueInjectionLoadHardening.cpp:783: overflow: The expression "MemRefBeginIdx" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86LoadValueInjectionLoadHardening.cpp:785: overflow: The expression "MemRefBeginIdx + AddrBaseReg" is deemed overflowed because at least one of its arguments has overflowed.
llvm-17.0.6.src/lib/Target/X86/X86LoadValueInjectionLoadHardening.cpp:785: overflow_sink: "MemRefBeginIdx + AddrBaseReg", which might have underflowed, is passed to "MI->getOperand(MemRefBeginIdx + AddrBaseReg)".
#  783|     MemRefBeginIdx += X86II::getOperandBias(Desc);
#  784|   
#  785|->   const MachineOperand &BaseMO =
#  786|         MI.getOperand(MemRefBeginIdx + X86::AddrBaseReg);
#  787|     const MachineOperand &IndexMO =

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:447: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:447: assign: Assigning: "MemOpNo" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:454: overflow: The expression "MemOpNo" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:458: overflow: The expression "MemOpNo + AddrBaseReg" is deemed overflowed because at least one of its arguments has overflowed.
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:458: overflow_sink: "MemOpNo + AddrBaseReg", which might have underflowed, is passed to "MI->getOperand(MemOpNo + AddrBaseReg)".
#  456|       // If the address base of the use instruction is not the LEA def register -
#  457|       // the LEA is not replaceable.
#  458|->     if (!isIdenticalOp(MI.getOperand(MemOpNo + X86::AddrBaseReg), MO))
#  459|         return false;
#  460|   

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:447: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:447: assign: Assigning: "MemOpNo" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:469: overflow: The expression "MemOpNo + AddrDisp" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:469: overflow_sink: "MemOpNo + AddrDisp", which might have overflowed, is passed to "MI->getOperand(MemOpNo + AddrDisp)".
#  467|   
#  468|       // Check that the new address displacement will fit 4 bytes.
#  469|->     if (MI.getOperand(MemOpNo + X86::AddrDisp).isImm() &&
#  470|           !isInt<32>(MI.getOperand(MemOpNo + X86::AddrDisp).getImm() +
#  471|                      AddrDispShift))

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:511: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:511: assign: Assigning: "MemOpNo" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:517: overflow: The expression "MemOpNo" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:520: overflow_sink: "MemOpNo", which might have overflowed, is passed to "getMemOpKey(MI, MemOpNo)".
#  518|   
#  519|       // Do not call chooseBestLEA if there was no matching LEA
#  520|->     auto Insns = LEAs.find(getMemOpKey(MI, MemOpNo));
#  521|       if (Insns == LEAs.end())
#  522|         continue;
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:520: note: trimmed 1 message(s) with length over 512

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:672: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:672: cast_overflow: An assign that casts to a different type, which might trigger an overflow.
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:680: overflow: The expression "MemOpNo + AddrDisp" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86OptimizeLEAs.cpp:680: overflow_sink: "MemOpNo + AddrDisp", which might have overflowed, is passed to "MI->getOperand(MemOpNo + AddrDisp)".
#  678|   
#  679|             // Update address disp.
#  680|->           MachineOperand &Op = MI.getOperand(MemOpNo + X86::AddrDisp);
#  681|             if (Op.isImm())
#  682|               Op.setImm(Op.getImm() + AddrDispShift);

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1326: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1326: assign: Assigning: "MemRefBeginIdx" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1334: overflow: The expression "MemRefBeginIdx" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1336: overflow: The expression "MemRefBeginIdx + AddrBaseReg" is deemed overflowed because at least one of its arguments has overflowed.
llvm-17.0.6.src/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1336: overflow_sink: "MemRefBeginIdx + AddrBaseReg", which might have underflowed, is passed to "MI->getOperand(MemRefBeginIdx + AddrBaseReg)".
# 1334|           MemRefBeginIdx += X86II::getOperandBias(Desc);
# 1335|   
# 1336|->         MachineOperand &BaseMO =
# 1337|               MI.getOperand(MemRefBeginIdx + X86::AddrBaseReg);
# 1338|           MachineOperand &IndexMO =

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1405: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1405: assign: Assigning: "MemRefBeginIdx" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1408: overflow: The expression "MemRefBeginIdx" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1410: overflow: The expression "MemRefBeginIdx + AddrBaseReg" is deemed overflowed because at least one of its arguments has overflowed.
llvm-17.0.6.src/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1410: overflow_sink: "MemRefBeginIdx + AddrBaseReg", which might have underflowed, is passed to "MI->getOperand(MemRefBeginIdx + AddrBaseReg)".
# 1408|             MemRefBeginIdx += X86II::getOperandBias(Desc);
# 1409|   
# 1410|->           MachineOperand &BaseMO =
# 1411|                 MI.getOperand(MemRefBeginIdx + X86::AddrBaseReg);
# 1412|             MachineOperand &IndexMO =

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1807: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1807: assign: Assigning: "MemRefBeginIdx" = "llvm::X86II::getMemoryOperandNo(Desc.TSFlags)".
llvm-17.0.6.src/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1810: overflow: The expression "MemRefBeginIdx" is considered to have possibly overflowed.
llvm-17.0.6.src/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1812: overflow: The expression "MemRefBeginIdx + AddrBaseReg" is deemed overflowed because at least one of its arguments has overflowed.
llvm-17.0.6.src/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1812: overflow_sink: "MemRefBeginIdx + AddrBaseReg", which might have underflowed, is passed to "UseMI->getOperand(MemRefBeginIdx + AddrBaseReg)".
# 1810|           MemRefBeginIdx += X86II::getOperandBias(Desc);
# 1811|   
# 1812|->         MachineOperand &BaseMO =
# 1813|               UseMI.getOperand(MemRefBeginIdx + X86::AddrBaseReg);
# 1814|           MachineOperand &IndexMO =

Error: UNINIT (CWE-457):
llvm-17.0.6.src/lib/Transforms/Coroutines/CoroSplit.cpp:689: var_decl: Declaring variable "Intrinsics".
llvm-17.0.6.src/lib/Transforms/Coroutines/CoroSplit.cpp:693: uninit_use: Using uninitialized value "Intrinsics". Field "Intrinsics.InlineElts" is uninitialized.
#  691|       if (auto *DVI = dyn_cast<DbgVariableIntrinsic>(&I))
#  692|         Intrinsics.push_back(DVI);
#  693|->   return Intrinsics;
#  694|   }
#  695|   

Error: OVERRUN (CWE-119):
llvm-17.0.6.src/lib/Transforms/IPO/ForceFunctionAttrs.cpp:43: assignment: Assigning: "Kind" = "llvm::Attribute::getAttrKindFromName(KV.second)". The value of "Kind" is now between 0 and 87 (inclusive).
llvm-17.0.6.src/lib/Transforms/IPO/ForceFunctionAttrs.cpp:44: cond_between: Checking "Kind == None" implies that "Kind" is between 1 and 87 (inclusive) on the false branch.
llvm-17.0.6.src/lib/Transforms/IPO/ForceFunctionAttrs.cpp:44: overrun-call: Overrunning callee's array of size 84 by passing argument "Kind" (which evaluates to 87) in call to "canUseAsFnAttr".
#   42|         return Kind;
#   43|       Kind = Attribute::getAttrKindFromName(KV.second);
#   44|->     if (Kind == Attribute::None || !Attribute::canUseAsFnAttr(Kind)) {
#   45|         LLVM_DEBUG(dbgs() << "ForcedAttribute: " << KV.second
#   46|                           << " unknown or not a function attribute!\n");

Error: USE_AFTER_MOVE (CWE-457):
llvm-17.0.6.src/tools/llvm-cov/CodeCoverage.cpp:347: move: "CoverageInfo" is moved (indicated by "std::move(CoverageInfo)").
llvm-17.0.6.src/tools/llvm-cov/CodeCoverage.cpp:347: use_after_move: "CoverageInfo" is used after it has been already moved.
#  345|   
#  346|       if (!ViewBranches.empty()) {
#  347|->       auto SubView = SourceCoverageView::create(SourceName, File, ViewOpts,
#  348|                                                   std::move(CoverageInfo));
#  349|         View.addBranch(CurrentLine, ViewBranches, std::move(SubView));

Error: USE_AFTER_MOVE (CWE-457):
llvm-17.0.6.src/tools/llvm-exegesis/lib/PerfHelper.cpp:110: move: "E" is moved (indicated by "std::move(E)").
llvm-17.0.6.src/tools/llvm-exegesis/lib/PerfHelper.cpp:114: use_after_move: "E" is used after it has been already moved.
#  112|     IsDummyEvent = Event.name() == PerfEvent::DummyEventString;
#  113|     if (!IsDummyEvent)
#  114|->     initRealEvent(E, ProcessID);
#  115|   }
#  116|   

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:882: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(IT->getInstr().Description.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:882: assign: Assigning: "MemOpIdx" = "llvm::X86II::getMemoryOperandNo(IT->getInstr().Description.TSFlags)".
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:886: overflow_sink: "MemOpIdx + 0", which might be negative, is passed to "llvm::exegesis::setMemOp(IT, MemOpIdx + 0, llvm::MCOperand const(llvm::MCOperand::createReg(Reg)))".
#  884|     // getMemoryOperandNo() ignores tied operands, so we have to add them back.
#  885|     MemOpIdx += X86II::getOperandBias(IT.getInstr().Description);
#  886|->   setMemOp(IT, MemOpIdx + 0, MCOperand::createReg(Reg));    // BaseReg
#  887|     setMemOp(IT, MemOpIdx + 1, MCOperand::createImm(1));      // ScaleAmt
#  888|     setMemOp(IT, MemOpIdx + 2, MCOperand::createReg(0));      // IndexReg

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:882: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(IT->getInstr().Description.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:882: assign: Assigning: "MemOpIdx" = "llvm::X86II::getMemoryOperandNo(IT->getInstr().Description.TSFlags)".
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:887: overflow: The expression "MemOpIdx + 1" is considered to have possibly overflowed.
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:887: overflow_sink: "MemOpIdx + 1", which might be negative, is passed to "llvm::exegesis::setMemOp(IT, MemOpIdx + 1, llvm::MCOperand const(llvm::MCOperand::createImm(1L)))".
#  885|     MemOpIdx += X86II::getOperandBias(IT.getInstr().Description);
#  886|     setMemOp(IT, MemOpIdx + 0, MCOperand::createReg(Reg));    // BaseReg
#  887|->   setMemOp(IT, MemOpIdx + 1, MCOperand::createImm(1));      // ScaleAmt
#  888|     setMemOp(IT, MemOpIdx + 2, MCOperand::createReg(0));      // IndexReg
#  889|     setMemOp(IT, MemOpIdx + 3, MCOperand::createImm(Offset)); // Disp

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:882: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(IT->getInstr().Description.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:882: assign: Assigning: "MemOpIdx" = "llvm::X86II::getMemoryOperandNo(IT->getInstr().Description.TSFlags)".
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:888: overflow: The expression "MemOpIdx + 2" is considered to have possibly overflowed.
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:888: overflow_sink: "MemOpIdx + 2", which might be negative, is passed to "llvm::exegesis::setMemOp(IT, MemOpIdx + 2, llvm::MCOperand const(llvm::MCOperand::createReg(0U)))".
#  886|     setMemOp(IT, MemOpIdx + 0, MCOperand::createReg(Reg));    // BaseReg
#  887|     setMemOp(IT, MemOpIdx + 1, MCOperand::createImm(1));      // ScaleAmt
#  888|->   setMemOp(IT, MemOpIdx + 2, MCOperand::createReg(0));      // IndexReg
#  889|     setMemOp(IT, MemOpIdx + 3, MCOperand::createImm(Offset)); // Disp
#  890|     setMemOp(IT, MemOpIdx + 4, MCOperand::createReg(0));      // Segment

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:882: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(IT->getInstr().Description.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:882: assign: Assigning: "MemOpIdx" = "llvm::X86II::getMemoryOperandNo(IT->getInstr().Description.TSFlags)".
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:889: overflow: The expression "MemOpIdx + 3" is considered to have possibly overflowed.
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:889: overflow_sink: "MemOpIdx + 3", which might be negative, is passed to "llvm::exegesis::setMemOp(IT, MemOpIdx + 3, llvm::MCOperand const(llvm::MCOperand::createImm(Offset)))".
#  887|     setMemOp(IT, MemOpIdx + 1, MCOperand::createImm(1));      // ScaleAmt
#  888|     setMemOp(IT, MemOpIdx + 2, MCOperand::createReg(0));      // IndexReg
#  889|->   setMemOp(IT, MemOpIdx + 3, MCOperand::createImm(Offset)); // Disp
#  890|     setMemOp(IT, MemOpIdx + 4, MCOperand::createReg(0));      // Segment
#  891|   }

Error: INTEGER_OVERFLOW (CWE-190):
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:882: tainted_data_return: Called function "llvm::X86II::getMemoryOperandNo(IT->getInstr().Description.TSFlags)", and a possible return value may be less than zero.
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:882: assign: Assigning: "MemOpIdx" = "llvm::X86II::getMemoryOperandNo(IT->getInstr().Description.TSFlags)".
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:890: overflow: The expression "MemOpIdx + 4" is considered to have possibly overflowed.
llvm-17.0.6.src/tools/llvm-exegesis/lib/X86/Target.cpp:890: overflow_sink: "MemOpIdx + 4", which might be negative, is passed to "llvm::exegesis::setMemOp(IT, MemOpIdx + 4, llvm::MCOperand const(llvm::MCOperand::createReg(0U)))".
#  888|     setMemOp(IT, MemOpIdx + 2, MCOperand::createReg(0));      // IndexReg
#  889|     setMemOp(IT, MemOpIdx + 3, MCOperand::createImm(Offset)); // Disp
#  890|->   setMemOp(IT, MemOpIdx + 4, MCOperand::createReg(0));      // Segment
#  891|   }
#  892|   

Error: WRAPPER_ESCAPE (CWE-825):
llvm-17.0.6.src/tools/llvm-profdata/llvm-profdata.cpp:3112: extract: Calling "c_str" which extracts wrapped state from local "Invocation".
llvm-17.0.6.src/tools/llvm-profdata/llvm-profdata.cpp:3112: escape: The internal representation of local "Invocation" escapes into "argv[1]", but is destroyed when it exits scope.
# 3110|       if (func) {
# 3111|         std::string Invocation(ProgName.str() + " " + argv[1]);
# 3112|->       argv[1] = Invocation.c_str();
# 3113|         return func(argc - 1, argv + 1);
# 3114|       }

Error: USE_AFTER_MOVE (CWE-457):
llvm-17.0.6.src/unittests/ADT/MappedIteratorTest.cpp:175: move: "I2" is moved (indicated by "std::move(I2)").
llvm-17.0.6.src/unittests/ADT/MappedIteratorTest.cpp:177: use_after_move: "I2" is used after it has been already moved.
#  175|       I3 = std::move(I2);
#  176|   
#  177|->     EXPECT_EQ(I2, I1) << "move assigned iterator is a different position";
#  178|     }
#  179|   }

Error: UNINIT (CWE-457):
llvm-17.0.6.src/unittests/CodeGen/MLRegallocDevelopmentFeatures.cpp:50: var_decl: Declaring variable "PositionsToReturn".
llvm-17.0.6.src/unittests/CodeGen/MLRegallocDevelopmentFeatures.cpp:80: uninit_use: Using uninitialized value "PositionsToReturn". Field "PositionsToReturn.InlineElts" is uninitialized.
#   78|         CurrentIndex += SlotIndex::InstrDist;
#   79|       }
#   80|->     return PositionsToReturn;
#   81|     }
#   82|   

Error: WRAPPER_ESCAPE (CWE-825):
llvm-17.0.6.src/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp:323: extract: Calling "get" which extracts wrapped state from local "Reference".
llvm-17.0.6.src/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp:323: escape: The internal representation of local "Reference" escapes, but is destroyed when it exits scope.
#  321|     std::unique_ptr<LVReader> Target =
#  322|         createReader(ReaderHandler, InputsDir, DwarfGcc);
#  323|->   checkElementComparison(Reference.get(), Target.get());
#  324|   }
#  325|   

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/unittests/ExecutionEngine/Orc/OrcCAPITest.cpp:645: alloc_fn: Storage is returned from allocation function "LLVMOrcMaterializationResponsibilityNotifyEmitted".
llvm-17.0.6.src/unittests/ExecutionEngine/Orc/OrcCAPITest.cpp:645: leaked_storage: Ignoring storage allocated by "LLVMOrcMaterializationResponsibilityNotifyEmitted(MR)" leaks it.
#  643|     LLVMOrcMaterializationResponsibilityNotifyResolved(MR, &Pair, 1);
#  644|   
#  645|->   LLVMOrcMaterializationResponsibilityNotifyEmitted(MR);
#  646|     LLVMOrcDisposeMaterializationResponsibility(MR);
#  647|   }

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/unittests/Passes/PassBuilderBindings/PassBuilderBindingsTest.cpp:73: alloc_fn: Storage is returned from allocation function "LLVMCreatePassBuilderOptions".
llvm-17.0.6.src/unittests/Passes/PassBuilderBindings/PassBuilderBindingsTest.cpp:73: var_assign: Assigning: "Options" = storage returned from "LLVMCreatePassBuilderOptions()".
llvm-17.0.6.src/unittests/Passes/PassBuilderBindings/PassBuilderBindingsTest.cpp:74: noescape: Resource "Options" is not freed or pointed-to in "LLVMRunPasses".
llvm-17.0.6.src/unittests/Passes/PassBuilderBindings/PassBuilderBindingsTest.cpp:75: noescape: Resource "Options" is not freed or pointed-to in "LLVMRunPasses".
llvm-17.0.6.src/unittests/Passes/PassBuilderBindings/PassBuilderBindingsTest.cpp:76: leaked_storage: Variable "Options" going out of scope leaks the storage it points to.
#   74|     LLVMErrorRef E1 = LLVMRunPasses(Module, "", TM, Options);
#   75|     LLVMErrorRef E2 = LLVMRunPasses(Module, "does-not-exist-pass", TM, Options);
#   76|->   ASSERT_TRUE(E1);
#   77|     ASSERT_TRUE(E2);
#   78|     LLVMConsumeError(E1);

Error: RESOURCE_LEAK (CWE-772):
llvm-17.0.6.src/unittests/Passes/PassBuilderBindings/PassBuilderBindingsTest.cpp:73: alloc_fn: Storage is returned from allocation function "LLVMCreatePassBuilderOptions".
llvm-17.0.6.src/unittests/Passes/PassBuilderBindings/PassBuilderBindingsTest.cpp:73: var_assign: Assigning: "Options" = storage returned from "LLVMCreatePassBuilderOptions()".
llvm-17.0.6.src/unittests/Passes/PassBuilderBindings/PassBuilderBindingsTest.cpp:74: noescape: Resource "Options" is not freed or pointed-to in "LLVMRunPasses".
llvm-17.0.6.src/unittests/Passes/PassBuilderBindings/PassBuilderBindingsTest.cpp:75: noescape: Resource "Options" is not freed or pointed-to in "LLVMRunPasses".
llvm-17.0.6.src/unittests/Passes/PassBuilderBindings/PassBuilderBindingsTest.cpp:77: leaked_storage: Variable "Options" going out of scope leaks the storage it points to.
#   75|     LLVMErrorRef E2 = LLVMRunPasses(Module, "does-not-exist-pass", TM, Options);
#   76|     ASSERT_TRUE(E1);
#   77|->   ASSERT_TRUE(E2);
#   78|     LLVMConsumeError(E1);
#   79|     LLVMConsumeError(E2);

Error: UNINIT (CWE-457):
llvm-17.0.6.src/unittests/ProfileData/CoverageMappingTest.cpp:27: var_decl: Declaring variable "Found" without initializer.
llvm-17.0.6.src/unittests/ProfileData/CoverageMappingTest.cpp:33: uninit_use: Using uninitialized value "Found".
#   31|       FoundMsg = CME.message();
#   32|     });
#   33|->   if (Expected == Found)
#   34|       return ::testing::AssertionSuccess();
#   35|     return ::testing::AssertionFailure() << "error: " << FoundMsg << "\n";

Error: UNINIT (CWE-457):
llvm-17.0.6.src/unittests/ProfileData/MemProfTest.cpp:121: var_decl: Declaring variable "Schema".
llvm-17.0.6.src/unittests/ProfileData/MemProfTest.cpp:125: uninit_use: Using uninitialized value "Schema". Field "Schema.InlineElts" is uninitialized.
#  123|   #include "llvm/ProfileData/MIBEntryDef.inc"
#  124|   #undef MIBEntryDef
#  125|->   return Schema;
#  126|   }
#  127|   

Error: UNINIT (CWE-457):
llvm-17.0.6.src/utils/TableGen/CodeGenRegisters.cpp:491: var_decl: Declaring variable "Parts".
llvm-17.0.6.src/utils/TableGen/CodeGenRegisters.cpp:515: uninit_use_in_call: Using uninitialized value "Parts". Field "Parts.InlineElts" is uninitialized when calling "getConcatSubRegIndex".
#  513|         // Each part of Cand is a sub-register of this. Make the full Cand also
#  514|         // a sub-register with a concatenated sub-register index.
#  515|->       CodeGenSubRegIndex *Concat = RegBank.getConcatSubRegIndex(Parts);
#  516|         std::pair<CodeGenSubRegIndex*,CodeGenRegister*> NewSubReg =
#  517|             std::make_pair(Concat, Cand);

Error: WRAPPER_ESCAPE (CWE-825):
llvm-17.0.6.src/utils/TableGen/GlobalISel/GIMatchTree.cpp:352: extract: Calling "get" which extracts wrapped state from local "TreeRoot".
llvm-17.0.6.src/utils/TableGen/GlobalISel/GIMatchTree.cpp:352: escape: The internal representation of local "TreeRoot" escapes into "this->TreeNode", but is destroyed when it exits scope.
#  350|   
#  351|     std::unique_ptr<GIMatchTree> TreeRoot = std::make_unique<GIMatchTree>();
#  352|->   TreeNode = TreeRoot.get();
#  353|     runStep();
#  354|   

Error: SNYK_CODE_WARNING (CWE-125):
llvm-17.0.6.src/lib/CodeGen/GlobalMerge.cpp:350:15: error[cpp/SizeAsIndex]: The size of the buffer from size is used as an array index. This value could be one larger than the last possible index of the array, causing a buffer overread or overwrite.
#  348|               CreateGlobalSet().Globals.set(GI);
#  349|             } else {
#  350|->             ++UsedGlobalSets[CurGVOnlySetIdx].UsageCount;
#  351|             }
#  352|   

Error: COPY_PASTE_ERROR (CWE-398):
llvm-17.0.6.src/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:3454: original: "llvm::BinaryOperator::CreateOr(Op0, A, llvm::Twine const(""))" looks like the original copy.
llvm-17.0.6.src/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:3432: copy_paste_error: "Op0" in "llvm::BinaryOperator::CreateOr(Op0, C, llvm::Twine const(""))" looks like a copy-paste error.
llvm-17.0.6.src/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:3432: remediation: Should it say "Op1" instead?
# 3430|     // B | ((A & B) ^ C) -> B | C
# 3431|     if (match(Op1, m_c_Xor(m_c_And(m_Value(A), m_Specific(Op0)), m_Value(C))))
# 3432|->     return BinaryOperator::CreateOr(Op0, C);
# 3433|   
# 3434|     // ((B | C) & A) | B -> B | (A & C)
