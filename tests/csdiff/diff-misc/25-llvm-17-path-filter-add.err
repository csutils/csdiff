Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:30:29: constructor_uses_global_object: The constructor of global object "Directory[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Directory[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   28|   using namespace clang::replace;
#   29|   
#   30|-> static cl::opt<std::string> Directory(cl::Positional, cl::Required,
#   31|                                         cl::desc("<Search Root Directory>"));
#   32|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:33:27: constructor_uses_global_object: The constructor of global object "ReplacementCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ReplacementCategory" might be created before "Allocator" is available.
#   31|                                         cl::desc("<Search Root Directory>"));
#   32|   
#   33|-> static cl::OptionCategory ReplacementCategory("Replacement Options");
#   34|   static cl::OptionCategory FormattingCategory("Formatting Options");
#   35|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:33:27: constructor_uses_global_object: The constructor of global object "ReplacementCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "ReplacementCategory" might be created before "GlobalParser" is available.
#   31|                                         cl::desc("<Search Root Directory>"));
#   32|   
#   33|-> static cl::OptionCategory ReplacementCategory("Replacement Options");
#   34|   static cl::OptionCategory FormattingCategory("Formatting Options");
#   35|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:33:27: constructor_uses_global_object: The constructor of global object "ReplacementCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ReplacementCategory" might be created before "fuzzer::TPC" is available.
#   31|                                         cl::desc("<Search Root Directory>"));
#   32|   
#   33|-> static cl::OptionCategory ReplacementCategory("Replacement Options");
#   34|   static cl::OptionCategory FormattingCategory("Formatting Options");
#   35|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:33:27: constructor_uses_global_object: The constructor of global object "ReplacementCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ReplacementCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   31|                                         cl::desc("<Search Root Directory>"));
#   32|   
#   33|-> static cl::OptionCategory ReplacementCategory("Replacement Options");
#   34|   static cl::OptionCategory FormattingCategory("Formatting Options");
#   35|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:34:27: constructor_uses_global_object: The constructor of global object "FormattingCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "FormattingCategory" might be created before "Allocator" is available.
#   32|   
#   33|   static cl::OptionCategory ReplacementCategory("Replacement Options");
#   34|-> static cl::OptionCategory FormattingCategory("Formatting Options");
#   35|   
#   36|   const cl::OptionCategory *VisibleCategories[] = {&ReplacementCategory,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:34:27: constructor_uses_global_object: The constructor of global object "FormattingCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "FormattingCategory" might be created before "GlobalParser" is available.
#   32|   
#   33|   static cl::OptionCategory ReplacementCategory("Replacement Options");
#   34|-> static cl::OptionCategory FormattingCategory("Formatting Options");
#   35|   
#   36|   const cl::OptionCategory *VisibleCategories[] = {&ReplacementCategory,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:34:27: constructor_uses_global_object: The constructor of global object "FormattingCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "FormattingCategory" might be created before "fuzzer::TPC" is available.
#   32|   
#   33|   static cl::OptionCategory ReplacementCategory("Replacement Options");
#   34|-> static cl::OptionCategory FormattingCategory("Formatting Options");
#   35|   
#   36|   const cl::OptionCategory *VisibleCategories[] = {&ReplacementCategory,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:34:27: constructor_uses_global_object: The constructor of global object "FormattingCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "FormattingCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   32|   
#   33|   static cl::OptionCategory ReplacementCategory("Replacement Options");
#   34|-> static cl::OptionCategory FormattingCategory("Formatting Options");
#   35|   
#   36|   const cl::OptionCategory *VisibleCategories[] = {&ReplacementCategory,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:39:22: constructor_uses_global_object: The constructor of global object "RemoveTUReplacementFiles" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "RemoveTUReplacementFiles" might be created before "Allocator" is available.
#   37|                                                    &FormattingCategory};
#   38|   
#   39|-> static cl::opt<bool> RemoveTUReplacementFiles(
#   40|       "remove-change-desc-files",
#   41|       cl::desc("Remove the change description files regardless of successful\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:39:22: constructor_uses_global_object: The constructor of global object "RemoveTUReplacementFiles" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "RemoveTUReplacementFiles" might be created before "fuzzer::TPC" is available.
#   37|                                                    &FormattingCategory};
#   38|   
#   39|-> static cl::opt<bool> RemoveTUReplacementFiles(
#   40|       "remove-change-desc-files",
#   41|       cl::desc("Remove the change description files regardless of successful\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:39:22: constructor_uses_global_object: The constructor of global object "RemoveTUReplacementFiles" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RemoveTUReplacementFiles" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   37|                                                    &FormattingCategory};
#   38|   
#   39|-> static cl::opt<bool> RemoveTUReplacementFiles(
#   40|       "remove-change-desc-files",
#   41|       cl::desc("Remove the change description files regardless of successful\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:39:22: constructor_uses_global_object: The constructor of global object "RemoveTUReplacementFiles" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "RemoveTUReplacementFiles" might be created before "scudo::RegionPageMap::Buffers" is available.
#   37|                                                    &FormattingCategory};
#   38|   
#   39|-> static cl::opt<bool> RemoveTUReplacementFiles(
#   40|       "remove-change-desc-files",
#   41|       cl::desc("Remove the change description files regardless of successful\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:45:22: constructor_uses_global_object: The constructor of global object "IgnoreInsertConflict" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "IgnoreInsertConflict" might be created before "Allocator" is available.
#   43|       cl::init(false), cl::cat(ReplacementCategory));
#   44|   
#   45|-> static cl::opt<bool> IgnoreInsertConflict(
#   46|       "ignore-insert-conflict",
#   47|       cl::desc("Ignore insert conflict and keep running to fix."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:45:22: constructor_uses_global_object: The constructor of global object "IgnoreInsertConflict" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "IgnoreInsertConflict" might be created before "fuzzer::TPC" is available.
#   43|       cl::init(false), cl::cat(ReplacementCategory));
#   44|   
#   45|-> static cl::opt<bool> IgnoreInsertConflict(
#   46|       "ignore-insert-conflict",
#   47|       cl::desc("Ignore insert conflict and keep running to fix."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:45:22: constructor_uses_global_object: The constructor of global object "IgnoreInsertConflict" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "IgnoreInsertConflict" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   43|       cl::init(false), cl::cat(ReplacementCategory));
#   44|   
#   45|-> static cl::opt<bool> IgnoreInsertConflict(
#   46|       "ignore-insert-conflict",
#   47|       cl::desc("Ignore insert conflict and keep running to fix."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:45:22: constructor_uses_global_object: The constructor of global object "IgnoreInsertConflict" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "IgnoreInsertConflict" might be created before "scudo::RegionPageMap::Buffers" is available.
#   43|       cl::init(false), cl::cat(ReplacementCategory));
#   44|   
#   45|-> static cl::opt<bool> IgnoreInsertConflict(
#   46|       "ignore-insert-conflict",
#   47|       cl::desc("Ignore insert conflict and keep running to fix."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:50:22: constructor_uses_global_object: The constructor of global object "DoFormat" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "DoFormat" might be created before "Allocator" is available.
#   48|       cl::init(false), cl::cat(ReplacementCategory));
#   49|   
#   50|-> static cl::opt<bool> DoFormat(
#   51|       "format",
#   52|       cl::desc("Enable formatting of code changed by applying replacements.\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:50:22: constructor_uses_global_object: The constructor of global object "DoFormat" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "DoFormat" might be created before "fuzzer::TPC" is available.
#   48|       cl::init(false), cl::cat(ReplacementCategory));
#   49|   
#   50|-> static cl::opt<bool> DoFormat(
#   51|       "format",
#   52|       cl::desc("Enable formatting of code changed by applying replacements.\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:50:22: constructor_uses_global_object: The constructor of global object "DoFormat" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DoFormat" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   48|       cl::init(false), cl::cat(ReplacementCategory));
#   49|   
#   50|-> static cl::opt<bool> DoFormat(
#   51|       "format",
#   52|       cl::desc("Enable formatting of code changed by applying replacements.\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:50:22: constructor_uses_global_object: The constructor of global object "DoFormat" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "DoFormat" might be created before "scudo::RegionPageMap::Buffers" is available.
#   48|       cl::init(false), cl::cat(ReplacementCategory));
#   49|   
#   50|-> static cl::opt<bool> DoFormat(
#   51|       "format",
#   52|       cl::desc("Enable formatting of code changed by applying replacements.\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:61:29: constructor_uses_global_object: The constructor of global object "FormatStyleConfig[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "FormatStyleConfig[abi:cxx11]" might be created before "Allocator" is available.
#   59|   // project.
#   60|   
#   61|-> static cl::opt<std::string> FormatStyleConfig(
#   62|       "style-config",
#   63|       cl::desc("Path to a directory containing a .clang-format file\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:61:29: constructor_uses_global_object: The constructor of global object "FormatStyleConfig[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "FormatStyleConfig[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   59|   // project.
#   60|   
#   61|-> static cl::opt<std::string> FormatStyleConfig(
#   62|       "style-config",
#   63|       cl::desc("Path to a directory containing a .clang-format file\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:61:29: constructor_uses_global_object: The constructor of global object "FormatStyleConfig[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FormatStyleConfig[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   59|   // project.
#   60|   
#   61|-> static cl::opt<std::string> FormatStyleConfig(
#   62|       "style-config",
#   63|       cl::desc("Path to a directory containing a .clang-format file\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:61:29: constructor_uses_global_object: The constructor of global object "FormatStyleConfig[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "FormatStyleConfig[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   59|   // project.
#   60|   
#   61|-> static cl::opt<std::string> FormatStyleConfig(
#   62|       "style-config",
#   63|       cl::desc("Path to a directory containing a .clang-format file\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:69:5: constructor_uses_global_object: The constructor of global object "FormatStyleOpt[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "FormatStyleOpt[abi:cxx11]" might be created before "Allocator" is available.
#   67|   
#   68|   static cl::opt<std::string>
#   69|->     FormatStyleOpt("style", cl::desc(format::StyleOptionHelpDescription),
#   70|                      cl::init("LLVM"), cl::cat(FormattingCategory));
#   71|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:69:5: constructor_uses_global_object: The constructor of global object "FormatStyleOpt[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "FormatStyleOpt[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   67|   
#   68|   static cl::opt<std::string>
#   69|->     FormatStyleOpt("style", cl::desc(format::StyleOptionHelpDescription),
#   70|                      cl::init("LLVM"), cl::cat(FormattingCategory));
#   71|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:69:5: constructor_uses_global_object: The constructor of global object "FormatStyleOpt[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FormatStyleOpt[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   67|   
#   68|   static cl::opt<std::string>
#   69|->     FormatStyleOpt("style", cl::desc(format::StyleOptionHelpDescription),
#   70|                      cl::init("LLVM"), cl::cat(FormattingCategory));
#   71|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp:69:5: constructor_uses_global_object: The constructor of global object "FormatStyleOpt[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "FormatStyleOpt[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   67|   
#   68|   static cl::opt<std::string>
#   69|->     FormatStyleOpt("style", cl::desc(format::StyleOptionHelpDescription),
#   70|                      cl::init("LLVM"), cl::cat(FormattingCategory));
#   71|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:48:20: constructor_uses_global_object: The constructor of global object "<unnamed>::ChangeNamespaceCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ChangeNamespaceCategory" might be created before "Allocator" is available.
#   46|   namespace {
#   47|   
#   48|-> cl::OptionCategory ChangeNamespaceCategory("Change namespace.");
#   49|   
#   50|   cl::opt<std::string> OldNamespace("old_namespace", cl::Required,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:48:20: constructor_uses_global_object: The constructor of global object "<unnamed>::ChangeNamespaceCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ChangeNamespaceCategory" might be created before "GlobalParser" is available.
#   46|   namespace {
#   47|   
#   48|-> cl::OptionCategory ChangeNamespaceCategory("Change namespace.");
#   49|   
#   50|   cl::opt<std::string> OldNamespace("old_namespace", cl::Required,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:48:20: constructor_uses_global_object: The constructor of global object "<unnamed>::ChangeNamespaceCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ChangeNamespaceCategory" might be created before "fuzzer::TPC" is available.
#   46|   namespace {
#   47|   
#   48|-> cl::OptionCategory ChangeNamespaceCategory("Change namespace.");
#   49|   
#   50|   cl::opt<std::string> OldNamespace("old_namespace", cl::Required,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:48:20: constructor_uses_global_object: The constructor of global object "<unnamed>::ChangeNamespaceCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ChangeNamespaceCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   46|   namespace {
#   47|   
#   48|-> cl::OptionCategory ChangeNamespaceCategory("Change namespace.");
#   49|   
#   50|   cl::opt<std::string> OldNamespace("old_namespace", cl::Required,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:50:22: constructor_uses_global_object: The constructor of global object "<unnamed>::OldNamespace[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldNamespace[abi:cxx11]" might be created before "Allocator" is available.
#   48|   cl::OptionCategory ChangeNamespaceCategory("Change namespace.");
#   49|   
#   50|-> cl::opt<std::string> OldNamespace("old_namespace", cl::Required,
#   51|                                     cl::desc("Old namespace."),
#   52|                                     cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:50:22: constructor_uses_global_object: The constructor of global object "<unnamed>::OldNamespace[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldNamespace[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   48|   cl::OptionCategory ChangeNamespaceCategory("Change namespace.");
#   49|   
#   50|-> cl::opt<std::string> OldNamespace("old_namespace", cl::Required,
#   51|                                     cl::desc("Old namespace."),
#   52|                                     cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:50:22: constructor_uses_global_object: The constructor of global object "<unnamed>::OldNamespace[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldNamespace[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   48|   cl::OptionCategory ChangeNamespaceCategory("Change namespace.");
#   49|   
#   50|-> cl::opt<std::string> OldNamespace("old_namespace", cl::Required,
#   51|                                     cl::desc("Old namespace."),
#   52|                                     cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:50:22: constructor_uses_global_object: The constructor of global object "<unnamed>::OldNamespace[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldNamespace[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   48|   cl::OptionCategory ChangeNamespaceCategory("Change namespace.");
#   49|   
#   50|-> cl::opt<std::string> OldNamespace("old_namespace", cl::Required,
#   51|                                     cl::desc("Old namespace."),
#   52|                                     cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:54:22: constructor_uses_global_object: The constructor of global object "<unnamed>::NewNamespace[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewNamespace[abi:cxx11]" might be created before "Allocator" is available.
#   52|                                     cl::cat(ChangeNamespaceCategory));
#   53|   
#   54|-> cl::opt<std::string> NewNamespace("new_namespace", cl::Required,
#   55|                                     cl::desc("New namespace."),
#   56|                                     cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:54:22: constructor_uses_global_object: The constructor of global object "<unnamed>::NewNamespace[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewNamespace[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   52|                                     cl::cat(ChangeNamespaceCategory));
#   53|   
#   54|-> cl::opt<std::string> NewNamespace("new_namespace", cl::Required,
#   55|                                     cl::desc("New namespace."),
#   56|                                     cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:54:22: constructor_uses_global_object: The constructor of global object "<unnamed>::NewNamespace[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewNamespace[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|                                     cl::cat(ChangeNamespaceCategory));
#   53|   
#   54|-> cl::opt<std::string> NewNamespace("new_namespace", cl::Required,
#   55|                                     cl::desc("New namespace."),
#   56|                                     cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:54:22: constructor_uses_global_object: The constructor of global object "<unnamed>::NewNamespace[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewNamespace[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   52|                                     cl::cat(ChangeNamespaceCategory));
#   53|   
#   54|-> cl::opt<std::string> NewNamespace("new_namespace", cl::Required,
#   55|                                     cl::desc("New namespace."),
#   56|                                     cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:58:22: constructor_uses_global_object: The constructor of global object "<unnamed>::FilePattern[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::FilePattern[abi:cxx11]" might be created before "Allocator" is available.
#   56|                                     cl::cat(ChangeNamespaceCategory));
#   57|   
#   58|-> cl::opt<std::string> FilePattern(
#   59|       "file_pattern", cl::Required,
#   60|       cl::desc("Only rename namespaces in files that match the given pattern."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:58:22: constructor_uses_global_object: The constructor of global object "<unnamed>::FilePattern[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::FilePattern[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   56|                                     cl::cat(ChangeNamespaceCategory));
#   57|   
#   58|-> cl::opt<std::string> FilePattern(
#   59|       "file_pattern", cl::Required,
#   60|       cl::desc("Only rename namespaces in files that match the given pattern."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:58:22: constructor_uses_global_object: The constructor of global object "<unnamed>::FilePattern[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::FilePattern[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   56|                                     cl::cat(ChangeNamespaceCategory));
#   57|   
#   58|-> cl::opt<std::string> FilePattern(
#   59|       "file_pattern", cl::Required,
#   60|       cl::desc("Only rename namespaces in files that match the given pattern."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:58:22: constructor_uses_global_object: The constructor of global object "<unnamed>::FilePattern[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::FilePattern[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   56|                                     cl::cat(ChangeNamespaceCategory));
#   57|   
#   58|-> cl::opt<std::string> FilePattern(
#   59|       "file_pattern", cl::Required,
#   60|       cl::desc("Only rename namespaces in files that match the given pattern."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:63:15: constructor_uses_global_object: The constructor of global object "<unnamed>::Inplace" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Inplace" might be created before "Allocator" is available.
#   61|       cl::cat(ChangeNamespaceCategory));
#   62|   
#   63|-> cl::opt<bool> Inplace("i", cl::desc("Inplace edit <file>s, if specified."),
#   64|                         cl::cat(ChangeNamespaceCategory));
#   65|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:63:15: constructor_uses_global_object: The constructor of global object "<unnamed>::Inplace" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Inplace" might be created before "fuzzer::TPC" is available.
#   61|       cl::cat(ChangeNamespaceCategory));
#   62|   
#   63|-> cl::opt<bool> Inplace("i", cl::desc("Inplace edit <file>s, if specified."),
#   64|                         cl::cat(ChangeNamespaceCategory));
#   65|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:63:15: constructor_uses_global_object: The constructor of global object "<unnamed>::Inplace" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Inplace" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   61|       cl::cat(ChangeNamespaceCategory));
#   62|   
#   63|-> cl::opt<bool> Inplace("i", cl::desc("Inplace edit <file>s, if specified."),
#   64|                         cl::cat(ChangeNamespaceCategory));
#   65|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:63:15: constructor_uses_global_object: The constructor of global object "<unnamed>::Inplace" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Inplace" might be created before "scudo::RegionPageMap::Buffers" is available.
#   61|       cl::cat(ChangeNamespaceCategory));
#   62|   
#   63|-> cl::opt<bool> Inplace("i", cl::desc("Inplace edit <file>s, if specified."),
#   64|                         cl::cat(ChangeNamespaceCategory));
#   65|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:67:5: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpYAML" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpYAML" might be created before "Allocator" is available.
#   65|   
#   66|   cl::opt<bool>
#   67|->     DumpYAML("dump_result",
#   68|            cl::desc("Dump new file contents in YAML, if specified."),
#   69|            cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:67:5: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpYAML" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpYAML" might be created before "fuzzer::TPC" is available.
#   65|   
#   66|   cl::opt<bool>
#   67|->     DumpYAML("dump_result",
#   68|            cl::desc("Dump new file contents in YAML, if specified."),
#   69|            cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:67:5: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpYAML" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpYAML" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   65|   
#   66|   cl::opt<bool>
#   67|->     DumpYAML("dump_result",
#   68|            cl::desc("Dump new file contents in YAML, if specified."),
#   69|            cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:67:5: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpYAML" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpYAML" might be created before "scudo::RegionPageMap::Buffers" is available.
#   65|   
#   66|   cl::opt<bool>
#   67|->     DumpYAML("dump_result",
#   68|            cl::desc("Dump new file contents in YAML, if specified."),
#   69|            cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:71:22: constructor_uses_global_object: The constructor of global object "<unnamed>::Style[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Style[abi:cxx11]" might be created before "Allocator" is available.
#   69|            cl::cat(ChangeNamespaceCategory));
#   70|   
#   71|-> cl::opt<std::string> Style("style",
#   72|                              cl::desc("The style name used for reformatting."),
#   73|                              cl::init("LLVM"), cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:71:22: constructor_uses_global_object: The constructor of global object "<unnamed>::Style[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Style[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   69|            cl::cat(ChangeNamespaceCategory));
#   70|   
#   71|-> cl::opt<std::string> Style("style",
#   72|                              cl::desc("The style name used for reformatting."),
#   73|                              cl::init("LLVM"), cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:71:22: constructor_uses_global_object: The constructor of global object "<unnamed>::Style[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Style[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   69|            cl::cat(ChangeNamespaceCategory));
#   70|   
#   71|-> cl::opt<std::string> Style("style",
#   72|                              cl::desc("The style name used for reformatting."),
#   73|                              cl::init("LLVM"), cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:71:22: constructor_uses_global_object: The constructor of global object "<unnamed>::Style[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Style[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   69|            cl::cat(ChangeNamespaceCategory));
#   70|   
#   71|-> cl::opt<std::string> Style("style",
#   72|                              cl::desc("The style name used for reformatting."),
#   73|                              cl::init("LLVM"), cl::cat(ChangeNamespaceCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:75:22: constructor_uses_global_object: The constructor of global object "<unnamed>::AllowedFile[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::AllowedFile[abi:cxx11]" might be created before "Allocator" is available.
#   73|                              cl::init("LLVM"), cl::cat(ChangeNamespaceCategory));
#   74|   
#   75|-> cl::opt<std::string> AllowedFile(
#   76|       "allowed_file",
#   77|       cl::desc("A file containing regexes of symbol names that are not expected "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:75:22: constructor_uses_global_object: The constructor of global object "<unnamed>::AllowedFile[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::AllowedFile[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   73|                              cl::init("LLVM"), cl::cat(ChangeNamespaceCategory));
#   74|   
#   75|-> cl::opt<std::string> AllowedFile(
#   76|       "allowed_file",
#   77|       cl::desc("A file containing regexes of symbol names that are not expected "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:75:22: constructor_uses_global_object: The constructor of global object "<unnamed>::AllowedFile[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::AllowedFile[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   73|                              cl::init("LLVM"), cl::cat(ChangeNamespaceCategory));
#   74|   
#   75|-> cl::opt<std::string> AllowedFile(
#   76|       "allowed_file",
#   77|       cl::desc("A file containing regexes of symbol names that are not expected "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-change-namespace/tool/ClangChangeNamespace.cpp:75:22: constructor_uses_global_object: The constructor of global object "<unnamed>::AllowedFile[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::AllowedFile[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   73|                              cl::init("LLVM"), cl::cat(ChangeNamespaceCategory));
#   74|   
#   75|-> cl::opt<std::string> AllowedFile(
#   76|       "allowed_file",
#   77|       cl::desc("A file containing regexes of symbol names that are not expected "

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/HTMLGenerator.cpp:569:3: var_decl: Declaring variable "Idx".
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/HTMLGenerator.cpp:573:3: uninit_use: Using uninitialized value "Idx". Field "Idx.Path.InlineElts" is uninitialized.
#  571|       Idx.Children.emplace_back(C.extractName(),
#  572|                                 llvm::toHex(llvm::toStringRef(C.USR)));
#  573|->   return Idx;
#  574|   }
#  575|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/Serialize.cpp:50:3: var_decl: Declaring variable "Path".
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/Serialize.cpp:53:3: uninit_use: Using uninitialized value "Path". Field "Path.InlineElts" is uninitialized.
#   51|     for (auto R = Namespaces.rbegin(), E = Namespaces.rend(); R != E; ++R)
#   52|       llvm::sys::path::append(Path, R->Name);
#   53|->   return Path;
#   54|   }
#   55|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/YAMLGenerator.cpp:100:5: var_decl: Declaring variable "USR" without initializer.
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/YAMLGenerator.cpp:103:5: uninit_use: Using uninitialized value "USR".
#  101|       std::string HexString = fromHex(Value);
#  102|       std::copy(HexString.begin(), HexString.end(), USR.begin());
#  103|->     return SymbolID(USR);
#  104|     }
#  105|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:53:28: constructor_uses_global_object: The constructor of global object "CommonHelp" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "CommonHelp" might be created before "GlobalParser" is available.
#   51|   using namespace clang;
#   52|   
#   53|-> static llvm::cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   54|   static llvm::cl::OptionCategory ClangDocCategory("clang-doc options");
#   55|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:54:33: constructor_uses_global_object: The constructor of global object "ClangDocCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ClangDocCategory" might be created before "Allocator" is available.
#   52|   
#   53|   static llvm::cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   54|-> static llvm::cl::OptionCategory ClangDocCategory("clang-doc options");
#   55|   
#   56|   static llvm::cl::opt<std::string>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:54:33: constructor_uses_global_object: The constructor of global object "ClangDocCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "ClangDocCategory" might be created before "GlobalParser" is available.
#   52|   
#   53|   static llvm::cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   54|-> static llvm::cl::OptionCategory ClangDocCategory("clang-doc options");
#   55|   
#   56|   static llvm::cl::opt<std::string>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:54:33: constructor_uses_global_object: The constructor of global object "ClangDocCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ClangDocCategory" might be created before "fuzzer::TPC" is available.
#   52|   
#   53|   static llvm::cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   54|-> static llvm::cl::OptionCategory ClangDocCategory("clang-doc options");
#   55|   
#   56|   static llvm::cl::opt<std::string>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:54:33: constructor_uses_global_object: The constructor of global object "ClangDocCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ClangDocCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   52|   
#   53|   static llvm::cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   54|-> static llvm::cl::OptionCategory ClangDocCategory("clang-doc options");
#   55|   
#   56|   static llvm::cl::opt<std::string>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:57:5: constructor_uses_global_object: The constructor of global object "ProjectName[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ProjectName[abi:cxx11]" might be created before "Allocator" is available.
#   55|   
#   56|   static llvm::cl::opt<std::string>
#   57|->     ProjectName("project-name", llvm::cl::desc("Name of project."),
#   58|                   llvm::cl::cat(ClangDocCategory));
#   59|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:57:5: constructor_uses_global_object: The constructor of global object "ProjectName[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ProjectName[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   55|   
#   56|   static llvm::cl::opt<std::string>
#   57|->     ProjectName("project-name", llvm::cl::desc("Name of project."),
#   58|                   llvm::cl::cat(ClangDocCategory));
#   59|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:57:5: constructor_uses_global_object: The constructor of global object "ProjectName[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ProjectName[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   55|   
#   56|   static llvm::cl::opt<std::string>
#   57|->     ProjectName("project-name", llvm::cl::desc("Name of project."),
#   58|                   llvm::cl::cat(ClangDocCategory));
#   59|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:57:5: constructor_uses_global_object: The constructor of global object "ProjectName[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ProjectName[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   55|   
#   56|   static llvm::cl::opt<std::string>
#   57|->     ProjectName("project-name", llvm::cl::desc("Name of project."),
#   58|                   llvm::cl::cat(ClangDocCategory));
#   59|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:60:28: constructor_uses_global_object: The constructor of global object "IgnoreMappingFailures" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "IgnoreMappingFailures" might be created before "Allocator" is available.
#   58|                   llvm::cl::cat(ClangDocCategory));
#   59|   
#   60|-> static llvm::cl::opt<bool> IgnoreMappingFailures(
#   61|       "ignore-map-errors",
#   62|       llvm::cl::desc("Continue if files are not mapped correctly."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:60:28: constructor_uses_global_object: The constructor of global object "IgnoreMappingFailures" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "IgnoreMappingFailures" might be created before "fuzzer::TPC" is available.
#   58|                   llvm::cl::cat(ClangDocCategory));
#   59|   
#   60|-> static llvm::cl::opt<bool> IgnoreMappingFailures(
#   61|       "ignore-map-errors",
#   62|       llvm::cl::desc("Continue if files are not mapped correctly."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:60:28: constructor_uses_global_object: The constructor of global object "IgnoreMappingFailures" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "IgnoreMappingFailures" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   58|                   llvm::cl::cat(ClangDocCategory));
#   59|   
#   60|-> static llvm::cl::opt<bool> IgnoreMappingFailures(
#   61|       "ignore-map-errors",
#   62|       llvm::cl::desc("Continue if files are not mapped correctly."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:60:28: constructor_uses_global_object: The constructor of global object "IgnoreMappingFailures" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "IgnoreMappingFailures" might be created before "scudo::RegionPageMap::Buffers" is available.
#   58|                   llvm::cl::cat(ClangDocCategory));
#   59|   
#   60|-> static llvm::cl::opt<bool> IgnoreMappingFailures(
#   61|       "ignore-map-errors",
#   62|       llvm::cl::desc("Continue if files are not mapped correctly."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:66:5: constructor_uses_global_object: The constructor of global object "OutDirectory[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "OutDirectory[abi:cxx11]" might be created before "Allocator" is available.
#   64|   
#   65|   static llvm::cl::opt<std::string>
#   66|->     OutDirectory("output",
#   67|                    llvm::cl::desc("Directory for outputting generated files."),
#   68|                    llvm::cl::init("docs"), llvm::cl::cat(ClangDocCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:66:5: constructor_uses_global_object: The constructor of global object "OutDirectory[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "OutDirectory[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   64|   
#   65|   static llvm::cl::opt<std::string>
#   66|->     OutDirectory("output",
#   67|                    llvm::cl::desc("Directory for outputting generated files."),
#   68|                    llvm::cl::init("docs"), llvm::cl::cat(ClangDocCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:66:5: constructor_uses_global_object: The constructor of global object "OutDirectory[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OutDirectory[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   64|   
#   65|   static llvm::cl::opt<std::string>
#   66|->     OutDirectory("output",
#   67|                    llvm::cl::desc("Directory for outputting generated files."),
#   68|                    llvm::cl::init("docs"), llvm::cl::cat(ClangDocCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:66:5: constructor_uses_global_object: The constructor of global object "OutDirectory[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "OutDirectory[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   64|   
#   65|   static llvm::cl::opt<std::string>
#   66|->     OutDirectory("output",
#   67|                    llvm::cl::desc("Directory for outputting generated files."),
#   68|                    llvm::cl::init("docs"), llvm::cl::cat(ClangDocCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:71:5: constructor_uses_global_object: The constructor of global object "PublicOnly" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "PublicOnly" might be created before "Allocator" is available.
#   69|   
#   70|   static llvm::cl::opt<bool>
#   71|->     PublicOnly("public", llvm::cl::desc("Document only public declarations."),
#   72|                  llvm::cl::init(false), llvm::cl::cat(ClangDocCategory));
#   73|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:71:5: constructor_uses_global_object: The constructor of global object "PublicOnly" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "PublicOnly" might be created before "fuzzer::TPC" is available.
#   69|   
#   70|   static llvm::cl::opt<bool>
#   71|->     PublicOnly("public", llvm::cl::desc("Document only public declarations."),
#   72|                  llvm::cl::init(false), llvm::cl::cat(ClangDocCategory));
#   73|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:71:5: constructor_uses_global_object: The constructor of global object "PublicOnly" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PublicOnly" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   69|   
#   70|   static llvm::cl::opt<bool>
#   71|->     PublicOnly("public", llvm::cl::desc("Document only public declarations."),
#   72|                  llvm::cl::init(false), llvm::cl::cat(ClangDocCategory));
#   73|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:71:5: constructor_uses_global_object: The constructor of global object "PublicOnly" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "PublicOnly" might be created before "scudo::RegionPageMap::Buffers" is available.
#   69|   
#   70|   static llvm::cl::opt<bool>
#   71|->     PublicOnly("public", llvm::cl::desc("Document only public declarations."),
#   72|                  llvm::cl::init(false), llvm::cl::cat(ClangDocCategory));
#   73|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:74:28: constructor_uses_global_object: The constructor of global object "DoxygenOnly" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "DoxygenOnly" might be created before "Allocator" is available.
#   72|                  llvm::cl::init(false), llvm::cl::cat(ClangDocCategory));
#   73|   
#   74|-> static llvm::cl::opt<bool> DoxygenOnly(
#   75|       "doxygen",
#   76|       llvm::cl::desc("Use only doxygen-style comments to generate docs."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:74:28: constructor_uses_global_object: The constructor of global object "DoxygenOnly" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "DoxygenOnly" might be created before "fuzzer::TPC" is available.
#   72|                  llvm::cl::init(false), llvm::cl::cat(ClangDocCategory));
#   73|   
#   74|-> static llvm::cl::opt<bool> DoxygenOnly(
#   75|       "doxygen",
#   76|       llvm::cl::desc("Use only doxygen-style comments to generate docs."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:74:28: constructor_uses_global_object: The constructor of global object "DoxygenOnly" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DoxygenOnly" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   72|                  llvm::cl::init(false), llvm::cl::cat(ClangDocCategory));
#   73|   
#   74|-> static llvm::cl::opt<bool> DoxygenOnly(
#   75|       "doxygen",
#   76|       llvm::cl::desc("Use only doxygen-style comments to generate docs."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:74:28: constructor_uses_global_object: The constructor of global object "DoxygenOnly" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "DoxygenOnly" might be created before "scudo::RegionPageMap::Buffers" is available.
#   72|                  llvm::cl::init(false), llvm::cl::cat(ClangDocCategory));
#   73|   
#   74|-> static llvm::cl::opt<bool> DoxygenOnly(
#   75|       "doxygen",
#   76|       llvm::cl::desc("Use only doxygen-style comments to generate docs."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:79:36: constructor_uses_global_object: The constructor of global object "UserStylesheets[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "UserStylesheets[abi:cxx11]" might be created before "Allocator" is available.
#   77|       llvm::cl::init(false), llvm::cl::cat(ClangDocCategory));
#   78|   
#   79|-> static llvm::cl::list<std::string> UserStylesheets(
#   80|       "stylesheets", llvm::cl::CommaSeparated,
#   81|       llvm::cl::desc("CSS stylesheets to extend the default styles."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:79:36: constructor_uses_global_object: The constructor of global object "UserStylesheets[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "UserStylesheets[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   77|       llvm::cl::init(false), llvm::cl::cat(ClangDocCategory));
#   78|   
#   79|-> static llvm::cl::list<std::string> UserStylesheets(
#   80|       "stylesheets", llvm::cl::CommaSeparated,
#   81|       llvm::cl::desc("CSS stylesheets to extend the default styles."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:79:36: constructor_uses_global_object: The constructor of global object "UserStylesheets[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UserStylesheets[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   77|       llvm::cl::init(false), llvm::cl::cat(ClangDocCategory));
#   78|   
#   79|-> static llvm::cl::list<std::string> UserStylesheets(
#   80|       "stylesheets", llvm::cl::CommaSeparated,
#   81|       llvm::cl::desc("CSS stylesheets to extend the default styles."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:79:36: constructor_uses_global_object: The constructor of global object "UserStylesheets[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "UserStylesheets[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   77|       llvm::cl::init(false), llvm::cl::cat(ClangDocCategory));
#   78|   
#   79|-> static llvm::cl::list<std::string> UserStylesheets(
#   80|       "stylesheets", llvm::cl::CommaSeparated,
#   81|       llvm::cl::desc("CSS stylesheets to extend the default styles."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:84:35: constructor_uses_global_object: The constructor of global object "SourceRoot[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "SourceRoot[abi:cxx11]" might be created before "Allocator" is available.
#   82|       llvm::cl::cat(ClangDocCategory));
#   83|   
#   84|-> static llvm::cl::opt<std::string> SourceRoot("source-root", llvm::cl::desc(R"(
#   85|   Directory where processed files are stored.
#   86|   Links to definition locations will only be

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:84:35: constructor_uses_global_object: The constructor of global object "SourceRoot[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "SourceRoot[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   82|       llvm::cl::cat(ClangDocCategory));
#   83|   
#   84|-> static llvm::cl::opt<std::string> SourceRoot("source-root", llvm::cl::desc(R"(
#   85|   Directory where processed files are stored.
#   86|   Links to definition locations will only be

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:84:35: constructor_uses_global_object: The constructor of global object "SourceRoot[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SourceRoot[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   82|       llvm::cl::cat(ClangDocCategory));
#   83|   
#   84|-> static llvm::cl::opt<std::string> SourceRoot("source-root", llvm::cl::desc(R"(
#   85|   Directory where processed files are stored.
#   86|   Links to definition locations will only be

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:84:35: constructor_uses_global_object: The constructor of global object "SourceRoot[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "SourceRoot[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   82|       llvm::cl::cat(ClangDocCategory));
#   83|   
#   84|-> static llvm::cl::opt<std::string> SourceRoot("source-root", llvm::cl::desc(R"(
#   85|   Directory where processed files are stored.
#   86|   Links to definition locations will only be

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:91:5: constructor_uses_global_object: The constructor of global object "RepositoryUrl[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "RepositoryUrl[abi:cxx11]" might be created before "Allocator" is available.
#   89|   
#   90|   static llvm::cl::opt<std::string>
#   91|->     RepositoryUrl("repository", llvm::cl::desc(R"(
#   92|   URL of repository that hosts code.
#   93|   Used for links to definition locations.)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:91:5: constructor_uses_global_object: The constructor of global object "RepositoryUrl[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "RepositoryUrl[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   89|   
#   90|   static llvm::cl::opt<std::string>
#   91|->     RepositoryUrl("repository", llvm::cl::desc(R"(
#   92|   URL of repository that hosts code.
#   93|   Used for links to definition locations.)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:91:5: constructor_uses_global_object: The constructor of global object "RepositoryUrl[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RepositoryUrl[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   89|   
#   90|   static llvm::cl::opt<std::string>
#   91|->     RepositoryUrl("repository", llvm::cl::desc(R"(
#   92|   URL of repository that hosts code.
#   93|   Used for links to definition locations.)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:91:5: constructor_uses_global_object: The constructor of global object "RepositoryUrl[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "RepositoryUrl[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   89|   
#   90|   static llvm::cl::opt<std::string>
#   91|->     RepositoryUrl("repository", llvm::cl::desc(R"(
#   92|   URL of repository that hosts code.
#   93|   Used for links to definition locations.)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:103:5: constructor_uses_global_object: The constructor of global object "FormatEnum" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "FormatEnum" might be created before "Allocator" is available.
#  101|   
#  102|   static llvm::cl::opt<OutputFormatTy>
#  103|->     FormatEnum("format", llvm::cl::desc("Format for outputted docs."),
#  104|                  llvm::cl::values(clEnumValN(OutputFormatTy::yaml, "yaml",
#  105|                                              "Documentation in YAML format."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:103:5: constructor_uses_global_object: The constructor of global object "FormatEnum" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "FormatEnum" might be created before "fuzzer::TPC" is available.
#  101|   
#  102|   static llvm::cl::opt<OutputFormatTy>
#  103|->     FormatEnum("format", llvm::cl::desc("Format for outputted docs."),
#  104|                  llvm::cl::values(clEnumValN(OutputFormatTy::yaml, "yaml",
#  105|                                              "Documentation in YAML format."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:103:5: constructor_uses_global_object: The constructor of global object "FormatEnum" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FormatEnum" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  101|   
#  102|   static llvm::cl::opt<OutputFormatTy>
#  103|->     FormatEnum("format", llvm::cl::desc("Format for outputted docs."),
#  104|                  llvm::cl::values(clEnumValN(OutputFormatTy::yaml, "yaml",
#  105|                                              "Documentation in YAML format."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-doc/tool/ClangDocMain.cpp:103:5: constructor_uses_global_object: The constructor of global object "FormatEnum" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "FormatEnum" might be created before "scudo::RegionPageMap::Buffers" is available.
#  101|   
#  102|   static llvm::cl::opt<OutputFormatTy>
#  103|->     FormatEnum("format", llvm::cl::desc("Format for outputted docs."),
#  104|                  llvm::cl::values(clEnumValN(OutputFormatTy::yaml, "yaml",
#  105|                                              "Documentation in YAML format."),

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/IncludeFixer.cpp:286:5: var_decl: Declaring variable "Correction".
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/IncludeFixer.cpp:296:7: uninit_use: Using uninitialized value "Correction". Field "Correction.CorrectionDecls.InlineElts" is uninitialized.
#  294|                               MatchedSymbols),
#  295|               Code, StartOfFile, CI->getASTContext()))
#  296|->       return Correction;
#  297|     }
#  298|     return TypoCorrection();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/IncludeFixerContext.cpp:20:3: var_decl: Declaring variable "Qualifiers".
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/IncludeFixerContext.cpp:22:3: uninit_use: Using uninitialized value "Qualifiers". Field "Qualifiers.InlineElts" is uninitialized.
#   20|     llvm::SmallVector<llvm::StringRef, 8> Qualifiers;
#   21|     StringQualifiers.split(Qualifiers, "::");
#   22|->   return Qualifiers;
#   23|   }
#   24|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/FindAllSymbolsMain.cpp:42:27: constructor_uses_global_object: The constructor of global object "FindAllSymbolsCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "FindAllSymbolsCategory" might be created before "Allocator" is available.
#   40|   // Apply a custom category to all command-line options so that they are the
#   41|   // only ones displayed.
#   42|-> static cl::OptionCategory FindAllSymbolsCategory("find_all_symbols options");
#   43|   
#   44|   // CommonOptionsParser declares HelpMessage with a description of the common

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/FindAllSymbolsMain.cpp:42:27: constructor_uses_global_object: The constructor of global object "FindAllSymbolsCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "FindAllSymbolsCategory" might be created before "GlobalParser" is available.
#   40|   // Apply a custom category to all command-line options so that they are the
#   41|   // only ones displayed.
#   42|-> static cl::OptionCategory FindAllSymbolsCategory("find_all_symbols options");
#   43|   
#   44|   // CommonOptionsParser declares HelpMessage with a description of the common

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/FindAllSymbolsMain.cpp:42:27: constructor_uses_global_object: The constructor of global object "FindAllSymbolsCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "FindAllSymbolsCategory" might be created before "fuzzer::TPC" is available.
#   40|   // Apply a custom category to all command-line options so that they are the
#   41|   // only ones displayed.
#   42|-> static cl::OptionCategory FindAllSymbolsCategory("find_all_symbols options");
#   43|   
#   44|   // CommonOptionsParser declares HelpMessage with a description of the common

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/FindAllSymbolsMain.cpp:42:27: constructor_uses_global_object: The constructor of global object "FindAllSymbolsCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "FindAllSymbolsCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   40|   // Apply a custom category to all command-line options so that they are the
#   41|   // only ones displayed.
#   42|-> static cl::OptionCategory FindAllSymbolsCategory("find_all_symbols options");
#   43|   
#   44|   // CommonOptionsParser declares HelpMessage with a description of the common

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/FindAllSymbolsMain.cpp:47:22: constructor_uses_global_object: The constructor of global object "CommonHelp" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "CommonHelp" might be created before "GlobalParser" is available.
#   45|   // command-line options related to the compilation database and input files.
#   46|   // It's nice to have this help message in all tools.
#   47|-> static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   48|   
#   49|   // A help message for this specific tool can be added afterwards.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/FindAllSymbolsMain.cpp:50:22: constructor_uses_global_object: The constructor of global object "MoreHelp" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "MoreHelp" might be created before "GlobalParser" is available.
#   48|   
#   49|   // A help message for this specific tool can be added afterwards.
#   50|-> static cl::extrahelp MoreHelp("\nMore help text...");
#   51|   
#   52|   static cl::opt<std::string> OutputDir("output-dir", cl::desc(R"(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/FindAllSymbolsMain.cpp:52:29: constructor_uses_global_object: The constructor of global object "OutputDir[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "OutputDir[abi:cxx11]" might be created before "Allocator" is available.
#   50|   static cl::extrahelp MoreHelp("\nMore help text...");
#   51|   
#   52|-> static cl::opt<std::string> OutputDir("output-dir", cl::desc(R"(
#   53|   The output directory for saving the results.)"),
#   54|                                         cl::init("."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/FindAllSymbolsMain.cpp:52:29: constructor_uses_global_object: The constructor of global object "OutputDir[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "OutputDir[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   50|   static cl::extrahelp MoreHelp("\nMore help text...");
#   51|   
#   52|-> static cl::opt<std::string> OutputDir("output-dir", cl::desc(R"(
#   53|   The output directory for saving the results.)"),
#   54|                                         cl::init("."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/FindAllSymbolsMain.cpp:52:29: constructor_uses_global_object: The constructor of global object "OutputDir[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OutputDir[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   50|   static cl::extrahelp MoreHelp("\nMore help text...");
#   51|   
#   52|-> static cl::opt<std::string> OutputDir("output-dir", cl::desc(R"(
#   53|   The output directory for saving the results.)"),
#   54|                                         cl::init("."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/FindAllSymbolsMain.cpp:52:29: constructor_uses_global_object: The constructor of global object "OutputDir[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "OutputDir[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   50|   static cl::extrahelp MoreHelp("\nMore help text...");
#   51|   
#   52|-> static cl::opt<std::string> OutputDir("output-dir", cl::desc(R"(
#   53|   The output directory for saving the results.)"),
#   54|                                         cl::init("."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/FindAllSymbolsMain.cpp:57:29: constructor_uses_global_object: The constructor of global object "MergeDir[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "MergeDir[abi:cxx11]" might be created before "Allocator" is available.
#   55|                                         cl::cat(FindAllSymbolsCategory));
#   56|   
#   57|-> static cl::opt<std::string> MergeDir("merge-dir", cl::desc(R"(
#   58|   The directory for merging symbols.)"),
#   59|                                        cl::init(""),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/FindAllSymbolsMain.cpp:57:29: constructor_uses_global_object: The constructor of global object "MergeDir[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "MergeDir[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   55|                                         cl::cat(FindAllSymbolsCategory));
#   56|   
#   57|-> static cl::opt<std::string> MergeDir("merge-dir", cl::desc(R"(
#   58|   The directory for merging symbols.)"),
#   59|                                        cl::init(""),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/FindAllSymbolsMain.cpp:57:29: constructor_uses_global_object: The constructor of global object "MergeDir[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MergeDir[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   55|                                         cl::cat(FindAllSymbolsCategory));
#   56|   
#   57|-> static cl::opt<std::string> MergeDir("merge-dir", cl::desc(R"(
#   58|   The directory for merging symbols.)"),
#   59|                                        cl::init(""),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/FindAllSymbolsMain.cpp:57:29: constructor_uses_global_object: The constructor of global object "MergeDir[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "MergeDir[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   55|                                         cl::cat(FindAllSymbolsCategory));
#   56|   
#   57|-> static cl::opt<std::string> MergeDir("merge-dir", cl::desc(R"(
#   58|   The directory for merging symbols.)"),
#   59|                                        cl::init(""),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:82:20: constructor_uses_global_object: The constructor of global object "<unnamed>::IncludeFixerCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::IncludeFixerCategory" might be created before "Allocator" is available.
#   80|   
#   81|   namespace {
#   82|-> cl::OptionCategory IncludeFixerCategory("Tool options");
#   83|   
#   84|   enum DatabaseFormatTy {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:82:20: constructor_uses_global_object: The constructor of global object "<unnamed>::IncludeFixerCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::IncludeFixerCategory" might be created before "GlobalParser" is available.
#   80|   
#   81|   namespace {
#   82|-> cl::OptionCategory IncludeFixerCategory("Tool options");
#   83|   
#   84|   enum DatabaseFormatTy {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:82:20: constructor_uses_global_object: The constructor of global object "<unnamed>::IncludeFixerCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::IncludeFixerCategory" might be created before "fuzzer::TPC" is available.
#   80|   
#   81|   namespace {
#   82|-> cl::OptionCategory IncludeFixerCategory("Tool options");
#   83|   
#   84|   enum DatabaseFormatTy {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:82:20: constructor_uses_global_object: The constructor of global object "<unnamed>::IncludeFixerCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::IncludeFixerCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   80|   
#   81|   namespace {
#   82|-> cl::OptionCategory IncludeFixerCategory("Tool options");
#   83|   
#   84|   enum DatabaseFormatTy {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:90:27: constructor_uses_global_object: The constructor of global object "<unnamed>::DatabaseFormat" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DatabaseFormat" might be created before "Allocator" is available.
#   88|   };
#   89|   
#   90|-> cl::opt<DatabaseFormatTy> DatabaseFormat(
#   91|       "db", cl::desc("Specify input format"),
#   92|       cl::values(clEnumVal(fixed, "Hard-coded mapping"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:90:27: constructor_uses_global_object: The constructor of global object "<unnamed>::DatabaseFormat" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DatabaseFormat" might be created before "fuzzer::TPC" is available.
#   88|   };
#   89|   
#   90|-> cl::opt<DatabaseFormatTy> DatabaseFormat(
#   91|       "db", cl::desc("Specify input format"),
#   92|       cl::values(clEnumVal(fixed, "Hard-coded mapping"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:90:27: constructor_uses_global_object: The constructor of global object "<unnamed>::DatabaseFormat" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DatabaseFormat" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   88|   };
#   89|   
#   90|-> cl::opt<DatabaseFormatTy> DatabaseFormat(
#   91|       "db", cl::desc("Specify input format"),
#   92|       cl::values(clEnumVal(fixed, "Hard-coded mapping"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:90:27: constructor_uses_global_object: The constructor of global object "<unnamed>::DatabaseFormat" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DatabaseFormat" might be created before "scudo::RegionPageMap::Buffers" is available.
#   88|   };
#   89|   
#   90|-> cl::opt<DatabaseFormatTy> DatabaseFormat(
#   91|       "db", cl::desc("Specify input format"),
#   92|       cl::values(clEnumVal(fixed, "Hard-coded mapping"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:97:22: constructor_uses_global_object: The constructor of global object "<unnamed>::Input[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Input[abi:cxx11]" might be created before "Allocator" is available.
#   95|       cl::init(yaml), cl::cat(IncludeFixerCategory));
#   96|   
#   97|-> cl::opt<std::string> Input("input",
#   98|                              cl::desc("String to initialize the database"),
#   99|                              cl::cat(IncludeFixerCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:97:22: constructor_uses_global_object: The constructor of global object "<unnamed>::Input[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Input[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   95|       cl::init(yaml), cl::cat(IncludeFixerCategory));
#   96|   
#   97|-> cl::opt<std::string> Input("input",
#   98|                              cl::desc("String to initialize the database"),
#   99|                              cl::cat(IncludeFixerCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:97:22: constructor_uses_global_object: The constructor of global object "<unnamed>::Input[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Input[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   95|       cl::init(yaml), cl::cat(IncludeFixerCategory));
#   96|   
#   97|-> cl::opt<std::string> Input("input",
#   98|                              cl::desc("String to initialize the database"),
#   99|                              cl::cat(IncludeFixerCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:97:22: constructor_uses_global_object: The constructor of global object "<unnamed>::Input[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Input[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   95|       cl::init(yaml), cl::cat(IncludeFixerCategory));
#   96|   
#   97|-> cl::opt<std::string> Input("input",
#   98|                              cl::desc("String to initialize the database"),
#   99|                              cl::cat(IncludeFixerCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:102:5: constructor_uses_global_object: The constructor of global object "<unnamed>::QuerySymbol[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::QuerySymbol[abi:cxx11]" might be created before "Allocator" is available.
#  100|   
#  101|   cl::opt<std::string>
#  102|->     QuerySymbol("query-symbol",
#  103|                    cl::desc("Query a given symbol (e.g. \"a::b::foo\") in\n"
#  104|                             "database directly without parsing the file."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:102:5: constructor_uses_global_object: The constructor of global object "<unnamed>::QuerySymbol[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::QuerySymbol[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  100|   
#  101|   cl::opt<std::string>
#  102|->     QuerySymbol("query-symbol",
#  103|                    cl::desc("Query a given symbol (e.g. \"a::b::foo\") in\n"
#  104|                             "database directly without parsing the file."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:102:5: constructor_uses_global_object: The constructor of global object "<unnamed>::QuerySymbol[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::QuerySymbol[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  100|   
#  101|   cl::opt<std::string>
#  102|->     QuerySymbol("query-symbol",
#  103|                    cl::desc("Query a given symbol (e.g. \"a::b::foo\") in\n"
#  104|                             "database directly without parsing the file."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:102:5: constructor_uses_global_object: The constructor of global object "<unnamed>::QuerySymbol[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::QuerySymbol[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  100|   
#  101|   cl::opt<std::string>
#  102|->     QuerySymbol("query-symbol",
#  103|                    cl::desc("Query a given symbol (e.g. \"a::b::foo\") in\n"
#  104|                             "database directly without parsing the file."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:108:5: constructor_uses_global_object: The constructor of global object "<unnamed>::MinimizeIncludePaths" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::MinimizeIncludePaths" might be created before "Allocator" is available.
#  106|   
#  107|   cl::opt<bool>
#  108|->     MinimizeIncludePaths("minimize-paths",
#  109|                            cl::desc("Whether to minimize added include paths"),
#  110|                            cl::init(true), cl::cat(IncludeFixerCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:108:5: constructor_uses_global_object: The constructor of global object "<unnamed>::MinimizeIncludePaths" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::MinimizeIncludePaths" might be created before "fuzzer::TPC" is available.
#  106|   
#  107|   cl::opt<bool>
#  108|->     MinimizeIncludePaths("minimize-paths",
#  109|                            cl::desc("Whether to minimize added include paths"),
#  110|                            cl::init(true), cl::cat(IncludeFixerCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:108:5: constructor_uses_global_object: The constructor of global object "<unnamed>::MinimizeIncludePaths" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::MinimizeIncludePaths" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  106|   
#  107|   cl::opt<bool>
#  108|->     MinimizeIncludePaths("minimize-paths",
#  109|                            cl::desc("Whether to minimize added include paths"),
#  110|                            cl::init(true), cl::cat(IncludeFixerCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:108:5: constructor_uses_global_object: The constructor of global object "<unnamed>::MinimizeIncludePaths" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::MinimizeIncludePaths" might be created before "scudo::RegionPageMap::Buffers" is available.
#  106|   
#  107|   cl::opt<bool>
#  108|->     MinimizeIncludePaths("minimize-paths",
#  109|                            cl::desc("Whether to minimize added include paths"),
#  110|                            cl::init(true), cl::cat(IncludeFixerCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:112:15: constructor_uses_global_object: The constructor of global object "<unnamed>::Quiet" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Quiet" might be created before "Allocator" is available.
#  110|                            cl::init(true), cl::cat(IncludeFixerCategory));
#  111|   
#  112|-> cl::opt<bool> Quiet("q", cl::desc("Reduce terminal output"), cl::init(false),
#  113|                       cl::cat(IncludeFixerCategory));
#  114|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:112:15: constructor_uses_global_object: The constructor of global object "<unnamed>::Quiet" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Quiet" might be created before "fuzzer::TPC" is available.
#  110|                            cl::init(true), cl::cat(IncludeFixerCategory));
#  111|   
#  112|-> cl::opt<bool> Quiet("q", cl::desc("Reduce terminal output"), cl::init(false),
#  113|                       cl::cat(IncludeFixerCategory));
#  114|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:112:15: constructor_uses_global_object: The constructor of global object "<unnamed>::Quiet" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Quiet" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  110|                            cl::init(true), cl::cat(IncludeFixerCategory));
#  111|   
#  112|-> cl::opt<bool> Quiet("q", cl::desc("Reduce terminal output"), cl::init(false),
#  113|                       cl::cat(IncludeFixerCategory));
#  114|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:112:15: constructor_uses_global_object: The constructor of global object "<unnamed>::Quiet" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Quiet" might be created before "scudo::RegionPageMap::Buffers" is available.
#  110|                            cl::init(true), cl::cat(IncludeFixerCategory));
#  111|   
#  112|-> cl::opt<bool> Quiet("q", cl::desc("Reduce terminal output"), cl::init(false),
#  113|                       cl::cat(IncludeFixerCategory));
#  114|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:116:5: constructor_uses_global_object: The constructor of global object "<unnamed>::STDINMode" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::STDINMode" might be created before "Allocator" is available.
#  114|   
#  115|   cl::opt<bool>
#  116|->     STDINMode("stdin",
#  117|                 cl::desc("Override source file's content (in the overlaying\n"
#  118|                          "virtual file system) with input from <stdin> and run\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:116:5: constructor_uses_global_object: The constructor of global object "<unnamed>::STDINMode" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::STDINMode" might be created before "fuzzer::TPC" is available.
#  114|   
#  115|   cl::opt<bool>
#  116|->     STDINMode("stdin",
#  117|                 cl::desc("Override source file's content (in the overlaying\n"
#  118|                          "virtual file system) with input from <stdin> and run\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:116:5: constructor_uses_global_object: The constructor of global object "<unnamed>::STDINMode" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::STDINMode" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  114|   
#  115|   cl::opt<bool>
#  116|->     STDINMode("stdin",
#  117|                 cl::desc("Override source file's content (in the overlaying\n"
#  118|                          "virtual file system) with input from <stdin> and run\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:116:5: constructor_uses_global_object: The constructor of global object "<unnamed>::STDINMode" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::STDINMode" might be created before "scudo::RegionPageMap::Buffers" is available.
#  114|   
#  115|   cl::opt<bool>
#  116|->     STDINMode("stdin",
#  117|                 cl::desc("Override source file's content (in the overlaying\n"
#  118|                          "virtual file system) with input from <stdin> and run\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:124:15: constructor_uses_global_object: The constructor of global object "<unnamed>::OutputHeaders" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OutputHeaders" might be created before "Allocator" is available.
#  122|                 cl::init(false), cl::cat(IncludeFixerCategory));
#  123|   
#  124|-> cl::opt<bool> OutputHeaders(
#  125|       "output-headers",
#  126|       cl::desc("Print the symbol being queried and all its relevant headers in\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:124:15: constructor_uses_global_object: The constructor of global object "<unnamed>::OutputHeaders" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OutputHeaders" might be created before "fuzzer::TPC" is available.
#  122|                 cl::init(false), cl::cat(IncludeFixerCategory));
#  123|   
#  124|-> cl::opt<bool> OutputHeaders(
#  125|       "output-headers",
#  126|       cl::desc("Print the symbol being queried and all its relevant headers in\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:124:15: constructor_uses_global_object: The constructor of global object "<unnamed>::OutputHeaders" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OutputHeaders" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  122|                 cl::init(false), cl::cat(IncludeFixerCategory));
#  123|   
#  124|-> cl::opt<bool> OutputHeaders(
#  125|       "output-headers",
#  126|       cl::desc("Print the symbol being queried and all its relevant headers in\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:124:15: constructor_uses_global_object: The constructor of global object "<unnamed>::OutputHeaders" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OutputHeaders" might be created before "scudo::RegionPageMap::Buffers" is available.
#  122|                 cl::init(false), cl::cat(IncludeFixerCategory));
#  123|   
#  124|-> cl::opt<bool> OutputHeaders(
#  125|       "output-headers",
#  126|       cl::desc("Print the symbol being queried and all its relevant headers in\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:139:22: constructor_uses_global_object: The constructor of global object "<unnamed>::InsertHeader[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::InsertHeader[abi:cxx11]" might be created before "Allocator" is available.
#  137|       cl::init(false), cl::cat(IncludeFixerCategory));
#  138|   
#  139|-> cl::opt<std::string> InsertHeader(
#  140|       "insert-header",
#  141|       cl::desc("Insert a specific header. This should run with STDIN mode.\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:139:22: constructor_uses_global_object: The constructor of global object "<unnamed>::InsertHeader[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::InsertHeader[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  137|       cl::init(false), cl::cat(IncludeFixerCategory));
#  138|   
#  139|-> cl::opt<std::string> InsertHeader(
#  140|       "insert-header",
#  141|       cl::desc("Insert a specific header. This should run with STDIN mode.\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:139:22: constructor_uses_global_object: The constructor of global object "<unnamed>::InsertHeader[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::InsertHeader[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  137|       cl::init(false), cl::cat(IncludeFixerCategory));
#  138|   
#  139|-> cl::opt<std::string> InsertHeader(
#  140|       "insert-header",
#  141|       cl::desc("Insert a specific header. This should run with STDIN mode.\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:139:22: constructor_uses_global_object: The constructor of global object "<unnamed>::InsertHeader[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::InsertHeader[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  137|       cl::init(false), cl::cat(IncludeFixerCategory));
#  138|   
#  139|-> cl::opt<std::string> InsertHeader(
#  140|       "insert-header",
#  141|       cl::desc("Insert a specific header. This should run with STDIN mode.\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:155:5: constructor_uses_global_object: The constructor of global object "<unnamed>::Style[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Style[abi:cxx11]" might be created before "Allocator" is available.
#  153|   
#  154|   cl::opt<std::string>
#  155|->     Style("style",
#  156|             cl::desc("Fallback style for reformatting after inserting new\n"
#  157|                      "headers if there is no clang-format config file found."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:155:5: constructor_uses_global_object: The constructor of global object "<unnamed>::Style[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Style[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  153|   
#  154|   cl::opt<std::string>
#  155|->     Style("style",
#  156|             cl::desc("Fallback style for reformatting after inserting new\n"
#  157|                      "headers if there is no clang-format config file found."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:155:5: constructor_uses_global_object: The constructor of global object "<unnamed>::Style[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Style[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  153|   
#  154|   cl::opt<std::string>
#  155|->     Style("style",
#  156|             cl::desc("Fallback style for reformatting after inserting new\n"
#  157|                      "headers if there is no clang-format config file found."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-include-fixer/tool/ClangIncludeFixer.cpp:155:5: constructor_uses_global_object: The constructor of global object "<unnamed>::Style[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Style[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  153|   
#  154|   cl::opt<std::string>
#  155|->     Style("style",
#  156|             cl::desc("Fallback style for reformatting after inserting new\n"
#  157|                      "headers if there is no clang-format config file found."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:40:20: constructor_uses_global_object: The constructor of global object "<unnamed>::ClangMoveCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ClangMoveCategory" might be created before "Allocator" is available.
#   38|   }
#   39|   
#   40|-> cl::OptionCategory ClangMoveCategory("clang-move options");
#   41|   
#   42|   cl::list<std::string> Names("names", cl::CommaSeparated,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:40:20: constructor_uses_global_object: The constructor of global object "<unnamed>::ClangMoveCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ClangMoveCategory" might be created before "GlobalParser" is available.
#   38|   }
#   39|   
#   40|-> cl::OptionCategory ClangMoveCategory("clang-move options");
#   41|   
#   42|   cl::list<std::string> Names("names", cl::CommaSeparated,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:40:20: constructor_uses_global_object: The constructor of global object "<unnamed>::ClangMoveCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ClangMoveCategory" might be created before "fuzzer::TPC" is available.
#   38|   }
#   39|   
#   40|-> cl::OptionCategory ClangMoveCategory("clang-move options");
#   41|   
#   42|   cl::list<std::string> Names("names", cl::CommaSeparated,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:40:20: constructor_uses_global_object: The constructor of global object "<unnamed>::ClangMoveCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ClangMoveCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   38|   }
#   39|   
#   40|-> cl::OptionCategory ClangMoveCategory("clang-move options");
#   41|   
#   42|   cl::list<std::string> Names("names", cl::CommaSeparated,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:42:23: constructor_uses_global_object: The constructor of global object "<unnamed>::Names[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Names[abi:cxx11]" might be created before "Allocator" is available.
#   40|   cl::OptionCategory ClangMoveCategory("clang-move options");
#   41|   
#   42|-> cl::list<std::string> Names("names", cl::CommaSeparated,
#   43|                               cl::desc("The list of the names of classes being "
#   44|                                        "moved, e.g. \"Foo,a::Foo,b::Foo\"."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:42:23: constructor_uses_global_object: The constructor of global object "<unnamed>::Names[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Names[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   40|   cl::OptionCategory ClangMoveCategory("clang-move options");
#   41|   
#   42|-> cl::list<std::string> Names("names", cl::CommaSeparated,
#   43|                               cl::desc("The list of the names of classes being "
#   44|                                        "moved, e.g. \"Foo,a::Foo,b::Foo\"."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:42:23: constructor_uses_global_object: The constructor of global object "<unnamed>::Names[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Names[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   40|   cl::OptionCategory ClangMoveCategory("clang-move options");
#   41|   
#   42|-> cl::list<std::string> Names("names", cl::CommaSeparated,
#   43|                               cl::desc("The list of the names of classes being "
#   44|                                        "moved, e.g. \"Foo,a::Foo,b::Foo\"."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:42:23: constructor_uses_global_object: The constructor of global object "<unnamed>::Names[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Names[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   40|   cl::OptionCategory ClangMoveCategory("clang-move options");
#   41|   
#   42|-> cl::list<std::string> Names("names", cl::CommaSeparated,
#   43|                               cl::desc("The list of the names of classes being "
#   44|                                        "moved, e.g. \"Foo,a::Foo,b::Foo\"."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:48:5: constructor_uses_global_object: The constructor of global object "<unnamed>::OldHeader[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldHeader[abi:cxx11]" might be created before "Allocator" is available.
#   46|   
#   47|   cl::opt<std::string>
#   48|->     OldHeader("old_header",
#   49|                 cl::desc("The relative/absolute file path of old header."),
#   50|                 cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:48:5: constructor_uses_global_object: The constructor of global object "<unnamed>::OldHeader[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldHeader[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   46|   
#   47|   cl::opt<std::string>
#   48|->     OldHeader("old_header",
#   49|                 cl::desc("The relative/absolute file path of old header."),
#   50|                 cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:48:5: constructor_uses_global_object: The constructor of global object "<unnamed>::OldHeader[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldHeader[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   46|   
#   47|   cl::opt<std::string>
#   48|->     OldHeader("old_header",
#   49|                 cl::desc("The relative/absolute file path of old header."),
#   50|                 cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:48:5: constructor_uses_global_object: The constructor of global object "<unnamed>::OldHeader[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldHeader[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   46|   
#   47|   cl::opt<std::string>
#   48|->     OldHeader("old_header",
#   49|                 cl::desc("The relative/absolute file path of old header."),
#   50|                 cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:53:5: constructor_uses_global_object: The constructor of global object "<unnamed>::OldCC[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldCC[abi:cxx11]" might be created before "Allocator" is available.
#   51|   
#   52|   cl::opt<std::string>
#   53|->     OldCC("old_cc", cl::desc("The relative/absolute file path of old cc."),
#   54|             cl::cat(ClangMoveCategory));
#   55|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:53:5: constructor_uses_global_object: The constructor of global object "<unnamed>::OldCC[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldCC[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   51|   
#   52|   cl::opt<std::string>
#   53|->     OldCC("old_cc", cl::desc("The relative/absolute file path of old cc."),
#   54|             cl::cat(ClangMoveCategory));
#   55|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:53:5: constructor_uses_global_object: The constructor of global object "<unnamed>::OldCC[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldCC[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   51|   
#   52|   cl::opt<std::string>
#   53|->     OldCC("old_cc", cl::desc("The relative/absolute file path of old cc."),
#   54|             cl::cat(ClangMoveCategory));
#   55|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:53:5: constructor_uses_global_object: The constructor of global object "<unnamed>::OldCC[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldCC[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   51|   
#   52|   cl::opt<std::string>
#   53|->     OldCC("old_cc", cl::desc("The relative/absolute file path of old cc."),
#   54|             cl::cat(ClangMoveCategory));
#   55|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:57:5: constructor_uses_global_object: The constructor of global object "<unnamed>::NewHeader[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewHeader[abi:cxx11]" might be created before "Allocator" is available.
#   55|   
#   56|   cl::opt<std::string>
#   57|->     NewHeader("new_header",
#   58|                 cl::desc("The relative/absolute file path of new header."),
#   59|                 cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:57:5: constructor_uses_global_object: The constructor of global object "<unnamed>::NewHeader[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewHeader[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   55|   
#   56|   cl::opt<std::string>
#   57|->     NewHeader("new_header",
#   58|                 cl::desc("The relative/absolute file path of new header."),
#   59|                 cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:57:5: constructor_uses_global_object: The constructor of global object "<unnamed>::NewHeader[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewHeader[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   55|   
#   56|   cl::opt<std::string>
#   57|->     NewHeader("new_header",
#   58|                 cl::desc("The relative/absolute file path of new header."),
#   59|                 cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:57:5: constructor_uses_global_object: The constructor of global object "<unnamed>::NewHeader[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewHeader[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   55|   
#   56|   cl::opt<std::string>
#   57|->     NewHeader("new_header",
#   58|                 cl::desc("The relative/absolute file path of new header."),
#   59|                 cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:62:5: constructor_uses_global_object: The constructor of global object "<unnamed>::NewCC[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewCC[abi:cxx11]" might be created before "Allocator" is available.
#   60|   
#   61|   cl::opt<std::string>
#   62|->     NewCC("new_cc", cl::desc("The relative/absolute file path of new cc."),
#   63|             cl::cat(ClangMoveCategory));
#   64|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:62:5: constructor_uses_global_object: The constructor of global object "<unnamed>::NewCC[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewCC[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   60|   
#   61|   cl::opt<std::string>
#   62|->     NewCC("new_cc", cl::desc("The relative/absolute file path of new cc."),
#   63|             cl::cat(ClangMoveCategory));
#   64|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:62:5: constructor_uses_global_object: The constructor of global object "<unnamed>::NewCC[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewCC[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   60|   
#   61|   cl::opt<std::string>
#   62|->     NewCC("new_cc", cl::desc("The relative/absolute file path of new cc."),
#   63|             cl::cat(ClangMoveCategory));
#   64|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:62:5: constructor_uses_global_object: The constructor of global object "<unnamed>::NewCC[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewCC[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   60|   
#   61|   cl::opt<std::string>
#   62|->     NewCC("new_cc", cl::desc("The relative/absolute file path of new cc."),
#   63|             cl::cat(ClangMoveCategory));
#   64|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:66:5: constructor_uses_global_object: The constructor of global object "<unnamed>::OldDependOnNew" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldDependOnNew" might be created before "Allocator" is available.
#   64|   
#   65|   cl::opt<bool>
#   66|->     OldDependOnNew("old_depend_on_new",
#   67|                      cl::desc("Whether old header will depend on new header. If "
#   68|                               "true, clang-move will "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:66:5: constructor_uses_global_object: The constructor of global object "<unnamed>::OldDependOnNew" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldDependOnNew" might be created before "fuzzer::TPC" is available.
#   64|   
#   65|   cl::opt<bool>
#   66|->     OldDependOnNew("old_depend_on_new",
#   67|                      cl::desc("Whether old header will depend on new header. If "
#   68|                               "true, clang-move will "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:66:5: constructor_uses_global_object: The constructor of global object "<unnamed>::OldDependOnNew" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldDependOnNew" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   64|   
#   65|   cl::opt<bool>
#   66|->     OldDependOnNew("old_depend_on_new",
#   67|                      cl::desc("Whether old header will depend on new header. If "
#   68|                               "true, clang-move will "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:66:5: constructor_uses_global_object: The constructor of global object "<unnamed>::OldDependOnNew" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OldDependOnNew" might be created before "scudo::RegionPageMap::Buffers" is available.
#   64|   
#   65|   cl::opt<bool>
#   66|->     OldDependOnNew("old_depend_on_new",
#   67|                      cl::desc("Whether old header will depend on new header. If "
#   68|                               "true, clang-move will "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:73:5: constructor_uses_global_object: The constructor of global object "<unnamed>::NewDependOnOld" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewDependOnOld" might be created before "Allocator" is available.
#   71|   
#   72|   cl::opt<bool>
#   73|->     NewDependOnOld("new_depend_on_old",
#   74|                      cl::desc("Whether new header will depend on old header. If "
#   75|                               "true, clang-move will "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:73:5: constructor_uses_global_object: The constructor of global object "<unnamed>::NewDependOnOld" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewDependOnOld" might be created before "fuzzer::TPC" is available.
#   71|   
#   72|   cl::opt<bool>
#   73|->     NewDependOnOld("new_depend_on_old",
#   74|                      cl::desc("Whether new header will depend on old header. If "
#   75|                               "true, clang-move will "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:73:5: constructor_uses_global_object: The constructor of global object "<unnamed>::NewDependOnOld" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewDependOnOld" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   71|   
#   72|   cl::opt<bool>
#   73|->     NewDependOnOld("new_depend_on_old",
#   74|                      cl::desc("Whether new header will depend on old header. If "
#   75|                               "true, clang-move will "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:73:5: constructor_uses_global_object: The constructor of global object "<unnamed>::NewDependOnOld" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::NewDependOnOld" might be created before "scudo::RegionPageMap::Buffers" is available.
#   71|   
#   72|   cl::opt<bool>
#   73|->     NewDependOnOld("new_depend_on_old",
#   74|                      cl::desc("Whether new header will depend on old header. If "
#   75|                               "true, clang-move will "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:80:5: constructor_uses_global_object: The constructor of global object "<unnamed>::Style[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Style[abi:cxx11]" might be created before "Allocator" is available.
#   78|   
#   79|   cl::opt<std::string>
#   80|->     Style("style",
#   81|             cl::desc("The style name used for reformatting. Default is \"llvm\""),
#   82|             cl::init("llvm"), cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:80:5: constructor_uses_global_object: The constructor of global object "<unnamed>::Style[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Style[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   78|   
#   79|   cl::opt<std::string>
#   80|->     Style("style",
#   81|             cl::desc("The style name used for reformatting. Default is \"llvm\""),
#   82|             cl::init("llvm"), cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:80:5: constructor_uses_global_object: The constructor of global object "<unnamed>::Style[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Style[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   78|   
#   79|   cl::opt<std::string>
#   80|->     Style("style",
#   81|             cl::desc("The style name used for reformatting. Default is \"llvm\""),
#   82|             cl::init("llvm"), cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:80:5: constructor_uses_global_object: The constructor of global object "<unnamed>::Style[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Style[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   78|   
#   79|   cl::opt<std::string>
#   80|->     Style("style",
#   81|             cl::desc("The style name used for reformatting. Default is \"llvm\""),
#   82|             cl::init("llvm"), cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:84:15: constructor_uses_global_object: The constructor of global object "<unnamed>::Dump" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Dump" might be created before "Allocator" is available.
#   82|             cl::init("llvm"), cl::cat(ClangMoveCategory));
#   83|   
#   84|-> cl::opt<bool> Dump("dump_result",
#   85|                      cl::desc("Dump results in JSON format to stdout."),
#   86|                      cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:84:15: constructor_uses_global_object: The constructor of global object "<unnamed>::Dump" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Dump" might be created before "fuzzer::TPC" is available.
#   82|             cl::init("llvm"), cl::cat(ClangMoveCategory));
#   83|   
#   84|-> cl::opt<bool> Dump("dump_result",
#   85|                      cl::desc("Dump results in JSON format to stdout."),
#   86|                      cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:84:15: constructor_uses_global_object: The constructor of global object "<unnamed>::Dump" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Dump" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   82|             cl::init("llvm"), cl::cat(ClangMoveCategory));
#   83|   
#   84|-> cl::opt<bool> Dump("dump_result",
#   85|                      cl::desc("Dump results in JSON format to stdout."),
#   86|                      cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:84:15: constructor_uses_global_object: The constructor of global object "<unnamed>::Dump" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Dump" might be created before "scudo::RegionPageMap::Buffers" is available.
#   82|             cl::init("llvm"), cl::cat(ClangMoveCategory));
#   83|   
#   84|-> cl::opt<bool> Dump("dump_result",
#   85|                      cl::desc("Dump results in JSON format to stdout."),
#   86|                      cl::cat(ClangMoveCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:88:15: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDecls" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDecls" might be created before "Allocator" is available.
#   86|                      cl::cat(ClangMoveCategory));
#   87|   
#   88|-> cl::opt<bool> DumpDecls(
#   89|       "dump_decls",
#   90|       cl::desc("Dump all declarations in old header (JSON format) to stdout. If "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:88:15: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDecls" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDecls" might be created before "fuzzer::TPC" is available.
#   86|                      cl::cat(ClangMoveCategory));
#   87|   
#   88|-> cl::opt<bool> DumpDecls(
#   89|       "dump_decls",
#   90|       cl::desc("Dump all declarations in old header (JSON format) to stdout. If "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:88:15: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDecls" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDecls" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   86|                      cl::cat(ClangMoveCategory));
#   87|   
#   88|-> cl::opt<bool> DumpDecls(
#   89|       "dump_decls",
#   90|       cl::desc("Dump all declarations in old header (JSON format) to stdout. If "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-move/tool/ClangMove.cpp:88:15: constructor_uses_global_object: The constructor of global object "<unnamed>::DumpDecls" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::DumpDecls" might be created before "scudo::RegionPageMap::Buffers" is available.
#   86|                      cl::cat(ClangMoveCategory));
#   87|   
#   88|-> cl::opt<bool> DumpDecls(
#   89|       "dump_decls",
#   90|       cl::desc("Dump all declarations in old header (JSON format) to stdout. If "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:50:22: constructor_uses_global_object: The constructor of global object "CommonHelp" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "CommonHelp" might be created before "GlobalParser" is available.
#   48|   using namespace llvm;
#   49|   
#   50|-> static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   51|   static cl::OptionCategory ClangQueryCategory("clang-query options");
#   52|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:51:27: constructor_uses_global_object: The constructor of global object "ClangQueryCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ClangQueryCategory" might be created before "Allocator" is available.
#   49|   
#   50|   static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   51|-> static cl::OptionCategory ClangQueryCategory("clang-query options");
#   52|   
#   53|   static cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:51:27: constructor_uses_global_object: The constructor of global object "ClangQueryCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "ClangQueryCategory" might be created before "GlobalParser" is available.
#   49|   
#   50|   static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   51|-> static cl::OptionCategory ClangQueryCategory("clang-query options");
#   52|   
#   53|   static cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:51:27: constructor_uses_global_object: The constructor of global object "ClangQueryCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ClangQueryCategory" might be created before "fuzzer::TPC" is available.
#   49|   
#   50|   static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   51|-> static cl::OptionCategory ClangQueryCategory("clang-query options");
#   52|   
#   53|   static cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:51:27: constructor_uses_global_object: The constructor of global object "ClangQueryCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ClangQueryCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   49|   
#   50|   static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   51|-> static cl::OptionCategory ClangQueryCategory("clang-query options");
#   52|   
#   53|   static cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:54:5: constructor_uses_global_object: The constructor of global object "UseColor" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "UseColor" might be created before "Allocator" is available.
#   52|   
#   53|   static cl::opt<bool>
#   54|->     UseColor("use-color",
#   55|                cl::desc(
#   56|                    R"(Use colors in detailed AST output. If not set, colors

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:54:5: constructor_uses_global_object: The constructor of global object "UseColor" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "UseColor" might be created before "fuzzer::TPC" is available.
#   52|   
#   53|   static cl::opt<bool>
#   54|->     UseColor("use-color",
#   55|                cl::desc(
#   56|                    R"(Use colors in detailed AST output. If not set, colors

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:54:5: constructor_uses_global_object: The constructor of global object "UseColor" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseColor" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|   
#   53|   static cl::opt<bool>
#   54|->     UseColor("use-color",
#   55|                cl::desc(
#   56|                    R"(Use colors in detailed AST output. If not set, colors

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:54:5: constructor_uses_global_object: The constructor of global object "UseColor" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "UseColor" might be created before "scudo::RegionPageMap::Buffers" is available.
#   52|   
#   53|   static cl::opt<bool>
#   54|->     UseColor("use-color",
#   55|                cl::desc(
#   56|                    R"(Use colors in detailed AST output. If not set, colors

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:61:30: constructor_uses_global_object: The constructor of global object "Commands[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "Commands[abi:cxx11]" might be created before "Allocator" is available.
#   59|                cl::init(false), cl::cat(ClangQueryCategory));
#   60|   
#   61|-> static cl::list<std::string> Commands("c", cl::desc("Specify command to run"),
#   62|                                         cl::value_desc("command"),
#   63|                                         cl::cat(ClangQueryCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:61:30: constructor_uses_global_object: The constructor of global object "Commands[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "Commands[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   59|                cl::init(false), cl::cat(ClangQueryCategory));
#   60|   
#   61|-> static cl::list<std::string> Commands("c", cl::desc("Specify command to run"),
#   62|                                         cl::value_desc("command"),
#   63|                                         cl::cat(ClangQueryCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:61:30: constructor_uses_global_object: The constructor of global object "Commands[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Commands[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   59|                cl::init(false), cl::cat(ClangQueryCategory));
#   60|   
#   61|-> static cl::list<std::string> Commands("c", cl::desc("Specify command to run"),
#   62|                                         cl::value_desc("command"),
#   63|                                         cl::cat(ClangQueryCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:61:30: constructor_uses_global_object: The constructor of global object "Commands[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "Commands[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   59|                cl::init(false), cl::cat(ClangQueryCategory));
#   60|   
#   61|-> static cl::list<std::string> Commands("c", cl::desc("Specify command to run"),
#   62|                                         cl::value_desc("command"),
#   63|                                         cl::cat(ClangQueryCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:65:30: constructor_uses_global_object: The constructor of global object "CommandFiles[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "CommandFiles[abi:cxx11]" might be created before "Allocator" is available.
#   63|                                         cl::cat(ClangQueryCategory));
#   64|   
#   65|-> static cl::list<std::string> CommandFiles("f",
#   66|                                             cl::desc("Read commands from file"),
#   67|                                             cl::value_desc("file"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:65:30: constructor_uses_global_object: The constructor of global object "CommandFiles[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "CommandFiles[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   63|                                         cl::cat(ClangQueryCategory));
#   64|   
#   65|-> static cl::list<std::string> CommandFiles("f",
#   66|                                             cl::desc("Read commands from file"),
#   67|                                             cl::value_desc("file"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:65:30: constructor_uses_global_object: The constructor of global object "CommandFiles[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CommandFiles[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|                                         cl::cat(ClangQueryCategory));
#   64|   
#   65|-> static cl::list<std::string> CommandFiles("f",
#   66|                                             cl::desc("Read commands from file"),
#   67|                                             cl::value_desc("file"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:65:30: constructor_uses_global_object: The constructor of global object "CommandFiles[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "CommandFiles[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   63|                                         cl::cat(ClangQueryCategory));
#   64|   
#   65|-> static cl::list<std::string> CommandFiles("f",
#   66|                                             cl::desc("Read commands from file"),
#   67|                                             cl::value_desc("file"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:70:29: constructor_uses_global_object: The constructor of global object "PreloadFile[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "PreloadFile[abi:cxx11]" might be created before "Allocator" is available.
#   68|                                             cl::cat(ClangQueryCategory));
#   69|   
#   70|-> static cl::opt<std::string> PreloadFile(
#   71|       "preload",
#   72|       cl::desc("Preload commands from file and start interactive mode"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:70:29: constructor_uses_global_object: The constructor of global object "PreloadFile[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "PreloadFile[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   68|                                             cl::cat(ClangQueryCategory));
#   69|   
#   70|-> static cl::opt<std::string> PreloadFile(
#   71|       "preload",
#   72|       cl::desc("Preload commands from file and start interactive mode"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:70:29: constructor_uses_global_object: The constructor of global object "PreloadFile[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PreloadFile[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   68|                                             cl::cat(ClangQueryCategory));
#   69|   
#   70|-> static cl::opt<std::string> PreloadFile(
#   71|       "preload",
#   72|       cl::desc("Preload commands from file and start interactive mode"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-query/tool/ClangQuery.cpp:70:29: constructor_uses_global_object: The constructor of global object "PreloadFile[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "PreloadFile[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   68|                                             cl::cat(ClangQueryCategory));
#   69|   
#   70|-> static cl::opt<std::string> PreloadFile(
#   71|       "preload",
#   72|       cl::desc("Preload commands from file and start interactive mode"),

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/ReorderFieldsAction.cpp:102:3: var_decl: Declaring variable "Results".
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/ReorderFieldsAction.cpp:116:3: uninit_use: Using uninitialized value "Results". Field "Results.vector_.InlineElts" is uninitialized.
#  114|         if (auto *FD = dyn_cast<FieldDecl>(MemExpr->getMemberDecl()))
#  115|           Results.insert(FD);
#  116|->   return Results;
#  117|   }
#  118|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:35:20: constructor_uses_global_object: The constructor of global object "ClangReorderFieldsCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ClangReorderFieldsCategory" might be created before "Allocator" is available.
#   33|   using namespace clang;
#   34|   
#   35|-> cl::OptionCategory ClangReorderFieldsCategory("clang-reorder-fields options");
#   36|   
#   37|   static cl::opt<std::string>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:35:20: constructor_uses_global_object: The constructor of global object "ClangReorderFieldsCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "ClangReorderFieldsCategory" might be created before "GlobalParser" is available.
#   33|   using namespace clang;
#   34|   
#   35|-> cl::OptionCategory ClangReorderFieldsCategory("clang-reorder-fields options");
#   36|   
#   37|   static cl::opt<std::string>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:35:20: constructor_uses_global_object: The constructor of global object "ClangReorderFieldsCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ClangReorderFieldsCategory" might be created before "fuzzer::TPC" is available.
#   33|   using namespace clang;
#   34|   
#   35|-> cl::OptionCategory ClangReorderFieldsCategory("clang-reorder-fields options");
#   36|   
#   37|   static cl::opt<std::string>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:35:20: constructor_uses_global_object: The constructor of global object "ClangReorderFieldsCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ClangReorderFieldsCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   33|   using namespace clang;
#   34|   
#   35|-> cl::OptionCategory ClangReorderFieldsCategory("clang-reorder-fields options");
#   36|   
#   37|   static cl::opt<std::string>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:38:5: constructor_uses_global_object: The constructor of global object "RecordName[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "RecordName[abi:cxx11]" might be created before "Allocator" is available.
#   36|   
#   37|   static cl::opt<std::string>
#   38|->     RecordName("record-name", cl::Required,
#   39|                  cl::desc("The name of the struct/class."),
#   40|                  cl::cat(ClangReorderFieldsCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:38:5: constructor_uses_global_object: The constructor of global object "RecordName[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "RecordName[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   36|   
#   37|   static cl::opt<std::string>
#   38|->     RecordName("record-name", cl::Required,
#   39|                  cl::desc("The name of the struct/class."),
#   40|                  cl::cat(ClangReorderFieldsCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:38:5: constructor_uses_global_object: The constructor of global object "RecordName[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RecordName[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   36|   
#   37|   static cl::opt<std::string>
#   38|->     RecordName("record-name", cl::Required,
#   39|                  cl::desc("The name of the struct/class."),
#   40|                  cl::cat(ClangReorderFieldsCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:38:5: constructor_uses_global_object: The constructor of global object "RecordName[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "RecordName[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   36|   
#   37|   static cl::opt<std::string>
#   38|->     RecordName("record-name", cl::Required,
#   39|                  cl::desc("The name of the struct/class."),
#   40|                  cl::cat(ClangReorderFieldsCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:42:30: constructor_uses_global_object: The constructor of global object "FieldsOrder[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "FieldsOrder[abi:cxx11]" might be created before "Allocator" is available.
#   40|                  cl::cat(ClangReorderFieldsCategory));
#   41|   
#   42|-> static cl::list<std::string> FieldsOrder("fields-order", cl::CommaSeparated,
#   43|                                            cl::OneOrMore,
#   44|                                            cl::desc("The desired fields order."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:42:30: constructor_uses_global_object: The constructor of global object "FieldsOrder[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "FieldsOrder[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   40|                  cl::cat(ClangReorderFieldsCategory));
#   41|   
#   42|-> static cl::list<std::string> FieldsOrder("fields-order", cl::CommaSeparated,
#   43|                                            cl::OneOrMore,
#   44|                                            cl::desc("The desired fields order."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:42:30: constructor_uses_global_object: The constructor of global object "FieldsOrder[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FieldsOrder[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   40|                  cl::cat(ClangReorderFieldsCategory));
#   41|   
#   42|-> static cl::list<std::string> FieldsOrder("fields-order", cl::CommaSeparated,
#   43|                                            cl::OneOrMore,
#   44|                                            cl::desc("The desired fields order."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:42:30: constructor_uses_global_object: The constructor of global object "FieldsOrder[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "FieldsOrder[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   40|                  cl::cat(ClangReorderFieldsCategory));
#   41|   
#   42|-> static cl::list<std::string> FieldsOrder("fields-order", cl::CommaSeparated,
#   43|                                            cl::OneOrMore,
#   44|                                            cl::desc("The desired fields order."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:47:22: constructor_uses_global_object: The constructor of global object "Inplace" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "Inplace" might be created before "Allocator" is available.
#   45|                                            cl::cat(ClangReorderFieldsCategory));
#   46|   
#   47|-> static cl::opt<bool> Inplace("i", cl::desc("Overwrite edited files."),
#   48|                                cl::cat(ClangReorderFieldsCategory));
#   49|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:47:22: constructor_uses_global_object: The constructor of global object "Inplace" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "Inplace" might be created before "fuzzer::TPC" is available.
#   45|                                            cl::cat(ClangReorderFieldsCategory));
#   46|   
#   47|-> static cl::opt<bool> Inplace("i", cl::desc("Overwrite edited files."),
#   48|                                cl::cat(ClangReorderFieldsCategory));
#   49|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:47:22: constructor_uses_global_object: The constructor of global object "Inplace" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Inplace" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   45|                                            cl::cat(ClangReorderFieldsCategory));
#   46|   
#   47|-> static cl::opt<bool> Inplace("i", cl::desc("Overwrite edited files."),
#   48|                                cl::cat(ClangReorderFieldsCategory));
#   49|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-reorder-fields/tool/ClangReorderFields.cpp:47:22: constructor_uses_global_object: The constructor of global object "Inplace" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "Inplace" might be created before "scudo::RegionPageMap::Buffers" is available.
#   45|                                            cl::cat(ClangReorderFieldsCategory));
#   46|   
#   47|-> static cl::opt<bool> Inplace("i", cl::desc("Overwrite edited files."),
#   48|                                cl::cat(ClangReorderFieldsCategory));
#   49|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/NoLintDirectiveHandler.cpp:114:3: var_decl: Declaring variable "NoLints".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/NoLintDirectiveHandler.cpp:148:3: uninit_use: Using uninitialized value "NoLints". Field "NoLints.InlineElts" is uninitialized.
#  146|     }
#  147|   
#  148|->   return NoLints;
#  149|   }
#  150|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/NoLintDirectiveHandler.cpp:188:3: var_decl: Declaring variable "CompletedBlocks".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/NoLintDirectiveHandler.cpp:211:3: uninit_use: Using uninitialized value "CompletedBlocks". Field "CompletedBlocks.InlineElts" is uninitialized.
#  209|   
#  210|     llvm::move(Stack, std::back_inserter(UnmatchedTokens));
#  211|->   return CompletedBlocks;
#  212|   }
#  213|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/NoLintDirectiveHandler.cpp:366:3: var_decl: Declaring variable "Error".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/NoLintDirectiveHandler.cpp:377:3: uninit_use: Using uninitialized value "Error". Field "Error.Notes.InlineElts" is uninitialized.
#  375|     SourceLocation Loc = SrcMgr.getComposedLoc(File, NoLint.Pos);
#  376|     Error.Message = tooling::DiagnosticMessage(Message, SrcMgr, Loc);
#  377|->   return Error;
#  378|   }
#  379|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/altera/UnrollLoopsCheck.cpp:236:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/altera/UnrollLoopsCheck.cpp:242:5: uninit_use_in_call: Using uninitialized value "Result.Val.Data" when calling "~EvalResult".
#  240|       RHS->EvaluateAsRValue(Result, *Context);
#  241|     else
#  242|->     return false; // Cannot evaluate either side.
#  243|     if (!Result.Val.isInt())
#  244|       return false; // Cannot check number of iterations, return false to be

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/EasilySwappableParametersCheck.cpp:1419:3: var_decl: Declaring variable "Ret".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/EasilySwappableParametersCheck.cpp:1495:3: uninit_use: Using uninitialized value "Ret". Field "Ret.Mixes.InlineElts" is uninitialized.
# 1493|     }
# 1494|   
# 1495|->   return Ret;
# 1496|   }
# 1497|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/EasilySwappableParametersCheck.cpp:1917:3: var_decl: Declaring variable "Name".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/EasilySwappableParametersCheck.cpp:1920:3: uninit_use: Using uninitialized value "Name". Field "Name.InlineElts" is uninitialized.
# 1918|     llvm::raw_svector_ostream OS{Name};
# 1919|     ND->getNameForDiagnostic(OS, ND->getASTContext().getPrintingPolicy(), false);
# 1920|->   return Name;
# 1921|   }
# 1922|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/IncorrectRoundingsCheck.cpp:21:3: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(Semantics, 1UL)".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/IncorrectRoundingsCheck.cpp:21:3: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#   19|   
#   20|   static llvm::APFloat getHalf(const llvm::fltSemantics &Semantics) {
#   21|->   return llvm::APFloat(Semantics, 1U) / llvm::APFloat(Semantics, 2U);
#   22|   }
#   23|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/NotNullTerminatedResultCheck.cpp:67:3: var_decl: Declaring variable "Length".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/NotNullTerminatedResultCheck.cpp:90:3: uninit_use_in_call: Using uninitialized value "Length.Val.Data" when calling "~EvalResult".
#   88|       return SrcSL->getLength();
#   89|   
#   90|->   return 0;
#   91|   }
#   92|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/ParentVirtualCallCheck.cpp:39:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/ParentVirtualCallCheck.cpp:56:3: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
#   54|     }
#   55|   
#   56|->   return Result;
#   57|   }
#   58|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/ReservedIdentifierCheck.cpp:44:3: var_decl: Declaring variable "AllowedIdentifiers".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/ReservedIdentifierCheck.cpp:55:3: uninit_use: Using uninitialized value "AllowedIdentifiers". Field "AllowedIdentifiers.InlineElts" is uninitialized.
#   53|     }
#   54|   
#   55|->   return AllowedIdentifiers;
#   56|   }
#   57|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/SignedCharMisuseCheck.cpp:145:5: var_decl: Declaring variable "EVResult".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/SignedCharMisuseCheck.cpp:156:3: uninit_use_in_call: Using uninitialized value "EVResult.Val.Data" when calling "~EvalResult".
#  154|       diag(Comparison->getBeginLoc(),
#  155|            "comparison between 'signed char' and 'unsigned char'");
#  156|->   } else if (Result.Nodes.getNodeAs<Expr>("arraySubscript")) {
#  157|       diag(SignedCastExpression->getBeginLoc(),
#  158|            "'signed char' to %0 conversion in array subscript; "

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/SignedCharMisuseCheck.cpp:131:3: var_decl: Declaring variable "EVResult".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/SignedCharMisuseCheck.cpp:167:1: uninit_use_in_call: Using uninitialized value "EVResult.Val.Data" when calling "~EvalResult".
#  165|           << *IntegerType;
#  166|     }
#  167|-> }
#  168|   
#  169|   } // namespace clang::tidy::bugprone

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/StringConstructorCheck.cpp:168:5: var_decl: Declaring variable "ConstPtr".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/StringConstructorCheck.cpp:181:3: uninit_use_in_call: Using uninitialized value "ConstPtr.Val.Data" when calling "~EvalResult".
#  179|         diag(Loc, "constructing string from nullptr is undefined behaviour");
#  180|       }
#  181|->   }
#  182|   }
#  183|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/SuspiciousMemsetUsageCheck.cpp:102:5: var_decl: Declaring variable "Value2".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/bugprone/SuspiciousMemsetUsageCheck.cpp:106:7: uninit_use_in_call: Using uninitialized value "Value2.Val.Data" when calling "~EvalResult".
#  104|           !ByteCount->EvaluateAsInt(Value2, *Result.Context) ||
#  105|           Value2.Val.getInt() != 0)
#  106|->       return;
#  107|   
#  108|       // Return if `fill_char` is known to be zero or negative at compile

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/cppcoreguidelines/NarrowingConversionsCheck.cpp:305:3: var_decl: Declaring variable "Str".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/cppcoreguidelines/NarrowingConversionsCheck.cpp:316:3: uninit_use: Using uninitialized value "Str". Field "Str.InlineElts" is uninitialized.
#  314|       Str.append(")");
#  315|     }
#  316|->   return Str;
#  317|   }
#  318|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/cppcoreguidelines/ProTypeMemberInitCheck.cpp:202:3: var_decl: Declaring variable "Insertions".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/cppcoreguidelines/ProTypeMemberInitCheck.cpp:237:3: uninit_use: Using uninitialized value "Insertions". Field "Insertions.InlineElts" is uninitialized.
#  235|       }
#  236|     }
#  237|->   return Insertions;
#  238|   }
#  239|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/llvmlibc/CalleeNamespaceCheck.cpp:39:32: constructor_uses_global_object: The constructor of global object "clang::tidy::llvm_libc::IgnoredFunctions" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::llvm_libc::IgnoredFunctions" might be created before "Allocator" is available.
#   37|   // functions are specifically allowed to be external so that they can be
#   38|   // intercepted.
#   39|-> static const llvm::StringSet<> IgnoredFunctions = {
#   40|       "__errno_location", "malloc", "calloc", "realloc", "free", "aligned_alloc"};
#   41|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/llvmlibc/CalleeNamespaceCheck.cpp:39:32: constructor_uses_global_object: The constructor of global object "clang::tidy::llvm_libc::IgnoredFunctions" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::llvm_libc::IgnoredFunctions" might be created before "fuzzer::TPC" is available.
#   37|   // functions are specifically allowed to be external so that they can be
#   38|   // intercepted.
#   39|-> static const llvm::StringSet<> IgnoredFunctions = {
#   40|       "__errno_location", "malloc", "calloc", "realloc", "free", "aligned_alloc"};
#   41|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/llvmlibc/CalleeNamespaceCheck.cpp:39:32: constructor_uses_global_object: The constructor of global object "clang::tidy::llvm_libc::IgnoredFunctions" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::llvm_libc::IgnoredFunctions" might be created before "scudo::RegionPageMap::Buffers" is available.
#   37|   // functions are specifically allowed to be external so that they can be
#   38|   // intercepted.
#   39|-> static const llvm::StringSet<> IgnoredFunctions = {
#   40|       "__errno_location", "malloc", "calloc", "realloc", "free", "aligned_alloc"};
#   41|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/misc/ConfusableIdentifierCheck.cpp:51:3: var_decl: Declaring variable "Skeleton".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/misc/ConfusableIdentifierCheck.cpp:89:3: uninit_use: Using uninitialized value "Skeleton". Field "Skeleton.InlineElts" is uninitialized.
#   87|       }
#   88|     }
#   89|->   return Skeleton;
#   90|   }
#   91|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/AvoidBindCheck.cpp:257:3: var_decl: Declaring variable "BindArguments".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/AvoidBindCheck.cpp:318:3: uninit_use: Using uninitialized value "BindArguments". Field "BindArguments.InlineElts" is uninitialized.
#  316|       }
#  317|     }
#  318|->   return BindArguments;
#  319|   }
#  320|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/LoopConvertCheck.cpp:71:32: constructor_uses_global_object: The constructor of global object "clang::tidy::modernize::MemberNames" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::modernize::MemberNames" might be created before "Allocator" is available.
#   69|   static const char DerefByValueResultName[] = "derefByValueResult";
#   70|   static const char DerefByRefResultName[] = "derefByRefResult";
#   71|-> static const llvm::StringSet<> MemberNames{"begin",   "cbegin", "rbegin",
#   72|                                              "crbegin", "end",    "cend",
#   73|                                              "rend",    "crend",  "size"};

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/LoopConvertCheck.cpp:71:32: constructor_uses_global_object: The constructor of global object "clang::tidy::modernize::MemberNames" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::modernize::MemberNames" might be created before "fuzzer::TPC" is available.
#   69|   static const char DerefByValueResultName[] = "derefByValueResult";
#   70|   static const char DerefByRefResultName[] = "derefByRefResult";
#   71|-> static const llvm::StringSet<> MemberNames{"begin",   "cbegin", "rbegin",
#   72|                                              "crbegin", "end",    "cend",
#   73|                                              "rend",    "crend",  "size"};

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/LoopConvertCheck.cpp:71:32: constructor_uses_global_object: The constructor of global object "clang::tidy::modernize::MemberNames" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::modernize::MemberNames" might be created before "scudo::RegionPageMap::Buffers" is available.
#   69|   static const char DerefByValueResultName[] = "derefByValueResult";
#   70|   static const char DerefByRefResultName[] = "derefByRefResult";
#   71|-> static const llvm::StringSet<> MemberNames{"begin",   "cbegin", "rbegin",
#   72|                                              "crbegin", "end",    "cend",
#   73|                                              "rend",    "crend",  "size"};

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/LoopConvertCheck.cpp:74:32: constructor_uses_global_object: The constructor of global object "clang::tidy::modernize::ADLNames" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::modernize::ADLNames" might be created before "Allocator" is available.
#   72|                                              "crbegin", "end",    "cend",
#   73|                                              "rend",    "crend",  "size"};
#   74|-> static const llvm::StringSet<> ADLNames{"begin",   "cbegin", "rbegin",
#   75|                                           "crbegin", "end",    "cend",
#   76|                                           "rend",    "crend",  "size"};

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/LoopConvertCheck.cpp:74:32: constructor_uses_global_object: The constructor of global object "clang::tidy::modernize::ADLNames" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::modernize::ADLNames" might be created before "fuzzer::TPC" is available.
#   72|                                              "crbegin", "end",    "cend",
#   73|                                              "rend",    "crend",  "size"};
#   74|-> static const llvm::StringSet<> ADLNames{"begin",   "cbegin", "rbegin",
#   75|                                           "crbegin", "end",    "cend",
#   76|                                           "rend",    "crend",  "size"};

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/LoopConvertCheck.cpp:74:32: constructor_uses_global_object: The constructor of global object "clang::tidy::modernize::ADLNames" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::modernize::ADLNames" might be created before "scudo::RegionPageMap::Buffers" is available.
#   72|                                              "crbegin", "end",    "cend",
#   73|                                              "rend",    "crend",  "size"};
#   74|-> static const llvm::StringSet<> ADLNames{"begin",   "cbegin", "rbegin",
#   75|                                           "crbegin", "end",    "cend",
#   76|                                           "rend",    "crend",  "size"};

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/LoopConvertCheck.cpp:77:32: constructor_uses_global_object: The constructor of global object "clang::tidy::modernize::StdNames" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::modernize::StdNames" might be created before "Allocator" is available.
#   75|                                           "crbegin", "end",    "cend",
#   76|                                           "rend",    "crend",  "size"};
#   77|-> static const llvm::StringSet<> StdNames{
#   78|       "std::begin", "std::cbegin", "std::rbegin", "std::crbegin", "std::end",
#   79|       "std::cend",  "std::rend",   "std::crend",  "std::size"};

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/LoopConvertCheck.cpp:77:32: constructor_uses_global_object: The constructor of global object "clang::tidy::modernize::StdNames" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::modernize::StdNames" might be created before "fuzzer::TPC" is available.
#   75|                                           "crbegin", "end",    "cend",
#   76|                                           "rend",    "crend",  "size"};
#   77|-> static const llvm::StringSet<> StdNames{
#   78|       "std::begin", "std::cbegin", "std::rbegin", "std::crbegin", "std::end",
#   79|       "std::cend",  "std::rend",   "std::crend",  "std::size"};

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/LoopConvertCheck.cpp:77:32: constructor_uses_global_object: The constructor of global object "clang::tidy::modernize::StdNames" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::modernize::StdNames" might be created before "scudo::RegionPageMap::Buffers" is available.
#   75|                                           "crbegin", "end",    "cend",
#   76|                                           "rend",    "crend",  "size"};
#   77|-> static const llvm::StringSet<> StdNames{
#   78|       "std::begin", "std::cbegin", "std::rbegin", "std::crbegin", "std::end",
#   79|       "std::cend",  "std::rend",   "std::crend",  "std::size"};

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/MinMaxUseInitializerListCheck.cpp:34:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/MinMaxUseInitializerListCheck.cpp:61:7: uninit_use: Using uninitialized value "Result". Field "Result.Args.InlineElts" is uninitialized.
#   59|           Result.Compare = *ArgIterator;
#   60|   
#   61|->       return Result;
#   62|       }
#   63|       Result.Args = SmallVector<const Expr *>(Call->arguments());

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/MinMaxUseInitializerListCheck.cpp:80:3: var_decl: Declaring variable "FixItHints".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/MinMaxUseInitializerListCheck.cpp:94:5: uninit_use: Using uninitialized value "FixItHints". Field "FixItHints.InlineElts" is uninitialized.
#   92|   
#   93|     if ((!IsResultTypeTrivial && IgnoreNonTrivialTypes))
#   94|->     return FixItHints;
#   95|   
#   96|     if (IsResultTypeTrivial &&

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/MinMaxUseInitializerListCheck.cpp:80:3: var_decl: Declaring variable "FixItHints".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/MinMaxUseInitializerListCheck.cpp:100:5: uninit_use: Using uninitialized value "FixItHints". Field "FixItHints.InlineElts" is uninitialized.
#   98|             Match.Context->getTypeSizeInChars(ResultType).getQuantity()) >
#   99|             IgnoreTrivialTypesOfSizeAbove)
#  100|->     return FixItHints;
#  101|   
#  102|     for (const Expr *Arg : Result.Args) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/MinMaxUseInitializerListCheck.cpp:80:3: var_decl: Declaring variable "FixItHints".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/MinMaxUseInitializerListCheck.cpp:192:3: uninit_use: Using uninitialized value "FixItHints". Field "FixItHints.InlineElts" is uninitialized.
#  190|     }
#  191|   
#  192|->   return FixItHints;
#  193|   }
#  194|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/PassByValueCheck.cpp:181:3: var_decl: Declaring variable "Results".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/PassByValueCheck.cpp:186:3: uninit_use: Using uninitialized value "Results". Field "Results.InlineElts" is uninitialized.
#  184|     for (const FunctionDecl *Redecl : Ctor->redecls())
#  185|       Results.push_back(Redecl->getParamDecl(ParamIdx));
#  186|->   return Results;
#  187|   }
#  188|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/RawStringLiteralCheck.cpp:36:3: return_constant: Function call "Text.find('"', 0UL)" may return 18446744073709551615.
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/RawStringLiteralCheck.cpp:36:3: assignment: Assigning: "QuotePos" = "Text.find('"', 0UL)". The value of "QuotePos" is now 18446744073709551615.
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/RawStringLiteralCheck.cpp:38:3: overrun-buffer-arg: Calling "operator []" with "Text.Data" and "QuotePos - 1UL" is suspicious because of the very large index, 18446744073709551614. The index may be due to a negative parameter being interpreted as unsigned.
#   36|     const size_t QuotePos = Text.find('"');
#   37|     assert(QuotePos != StringRef::npos);
#   38|->   return (QuotePos > 0) && (Text[QuotePos - 1] == 'R');
#   39|   }
#   40|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/TypeTraitsCheck.cpp:18:32: constructor_uses_global_object: The constructor of global object "clang::tidy::modernize::ValueTraits" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::modernize::ValueTraits" might be created before "Allocator" is available.
#   16|   namespace clang::tidy::modernize {
#   17|   
#   18|-> static const llvm::StringSet<> ValueTraits = {
#   19|       "alignment_of",
#   20|       "conjunction",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/TypeTraitsCheck.cpp:18:32: constructor_uses_global_object: The constructor of global object "clang::tidy::modernize::ValueTraits" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::modernize::ValueTraits" might be created before "fuzzer::TPC" is available.
#   16|   namespace clang::tidy::modernize {
#   17|   
#   18|-> static const llvm::StringSet<> ValueTraits = {
#   19|       "alignment_of",
#   20|       "conjunction",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/TypeTraitsCheck.cpp:18:32: constructor_uses_global_object: The constructor of global object "clang::tidy::modernize::ValueTraits" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::modernize::ValueTraits" might be created before "scudo::RegionPageMap::Buffers" is available.
#   16|   namespace clang::tidy::modernize {
#   17|   
#   18|-> static const llvm::StringSet<> ValueTraits = {
#   19|       "alignment_of",
#   20|       "conjunction",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/TypeTraitsCheck.cpp:105:32: constructor_uses_global_object: The constructor of global object "clang::tidy::modernize::TypeTraits" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::modernize::TypeTraits" might be created before "Allocator" is available.
#  103|   };
#  104|   
#  105|-> static const llvm::StringSet<> TypeTraits = {
#  106|       "remove_cv",
#  107|       "remove_const",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/TypeTraitsCheck.cpp:105:32: constructor_uses_global_object: The constructor of global object "clang::tidy::modernize::TypeTraits" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::modernize::TypeTraits" might be created before "fuzzer::TPC" is available.
#  103|   };
#  104|   
#  105|-> static const llvm::StringSet<> TypeTraits = {
#  106|       "remove_cv",
#  107|       "remove_const",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/modernize/TypeTraitsCheck.cpp:105:32: constructor_uses_global_object: The constructor of global object "clang::tidy::modernize::TypeTraits" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::modernize::TypeTraits" might be created before "scudo::RegionPageMap::Buffers" is available.
#  103|   };
#  104|   
#  105|-> static const llvm::StringSet<> TypeTraits = {
#  106|       "remove_cv",
#  107|       "remove_const",

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/readability/ConstReturnTypeCheck.cpp:74:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/readability/ConstReturnTypeCheck.cpp:77:5: uninit_use: Using uninitialized value "Result". Field "Result.Hints.InlineElts" is uninitialized.
#   75|     std::optional<Token> Tok = findConstToRemove(Def, MatchResult);
#   76|     if (!Tok)
#   77|->     return Result;
#   78|   
#   79|     Result.ConstRange =

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/readability/InconsistentDeclarationParameterNameCheck.cpp:103:3: var_decl: Declaring variable "DifferingParams".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/readability/InconsistentDeclarationParameterNameCheck.cpp:132:3: uninit_use: Using uninitialized value "DifferingParams". Field "DifferingParams.InlineElts" is uninitialized.
#  130|     }
#  131|   
#  132|->   return DifferingParams;
#  133|   }
#  134|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/readability/InconsistentDeclarationParameterNameCheck.cpp:139:3: var_decl: Declaring variable "InconsistentDeclarations".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/readability/InconsistentDeclarationParameterNameCheck.cpp:165:3: uninit_use: Using uninitialized value "InconsistentDeclarations". Field "InconsistentDeclarations.InlineElts" is uninitialized.
#  163|                                                      Info2.DeclarationLocation);
#  164|                });
#  165|->   return InconsistentDeclarations;
#  166|   }
#  167|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/readability/MagicNumbersCheck.cpp:109:7: var_decl: Declaring variable "FloatValue".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/readability/MagicNumbersCheck.cpp:110:7: uninit_use_in_call: Using uninitialized value "FloatValue.U" when calling "convertFromString".
#  108|       for (const auto &InputValue : IgnoredFloatingPointValuesInput) {
#  109|         llvm::APFloat FloatValue(llvm::APFloat::IEEEsingle());
#  110|->       auto StatusOrErr =
#  111|             FloatValue.convertFromString(InputValue, DefaultRoundingMode);
#  112|         assert(StatusOrErr && "Invalid floating point representation");

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/readability/MagicNumbersCheck.cpp:116:7: var_decl: Declaring variable "DoubleValue".
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/readability/MagicNumbersCheck.cpp:117:7: uninit_use_in_call: Using uninitialized value "DoubleValue.U" when calling "convertFromString".
#  115|   
#  116|         llvm::APFloat DoubleValue(llvm::APFloat::IEEEdouble());
#  117|->       StatusOrErr =
#  118|             DoubleValue.convertFromString(InputValue, DefaultRoundingMode);
#  119|         assert(StatusOrErr && "Invalid floating point representation");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:36:27: constructor_uses_global_object: The constructor of global object "ClangTidyCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ClangTidyCategory" might be created before "Allocator" is available.
#   34|   static cl::desc desc(StringRef description) { return {description.ltrim()}; }
#   35|   
#   36|-> static cl::OptionCategory ClangTidyCategory("clang-tidy options");
#   37|   
#   38|   static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:36:27: constructor_uses_global_object: The constructor of global object "ClangTidyCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "ClangTidyCategory" might be created before "GlobalParser" is available.
#   34|   static cl::desc desc(StringRef description) { return {description.ltrim()}; }
#   35|   
#   36|-> static cl::OptionCategory ClangTidyCategory("clang-tidy options");
#   37|   
#   38|   static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:36:27: constructor_uses_global_object: The constructor of global object "ClangTidyCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ClangTidyCategory" might be created before "fuzzer::TPC" is available.
#   34|   static cl::desc desc(StringRef description) { return {description.ltrim()}; }
#   35|   
#   36|-> static cl::OptionCategory ClangTidyCategory("clang-tidy options");
#   37|   
#   38|   static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:36:27: constructor_uses_global_object: The constructor of global object "ClangTidyCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ClangTidyCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   34|   static cl::desc desc(StringRef description) { return {description.ltrim()}; }
#   35|   
#   36|-> static cl::OptionCategory ClangTidyCategory("clang-tidy options");
#   37|   
#   38|   static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:38:22: constructor_uses_global_object: The constructor of global object "CommonHelp" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "CommonHelp" might be created before "GlobalParser" is available.
#   36|   static cl::OptionCategory ClangTidyCategory("clang-tidy options");
#   37|   
#   38|-> static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   39|   static cl::extrahelp ClangTidyHelp(R"(
#   40|   Configuration files:

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:39:22: constructor_uses_global_object: The constructor of global object "ClangTidyHelp" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "ClangTidyHelp" might be created before "GlobalParser" is available.
#   37|   
#   38|   static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   39|-> static cl::extrahelp ClangTidyHelp(R"(
#   40|   Configuration files:
#   41|     clang-tidy attempts to read configuration for each source file from a

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:100:29: constructor_uses_global_object: The constructor of global object "Checks[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "Checks[abi:cxx11]" might be created before "Allocator" is available.
#   98|       "clang-analyzer-*";      //   * Static Analyzer checks
#   99|   
#  100|-> static cl::opt<std::string> Checks("checks", desc(R"(
#  101|   Comma-separated list of globs with optional '-'
#  102|   prefix. Globs are processed in order of

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:100:29: constructor_uses_global_object: The constructor of global object "Checks[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "Checks[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   98|       "clang-analyzer-*";      //   * Static Analyzer checks
#   99|   
#  100|-> static cl::opt<std::string> Checks("checks", desc(R"(
#  101|   Comma-separated list of globs with optional '-'
#  102|   prefix. Globs are processed in order of

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:100:29: constructor_uses_global_object: The constructor of global object "Checks[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Checks[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   98|       "clang-analyzer-*";      //   * Static Analyzer checks
#   99|   
#  100|-> static cl::opt<std::string> Checks("checks", desc(R"(
#  101|   Comma-separated list of globs with optional '-'
#  102|   prefix. Globs are processed in order of

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:100:29: constructor_uses_global_object: The constructor of global object "Checks[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "Checks[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   98|       "clang-analyzer-*";      //   * Static Analyzer checks
#   99|   
#  100|-> static cl::opt<std::string> Checks("checks", desc(R"(
#  101|   Comma-separated list of globs with optional '-'
#  102|   prefix. Globs are processed in order of

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:113:29: constructor_uses_global_object: The constructor of global object "WarningsAsErrors[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "WarningsAsErrors[abi:cxx11]" might be created before "Allocator" is available.
#  111|                                      cl::init(""), cl::cat(ClangTidyCategory));
#  112|   
#  113|-> static cl::opt<std::string> WarningsAsErrors("warnings-as-errors", desc(R"(
#  114|   Upgrades warnings to errors. Same format as
#  115|   '-checks'.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:113:29: constructor_uses_global_object: The constructor of global object "WarningsAsErrors[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "WarningsAsErrors[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  111|                                      cl::init(""), cl::cat(ClangTidyCategory));
#  112|   
#  113|-> static cl::opt<std::string> WarningsAsErrors("warnings-as-errors", desc(R"(
#  114|   Upgrades warnings to errors. Same format as
#  115|   '-checks'.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:113:29: constructor_uses_global_object: The constructor of global object "WarningsAsErrors[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "WarningsAsErrors[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  111|                                      cl::init(""), cl::cat(ClangTidyCategory));
#  112|   
#  113|-> static cl::opt<std::string> WarningsAsErrors("warnings-as-errors", desc(R"(
#  114|   Upgrades warnings to errors. Same format as
#  115|   '-checks'.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:113:29: constructor_uses_global_object: The constructor of global object "WarningsAsErrors[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "WarningsAsErrors[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  111|                                      cl::init(""), cl::cat(ClangTidyCategory));
#  112|   
#  113|-> static cl::opt<std::string> WarningsAsErrors("warnings-as-errors", desc(R"(
#  114|   Upgrades warnings to errors. Same format as
#  115|   '-checks'.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:123:29: constructor_uses_global_object: The constructor of global object "HeaderFilter[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "HeaderFilter[abi:cxx11]" might be created before "Allocator" is available.
#  121|                                                cl::cat(ClangTidyCategory));
#  122|   
#  123|-> static cl::opt<std::string> HeaderFilter("header-filter", desc(R"(
#  124|   Regular expression matching the names of the
#  125|   headers to output diagnostics from. Diagnostics

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:123:29: constructor_uses_global_object: The constructor of global object "HeaderFilter[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "HeaderFilter[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  121|                                                cl::cat(ClangTidyCategory));
#  122|   
#  123|-> static cl::opt<std::string> HeaderFilter("header-filter", desc(R"(
#  124|   Regular expression matching the names of the
#  125|   headers to output diagnostics from. Diagnostics

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:123:29: constructor_uses_global_object: The constructor of global object "HeaderFilter[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HeaderFilter[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  121|                                                cl::cat(ClangTidyCategory));
#  122|   
#  123|-> static cl::opt<std::string> HeaderFilter("header-filter", desc(R"(
#  124|   Regular expression matching the names of the
#  125|   headers to output diagnostics from. Diagnostics

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:123:29: constructor_uses_global_object: The constructor of global object "HeaderFilter[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "HeaderFilter[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  121|                                                cl::cat(ClangTidyCategory));
#  122|   
#  123|-> static cl::opt<std::string> HeaderFilter("header-filter", desc(R"(
#  124|   Regular expression matching the names of the
#  125|   headers to output diagnostics from. Diagnostics

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:135:22: constructor_uses_global_object: The constructor of global object "SystemHeaders" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "SystemHeaders" might be created before "Allocator" is available.
#  133|                                            cl::cat(ClangTidyCategory));
#  134|   
#  135|-> static cl::opt<bool> SystemHeaders("system-headers", desc(R"(
#  136|   Display the errors from system headers.
#  137|   This option overrides the 'SystemHeaders' option

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:135:22: constructor_uses_global_object: The constructor of global object "SystemHeaders" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "SystemHeaders" might be created before "fuzzer::TPC" is available.
#  133|                                            cl::cat(ClangTidyCategory));
#  134|   
#  135|-> static cl::opt<bool> SystemHeaders("system-headers", desc(R"(
#  136|   Display the errors from system headers.
#  137|   This option overrides the 'SystemHeaders' option

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:135:22: constructor_uses_global_object: The constructor of global object "SystemHeaders" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SystemHeaders" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  133|                                            cl::cat(ClangTidyCategory));
#  134|   
#  135|-> static cl::opt<bool> SystemHeaders("system-headers", desc(R"(
#  136|   Display the errors from system headers.
#  137|   This option overrides the 'SystemHeaders' option

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:135:22: constructor_uses_global_object: The constructor of global object "SystemHeaders" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "SystemHeaders" might be created before "scudo::RegionPageMap::Buffers" is available.
#  133|                                            cl::cat(ClangTidyCategory));
#  134|   
#  135|-> static cl::opt<bool> SystemHeaders("system-headers", desc(R"(
#  136|   Display the errors from system headers.
#  137|   This option overrides the 'SystemHeaders' option

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:142:29: constructor_uses_global_object: The constructor of global object "LineFilter[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "LineFilter[abi:cxx11]" might be created before "Allocator" is available.
#  140|                                      cl::init(false), cl::cat(ClangTidyCategory));
#  141|   
#  142|-> static cl::opt<std::string> LineFilter("line-filter", desc(R"(
#  143|   List of files with line ranges to filter the
#  144|   warnings. Can be used together with

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:142:29: constructor_uses_global_object: The constructor of global object "LineFilter[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "LineFilter[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  140|                                      cl::init(false), cl::cat(ClangTidyCategory));
#  141|   
#  142|-> static cl::opt<std::string> LineFilter("line-filter", desc(R"(
#  143|   List of files with line ranges to filter the
#  144|   warnings. Can be used together with

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:142:29: constructor_uses_global_object: The constructor of global object "LineFilter[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LineFilter[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  140|                                      cl::init(false), cl::cat(ClangTidyCategory));
#  141|   
#  142|-> static cl::opt<std::string> LineFilter("line-filter", desc(R"(
#  143|   List of files with line ranges to filter the
#  144|   warnings. Can be used together with

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:142:29: constructor_uses_global_object: The constructor of global object "LineFilter[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "LineFilter[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  140|                                      cl::init(false), cl::cat(ClangTidyCategory));
#  141|   
#  142|-> static cl::opt<std::string> LineFilter("line-filter", desc(R"(
#  143|   List of files with line ranges to filter the
#  144|   warnings. Can be used together with

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:155:22: constructor_uses_global_object: The constructor of global object "Fix" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "Fix" might be created before "Allocator" is available.
#  153|                                          cl::cat(ClangTidyCategory));
#  154|   
#  155|-> static cl::opt<bool> Fix("fix", desc(R"(
#  156|   Apply suggested fixes. Without -fix-errors
#  157|   clang-tidy will bail out if any compilation

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:155:22: constructor_uses_global_object: The constructor of global object "Fix" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "Fix" might be created before "fuzzer::TPC" is available.
#  153|                                          cl::cat(ClangTidyCategory));
#  154|   
#  155|-> static cl::opt<bool> Fix("fix", desc(R"(
#  156|   Apply suggested fixes. Without -fix-errors
#  157|   clang-tidy will bail out if any compilation

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:155:22: constructor_uses_global_object: The constructor of global object "Fix" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Fix" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  153|                                          cl::cat(ClangTidyCategory));
#  154|   
#  155|-> static cl::opt<bool> Fix("fix", desc(R"(
#  156|   Apply suggested fixes. Without -fix-errors
#  157|   clang-tidy will bail out if any compilation

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:155:22: constructor_uses_global_object: The constructor of global object "Fix" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "Fix" might be created before "scudo::RegionPageMap::Buffers" is available.
#  153|                                          cl::cat(ClangTidyCategory));
#  154|   
#  155|-> static cl::opt<bool> Fix("fix", desc(R"(
#  156|   Apply suggested fixes. Without -fix-errors
#  157|   clang-tidy will bail out if any compilation

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:162:22: constructor_uses_global_object: The constructor of global object "FixErrors" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "FixErrors" might be created before "Allocator" is available.
#  160|                            cl::init(false), cl::cat(ClangTidyCategory));
#  161|   
#  162|-> static cl::opt<bool> FixErrors("fix-errors", desc(R"(
#  163|   Apply suggested fixes even if compilation
#  164|   errors were found. If compiler errors have

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:162:22: constructor_uses_global_object: The constructor of global object "FixErrors" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "FixErrors" might be created before "fuzzer::TPC" is available.
#  160|                            cl::init(false), cl::cat(ClangTidyCategory));
#  161|   
#  162|-> static cl::opt<bool> FixErrors("fix-errors", desc(R"(
#  163|   Apply suggested fixes even if compilation
#  164|   errors were found. If compiler errors have

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:162:22: constructor_uses_global_object: The constructor of global object "FixErrors" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FixErrors" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  160|                            cl::init(false), cl::cat(ClangTidyCategory));
#  161|   
#  162|-> static cl::opt<bool> FixErrors("fix-errors", desc(R"(
#  163|   Apply suggested fixes even if compilation
#  164|   errors were found. If compiler errors have

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:162:22: constructor_uses_global_object: The constructor of global object "FixErrors" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "FixErrors" might be created before "scudo::RegionPageMap::Buffers" is available.
#  160|                            cl::init(false), cl::cat(ClangTidyCategory));
#  161|   
#  162|-> static cl::opt<bool> FixErrors("fix-errors", desc(R"(
#  163|   Apply suggested fixes even if compilation
#  164|   errors were found. If compiler errors have

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:170:22: constructor_uses_global_object: The constructor of global object "FixNotes" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "FixNotes" might be created before "Allocator" is available.
#  168|                                  cl::init(false), cl::cat(ClangTidyCategory));
#  169|   
#  170|-> static cl::opt<bool> FixNotes("fix-notes", desc(R"(
#  171|   If a warning has no fix, but a single fix can
#  172|   be found through an associated diagnostic note,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:170:22: constructor_uses_global_object: The constructor of global object "FixNotes" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "FixNotes" might be created before "fuzzer::TPC" is available.
#  168|                                  cl::init(false), cl::cat(ClangTidyCategory));
#  169|   
#  170|-> static cl::opt<bool> FixNotes("fix-notes", desc(R"(
#  171|   If a warning has no fix, but a single fix can
#  172|   be found through an associated diagnostic note,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:170:22: constructor_uses_global_object: The constructor of global object "FixNotes" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FixNotes" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  168|                                  cl::init(false), cl::cat(ClangTidyCategory));
#  169|   
#  170|-> static cl::opt<bool> FixNotes("fix-notes", desc(R"(
#  171|   If a warning has no fix, but a single fix can
#  172|   be found through an associated diagnostic note,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:170:22: constructor_uses_global_object: The constructor of global object "FixNotes" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "FixNotes" might be created before "scudo::RegionPageMap::Buffers" is available.
#  168|                                  cl::init(false), cl::cat(ClangTidyCategory));
#  169|   
#  170|-> static cl::opt<bool> FixNotes("fix-notes", desc(R"(
#  171|   If a warning has no fix, but a single fix can
#  172|   be found through an associated diagnostic note,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:179:29: constructor_uses_global_object: The constructor of global object "FormatStyle[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "FormatStyle[abi:cxx11]" might be created before "Allocator" is available.
#  177|                                 cl::init(false), cl::cat(ClangTidyCategory));
#  178|   
#  179|-> static cl::opt<std::string> FormatStyle("format-style", desc(R"(
#  180|   Style for formatting code around applied fixes:
#  181|     - 'none' (default) turns off formatting

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:179:29: constructor_uses_global_object: The constructor of global object "FormatStyle[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "FormatStyle[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  177|                                 cl::init(false), cl::cat(ClangTidyCategory));
#  178|   
#  179|-> static cl::opt<std::string> FormatStyle("format-style", desc(R"(
#  180|   Style for formatting code around applied fixes:
#  181|     - 'none' (default) turns off formatting

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:179:29: constructor_uses_global_object: The constructor of global object "FormatStyle[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FormatStyle[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  177|                                 cl::init(false), cl::cat(ClangTidyCategory));
#  178|   
#  179|-> static cl::opt<std::string> FormatStyle("format-style", desc(R"(
#  180|   Style for formatting code around applied fixes:
#  181|     - 'none' (default) turns off formatting

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:179:29: constructor_uses_global_object: The constructor of global object "FormatStyle[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "FormatStyle[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  177|                                 cl::init(false), cl::cat(ClangTidyCategory));
#  178|   
#  179|-> static cl::opt<std::string> FormatStyle("format-style", desc(R"(
#  180|   Style for formatting code around applied fixes:
#  181|     - 'none' (default) turns off formatting

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:196:22: constructor_uses_global_object: The constructor of global object "ListChecks" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ListChecks" might be created before "Allocator" is available.
#  194|                                           cl::cat(ClangTidyCategory));
#  195|   
#  196|-> static cl::opt<bool> ListChecks("list-checks", desc(R"(
#  197|   List all enabled checks and exit. Use with
#  198|   -checks=* to list all available checks.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:196:22: constructor_uses_global_object: The constructor of global object "ListChecks" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ListChecks" might be created before "fuzzer::TPC" is available.
#  194|                                           cl::cat(ClangTidyCategory));
#  195|   
#  196|-> static cl::opt<bool> ListChecks("list-checks", desc(R"(
#  197|   List all enabled checks and exit. Use with
#  198|   -checks=* to list all available checks.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:196:22: constructor_uses_global_object: The constructor of global object "ListChecks" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ListChecks" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  194|                                           cl::cat(ClangTidyCategory));
#  195|   
#  196|-> static cl::opt<bool> ListChecks("list-checks", desc(R"(
#  197|   List all enabled checks and exit. Use with
#  198|   -checks=* to list all available checks.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:196:22: constructor_uses_global_object: The constructor of global object "ListChecks" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ListChecks" might be created before "scudo::RegionPageMap::Buffers" is available.
#  194|                                           cl::cat(ClangTidyCategory));
#  195|   
#  196|-> static cl::opt<bool> ListChecks("list-checks", desc(R"(
#  197|   List all enabled checks and exit. Use with
#  198|   -checks=* to list all available checks.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:202:22: constructor_uses_global_object: The constructor of global object "ExplainConfig" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ExplainConfig" might be created before "Allocator" is available.
#  200|                                   cl::init(false), cl::cat(ClangTidyCategory));
#  201|   
#  202|-> static cl::opt<bool> ExplainConfig("explain-config", desc(R"(
#  203|   For each enabled check explains, where it is
#  204|   enabled, i.e. in clang-tidy binary, command

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:202:22: constructor_uses_global_object: The constructor of global object "ExplainConfig" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ExplainConfig" might be created before "fuzzer::TPC" is available.
#  200|                                   cl::init(false), cl::cat(ClangTidyCategory));
#  201|   
#  202|-> static cl::opt<bool> ExplainConfig("explain-config", desc(R"(
#  203|   For each enabled check explains, where it is
#  204|   enabled, i.e. in clang-tidy binary, command

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:202:22: constructor_uses_global_object: The constructor of global object "ExplainConfig" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ExplainConfig" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  200|                                   cl::init(false), cl::cat(ClangTidyCategory));
#  201|   
#  202|-> static cl::opt<bool> ExplainConfig("explain-config", desc(R"(
#  203|   For each enabled check explains, where it is
#  204|   enabled, i.e. in clang-tidy binary, command

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:202:22: constructor_uses_global_object: The constructor of global object "ExplainConfig" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ExplainConfig" might be created before "scudo::RegionPageMap::Buffers" is available.
#  200|                                   cl::init(false), cl::cat(ClangTidyCategory));
#  201|   
#  202|-> static cl::opt<bool> ExplainConfig("explain-config", desc(R"(
#  203|   For each enabled check explains, where it is
#  204|   enabled, i.e. in clang-tidy binary, command

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:209:29: constructor_uses_global_object: The constructor of global object "Config[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "Config[abi:cxx11]" might be created before "Allocator" is available.
#  207|                                      cl::init(false), cl::cat(ClangTidyCategory));
#  208|   
#  209|-> static cl::opt<std::string> Config("config", desc(R"(
#  210|   Specifies a configuration in YAML/JSON format:
#  211|     -config="{Checks: '*',

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:209:29: constructor_uses_global_object: The constructor of global object "Config[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "Config[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  207|                                      cl::init(false), cl::cat(ClangTidyCategory));
#  208|   
#  209|-> static cl::opt<std::string> Config("config", desc(R"(
#  210|   Specifies a configuration in YAML/JSON format:
#  211|     -config="{Checks: '*',

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:209:29: constructor_uses_global_object: The constructor of global object "Config[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Config[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  207|                                      cl::init(false), cl::cat(ClangTidyCategory));
#  208|   
#  209|-> static cl::opt<std::string> Config("config", desc(R"(
#  210|   Specifies a configuration in YAML/JSON format:
#  211|     -config="{Checks: '*',

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:209:29: constructor_uses_global_object: The constructor of global object "Config[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "Config[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  207|                                      cl::init(false), cl::cat(ClangTidyCategory));
#  208|   
#  209|-> static cl::opt<std::string> Config("config", desc(R"(
#  210|   Specifies a configuration in YAML/JSON format:
#  211|     -config="{Checks: '*',

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:219:29: constructor_uses_global_object: The constructor of global object "ConfigFile[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ConfigFile[abi:cxx11]" might be created before "Allocator" is available.
#  217|                                      cl::init(""), cl::cat(ClangTidyCategory));
#  218|   
#  219|-> static cl::opt<std::string> ConfigFile("config-file", desc(R"(
#  220|   Specify the path of .clang-tidy or custom config file:
#  221|    e.g. --config-file=/some/path/myTidyConfigFile

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:219:29: constructor_uses_global_object: The constructor of global object "ConfigFile[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ConfigFile[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  217|                                      cl::init(""), cl::cat(ClangTidyCategory));
#  218|   
#  219|-> static cl::opt<std::string> ConfigFile("config-file", desc(R"(
#  220|   Specify the path of .clang-tidy or custom config file:
#  221|    e.g. --config-file=/some/path/myTidyConfigFile

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:219:29: constructor_uses_global_object: The constructor of global object "ConfigFile[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ConfigFile[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  217|                                      cl::init(""), cl::cat(ClangTidyCategory));
#  218|   
#  219|-> static cl::opt<std::string> ConfigFile("config-file", desc(R"(
#  220|   Specify the path of .clang-tidy or custom config file:
#  221|    e.g. --config-file=/some/path/myTidyConfigFile

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:219:29: constructor_uses_global_object: The constructor of global object "ConfigFile[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ConfigFile[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  217|                                      cl::init(""), cl::cat(ClangTidyCategory));
#  218|   
#  219|-> static cl::opt<std::string> ConfigFile("config-file", desc(R"(
#  220|   Specify the path of .clang-tidy or custom config file:
#  221|    e.g. --config-file=/some/path/myTidyConfigFile

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:229:22: constructor_uses_global_object: The constructor of global object "DumpConfig" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "DumpConfig" might be created before "Allocator" is available.
#  227|                                          cl::cat(ClangTidyCategory));
#  228|   
#  229|-> static cl::opt<bool> DumpConfig("dump-config", desc(R"(
#  230|   Dumps configuration in the YAML format to
#  231|   stdout. This option can be used along with a

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:229:22: constructor_uses_global_object: The constructor of global object "DumpConfig" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "DumpConfig" might be created before "fuzzer::TPC" is available.
#  227|                                          cl::cat(ClangTidyCategory));
#  228|   
#  229|-> static cl::opt<bool> DumpConfig("dump-config", desc(R"(
#  230|   Dumps configuration in the YAML format to
#  231|   stdout. This option can be used along with a

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:229:22: constructor_uses_global_object: The constructor of global object "DumpConfig" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DumpConfig" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  227|                                          cl::cat(ClangTidyCategory));
#  228|   
#  229|-> static cl::opt<bool> DumpConfig("dump-config", desc(R"(
#  230|   Dumps configuration in the YAML format to
#  231|   stdout. This option can be used along with a

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:229:22: constructor_uses_global_object: The constructor of global object "DumpConfig" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "DumpConfig" might be created before "scudo::RegionPageMap::Buffers" is available.
#  227|                                          cl::cat(ClangTidyCategory));
#  228|   
#  229|-> static cl::opt<bool> DumpConfig("dump-config", desc(R"(
#  230|   Dumps configuration in the YAML format to
#  231|   stdout. This option can be used along with a

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:241:22: constructor_uses_global_object: The constructor of global object "EnableCheckProfile" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "EnableCheckProfile" might be created before "Allocator" is available.
#  239|                                   cl::init(false), cl::cat(ClangTidyCategory));
#  240|   
#  241|-> static cl::opt<bool> EnableCheckProfile("enable-check-profile", desc(R"(
#  242|   Enable per-check timing profiles, and print a
#  243|   report to stderr.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:241:22: constructor_uses_global_object: The constructor of global object "EnableCheckProfile" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "EnableCheckProfile" might be created before "fuzzer::TPC" is available.
#  239|                                   cl::init(false), cl::cat(ClangTidyCategory));
#  240|   
#  241|-> static cl::opt<bool> EnableCheckProfile("enable-check-profile", desc(R"(
#  242|   Enable per-check timing profiles, and print a
#  243|   report to stderr.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:241:22: constructor_uses_global_object: The constructor of global object "EnableCheckProfile" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableCheckProfile" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  239|                                   cl::init(false), cl::cat(ClangTidyCategory));
#  240|   
#  241|-> static cl::opt<bool> EnableCheckProfile("enable-check-profile", desc(R"(
#  242|   Enable per-check timing profiles, and print a
#  243|   report to stderr.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:241:22: constructor_uses_global_object: The constructor of global object "EnableCheckProfile" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "EnableCheckProfile" might be created before "scudo::RegionPageMap::Buffers" is available.
#  239|                                   cl::init(false), cl::cat(ClangTidyCategory));
#  240|   
#  241|-> static cl::opt<bool> EnableCheckProfile("enable-check-profile", desc(R"(
#  242|   Enable per-check timing profiles, and print a
#  243|   report to stderr.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:248:29: constructor_uses_global_object: The constructor of global object "StoreCheckProfile[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "StoreCheckProfile[abi:cxx11]" might be created before "Allocator" is available.
#  246|                                           cl::cat(ClangTidyCategory));
#  247|   
#  248|-> static cl::opt<std::string> StoreCheckProfile("store-check-profile", desc(R"(
#  249|   By default reports are printed in tabulated
#  250|   format to stderr. When this option is passed,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:248:29: constructor_uses_global_object: The constructor of global object "StoreCheckProfile[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "StoreCheckProfile[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  246|                                           cl::cat(ClangTidyCategory));
#  247|   
#  248|-> static cl::opt<std::string> StoreCheckProfile("store-check-profile", desc(R"(
#  249|   By default reports are printed in tabulated
#  250|   format to stderr. When this option is passed,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:248:29: constructor_uses_global_object: The constructor of global object "StoreCheckProfile[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StoreCheckProfile[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  246|                                           cl::cat(ClangTidyCategory));
#  247|   
#  248|-> static cl::opt<std::string> StoreCheckProfile("store-check-profile", desc(R"(
#  249|   By default reports are printed in tabulated
#  250|   format to stderr. When this option is passed,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:248:29: constructor_uses_global_object: The constructor of global object "StoreCheckProfile[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "StoreCheckProfile[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  246|                                           cl::cat(ClangTidyCategory));
#  247|   
#  248|-> static cl::opt<std::string> StoreCheckProfile("store-check-profile", desc(R"(
#  249|   By default reports are printed in tabulated
#  250|   format to stderr. When this option is passed,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:260:5: constructor_uses_global_object: The constructor of global object "AllowEnablingAnalyzerAlphaCheckers" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "AllowEnablingAnalyzerAlphaCheckers" might be created before "Allocator" is available.
#  258|   /// highly not recommended for users.
#  259|   static cl::opt<bool>
#  260|->     AllowEnablingAnalyzerAlphaCheckers("allow-enabling-analyzer-alpha-checkers",
#  261|                                          cl::init(false), cl::Hidden,
#  262|                                          cl::cat(ClangTidyCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:260:5: constructor_uses_global_object: The constructor of global object "AllowEnablingAnalyzerAlphaCheckers" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "AllowEnablingAnalyzerAlphaCheckers" might be created before "fuzzer::TPC" is available.
#  258|   /// highly not recommended for users.
#  259|   static cl::opt<bool>
#  260|->     AllowEnablingAnalyzerAlphaCheckers("allow-enabling-analyzer-alpha-checkers",
#  261|                                          cl::init(false), cl::Hidden,
#  262|                                          cl::cat(ClangTidyCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:260:5: constructor_uses_global_object: The constructor of global object "AllowEnablingAnalyzerAlphaCheckers" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AllowEnablingAnalyzerAlphaCheckers" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  258|   /// highly not recommended for users.
#  259|   static cl::opt<bool>
#  260|->     AllowEnablingAnalyzerAlphaCheckers("allow-enabling-analyzer-alpha-checkers",
#  261|                                          cl::init(false), cl::Hidden,
#  262|                                          cl::cat(ClangTidyCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:260:5: constructor_uses_global_object: The constructor of global object "AllowEnablingAnalyzerAlphaCheckers" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "AllowEnablingAnalyzerAlphaCheckers" might be created before "scudo::RegionPageMap::Buffers" is available.
#  258|   /// highly not recommended for users.
#  259|   static cl::opt<bool>
#  260|->     AllowEnablingAnalyzerAlphaCheckers("allow-enabling-analyzer-alpha-checkers",
#  261|                                          cl::init(false), cl::Hidden,
#  262|                                          cl::cat(ClangTidyCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:264:22: constructor_uses_global_object: The constructor of global object "EnableModuleHeadersParsing" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "EnableModuleHeadersParsing" might be created before "Allocator" is available.
#  262|                                          cl::cat(ClangTidyCategory));
#  263|   
#  264|-> static cl::opt<bool> EnableModuleHeadersParsing("enable-module-headers-parsing",
#  265|                                                   desc(R"(
#  266|   Enables preprocessor-level module header parsing

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:264:22: constructor_uses_global_object: The constructor of global object "EnableModuleHeadersParsing" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "EnableModuleHeadersParsing" might be created before "fuzzer::TPC" is available.
#  262|                                          cl::cat(ClangTidyCategory));
#  263|   
#  264|-> static cl::opt<bool> EnableModuleHeadersParsing("enable-module-headers-parsing",
#  265|                                                   desc(R"(
#  266|   Enables preprocessor-level module header parsing

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:264:22: constructor_uses_global_object: The constructor of global object "EnableModuleHeadersParsing" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableModuleHeadersParsing" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  262|                                          cl::cat(ClangTidyCategory));
#  263|   
#  264|-> static cl::opt<bool> EnableModuleHeadersParsing("enable-module-headers-parsing",
#  265|                                                   desc(R"(
#  266|   Enables preprocessor-level module header parsing

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:264:22: constructor_uses_global_object: The constructor of global object "EnableModuleHeadersParsing" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "EnableModuleHeadersParsing" might be created before "scudo::RegionPageMap::Buffers" is available.
#  262|                                          cl::cat(ClangTidyCategory));
#  263|   
#  264|-> static cl::opt<bool> EnableModuleHeadersParsing("enable-module-headers-parsing",
#  265|                                                   desc(R"(
#  266|   Enables preprocessor-level module header parsing

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:275:29: constructor_uses_global_object: The constructor of global object "ExportFixes[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ExportFixes[abi:cxx11]" might be created before "Allocator" is available.
#  273|                                                   cl::cat(ClangTidyCategory));
#  274|   
#  275|-> static cl::opt<std::string> ExportFixes("export-fixes", desc(R"(
#  276|   YAML file to store suggested fixes in. The
#  277|   stored fixes can be applied to the input source

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:275:29: constructor_uses_global_object: The constructor of global object "ExportFixes[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ExportFixes[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  273|                                                   cl::cat(ClangTidyCategory));
#  274|   
#  275|-> static cl::opt<std::string> ExportFixes("export-fixes", desc(R"(
#  276|   YAML file to store suggested fixes in. The
#  277|   stored fixes can be applied to the input source

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:275:29: constructor_uses_global_object: The constructor of global object "ExportFixes[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ExportFixes[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  273|                                                   cl::cat(ClangTidyCategory));
#  274|   
#  275|-> static cl::opt<std::string> ExportFixes("export-fixes", desc(R"(
#  276|   YAML file to store suggested fixes in. The
#  277|   stored fixes can be applied to the input source

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:275:29: constructor_uses_global_object: The constructor of global object "ExportFixes[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ExportFixes[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  273|                                                   cl::cat(ClangTidyCategory));
#  274|   
#  275|-> static cl::opt<std::string> ExportFixes("export-fixes", desc(R"(
#  276|   YAML file to store suggested fixes in. The
#  277|   stored fixes can be applied to the input source

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:283:22: constructor_uses_global_object: The constructor of global object "Quiet" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "Quiet" might be created before "Allocator" is available.
#  281|                                           cl::cat(ClangTidyCategory));
#  282|   
#  283|-> static cl::opt<bool> Quiet("quiet", desc(R"(
#  284|   Run clang-tidy in quiet mode. This suppresses
#  285|   printing statistics about ignored warnings and

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:283:22: constructor_uses_global_object: The constructor of global object "Quiet" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "Quiet" might be created before "fuzzer::TPC" is available.
#  281|                                           cl::cat(ClangTidyCategory));
#  282|   
#  283|-> static cl::opt<bool> Quiet("quiet", desc(R"(
#  284|   Run clang-tidy in quiet mode. This suppresses
#  285|   printing statistics about ignored warnings and

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:283:22: constructor_uses_global_object: The constructor of global object "Quiet" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Quiet" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  281|                                           cl::cat(ClangTidyCategory));
#  282|   
#  283|-> static cl::opt<bool> Quiet("quiet", desc(R"(
#  284|   Run clang-tidy in quiet mode. This suppresses
#  285|   printing statistics about ignored warnings and

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:283:22: constructor_uses_global_object: The constructor of global object "Quiet" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "Quiet" might be created before "scudo::RegionPageMap::Buffers" is available.
#  281|                                           cl::cat(ClangTidyCategory));
#  282|   
#  283|-> static cl::opt<bool> Quiet("quiet", desc(R"(
#  284|   Run clang-tidy in quiet mode. This suppresses
#  285|   printing statistics about ignored warnings and

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:291:29: constructor_uses_global_object: The constructor of global object "VfsOverlay[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "VfsOverlay[abi:cxx11]" might be created before "Allocator" is available.
#  289|                              cl::init(false), cl::cat(ClangTidyCategory));
#  290|   
#  291|-> static cl::opt<std::string> VfsOverlay("vfsoverlay", desc(R"(
#  292|   Overlay the virtual filesystem described by file
#  293|   over the real file system.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:291:29: constructor_uses_global_object: The constructor of global object "VfsOverlay[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "VfsOverlay[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  289|                              cl::init(false), cl::cat(ClangTidyCategory));
#  290|   
#  291|-> static cl::opt<std::string> VfsOverlay("vfsoverlay", desc(R"(
#  292|   Overlay the virtual filesystem described by file
#  293|   over the real file system.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:291:29: constructor_uses_global_object: The constructor of global object "VfsOverlay[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VfsOverlay[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  289|                              cl::init(false), cl::cat(ClangTidyCategory));
#  290|   
#  291|-> static cl::opt<std::string> VfsOverlay("vfsoverlay", desc(R"(
#  292|   Overlay the virtual filesystem described by file
#  293|   over the real file system.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:291:29: constructor_uses_global_object: The constructor of global object "VfsOverlay[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "VfsOverlay[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  289|                              cl::init(false), cl::cat(ClangTidyCategory));
#  290|   
#  291|-> static cl::opt<std::string> VfsOverlay("vfsoverlay", desc(R"(
#  292|   Overlay the virtual filesystem described by file
#  293|   over the real file system.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:298:22: constructor_uses_global_object: The constructor of global object "UseColor" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "UseColor" might be created before "Allocator" is available.
#  296|                                          cl::cat(ClangTidyCategory));
#  297|   
#  298|-> static cl::opt<bool> UseColor("use-color", desc(R"(
#  299|   Use colors in diagnostics. If not set, colors
#  300|   will be used if the terminal connected to

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:298:22: constructor_uses_global_object: The constructor of global object "UseColor" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "UseColor" might be created before "fuzzer::TPC" is available.
#  296|                                          cl::cat(ClangTidyCategory));
#  297|   
#  298|-> static cl::opt<bool> UseColor("use-color", desc(R"(
#  299|   Use colors in diagnostics. If not set, colors
#  300|   will be used if the terminal connected to

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:298:22: constructor_uses_global_object: The constructor of global object "UseColor" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "UseColor" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  296|                                          cl::cat(ClangTidyCategory));
#  297|   
#  298|-> static cl::opt<bool> UseColor("use-color", desc(R"(
#  299|   Use colors in diagnostics. If not set, colors
#  300|   will be used if the terminal connected to

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:298:22: constructor_uses_global_object: The constructor of global object "UseColor" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "UseColor" might be created before "scudo::RegionPageMap::Buffers" is available.
#  296|                                          cl::cat(ClangTidyCategory));
#  297|   
#  298|-> static cl::opt<bool> UseColor("use-color", desc(R"(
#  299|   Use colors in diagnostics. If not set, colors
#  300|   will be used if the terminal connected to

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:307:22: constructor_uses_global_object: The constructor of global object "VerifyConfig" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "VerifyConfig" might be created before "Allocator" is available.
#  305|                                 cl::init(false), cl::cat(ClangTidyCategory));
#  306|   
#  307|-> static cl::opt<bool> VerifyConfig("verify-config", desc(R"(
#  308|   Check the config files to ensure each check and
#  309|   option is recognized.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:307:22: constructor_uses_global_object: The constructor of global object "VerifyConfig" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "VerifyConfig" might be created before "fuzzer::TPC" is available.
#  305|                                 cl::init(false), cl::cat(ClangTidyCategory));
#  306|   
#  307|-> static cl::opt<bool> VerifyConfig("verify-config", desc(R"(
#  308|   Check the config files to ensure each check and
#  309|   option is recognized.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:307:22: constructor_uses_global_object: The constructor of global object "VerifyConfig" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyConfig" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  305|                                 cl::init(false), cl::cat(ClangTidyCategory));
#  306|   
#  307|-> static cl::opt<bool> VerifyConfig("verify-config", desc(R"(
#  308|   Check the config files to ensure each check and
#  309|   option is recognized.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/tool/ClangTidyMain.cpp:307:22: constructor_uses_global_object: The constructor of global object "VerifyConfig" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "VerifyConfig" might be created before "scudo::RegionPageMap::Buffers" is available.
#  305|                                 cl::init(false), cl::cat(ClangTidyCategory));
#  306|   
#  307|-> static cl::opt<bool> VerifyConfig("verify-config", desc(R"(
#  308|   Check the config files to ensure each check and
#  309|   option is recognized.

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/utils/LexerUtils.cpp:20:3: var_decl: Declaring variable "Token" without initializer.
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/utils/LexerUtils.cpp:25:5: uninit_use_in_call: Using uninitialized value "Token". Field "Token.Loc" is uninitialized when calling "pair".
#   23|     Location = Location.getLocWithOffset(-1);
#   24|     if (Location.isInvalid())
#   25|->     return {Token, Location};
#   26|   
#   27|     auto StartOfFile = SM.getLocForStartOfFile(SM.getFileID(Location));

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/utils/LexerUtils.cpp:278:3: zero_return: Function call "FuncDecl->getNumParams()" returns 0.
llvm-project-19.0.0.src/clang-tools-extra/clang-tidy/utils/LexerUtils.cpp:278:3: overrun-buffer-arg: Calling "getParamDecl" with "FuncDecl->ParamInfo" and "FuncDecl->getNumParams() - 1U" is suspicious because of the very large index, 4294967295. The index may be due to a negative parameter being interpreted as unsigned.
#  276|   
#  277|     // FunctionDecl with parameters
#  278|->   const SourceLocation NoexceptLoc =
#  279|         FuncDecl->getParamDecl(FuncDecl->getNumParams() - 1)->getEndLoc();
#  280|     if (NoexceptLoc.isValid())

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/ClangdServer.cpp:196:3: var_decl: Declaring variable "Opts".
llvm-project-19.0.0.src/clang-tools-extra/clangd/ClangdServer.cpp:200:3: uninit_use: Using uninitialized value "Opts". Field "Opts.ClangTidyProvider.callable" is uninitialized.
#  198|     Opts.StorePreamblesInMemory = true;
#  199|     Opts.AsyncThreadsCount = 4; // Consistent!
#  200|->   return Opts;
#  201|   }
#  202|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/CodeComplete.cpp:2191:5: var_decl: Declaring variable "Item".
llvm-project-19.0.0.src/clang-tools-extra/clangd/CodeComplete.cpp:2197:5: uninit_use_in_call: Using uninitialized value "Item". Field "Item.Includes.InlineElts" is uninitialized when calling "push_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
# 2195|       Item.CompletionTokenRange = CompletionRange;
# 2196|       Item.Origin = SymbolOrigin::AST;
# 2197|->     Result.Completions.push_back(Item);
# 2198|     }
# 2199|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/CompileCommands.cpp:190:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang-tools-extra/clangd/CompileCommands.cpp:194:3: uninit_use: Using uninitialized value "Result". Field "Result.SystemIncludeExtractor.StorageUnion" is uninitialized.
#  192|     Result.ResourceDir = detectStandardResourceDir();
#  193|     Result.Sysroot = detectSysroot();
#  194|->   return Result;
#  195|   }
#  196|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang-tools-extra/clangd/Compiler.cpp:163:3: alloc_fn: Storage is returned from allocation function "release". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang-tools-extra/clangd/Compiler.cpp:163:3: leaked_storage: Ignoring storage allocated by "Buffer.release()" leaks it.
#  161|     // RemappedFileBuffers will handle the lifetime of the Buffer pointer,
#  162|     // release it.
#  163|->   Buffer.release();
#  164|     return Clang;
#  165|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/FindTarget.cpp:160:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang-tools-extra/clangd/FindTarget.cpp:164:5: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
#  162|       for (const auto &Elem : Decls)
#  163|         Result[Elem.second.second] = {Elem.first, Elem.second.first};
#  164|->     return Result;
#  165|     }
#  166|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/FindTarget.cpp:584:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang-tools-extra/clangd/FindTarget.cpp:589:3: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
#  587|         Result.push_back(Entry.first);
#  588|     }
#  589|->   return Result;
#  590|   }
#  591|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/FindTarget.cpp:605:3: var_decl: Declaring variable "Targets".
llvm-project-19.0.0.src/clang-tools-extra/clangd/FindTarget.cpp:621:3: uninit_use: Using uninitialized value "Targets". Field "Targets.InlineElts" is uninitialized.
#  619|       Targets.insert(Targets.end(), TemplatePatterns.begin(),
#  620|                      TemplatePatterns.end());
#  621|->   return Targets;
#  622|   }
#  623|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/GlobalCompilationDatabase.cpp:486:5: var_decl: Declaring variable "Lock".
llvm-project-19.0.0.src/clang-tools-extra/clangd/GlobalCompilationDatabase.cpp:501:7: uninit_use_in_call: Using uninitialized value "Lock._M_device" when calling "unlock".
llvm-project-19.0.0.src/clang-tools-extra/clangd/GlobalCompilationDatabase.cpp:501:7: uninit_use_in_call: Using uninitialized value "Lock._M_owns" when calling "unlock".
#  499|         Queue.pop_front();
#  500|   
#  501|->       Lock.unlock();
#  502|         {
#  503|           WithContext WithCtx(std::move(ActiveTask->Ctx));

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/Headers.cpp:172:3: var_decl: Declaring variable "Headers".
llvm-project-19.0.0.src/clang-tools-extra/clangd/Headers.cpp:175:3: uninit_use: Using uninitialized value "Headers". Field "Headers.InlineElts" is uninitialized.
#  173|     for (const auto &Include : Includes)
#  174|       Headers.push_back({Include.IncludeHeader, Include.supportedDirectives()});
#  175|->   return Headers;
#  176|   }
#  177|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/Headers.cpp:257:3: var_decl: Declaring variable "Includes".
llvm-project-19.0.0.src/clang-tools-extra/clangd/Headers.cpp:260:3: uninit_use: Using uninitialized value "Includes". Field "Includes.InlineElts" is uninitialized.
#  258|     for (auto Idx : MainFileIncludesBySpelling.lookup(Spelling))
#  259|       Includes.push_back(&MainFileIncludes[Idx]);
#  260|->   return Includes;
#  261|   }
#  262|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/IncludeCleaner.cpp:257:3: var_decl: Declaring variable "FixAll".
llvm-project-19.0.0.src/clang-tools-extra/clangd/IncludeCleaner.cpp:264:3: uninit_use: Using uninitialized value "FixAll". Field "FixAll.Edits.InlineElts" is uninitialized.
#  262|     for (const auto &F : AddAllMissing.Edits)
#  263|       FixAll.Edits.push_back(F);
#  264|->   return FixAll;
#  265|   }
#  266|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/InlayHints.cpp:897:5: var_decl: Declaring variable "ParameterNames".
llvm-project-19.0.0.src/clang-tools-extra/clangd/InlayHints.cpp:922:5: uninit_use: Using uninitialized value "ParameterNames". Field "ParameterNames.InlineElts" is uninitialized.
#  920|         stripLeadingUnderscores(Name);
#  921|   
#  922|->     return ParameterNames;
#  923|     }
#  924|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/Selection.cpp:112:5: var_decl: Declaring variable "Out".
llvm-project-19.0.0.src/clang-tools-extra/clangd/Selection.cpp:114:7: uninit_use: Using uninitialized value "Out". Field "Out.InlineElts" is uninitialized.
#  112|       llvm::SmallVector<llvm::ArrayRef<T>> Out;
#  113|       if (Claim.empty())
#  114|->       return Out;
#  115|   
#  116|       // General case:

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/Selection.cpp:112:5: var_decl: Declaring variable "Out".
llvm-project-19.0.0.src/clang-tools-extra/clangd/Selection.cpp:132:7: uninit_use: Using uninitialized value "Out". Field "Out.InlineElts" is uninitialized.
#  130|       }
#  131|       if (Overlap.first == Overlap.second)
#  132|->       return Out;
#  133|   
#  134|       // First, copy all overlapping ranges into the output.

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/Selection.cpp:112:5: var_decl: Declaring variable "Out".
llvm-project-19.0.0.src/clang-tools-extra/clangd/Selection.cpp:157:5: uninit_use: Using uninitialized value "Out". Field "Out.InlineElts" is uninitialized.
#  155|         UnclaimedRanges.insert(RemainingTail);
#  156|   
#  157|->     return Out;
#  158|     }
#  159|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/Selection.cpp:998:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang-tools-extra/clangd/Selection.cpp:1010:3: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
# 1008|         Result.append(" …");
# 1009|     }
# 1010|->   return Result;
# 1011|   }
# 1012|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/Selection.cpp:1041:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang-tools-extra/clangd/Selection.cpp:1052:3: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
# 1050|     if (Result.empty())
# 1051|       Result.emplace_back(Offset, Offset);
# 1052|->   return Result;
# 1053|   }
# 1054|   

Error: WRAPPER_ESCAPE (CWE-825):
llvm-project-19.0.0.src/clang-tools-extra/clangd/SemanticSelection.cpp:159:5: extract: Calling "get" which extracts wrapped state from "Tail->parent".
llvm-project-19.0.0.src/clang-tools-extra/clangd/SemanticSelection.cpp:159:5: assign: Assigning: "Tail" = "Tail->parent.get()".
llvm-project-19.0.0.src/clang-tools-extra/clangd/SemanticSelection.cpp:158:5: invalidate: Calling "operator =" invalidates the internal representation of "Tail->parent".
llvm-project-19.0.0.src/clang-tools-extra/clangd/SemanticSelection.cpp:159:5: use_after_free: Using invalidated internal representation of "Tail->parent".
#  157|          llvm::MutableArrayRef(Ranges.data(), Ranges.size()).drop_front()) {
#  158|       Tail->parent = std::make_unique<SelectionRange>();
#  159|->     Tail = Tail->parent.get();
#  160|       Tail->range = std::move(Range);
#  161|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/TUScheduler.cpp:170:5: var_decl: Declaring variable "Lock".
llvm-project-19.0.0.src/clang-tools-extra/clangd/TUScheduler.cpp:180:5: uninit_use_in_call: Using uninitialized value "Lock._M_device" when calling "unlock".
llvm-project-19.0.0.src/clang-tools-extra/clangd/TUScheduler.cpp:180:5: uninit_use_in_call: Using uninitialized value "Lock._M_owns" when calling "unlock".
#  178|       LRU.pop_back();
#  179|       // Run the expensive destructor outside the lock.
#  180|->     Lock.unlock();
#  181|       ForCleanup.reset();
#  182|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/fuzzer/clangd-fuzzer.cpp:33:3: var_decl: Declaring variable "Opts".
llvm-project-19.0.0.src/clang-tools-extra/clangd/fuzzer/clangd-fuzzer.cpp:38:3: uninit_use_in_call: Using uninitialized value "Opts.ClangTidyProvider". Field "Opts.ClangTidyProvider.callable" is uninitialized when calling "ClangdLSPServer".
#   36|   
#   37|     // Initialize and run ClangdLSPServer.
#   38|->   ClangdLSPServer LSPServer(*Transport, FS, Opts);
#   39|     LSPServer.run();
#   40|     return 0;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/index/BackgroundQueue.cpp:48:7: var_decl: Declaring variable "Lock".
llvm-project-19.0.0.src/clang-tools-extra/clangd/index/BackgroundQueue.cpp:55:11: uninit_use_in_call: Using uninitialized value "Lock._M_device" when calling "unlock".
llvm-project-19.0.0.src/clang-tools-extra/clangd/index/BackgroundQueue.cpp:55:11: uninit_use_in_call: Using uninitialized value "Lock._M_owns" when calling "unlock".
#   53|           Stat.LastIdle = Stat.Completed;
#   54|           if (OnIdle) {
#   55|->           Lock.unlock();
#   56|             OnIdle();
#   57|             Lock.lock();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/index/StdLib.cpp:214:3: var_decl: Declaring variable "Symbols".
llvm-project-19.0.0.src/clang-tools-extra/clangd/index/StdLib.cpp:224:5: uninit_use: Using uninitialized value "Symbols". Field "Symbols.Arena.Slabs.InlineElts" is uninitialized.
#  222|     if (!Clang) {
#  223|       elog("Standard Library Index: Couldn't build compiler instance");
#  224|->     return Symbols;
#  225|     }
#  226|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/index/YAMLSerialization.cpp:216:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang-tools-extra/clangd/index/YAMLSerialization.cpp:219:5: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
#  217|       for (auto &H : Headers)
#  218|         Result.emplace_back(H.IncludeHeader, H.References, H.SupportedDirectives);
#  219|->     return Result;
#  220|     }
#  221|     llvm::SmallVector<YIncludeHeaderWithReferences, 1> Headers;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/index/YAMLSerialization.cpp:373:5: var_decl: Declaring variable "Digest" without initializer.
llvm-project-19.0.0.src/clang-tools-extra/clangd/index/YAMLSerialization.cpp:380:5: uninit_use: Using uninitialized value "Digest".
#  378|         I.setError(std::string("Bad hex file digest: ") + HexString);
#  379|       }
#  380|->     return Digest;
#  381|     }
#  382|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/index/dex/dexp/Dexp.cpp:30:28: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::IndexLocation[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::IndexLocation[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   28|   namespace {
#   29|   
#   30|-> llvm::cl::opt<std::string> IndexLocation(
#   31|       llvm::cl::desc("<path to index file | remote:server.address>"),
#   32|       llvm::cl::Positional);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/index/dex/dexp/Dexp.cpp:35:5: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ExecCommand[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ExecCommand[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|   
#   34|   llvm::cl::opt<std::string>
#   35|->     ExecCommand("c", llvm::cl::desc("Command to execute and then exit."));
#   36|   
#   37|   llvm::cl::opt<std::string> ProjectRoot(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/index/dex/dexp/Dexp.cpp:37:28: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ProjectRoot[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ProjectRoot[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   35|       ExecCommand("c", llvm::cl::desc("Command to execute and then exit."));
#   36|   
#   37|-> llvm::cl::opt<std::string> ProjectRoot(
#   38|       "project-root",
#   39|       llvm::cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/indexer/IndexerMain.cpp:34:5: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Format" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Format" might be created before "Allocator" is available.
#   32|   
#   33|   static llvm::cl::opt<IndexFileFormat>
#   34|->     Format("format", llvm::cl::desc("Format of the index to be written"),
#   35|              llvm::cl::values(clEnumValN(IndexFileFormat::YAML, "yaml",
#   36|                                          "human-readable YAML format"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/indexer/IndexerMain.cpp:34:5: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Format" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Format" might be created before "fuzzer::TPC" is available.
#   32|   
#   33|   static llvm::cl::opt<IndexFileFormat>
#   34|->     Format("format", llvm::cl::desc("Format of the index to be written"),
#   35|              llvm::cl::values(clEnumValN(IndexFileFormat::YAML, "yaml",
#   36|                                          "human-readable YAML format"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/indexer/IndexerMain.cpp:34:5: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Format" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Format" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   32|   
#   33|   static llvm::cl::opt<IndexFileFormat>
#   34|->     Format("format", llvm::cl::desc("Format of the index to be written"),
#   35|              llvm::cl::values(clEnumValN(IndexFileFormat::YAML, "yaml",
#   36|                                          "human-readable YAML format"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/indexer/IndexerMain.cpp:34:5: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Format" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Format" might be created before "scudo::RegionPageMap::Buffers" is available.
#   32|   
#   33|   static llvm::cl::opt<IndexFileFormat>
#   34|->     Format("format", llvm::cl::desc("Format of the index to be written"),
#   35|              llvm::cl::values(clEnumValN(IndexFileFormat::YAML, "yaml",
#   36|                                          "human-readable YAML format"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/indexer/IndexerMain.cpp:41:36: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::QueryDriverGlobs[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::QueryDriverGlobs[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   39|              llvm::cl::init(IndexFileFormat::RIFF));
#   40|   
#   41|-> static llvm::cl::list<std::string> QueryDriverGlobs{
#   42|       "query-driver",
#   43|       llvm::cl::desc(

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/refactor/tweaks/ObjCMemberwiseInitializer.cpp:104:3: var_decl: Declaring variable "Params".
llvm-project-19.0.0.src/clang-tools-extra/clangd/refactor/tweaks/ObjCMemberwiseInitializer.cpp:120:3: uninit_use: Using uninitialized value "Params". Field "Params.InlineElts" is uninitialized.
#  118|         Params.push_back(P);
#  119|     }
#  120|->   return Params;
#  121|   }
#  122|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/support/Threading.cpp:66:3: var_decl: Declaring variable "Lock".
llvm-project-19.0.0.src/clang-tools-extra/clangd/support/Threading.cpp:68:3: uninit_use_in_call: Using uninitialized value "Lock._M_device" when calling "unlock".
llvm-project-19.0.0.src/clang-tools-extra/clangd/support/Threading.cpp:68:3: uninit_use_in_call: Using uninitialized value "Lock._M_owns" when calling "unlock".
#   66|     std::unique_lock<std::mutex> Lock(Mutex);
#   67|     ++FreeSlots;
#   68|->   Lock.unlock();
#   69|   
#   70|     SlotsChanged.notify_one();

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/Check.cpp:86:28: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CheckTidyTime[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CheckTidyTime[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   84|   
#   85|   // These will never be shown in --help, ClangdMain doesn't list the category.
#   86|-> llvm::cl::opt<std::string> CheckTidyTime{
#   87|       "check-tidy-time",
#   88|       llvm::cl::desc("Print the overhead of checks matching this glob"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/Check.cpp:90:28: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CheckFileLines[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CheckFileLines[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   88|       llvm::cl::desc("Print the overhead of checks matching this glob"),
#   89|       llvm::cl::init("")};
#   90|-> llvm::cl::opt<std::string> CheckFileLines{
#   91|       "check-lines",
#   92|       llvm::cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/Check.cpp:98:21: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CheckLocations" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CheckLocations" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   96|           "to one line. Default is testing entire file."),
#   97|       llvm::cl::init("")};
#   98|-> llvm::cl::opt<bool> CheckLocations{
#   99|       "check-locations",
#  100|       llvm::cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/Check.cpp:104:21: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CheckCompletion" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CheckCompletion" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  102|           "Somewhat slow."),
#  103|       llvm::cl::init(true)};
#  104|-> llvm::cl::opt<bool> CheckCompletion{
#  105|       "check-completion",
#  106|       llvm::cl::desc("Run code-completion at each point (slow)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/Check.cpp:108:21: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CheckWarnings" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CheckWarnings" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  106|       llvm::cl::desc("Run code-completion at each point (slow)"),
#  107|       llvm::cl::init(false)};
#  108|-> llvm::cl::opt<bool> CheckWarnings{
#  109|       "check-warnings",
#  110|       llvm::cl::desc("Print warnings as well as errors"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:85:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompileCommands" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompileCommands" might be created before "Allocator" is available.
#   83|   // All flags must be placed in a category, or they will be shown neither in
#   84|   // --help, nor --help-hidden!
#   85|-> OptionCategory CompileCommands("clangd compilation flags options");
#   86|   OptionCategory Features("clangd feature options");
#   87|   OptionCategory Misc("clangd miscellaneous options");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:85:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompileCommands" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompileCommands" might be created before "GlobalParser" is available.
#   83|   // All flags must be placed in a category, or they will be shown neither in
#   84|   // --help, nor --help-hidden!
#   85|-> OptionCategory CompileCommands("clangd compilation flags options");
#   86|   OptionCategory Features("clangd feature options");
#   87|   OptionCategory Misc("clangd miscellaneous options");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:85:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompileCommands" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompileCommands" might be created before "fuzzer::TPC" is available.
#   83|   // All flags must be placed in a category, or they will be shown neither in
#   84|   // --help, nor --help-hidden!
#   85|-> OptionCategory CompileCommands("clangd compilation flags options");
#   86|   OptionCategory Features("clangd feature options");
#   87|   OptionCategory Misc("clangd miscellaneous options");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:85:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompileCommands" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompileCommands" might be created before "scudo::RegionPageMap::Buffers" is available.
#   83|   // All flags must be placed in a category, or they will be shown neither in
#   84|   // --help, nor --help-hidden!
#   85|-> OptionCategory CompileCommands("clangd compilation flags options");
#   86|   OptionCategory Features("clangd feature options");
#   87|   OptionCategory Misc("clangd miscellaneous options");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:86:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Features" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Features" might be created before "Allocator" is available.
#   84|   // --help, nor --help-hidden!
#   85|   OptionCategory CompileCommands("clangd compilation flags options");
#   86|-> OptionCategory Features("clangd feature options");
#   87|   OptionCategory Misc("clangd miscellaneous options");
#   88|   OptionCategory Protocol("clangd protocol and logging options");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:86:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Features" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Features" might be created before "GlobalParser" is available.
#   84|   // --help, nor --help-hidden!
#   85|   OptionCategory CompileCommands("clangd compilation flags options");
#   86|-> OptionCategory Features("clangd feature options");
#   87|   OptionCategory Misc("clangd miscellaneous options");
#   88|   OptionCategory Protocol("clangd protocol and logging options");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:86:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Features" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Features" might be created before "fuzzer::TPC" is available.
#   84|   // --help, nor --help-hidden!
#   85|   OptionCategory CompileCommands("clangd compilation flags options");
#   86|-> OptionCategory Features("clangd feature options");
#   87|   OptionCategory Misc("clangd miscellaneous options");
#   88|   OptionCategory Protocol("clangd protocol and logging options");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:86:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Features" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Features" might be created before "scudo::RegionPageMap::Buffers" is available.
#   84|   // --help, nor --help-hidden!
#   85|   OptionCategory CompileCommands("clangd compilation flags options");
#   86|-> OptionCategory Features("clangd feature options");
#   87|   OptionCategory Misc("clangd miscellaneous options");
#   88|   OptionCategory Protocol("clangd protocol and logging options");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:87:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Misc" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Misc" might be created before "Allocator" is available.
#   85|   OptionCategory CompileCommands("clangd compilation flags options");
#   86|   OptionCategory Features("clangd feature options");
#   87|-> OptionCategory Misc("clangd miscellaneous options");
#   88|   OptionCategory Protocol("clangd protocol and logging options");
#   89|   OptionCategory Retired("clangd flags no longer in use");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:87:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Misc" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Misc" might be created before "GlobalParser" is available.
#   85|   OptionCategory CompileCommands("clangd compilation flags options");
#   86|   OptionCategory Features("clangd feature options");
#   87|-> OptionCategory Misc("clangd miscellaneous options");
#   88|   OptionCategory Protocol("clangd protocol and logging options");
#   89|   OptionCategory Retired("clangd flags no longer in use");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:87:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Misc" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Misc" might be created before "fuzzer::TPC" is available.
#   85|   OptionCategory CompileCommands("clangd compilation flags options");
#   86|   OptionCategory Features("clangd feature options");
#   87|-> OptionCategory Misc("clangd miscellaneous options");
#   88|   OptionCategory Protocol("clangd protocol and logging options");
#   89|   OptionCategory Retired("clangd flags no longer in use");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:87:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Misc" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Misc" might be created before "scudo::RegionPageMap::Buffers" is available.
#   85|   OptionCategory CompileCommands("clangd compilation flags options");
#   86|   OptionCategory Features("clangd feature options");
#   87|-> OptionCategory Misc("clangd miscellaneous options");
#   88|   OptionCategory Protocol("clangd protocol and logging options");
#   89|   OptionCategory Retired("clangd flags no longer in use");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:88:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Protocol" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Protocol" might be created before "Allocator" is available.
#   86|   OptionCategory Features("clangd feature options");
#   87|   OptionCategory Misc("clangd miscellaneous options");
#   88|-> OptionCategory Protocol("clangd protocol and logging options");
#   89|   OptionCategory Retired("clangd flags no longer in use");
#   90|   const OptionCategory *ClangdCategories[] = {&Features, &Protocol,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:88:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Protocol" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Protocol" might be created before "GlobalParser" is available.
#   86|   OptionCategory Features("clangd feature options");
#   87|   OptionCategory Misc("clangd miscellaneous options");
#   88|-> OptionCategory Protocol("clangd protocol and logging options");
#   89|   OptionCategory Retired("clangd flags no longer in use");
#   90|   const OptionCategory *ClangdCategories[] = {&Features, &Protocol,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:88:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Protocol" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Protocol" might be created before "fuzzer::TPC" is available.
#   86|   OptionCategory Features("clangd feature options");
#   87|   OptionCategory Misc("clangd miscellaneous options");
#   88|-> OptionCategory Protocol("clangd protocol and logging options");
#   89|   OptionCategory Retired("clangd flags no longer in use");
#   90|   const OptionCategory *ClangdCategories[] = {&Features, &Protocol,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:88:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Protocol" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Protocol" might be created before "scudo::RegionPageMap::Buffers" is available.
#   86|   OptionCategory Features("clangd feature options");
#   87|   OptionCategory Misc("clangd miscellaneous options");
#   88|-> OptionCategory Protocol("clangd protocol and logging options");
#   89|   OptionCategory Retired("clangd flags no longer in use");
#   90|   const OptionCategory *ClangdCategories[] = {&Features, &Protocol,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:89:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Retired" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Retired" might be created before "Allocator" is available.
#   87|   OptionCategory Misc("clangd miscellaneous options");
#   88|   OptionCategory Protocol("clangd protocol and logging options");
#   89|-> OptionCategory Retired("clangd flags no longer in use");
#   90|   const OptionCategory *ClangdCategories[] = {&Features, &Protocol,
#   91|                                               &CompileCommands, &Misc, &Retired};

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:89:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Retired" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Retired" might be created before "GlobalParser" is available.
#   87|   OptionCategory Misc("clangd miscellaneous options");
#   88|   OptionCategory Protocol("clangd protocol and logging options");
#   89|-> OptionCategory Retired("clangd flags no longer in use");
#   90|   const OptionCategory *ClangdCategories[] = {&Features, &Protocol,
#   91|                                               &CompileCommands, &Misc, &Retired};

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:89:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Retired" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Retired" might be created before "fuzzer::TPC" is available.
#   87|   OptionCategory Misc("clangd miscellaneous options");
#   88|   OptionCategory Protocol("clangd protocol and logging options");
#   89|-> OptionCategory Retired("clangd flags no longer in use");
#   90|   const OptionCategory *ClangdCategories[] = {&Features, &Protocol,
#   91|                                               &CompileCommands, &Misc, &Retired};

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:89:16: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Retired" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Retired" might be created before "scudo::RegionPageMap::Buffers" is available.
#   87|   OptionCategory Misc("clangd miscellaneous options");
#   88|   OptionCategory Protocol("clangd protocol and logging options");
#   89|-> OptionCategory Retired("clangd flags no longer in use");
#   90|   const OptionCategory *ClangdCategories[] = {&Features, &Protocol,
#   91|                                               &CompileCommands, &Misc, &Retired};

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:106:22: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompileArgsFrom" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompileArgsFrom" might be created before "Allocator" is available.
#  104|   
#  105|   enum CompileArgsFrom { LSPCompileArgs, FilesystemCompileArgs };
#  106|-> opt<CompileArgsFrom> CompileArgsFrom{
#  107|       "compile_args_from",
#  108|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:106:22: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompileArgsFrom" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompileArgsFrom" might be created before "fuzzer::TPC" is available.
#  104|   
#  105|   enum CompileArgsFrom { LSPCompileArgs, FilesystemCompileArgs };
#  106|-> opt<CompileArgsFrom> CompileArgsFrom{
#  107|       "compile_args_from",
#  108|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:106:22: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompileArgsFrom" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompileArgsFrom" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  104|   
#  105|   enum CompileArgsFrom { LSPCompileArgs, FilesystemCompileArgs };
#  106|-> opt<CompileArgsFrom> CompileArgsFrom{
#  107|       "compile_args_from",
#  108|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:106:22: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompileArgsFrom" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompileArgsFrom" might be created before "scudo::RegionPageMap::Buffers" is available.
#  104|   
#  105|   enum CompileArgsFrom { LSPCompileArgs, FilesystemCompileArgs };
#  106|-> opt<CompileArgsFrom> CompileArgsFrom{
#  107|       "compile_args_from",
#  108|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:120:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompileCommandsDir[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompileCommandsDir[abi:cxx11]" might be created before "Allocator" is available.
#  118|   };
#  119|   
#  120|-> opt<Path> CompileCommandsDir{
#  121|       "compile-commands-dir",
#  122|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:120:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompileCommandsDir[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompileCommandsDir[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  118|   };
#  119|   
#  120|-> opt<Path> CompileCommandsDir{
#  121|       "compile-commands-dir",
#  122|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:120:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompileCommandsDir[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompileCommandsDir[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  118|   };
#  119|   
#  120|-> opt<Path> CompileCommandsDir{
#  121|       "compile-commands-dir",
#  122|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:120:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompileCommandsDir[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompileCommandsDir[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  118|   };
#  119|   
#  120|-> opt<Path> CompileCommandsDir{
#  121|       "compile-commands-dir",
#  122|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:128:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ResourceDir[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ResourceDir[abi:cxx11]" might be created before "Allocator" is available.
#  126|   };
#  127|   
#  128|-> opt<Path> ResourceDir{
#  129|       "resource-dir",
#  130|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:128:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ResourceDir[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ResourceDir[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  126|   };
#  127|   
#  128|-> opt<Path> ResourceDir{
#  129|       "resource-dir",
#  130|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:128:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ResourceDir[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ResourceDir[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  126|   };
#  127|   
#  128|-> opt<Path> ResourceDir{
#  129|       "resource-dir",
#  130|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:128:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ResourceDir[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ResourceDir[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  126|   };
#  127|   
#  128|-> opt<Path> ResourceDir{
#  129|       "resource-dir",
#  130|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:136:19: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::QueryDriverGlobs[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::QueryDriverGlobs[abi:cxx11]" might be created before "Allocator" is available.
#  134|   };
#  135|   
#  136|-> list<std::string> QueryDriverGlobs{
#  137|       "query-driver",
#  138|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:136:19: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::QueryDriverGlobs[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::QueryDriverGlobs[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  134|   };
#  135|   
#  136|-> list<std::string> QueryDriverGlobs{
#  137|       "query-driver",
#  138|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:136:19: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::QueryDriverGlobs[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::QueryDriverGlobs[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  134|   };
#  135|   
#  136|-> list<std::string> QueryDriverGlobs{
#  137|       "query-driver",
#  138|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:136:19: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::QueryDriverGlobs[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::QueryDriverGlobs[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  134|   };
#  135|   
#  136|-> list<std::string> QueryDriverGlobs{
#  137|       "query-driver",
#  138|       cat(CompileCommands),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:149:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::AllScopesCompletion" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::AllScopesCompletion" might be created before "Allocator" is available.
#  147|   // FIXME: Flags are the wrong mechanism for user preferences.
#  148|   // We should probably read a dotfile or similar.
#  149|-> opt<bool> AllScopesCompletion{
#  150|       "all-scopes-completion",
#  151|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:149:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::AllScopesCompletion" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::AllScopesCompletion" might be created before "fuzzer::TPC" is available.
#  147|   // FIXME: Flags are the wrong mechanism for user preferences.
#  148|   // We should probably read a dotfile or similar.
#  149|-> opt<bool> AllScopesCompletion{
#  150|       "all-scopes-completion",
#  151|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:149:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::AllScopesCompletion" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::AllScopesCompletion" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  147|   // FIXME: Flags are the wrong mechanism for user preferences.
#  148|   // We should probably read a dotfile or similar.
#  149|-> opt<bool> AllScopesCompletion{
#  150|       "all-scopes-completion",
#  151|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:149:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::AllScopesCompletion" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::AllScopesCompletion" might be created before "scudo::RegionPageMap::Buffers" is available.
#  147|   // FIXME: Flags are the wrong mechanism for user preferences.
#  148|   // We should probably read a dotfile or similar.
#  149|-> opt<bool> AllScopesCompletion{
#  150|       "all-scopes-completion",
#  151|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:159:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ShowOrigins" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ShowOrigins" might be created before "Allocator" is available.
#  157|   };
#  158|   
#  159|-> opt<bool> ShowOrigins{
#  160|       "debug-origin",
#  161|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:159:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ShowOrigins" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ShowOrigins" might be created before "fuzzer::TPC" is available.
#  157|   };
#  158|   
#  159|-> opt<bool> ShowOrigins{
#  160|       "debug-origin",
#  161|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:159:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ShowOrigins" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ShowOrigins" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  157|   };
#  158|   
#  159|-> opt<bool> ShowOrigins{
#  160|       "debug-origin",
#  161|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:159:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ShowOrigins" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ShowOrigins" might be created before "scudo::RegionPageMap::Buffers" is available.
#  157|   };
#  158|   
#  159|-> opt<bool> ShowOrigins{
#  160|       "debug-origin",
#  161|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:167:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableBackgroundIndex" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableBackgroundIndex" might be created before "Allocator" is available.
#  165|   };
#  166|   
#  167|-> opt<bool> EnableBackgroundIndex{
#  168|       "background-index",
#  169|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:167:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableBackgroundIndex" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableBackgroundIndex" might be created before "fuzzer::TPC" is available.
#  165|   };
#  166|   
#  167|-> opt<bool> EnableBackgroundIndex{
#  168|       "background-index",
#  169|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:167:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableBackgroundIndex" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableBackgroundIndex" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  165|   };
#  166|   
#  167|-> opt<bool> EnableBackgroundIndex{
#  168|       "background-index",
#  169|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:167:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableBackgroundIndex" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableBackgroundIndex" might be created before "scudo::RegionPageMap::Buffers" is available.
#  165|   };
#  166|   
#  167|-> opt<bool> EnableBackgroundIndex{
#  168|       "background-index",
#  169|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:174:27: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::BackgroundIndexPriority" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::BackgroundIndexPriority" might be created before "Allocator" is available.
#  172|   };
#  173|   
#  174|-> opt<llvm::ThreadPriority> BackgroundIndexPriority{
#  175|       "background-index-priority",
#  176|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:174:27: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::BackgroundIndexPriority" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::BackgroundIndexPriority" might be created before "fuzzer::TPC" is available.
#  172|   };
#  173|   
#  174|-> opt<llvm::ThreadPriority> BackgroundIndexPriority{
#  175|       "background-index-priority",
#  176|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:174:27: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::BackgroundIndexPriority" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::BackgroundIndexPriority" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  172|   };
#  173|   
#  174|-> opt<llvm::ThreadPriority> BackgroundIndexPriority{
#  175|       "background-index-priority",
#  176|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:174:27: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::BackgroundIndexPriority" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::BackgroundIndexPriority" might be created before "scudo::RegionPageMap::Buffers" is available.
#  172|   };
#  173|   
#  174|-> opt<llvm::ThreadPriority> BackgroundIndexPriority{
#  175|       "background-index-priority",
#  176|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:189:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableClangTidy" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableClangTidy" might be created before "Allocator" is available.
#  187|   };
#  188|   
#  189|-> opt<bool> EnableClangTidy{
#  190|       "clang-tidy",
#  191|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:189:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableClangTidy" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableClangTidy" might be created before "fuzzer::TPC" is available.
#  187|   };
#  188|   
#  189|-> opt<bool> EnableClangTidy{
#  190|       "clang-tidy",
#  191|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:189:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableClangTidy" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableClangTidy" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  187|   };
#  188|   
#  189|-> opt<bool> EnableClangTidy{
#  190|       "clang-tidy",
#  191|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:189:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableClangTidy" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableClangTidy" might be created before "scudo::RegionPageMap::Buffers" is available.
#  187|   };
#  188|   
#  189|-> opt<bool> EnableClangTidy{
#  190|       "clang-tidy",
#  191|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:196:47: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CodeCompletionParse" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CodeCompletionParse" might be created before "Allocator" is available.
#  194|   };
#  195|   
#  196|-> opt<CodeCompleteOptions::CodeCompletionParse> CodeCompletionParse{
#  197|       "completion-parse",
#  198|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:196:47: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CodeCompletionParse" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CodeCompletionParse" might be created before "fuzzer::TPC" is available.
#  194|   };
#  195|   
#  196|-> opt<CodeCompleteOptions::CodeCompletionParse> CodeCompletionParse{
#  197|       "completion-parse",
#  198|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:196:47: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CodeCompletionParse" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CodeCompletionParse" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  194|   };
#  195|   
#  196|-> opt<CodeCompleteOptions::CodeCompletionParse> CodeCompletionParse{
#  197|       "completion-parse",
#  198|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:196:47: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CodeCompletionParse" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CodeCompletionParse" might be created before "scudo::RegionPageMap::Buffers" is available.
#  194|   };
#  195|   
#  196|-> opt<CodeCompleteOptions::CodeCompletionParse> CodeCompletionParse{
#  197|       "completion-parse",
#  198|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:211:54: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::RankingModel" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::RankingModel" might be created before "Allocator" is available.
#  209|   };
#  210|   
#  211|-> opt<CodeCompleteOptions::CodeCompletionRankingModel> RankingModel{
#  212|       "ranking-model",
#  213|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:211:54: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::RankingModel" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::RankingModel" might be created before "fuzzer::TPC" is available.
#  209|   };
#  210|   
#  211|-> opt<CodeCompleteOptions::CodeCompletionRankingModel> RankingModel{
#  212|       "ranking-model",
#  213|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:211:54: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::RankingModel" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::RankingModel" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  209|   };
#  210|   
#  211|-> opt<CodeCompleteOptions::CodeCompletionRankingModel> RankingModel{
#  212|       "ranking-model",
#  213|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:211:54: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::RankingModel" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::RankingModel" might be created before "scudo::RegionPageMap::Buffers" is available.
#  209|   };
#  210|   
#  211|-> opt<CodeCompleteOptions::CodeCompletionRankingModel> RankingModel{
#  212|       "ranking-model",
#  213|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:225:26: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompletionStyle" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompletionStyle" might be created before "Allocator" is available.
#  223|   // FIXME: also support "plain" style where signatures are always omitted.
#  224|   enum CompletionStyleFlag { Detailed, Bundled };
#  225|-> opt<CompletionStyleFlag> CompletionStyle{
#  226|       "completion-style",
#  227|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:225:26: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompletionStyle" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompletionStyle" might be created before "fuzzer::TPC" is available.
#  223|   // FIXME: also support "plain" style where signatures are always omitted.
#  224|   enum CompletionStyleFlag { Detailed, Bundled };
#  225|-> opt<CompletionStyleFlag> CompletionStyle{
#  226|       "completion-style",
#  227|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:225:26: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompletionStyle" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompletionStyle" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  223|   // FIXME: also support "plain" style where signatures are always omitted.
#  224|   enum CompletionStyleFlag { Detailed, Bundled };
#  225|-> opt<CompletionStyleFlag> CompletionStyle{
#  226|       "completion-style",
#  227|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:225:26: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CompletionStyle" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CompletionStyle" might be created before "scudo::RegionPageMap::Buffers" is available.
#  223|   // FIXME: also support "plain" style where signatures are always omitted.
#  224|   enum CompletionStyleFlag { Detailed, Bundled };
#  225|-> opt<CompletionStyleFlag> CompletionStyle{
#  226|       "completion-style",
#  227|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:237:18: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::FallbackStyle[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::FallbackStyle[abi:cxx11]" might be created before "Allocator" is available.
#  235|   };
#  236|   
#  237|-> opt<std::string> FallbackStyle{
#  238|       "fallback-style",
#  239|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:237:18: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::FallbackStyle[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::FallbackStyle[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  235|   };
#  236|   
#  237|-> opt<std::string> FallbackStyle{
#  238|       "fallback-style",
#  239|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:237:18: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::FallbackStyle[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::FallbackStyle[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  235|   };
#  236|   
#  237|-> opt<std::string> FallbackStyle{
#  238|       "fallback-style",
#  239|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:237:18: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::FallbackStyle[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::FallbackStyle[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  235|   };
#  236|   
#  237|-> opt<std::string> FallbackStyle{
#  238|       "fallback-style",
#  239|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:245:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableFunctionArgSnippets" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableFunctionArgSnippets" might be created before "Allocator" is available.
#  243|   };
#  244|   
#  245|-> opt<bool> EnableFunctionArgSnippets{
#  246|       "function-arg-placeholders",
#  247|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:245:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableFunctionArgSnippets" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableFunctionArgSnippets" might be created before "fuzzer::TPC" is available.
#  243|   };
#  244|   
#  245|-> opt<bool> EnableFunctionArgSnippets{
#  246|       "function-arg-placeholders",
#  247|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:245:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableFunctionArgSnippets" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableFunctionArgSnippets" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  243|   };
#  244|   
#  245|-> opt<bool> EnableFunctionArgSnippets{
#  246|       "function-arg-placeholders",
#  247|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:245:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableFunctionArgSnippets" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableFunctionArgSnippets" might be created before "scudo::RegionPageMap::Buffers" is available.
#  243|   };
#  244|   
#  245|-> opt<bool> EnableFunctionArgSnippets{
#  246|       "function-arg-placeholders",
#  247|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:254:44: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::HeaderInsertion" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::HeaderInsertion" might be created before "Allocator" is available.
#  252|   };
#  253|   
#  254|-> opt<CodeCompleteOptions::IncludeInsertion> HeaderInsertion{
#  255|       "header-insertion",
#  256|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:254:44: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::HeaderInsertion" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::HeaderInsertion" might be created before "fuzzer::TPC" is available.
#  252|   };
#  253|   
#  254|-> opt<CodeCompleteOptions::IncludeInsertion> HeaderInsertion{
#  255|       "header-insertion",
#  256|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:254:44: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::HeaderInsertion" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::HeaderInsertion" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  252|   };
#  253|   
#  254|-> opt<CodeCompleteOptions::IncludeInsertion> HeaderInsertion{
#  255|       "header-insertion",
#  256|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:254:44: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::HeaderInsertion" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::HeaderInsertion" might be created before "scudo::RegionPageMap::Buffers" is available.
#  252|   };
#  253|   
#  254|-> opt<CodeCompleteOptions::IncludeInsertion> HeaderInsertion{
#  255|       "header-insertion",
#  256|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:270:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ImportInsertions" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ImportInsertions" might be created before "Allocator" is available.
#  268|   };
#  269|   
#  270|-> opt<bool> ImportInsertions{
#  271|       "import-insertions",
#  272|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:270:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ImportInsertions" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ImportInsertions" might be created before "fuzzer::TPC" is available.
#  268|   };
#  269|   
#  270|-> opt<bool> ImportInsertions{
#  271|       "import-insertions",
#  272|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:270:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ImportInsertions" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ImportInsertions" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  268|   };
#  269|   
#  270|-> opt<bool> ImportInsertions{
#  271|       "import-insertions",
#  272|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:270:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ImportInsertions" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ImportInsertions" might be created before "scudo::RegionPageMap::Buffers" is available.
#  268|   };
#  269|   
#  270|-> opt<bool> ImportInsertions{
#  271|       "import-insertions",
#  272|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:278:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::HeaderInsertionDecorators" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::HeaderInsertionDecorators" might be created before "Allocator" is available.
#  276|   };
#  277|   
#  278|-> opt<bool> HeaderInsertionDecorators{
#  279|       "header-insertion-decorators",
#  280|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:278:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::HeaderInsertionDecorators" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::HeaderInsertionDecorators" might be created before "fuzzer::TPC" is available.
#  276|   };
#  277|   
#  278|-> opt<bool> HeaderInsertionDecorators{
#  279|       "header-insertion-decorators",
#  280|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:278:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::HeaderInsertionDecorators" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::HeaderInsertionDecorators" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  276|   };
#  277|   
#  278|-> opt<bool> HeaderInsertionDecorators{
#  279|       "header-insertion-decorators",
#  280|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:278:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::HeaderInsertionDecorators" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::HeaderInsertionDecorators" might be created before "scudo::RegionPageMap::Buffers" is available.
#  276|   };
#  277|   
#  278|-> opt<bool> HeaderInsertionDecorators{
#  279|       "header-insertion-decorators",
#  280|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:287:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::HiddenFeatures" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::HiddenFeatures" might be created before "Allocator" is available.
#  285|   };
#  286|   
#  287|-> opt<bool> HiddenFeatures{
#  288|       "hidden-features",
#  289|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:287:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::HiddenFeatures" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::HiddenFeatures" might be created before "fuzzer::TPC" is available.
#  285|   };
#  286|   
#  287|-> opt<bool> HiddenFeatures{
#  288|       "hidden-features",
#  289|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:287:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::HiddenFeatures" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::HiddenFeatures" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  285|   };
#  286|   
#  287|-> opt<bool> HiddenFeatures{
#  288|       "hidden-features",
#  289|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:287:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::HiddenFeatures" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::HiddenFeatures" might be created before "scudo::RegionPageMap::Buffers" is available.
#  285|   };
#  286|   
#  287|-> opt<bool> HiddenFeatures{
#  288|       "hidden-features",
#  289|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:295:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::IncludeIneligibleResults" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::IncludeIneligibleResults" might be created before "Allocator" is available.
#  293|   };
#  294|   
#  295|-> opt<bool> IncludeIneligibleResults{
#  296|       "include-ineligible-results",
#  297|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:295:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::IncludeIneligibleResults" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::IncludeIneligibleResults" might be created before "fuzzer::TPC" is available.
#  293|   };
#  294|   
#  295|-> opt<bool> IncludeIneligibleResults{
#  296|       "include-ineligible-results",
#  297|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:295:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::IncludeIneligibleResults" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::IncludeIneligibleResults" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  293|   };
#  294|   
#  295|-> opt<bool> IncludeIneligibleResults{
#  296|       "include-ineligible-results",
#  297|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:295:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::IncludeIneligibleResults" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::IncludeIneligibleResults" might be created before "scudo::RegionPageMap::Buffers" is available.
#  293|   };
#  294|   
#  295|-> opt<bool> IncludeIneligibleResults{
#  296|       "include-ineligible-results",
#  297|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:315:10: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::LimitResults" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::LimitResults" might be created before "Allocator" is available.
#  313|   RetiredFlag<bool> IncludeCleanerStdlib("include-cleaner-stdlib");
#  314|   
#  315|-> opt<int> LimitResults{
#  316|       "limit-results",
#  317|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:315:10: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::LimitResults" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::LimitResults" might be created before "fuzzer::TPC" is available.
#  313|   RetiredFlag<bool> IncludeCleanerStdlib("include-cleaner-stdlib");
#  314|   
#  315|-> opt<int> LimitResults{
#  316|       "limit-results",
#  317|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:315:10: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::LimitResults" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::LimitResults" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  313|   RetiredFlag<bool> IncludeCleanerStdlib("include-cleaner-stdlib");
#  314|   
#  315|-> opt<int> LimitResults{
#  316|       "limit-results",
#  317|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:315:10: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::LimitResults" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::LimitResults" might be created before "scudo::RegionPageMap::Buffers" is available.
#  313|   RetiredFlag<bool> IncludeCleanerStdlib("include-cleaner-stdlib");
#  314|   
#  315|-> opt<int> LimitResults{
#  316|       "limit-results",
#  317|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:323:10: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ReferencesLimit" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ReferencesLimit" might be created before "Allocator" is available.
#  321|   };
#  322|   
#  323|-> opt<int> ReferencesLimit{
#  324|       "limit-references",
#  325|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:323:10: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ReferencesLimit" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ReferencesLimit" might be created before "fuzzer::TPC" is available.
#  321|   };
#  322|   
#  323|-> opt<int> ReferencesLimit{
#  324|       "limit-references",
#  325|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:323:10: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ReferencesLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ReferencesLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  321|   };
#  322|   
#  323|-> opt<int> ReferencesLimit{
#  324|       "limit-references",
#  325|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:323:10: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ReferencesLimit" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ReferencesLimit" might be created before "scudo::RegionPageMap::Buffers" is available.
#  321|   };
#  322|   
#  323|-> opt<int> ReferencesLimit{
#  324|       "limit-references",
#  325|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:331:10: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::RenameFileLimit" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::RenameFileLimit" might be created before "Allocator" is available.
#  329|   };
#  330|   
#  331|-> opt<int> RenameFileLimit{
#  332|       "rename-file-limit",
#  333|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:331:10: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::RenameFileLimit" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::RenameFileLimit" might be created before "fuzzer::TPC" is available.
#  329|   };
#  330|   
#  331|-> opt<int> RenameFileLimit{
#  332|       "rename-file-limit",
#  333|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:331:10: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::RenameFileLimit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::RenameFileLimit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  329|   };
#  330|   
#  331|-> opt<int> RenameFileLimit{
#  332|       "rename-file-limit",
#  333|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:331:10: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::RenameFileLimit" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::RenameFileLimit" might be created before "scudo::RegionPageMap::Buffers" is available.
#  329|   };
#  330|   
#  331|-> opt<int> RenameFileLimit{
#  332|       "rename-file-limit",
#  333|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:339:19: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::TweakList[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::TweakList[abi:cxx11]" might be created before "Allocator" is available.
#  337|   };
#  338|   
#  339|-> list<std::string> TweakList{
#  340|       "tweaks",
#  341|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:339:19: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::TweakList[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::TweakList[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  337|   };
#  338|   
#  339|-> list<std::string> TweakList{
#  340|       "tweaks",
#  341|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:339:19: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::TweakList[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::TweakList[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  337|   };
#  338|   
#  339|-> list<std::string> TweakList{
#  340|       "tweaks",
#  341|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:339:19: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::TweakList[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::TweakList[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  337|   };
#  338|   
#  339|-> list<std::string> TweakList{
#  340|       "tweaks",
#  341|       cat(Features),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:347:15: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::WorkerThreadsCount" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::WorkerThreadsCount" might be created before "Allocator" is available.
#  345|   };
#  346|   
#  347|-> opt<unsigned> WorkerThreadsCount{
#  348|       "j",
#  349|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:347:15: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::WorkerThreadsCount" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::WorkerThreadsCount" might be created before "fuzzer::TPC" is available.
#  345|   };
#  346|   
#  347|-> opt<unsigned> WorkerThreadsCount{
#  348|       "j",
#  349|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:347:15: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::WorkerThreadsCount" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::WorkerThreadsCount" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  345|   };
#  346|   
#  347|-> opt<unsigned> WorkerThreadsCount{
#  348|       "j",
#  349|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:347:15: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::WorkerThreadsCount" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::WorkerThreadsCount" might be created before "scudo::RegionPageMap::Buffers" is available.
#  345|   };
#  346|   
#  347|-> opt<unsigned> WorkerThreadsCount{
#  348|       "j",
#  349|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:355:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::IndexFile[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::IndexFile[abi:cxx11]" might be created before "Allocator" is available.
#  353|   };
#  354|   
#  355|-> opt<Path> IndexFile{
#  356|       "index-file",
#  357|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:355:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::IndexFile[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::IndexFile[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  353|   };
#  354|   
#  355|-> opt<Path> IndexFile{
#  356|       "index-file",
#  357|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:355:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::IndexFile[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::IndexFile[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  353|   };
#  354|   
#  355|-> opt<Path> IndexFile{
#  356|       "index-file",
#  357|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:355:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::IndexFile[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::IndexFile[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  353|   };
#  354|   
#  355|-> opt<Path> IndexFile{
#  356|       "index-file",
#  357|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:367:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Test" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Test" might be created before "Allocator" is available.
#  365|   };
#  366|   
#  367|-> opt<bool> Test{
#  368|       "lit-test",
#  369|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:367:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Test" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Test" might be created before "fuzzer::TPC" is available.
#  365|   };
#  366|   
#  367|-> opt<bool> Test{
#  368|       "lit-test",
#  369|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:367:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Test" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Test" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  365|   };
#  366|   
#  367|-> opt<bool> Test{
#  368|       "lit-test",
#  369|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:367:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Test" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Test" might be created before "scudo::RegionPageMap::Buffers" is available.
#  365|   };
#  366|   
#  367|-> opt<bool> Test{
#  368|       "lit-test",
#  369|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:378:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CrashPragmas" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CrashPragmas" might be created before "Allocator" is available.
#  376|   };
#  377|   
#  378|-> opt<bool> CrashPragmas{
#  379|       "crash-pragmas",
#  380|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:378:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CrashPragmas" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CrashPragmas" might be created before "fuzzer::TPC" is available.
#  376|   };
#  377|   
#  378|-> opt<bool> CrashPragmas{
#  379|       "crash-pragmas",
#  380|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:378:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CrashPragmas" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CrashPragmas" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  376|   };
#  377|   
#  378|-> opt<bool> CrashPragmas{
#  379|       "crash-pragmas",
#  380|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:378:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CrashPragmas" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CrashPragmas" might be created before "scudo::RegionPageMap::Buffers" is available.
#  376|   };
#  377|   
#  378|-> opt<bool> CrashPragmas{
#  379|       "crash-pragmas",
#  380|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:386:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CheckFile[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CheckFile[abi:cxx11]" might be created before "Allocator" is available.
#  384|   };
#  385|   
#  386|-> opt<Path> CheckFile{
#  387|       "check",
#  388|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:386:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CheckFile[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CheckFile[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  384|   };
#  385|   
#  386|-> opt<Path> CheckFile{
#  387|       "check",
#  388|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:386:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CheckFile[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CheckFile[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  384|   };
#  385|   
#  386|-> opt<Path> CheckFile{
#  387|       "check",
#  388|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:386:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::CheckFile[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::CheckFile[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  384|   };
#  385|   
#  386|-> opt<Path> CheckFile{
#  387|       "check",
#  388|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:397:21: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PCHStorage" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PCHStorage" might be created before "Allocator" is available.
#  395|   
#  396|   enum PCHStorageFlag { Disk, Memory };
#  397|-> opt<PCHStorageFlag> PCHStorage{
#  398|       "pch-storage",
#  399|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:397:21: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PCHStorage" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PCHStorage" might be created before "fuzzer::TPC" is available.
#  395|   
#  396|   enum PCHStorageFlag { Disk, Memory };
#  397|-> opt<PCHStorageFlag> PCHStorage{
#  398|       "pch-storage",
#  399|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:397:21: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PCHStorage" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PCHStorage" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  395|   
#  396|   enum PCHStorageFlag { Disk, Memory };
#  397|-> opt<PCHStorageFlag> PCHStorage{
#  398|       "pch-storage",
#  399|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:397:21: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PCHStorage" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PCHStorage" might be created before "scudo::RegionPageMap::Buffers" is available.
#  395|   
#  396|   enum PCHStorageFlag { Disk, Memory };
#  397|-> opt<PCHStorageFlag> PCHStorage{
#  398|       "pch-storage",
#  399|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:408:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Sync" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Sync" might be created before "Allocator" is available.
#  406|   };
#  407|   
#  408|-> opt<bool> Sync{
#  409|       "sync",
#  410|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:408:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Sync" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Sync" might be created before "fuzzer::TPC" is available.
#  406|   };
#  407|   
#  408|-> opt<bool> Sync{
#  409|       "sync",
#  410|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:408:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Sync" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Sync" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  406|   };
#  407|   
#  408|-> opt<bool> Sync{
#  409|       "sync",
#  410|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:408:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::Sync" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::Sync" might be created before "scudo::RegionPageMap::Buffers" is available.
#  406|   };
#  407|   
#  408|-> opt<bool> Sync{
#  409|       "sync",
#  410|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:417:22: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::InputStyle" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::InputStyle" might be created before "Allocator" is available.
#  415|   };
#  416|   
#  417|-> opt<JSONStreamStyle> InputStyle{
#  418|       "input-style",
#  419|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:417:22: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::InputStyle" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::InputStyle" might be created before "fuzzer::TPC" is available.
#  415|   };
#  416|   
#  417|-> opt<JSONStreamStyle> InputStyle{
#  418|       "input-style",
#  419|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:417:22: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::InputStyle" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::InputStyle" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  415|   };
#  416|   
#  417|-> opt<JSONStreamStyle> InputStyle{
#  418|       "input-style",
#  419|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:417:22: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::InputStyle" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::InputStyle" might be created before "scudo::RegionPageMap::Buffers" is available.
#  415|   };
#  416|   
#  417|-> opt<JSONStreamStyle> InputStyle{
#  418|       "input-style",
#  419|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:429:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableTestScheme" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableTestScheme" might be created before "Allocator" is available.
#  427|   };
#  428|   
#  429|-> opt<bool> EnableTestScheme{
#  430|       "enable-test-uri-scheme",
#  431|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:429:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableTestScheme" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableTestScheme" might be created before "fuzzer::TPC" is available.
#  427|   };
#  428|   
#  429|-> opt<bool> EnableTestScheme{
#  430|       "enable-test-uri-scheme",
#  431|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:429:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableTestScheme" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableTestScheme" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  427|   };
#  428|   
#  429|-> opt<bool> EnableTestScheme{
#  430|       "enable-test-uri-scheme",
#  431|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:429:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableTestScheme" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableTestScheme" might be created before "scudo::RegionPageMap::Buffers" is available.
#  427|   };
#  428|   
#  429|-> opt<bool> EnableTestScheme{
#  430|       "enable-test-uri-scheme",
#  431|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:437:18: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PathMappingsArg[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PathMappingsArg[abi:cxx11]" might be created before "Allocator" is available.
#  435|   };
#  436|   
#  437|-> opt<std::string> PathMappingsArg{
#  438|       "path-mappings",
#  439|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:437:18: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PathMappingsArg[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PathMappingsArg[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  435|   };
#  436|   
#  437|-> opt<std::string> PathMappingsArg{
#  438|       "path-mappings",
#  439|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:437:18: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PathMappingsArg[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PathMappingsArg[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  435|   };
#  436|   
#  437|-> opt<std::string> PathMappingsArg{
#  438|       "path-mappings",
#  439|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:437:18: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PathMappingsArg[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PathMappingsArg[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  435|   };
#  436|   
#  437|-> opt<std::string> PathMappingsArg{
#  438|       "path-mappings",
#  439|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:449:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::InputMirrorFile[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::InputMirrorFile[abi:cxx11]" might be created before "Allocator" is available.
#  447|   };
#  448|   
#  449|-> opt<Path> InputMirrorFile{
#  450|       "input-mirror-file",
#  451|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:449:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::InputMirrorFile[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::InputMirrorFile[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#  447|   };
#  448|   
#  449|-> opt<Path> InputMirrorFile{
#  450|       "input-mirror-file",
#  451|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:449:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::InputMirrorFile[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::InputMirrorFile[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  447|   };
#  448|   
#  449|-> opt<Path> InputMirrorFile{
#  450|       "input-mirror-file",
#  451|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:449:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::InputMirrorFile[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::InputMirrorFile[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#  447|   };
#  448|   
#  449|-> opt<Path> InputMirrorFile{
#  450|       "input-mirror-file",
#  451|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:457:20: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::LogLevel" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::LogLevel" might be created before "Allocator" is available.
#  455|   };
#  456|   
#  457|-> opt<Logger::Level> LogLevel{
#  458|       "log",
#  459|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:457:20: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::LogLevel" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::LogLevel" might be created before "fuzzer::TPC" is available.
#  455|   };
#  456|   
#  457|-> opt<Logger::Level> LogLevel{
#  458|       "log",
#  459|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:457:20: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::LogLevel" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::LogLevel" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  455|   };
#  456|   
#  457|-> opt<Logger::Level> LogLevel{
#  458|       "log",
#  459|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:457:20: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::LogLevel" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::LogLevel" might be created before "scudo::RegionPageMap::Buffers" is available.
#  455|   };
#  456|   
#  457|-> opt<Logger::Level> LogLevel{
#  458|       "log",
#  459|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:467:21: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ForceOffsetEncoding" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ForceOffsetEncoding" might be created before "Allocator" is available.
#  465|   };
#  466|   
#  467|-> opt<OffsetEncoding> ForceOffsetEncoding{
#  468|       "offset-encoding",
#  469|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:467:21: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ForceOffsetEncoding" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ForceOffsetEncoding" might be created before "fuzzer::TPC" is available.
#  465|   };
#  466|   
#  467|-> opt<OffsetEncoding> ForceOffsetEncoding{
#  468|       "offset-encoding",
#  469|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:467:21: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ForceOffsetEncoding" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ForceOffsetEncoding" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  465|   };
#  466|   
#  467|-> opt<OffsetEncoding> ForceOffsetEncoding{
#  468|       "offset-encoding",
#  469|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:467:21: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::ForceOffsetEncoding" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::ForceOffsetEncoding" might be created before "scudo::RegionPageMap::Buffers" is available.
#  465|   };
#  466|   
#  467|-> opt<OffsetEncoding> ForceOffsetEncoding{
#  468|       "offset-encoding",
#  469|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:481:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PrettyPrint" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PrettyPrint" might be created before "Allocator" is available.
#  479|   };
#  480|   
#  481|-> opt<bool> PrettyPrint{
#  482|       "pretty",
#  483|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:481:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PrettyPrint" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PrettyPrint" might be created before "fuzzer::TPC" is available.
#  479|   };
#  480|   
#  481|-> opt<bool> PrettyPrint{
#  482|       "pretty",
#  483|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:481:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PrettyPrint" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PrettyPrint" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  479|   };
#  480|   
#  481|-> opt<bool> PrettyPrint{
#  482|       "pretty",
#  483|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:481:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PrettyPrint" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PrettyPrint" might be created before "scudo::RegionPageMap::Buffers" is available.
#  479|   };
#  480|   
#  481|-> opt<bool> PrettyPrint{
#  482|       "pretty",
#  483|       cat(Protocol),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:488:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableConfig" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableConfig" might be created before "Allocator" is available.
#  486|   };
#  487|   
#  488|-> opt<bool> EnableConfig{
#  489|       "enable-config",
#  490|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:488:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableConfig" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableConfig" might be created before "fuzzer::TPC" is available.
#  486|   };
#  487|   
#  488|-> opt<bool> EnableConfig{
#  489|       "enable-config",
#  490|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:488:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableConfig" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableConfig" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  486|   };
#  487|   
#  488|-> opt<bool> EnableConfig{
#  489|       "enable-config",
#  490|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:488:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableConfig" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableConfig" might be created before "scudo::RegionPageMap::Buffers" is available.
#  486|   };
#  487|   
#  488|-> opt<bool> EnableConfig{
#  489|       "enable-config",
#  490|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:502:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::UseDirtyHeaders" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::UseDirtyHeaders" might be created before "Allocator" is available.
#  500|   };
#  501|   
#  502|-> opt<bool> UseDirtyHeaders{"use-dirty-headers", cat(Misc),
#  503|                             desc("Use files open in the editor when parsing "
#  504|                                  "headers instead of reading from the disk"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:502:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::UseDirtyHeaders" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::UseDirtyHeaders" might be created before "fuzzer::TPC" is available.
#  500|   };
#  501|   
#  502|-> opt<bool> UseDirtyHeaders{"use-dirty-headers", cat(Misc),
#  503|                             desc("Use files open in the editor when parsing "
#  504|                                  "headers instead of reading from the disk"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:502:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::UseDirtyHeaders" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::UseDirtyHeaders" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  500|   };
#  501|   
#  502|-> opt<bool> UseDirtyHeaders{"use-dirty-headers", cat(Misc),
#  503|                             desc("Use files open in the editor when parsing "
#  504|                                  "headers instead of reading from the disk"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:502:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::UseDirtyHeaders" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::UseDirtyHeaders" might be created before "scudo::RegionPageMap::Buffers" is available.
#  500|   };
#  501|   
#  502|-> opt<bool> UseDirtyHeaders{"use-dirty-headers", cat(Misc),
#  503|                             desc("Use files open in the editor when parsing "
#  504|                                  "headers instead of reading from the disk"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:508:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PreambleParseForwardingFunctions" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PreambleParseForwardingFunctions" might be created before "Allocator" is available.
#  506|                             init(ClangdServer::Options().UseDirtyHeaders)};
#  507|   
#  508|-> opt<bool> PreambleParseForwardingFunctions{
#  509|       "parse-forwarding-functions",
#  510|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:508:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PreambleParseForwardingFunctions" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PreambleParseForwardingFunctions" might be created before "fuzzer::TPC" is available.
#  506|                             init(ClangdServer::Options().UseDirtyHeaders)};
#  507|   
#  508|-> opt<bool> PreambleParseForwardingFunctions{
#  509|       "parse-forwarding-functions",
#  510|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:508:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PreambleParseForwardingFunctions" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PreambleParseForwardingFunctions" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  506|                             init(ClangdServer::Options().UseDirtyHeaders)};
#  507|   
#  508|-> opt<bool> PreambleParseForwardingFunctions{
#  509|       "parse-forwarding-functions",
#  510|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:508:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::PreambleParseForwardingFunctions" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::PreambleParseForwardingFunctions" might be created before "scudo::RegionPageMap::Buffers" is available.
#  506|                             init(ClangdServer::Options().UseDirtyHeaders)};
#  507|   
#  508|-> opt<bool> PreambleParseForwardingFunctions{
#  509|       "parse-forwarding-functions",
#  510|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:517:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableMallocTrim" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableMallocTrim" might be created before "Allocator" is available.
#  515|   
#  516|   #if defined(__GLIBC__) && CLANGD_MALLOC_TRIM
#  517|-> opt<bool> EnableMallocTrim{
#  518|       "malloc-trim",
#  519|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:517:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableMallocTrim" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableMallocTrim" might be created before "fuzzer::TPC" is available.
#  515|   
#  516|   #if defined(__GLIBC__) && CLANGD_MALLOC_TRIM
#  517|-> opt<bool> EnableMallocTrim{
#  518|       "malloc-trim",
#  519|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:517:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableMallocTrim" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableMallocTrim" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  515|   
#  516|   #if defined(__GLIBC__) && CLANGD_MALLOC_TRIM
#  517|-> opt<bool> EnableMallocTrim{
#  518|       "malloc-trim",
#  519|       cat(Misc),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/tool/ClangdMain.cpp:517:11: constructor_uses_global_object: The constructor of global object "clang::clangd::<unnamed>::EnableMallocTrim" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::<unnamed>::EnableMallocTrim" might be created before "scudo::RegionPageMap::Buffers" is available.
#  515|   
#  516|   #if defined(__GLIBC__) && CLANGD_MALLOC_TRIM
#  517|-> opt<bool> EnableMallocTrim{
#  518|       "malloc-trim",
#  519|       cat(Misc),

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/ASTTests.cpp:453:5: var_decl: Declaring variable "TargetDecl" without initializer.
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/ASTTests.cpp:469:9: uninit_use_in_call: Using uninitialized value "TargetDecl" when calling "getQualification".
#  467|         const Decl *D = InsertionPoints[I];
#  468|         if (Case.VisibleNamespaces.empty()) {
#  469|->         EXPECT_EQ(getQualification(AST.getASTContext(),
#  470|                                      D->getLexicalDeclContext(), D->getBeginLoc(),
#  471|                                      TargetDecl),

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/ASTTests.cpp:453:5: var_decl: Declaring variable "TargetDecl" without initializer.
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/ASTTests.cpp:474:9: uninit_use_in_call: Using uninitialized value "TargetDecl" when calling "getQualification".
#  472|                     Case.Qualifications[I]);
#  473|         } else {
#  474|->         EXPECT_EQ(getQualification(AST.getASTContext(),
#  475|                                      D->getLexicalDeclContext(), TargetDecl,
#  476|                                      Case.VisibleNamespaces),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:94:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundIndexTest_NoCrashOnErrorFile_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundIndexTest_NoCrashOnErrorFile_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   92|   };
#   93|   
#   94|-> TEST_F(BackgroundIndexTest, NoCrashOnErrorFile) {
#   95|     MockFS FS;
#   96|     FS.Files[testPath("root/A.cc")] = "error file";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:113:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundIndexTest_Config_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundIndexTest_Config_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  111|   }
#  112|   
#  113|-> TEST_F(BackgroundIndexTest, Config) {
#  114|     MockFS FS;
#  115|     // Set up two identical TUs, foo and bar.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:165:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundIndexTest_IndexTwoFiles_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundIndexTest_IndexTwoFiles_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  163|   }
#  164|   
#  165|-> TEST_F(BackgroundIndexTest, IndexTwoFiles) {
#  166|     MockFS FS;
#  167|     // a.h yields different symbols when included by A.cc vs B.cc.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:236:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundIndexTest_MainFileRefs_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundIndexTest_MainFileRefs_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  234|   }
#  235|   
#  236|-> TEST_F(BackgroundIndexTest, MainFileRefs) {
#  237|     MockFS FS;
#  238|     FS.Files[testPath("root/A.h")] = R"cpp(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:265:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundIndexTest_ShardStorageTest_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundIndexTest_ShardStorageTest_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  263|   }
#  264|   
#  265|-> TEST_F(BackgroundIndexTest, ShardStorageTest) {
#  266|     MockFS FS;
#  267|     FS.Files[testPath("root/A.h")] = R"cpp(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:336:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundIndexTest_DirectIncludesTest_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundIndexTest_DirectIncludesTest_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  334|   }
#  335|   
#  336|-> TEST_F(BackgroundIndexTest, DirectIncludesTest) {
#  337|     MockFS FS;
#  338|     FS.Files[testPath("root/B.h")] = "";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:387:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundIndexTest_ShardStorageLoad_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundIndexTest_ShardStorageLoad_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  385|   }
#  386|   
#  387|-> TEST_F(BackgroundIndexTest, ShardStorageLoad) {
#  388|     MockFS FS;
#  389|     FS.Files[testPath("root/A.h")] = R"cpp(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:458:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundIndexTest_ShardStorageEmptyFile_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundIndexTest_ShardStorageEmptyFile_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  456|   }
#  457|   
#  458|-> TEST_F(BackgroundIndexTest, ShardStorageEmptyFile) {
#  459|     MockFS FS;
#  460|     FS.Files[testPath("root/A.h")] = R"cpp(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:526:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundIndexTest_NoDotsInAbsPath_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundIndexTest_NoDotsInAbsPath_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  524|   }
#  525|   
#  526|-> TEST_F(BackgroundIndexTest, NoDotsInAbsPath) {
#  527|     MockFS FS;
#  528|     llvm::StringMap<std::string> Storage;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:557:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundIndexTest_UncompilableFiles_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundIndexTest_UncompilableFiles_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  555|   }
#  556|   
#  557|-> TEST_F(BackgroundIndexTest, UncompilableFiles) {
#  558|     MockFS FS;
#  559|     llvm::StringMap<std::string> Storage;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:621:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundIndexTest_CmdLineHash_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundIndexTest_CmdLineHash_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  619|   }
#  620|   
#  621|-> TEST_F(BackgroundIndexTest, CmdLineHash) {
#  622|     MockFS FS;
#  623|     llvm::StringMap<std::string> Storage;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:649:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundIndexTest_Reindex_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundIndexTest_Reindex_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  647|   }
#  648|   
#  649|-> TEST_F(BackgroundIndexTest, Reindex) {
#  650|     MockFS FS;
#  651|     llvm::StringMap<std::string> Storage;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:724:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundIndexRebuilderTest_IndexingTUs_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundIndexRebuilderTest_IndexingTUs_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  722|   };
#  723|   
#  724|-> TEST_F(BackgroundIndexRebuilderTest, IndexingTUs) {
#  725|     for (unsigned I = 0; I < Rebuilder.TUsBeforeFirstBuild - 1; ++I)
#  726|       EXPECT_FALSE(checkRebuild([&] { Rebuilder.indexedTU(); }));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:733:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundIndexRebuilderTest_LoadingShards_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundIndexRebuilderTest_LoadingShards_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  731|   }
#  732|   
#  733|-> TEST_F(BackgroundIndexRebuilderTest, LoadingShards) {
#  734|     Rebuilder.startLoading();
#  735|     Rebuilder.loadedShard(10);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:760:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundQueueTest_Priority_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundQueueTest_Priority_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  758|   }
#  759|   
#  760|-> TEST(BackgroundQueueTest, Priority) {
#  761|     // Create high and low priority tasks.
#  762|     // Once a bunch of high priority tasks have run, the queue is stopped.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:792:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundQueueTest_Boost_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundQueueTest_Boost_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  790|   }
#  791|   
#  792|-> TEST(BackgroundQueueTest, Boost) {
#  793|     std::string Sequence;
#  794|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:827:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundQueueTest_Duplicates_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundQueueTest_Duplicates_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  825|   }
#  826|   
#  827|-> TEST(BackgroundQueueTest, Duplicates) {
#  828|     std::string Sequence;
#  829|     BackgroundQueue::Task A([&] { Sequence.push_back('A'); });

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:852:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundQueueTest_Progress_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundQueueTest_Progress_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  850|   }
#  851|   
#  852|-> TEST(BackgroundQueueTest, Progress) {
#  853|     using testing::AnyOf;
#  854|     BackgroundQueue::Stats S;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/BackgroundIndexTests.cpp:900:1: constructor_uses_global_object: The constructor of global object "clang::clangd::BackgroundIndex_Profile_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::BackgroundIndex_Profile_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  898|   }
#  899|   
#  900|-> TEST(BackgroundIndex, Profile) {
#  901|     MockFS FS;
#  902|     MockCompilationDatabase CDB;

Error: WRAPPER_ESCAPE (CWE-825):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/ClangdLSPServerTests.cpp:294:3: extract: Calling "get" which extracts wrapped state from local "CfgProvider".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/ClangdLSPServerTests.cpp:294:3: escape: The internal representation of local "CfgProvider" escapes into "this->Opts.ConfigProvider", but is destroyed when it exits scope.
#  292|     auto CfgProvider =
#  293|         config::Provider::fromAncestorRelativeYAMLFiles(".clangd", FS);
#  294|->   Opts.ConfigProvider = CfgProvider.get();
#  295|   
#  296|     // Map bar.cpp to a different compilation database which defines FOO->BAR.

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/ClangdTests.cpp:298:3: var_decl: Declaring variable "FS".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/ClangdTests.cpp:323:3: uninit_use_in_call: Using uninitialized value "FS.Got" when calling "Compare".
#  321|     }
#  322|     ASSERT_TRUE(Server.blockUntilIdleForTest());
#  323|->   EXPECT_EQ(FS.Got, 42);
#  324|     EXPECT_EQ(Callbacks.Got, 42);
#  325|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/ClangdTests.cpp:307:3: var_decl: Declaring variable "Callbacks".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/ClangdTests.cpp:324:3: uninit_use_in_call: Using uninitialized value "Callbacks.Got" when calling "Compare".
#  322|     ASSERT_TRUE(Server.blockUntilIdleForTest());
#  323|     EXPECT_EQ(FS.Got, 42);
#  324|->   EXPECT_EQ(Callbacks.Got, 42);
#  325|   }
#  326|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/DecisionForestTests.cpp:8:1: constructor_uses_global_object: The constructor of global object "clang::clangd::DecisionForestRuntime_Evaluate_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::DecisionForestRuntime_Evaluate_Test::test_info_" might be created before "fuzzer::TPC" is available.
#    6|   namespace clangd {
#    7|   
#    8|-> TEST(DecisionForestRuntime, Evaluate) {
#    9|     using Example = ::ns1::ns2::test::Example;
#   10|     using Cat = ::ns1::ns2::TestEnum;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/DiagnosticsTests.cpp:1150:3: var_decl: Declaring variable "F".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/DiagnosticsTests.cpp:1152:3: uninit_use_in_call: Using uninitialized value "F". Field "F.Edits.InlineElts" is uninitialized when calling "push_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
# 1150|     clangd::Fix F;
# 1151|     F.Message = "do something";
# 1152|->   D.Fixes.push_back(F);
# 1153|   
# 1154|     // Diagnostics should turn into these:

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/FileIndexTests.cpp:77:3: var_decl: Declaring variable "Sym".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/FileIndexTests.cpp:80:3: uninit_use: Using uninitialized value "Sym". Field "Sym.IncludeHeaders.InlineElts" is uninitialized.
#   78|     Sym.ID = SymbolID(ID);
#   79|     Sym.Name = ID;
#   80|->   return Sym;
#   81|   }
#   82|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/FindTargetTests.cpp:1281:5: var_decl: Declaring variable "TU".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/FindTargetTests.cpp:1289:5: uninit_use: Using uninitialized value "TU". Field "TU.ClangTidyProvider.StorageUnion" is uninitialized.
# 1287|       TU.ExtraArgs.push_back("-xobjective-c++");
# 1288|   
# 1289|->     return TU;
# 1290|     }
# 1291|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/FuzzyMatchTests.cpp:202:5: var_decl: Declaring variable "LastMatch" without initializer.
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/FuzzyMatchTests.cpp:221:11: uninit_use: Using uninitialized value "LastMatch".
#  219|             Ok = false;
#  220|           } else if (LastScore && *LastScore < *Score) {
#  221|->           *OS << "\nRanks '" << Str.Word << "'=" << *Score << " above '"
#  222|                 << LastMatch->Word << "'=" << *LastScore << "\n"
#  223|                 << Info.str();

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/GlobalCompilationDatabaseTests.cpp:517:1: constructor_uses_global_object: The constructor of global object "clang::clangd::DirectoryBasedGlobalCompilationDatabaseCacheTest_Cacheable_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::DirectoryBasedGlobalCompilationDatabaseCacheTest_Cacheable_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  515|   }
#  516|   
#  517|-> TEST_F(DirectoryBasedGlobalCompilationDatabaseCacheTest, Cacheable) {
#  518|     MockFS FS;
#  519|     auto Stale = std::chrono::steady_clock::now() - std::chrono::minutes(1);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/HeadersTests.cpp:344:3: var_decl: Declaring variable "Inc".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/HeadersTests.cpp:347:3: uninit_use_in_call: Using uninitialized value "Inc.Directive" when calling "Inclusion".
#  345|     Inc.Written = "\"bar.h\"";
#  346|     Inc.Resolved = "";
#  347|->   EXPECT_EQ(calculate(testPath("sub/bar.h"), "\"bar.h\"", {Inc}), "");
#  348|     EXPECT_EQ(calculate("\"x.h\"", "\"bar.h\"", {Inc}), "");
#  349|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/HeadersTests.cpp:352:3: var_decl: Declaring variable "Inc".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/HeadersTests.cpp:355:3: uninit_use_in_call: Using uninitialized value "Inc.Directive" when calling "Inclusion".
#  353|     Inc.Written = "fake-bar.h";
#  354|     Inc.Resolved = testPath("sub/bar.h");
#  355|->   EXPECT_EQ(calculate(Inc.Resolved, "", {Inc}), "");
#  356|     // Do not insert preferred.
#  357|     EXPECT_EQ(calculate(Inc.Resolved, "\"BAR.h\"", {Inc}), "");

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/IndexTests.cpp:528:3: move: "StaticRefs" is moved (indicated by "std::move(StaticRefs)").
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/IndexTests.cpp:531:3: use_after_move: "StaticRefs" is used after it has been already moved.
#  529|         std::make_pair(std::move(StaticSymbols), std::move(StaticRefs));
#  530|     llvm::StringSet<> StaticFiles = {"unittest:///foo.cc", "unittest:///bar.cc"};
#  531|->   MemIndex StaticIndex(
#  532|         std::move(StaticData.first), std::move(StaticData.second), RelationSlab(),
#  533|         std::move(StaticFiles), IndexContents::References, std::move(StaticData),

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/IndexTests.cpp:528:3: move: "StaticSymbols" is moved (indicated by "std::move(StaticSymbols)").
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/IndexTests.cpp:531:3: use_after_move: "StaticSymbols" is used after it has been already moved.
#  529|         std::make_pair(std::move(StaticSymbols), std::move(StaticRefs));
#  530|     llvm::StringSet<> StaticFiles = {"unittest:///foo.cc", "unittest:///bar.cc"};
#  531|->   MemIndex StaticIndex(
#  532|         std::move(StaticData.first), std::move(StaticData.second), RelationSlab(),
#  533|         std::move(StaticFiles), IndexContents::References, std::move(StaticData),

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/LSPClient.cpp:156:5: var_decl: Declaring variable "Lock".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/LSPClient.cpp:163:7: uninit_use_in_call: Using uninitialized value "Lock._M_device" when calling "unlock".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/LSPClient.cpp:163:7: uninit_use_in_call: Using uninitialized value "Lock._M_owns" when calling "unlock".
#  161|         auto Action = std::move(Actions.front());
#  162|         Actions.pop();
#  163|->       Lock.unlock();
#  164|         Action(H);
#  165|         Lock.lock();

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/ProjectAwareIndexTests.cpp:35:1: constructor_uses_global_object: The constructor of global object "clang::clangd::ProjectAware_Test_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::ProjectAware_Test_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   33|   }
#   34|   
#   35|-> TEST(ProjectAware, Test) {
#   36|     IndexFactory Gen = [](const Config::ExternalIndexSpec &, AsyncTaskRunner *) {
#   37|       return createIndex();

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/ProjectAwareIndexTests.cpp:55:1: constructor_uses_global_object: The constructor of global object "clang::clangd::ProjectAware_CreatedOnce_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::ProjectAware_CreatedOnce_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   53|   }
#   54|   
#   55|-> TEST(ProjectAware, CreatedOnce) {
#   56|     unsigned InvocationCount = 0;
#   57|     IndexFactory Gen = [&](const Config::ExternalIndexSpec &, AsyncTaskRunner *) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/TUSchedulerTests.cpp:98:5: var_decl: Declaring variable "Inputs".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/TUSchedulerTests.cpp:103:5: uninit_use: Using uninitialized value "Inputs". Field "Inputs.ClangTidyProvider.callable" is uninitialized.
#  101|       Inputs.Contents = std::move(Contents);
#  102|       Inputs.Opts = ParseOptions();
#  103|->     return Inputs;
#  104|     }
#  105|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/TestIndex.cpp:18:3: var_decl: Declaring variable "Sym".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/TestIndex.cpp:28:3: uninit_use: Using uninitialized value "Sym". Field "Sym.IncludeHeaders.InlineElts" is uninitialized.
#   26|       Sym.Scope = QName.substr(0, Pos + 2);
#   27|     }
#   28|->   return Sym;
#   29|   }
#   30|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/TestIndex.cpp:42:3: var_decl: Declaring variable "Sym".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/TestIndex.cpp:59:3: uninit_use: Using uninitialized value "Sym". Field "Sym.IncludeHeaders.InlineElts" is uninitialized.
#   57|     Sym.Origin = SymbolOrigin::Static;
#   58|     Sym.Signature = Signature;
#   59|->   return Sym;
#   60|   }
#   61|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/TestIndex.cpp:96:3: var_decl: Declaring variable "Sym".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/TestIndex.cpp:105:3: uninit_use: Using uninitialized value "Sym". Field "Sym.IncludeHeaders.InlineElts" is uninitialized.
#  103|     Sym.Flags |= Symbol::IndexedForCodeCompletion;
#  104|     Sym.Origin = SymbolOrigin::Static;
#  105|->   return Sym;
#  106|   }
#  107|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/TestTU.h:37:5: var_decl: Declaring variable "TU".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/TestTU.h:39:5: uninit_use: Using uninitialized value "TU". Field "TU.ClangTidyProvider.StorageUnion" is uninitialized.
#   37|       TestTU TU;
#   38|       TU.Code = std::string(Code);
#   39|->     return TU;
#   40|     }
#   41|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/TestTU.h:43:5: var_decl: Declaring variable "TU".
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/TestTU.h:45:5: uninit_use: Using uninitialized value "TU". Field "TU.ClangTidyProvider.StorageUnion" is uninitialized.
#   43|       TestTU TU;
#   44|       TU.HeaderCode = std::string(HeaderCode);
#   45|->     return TU;
#   46|     }
#   47|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/support/ContextTests.cpp:16:1: constructor_uses_global_object: The constructor of global object "clang::clangd::ContextTests_Simple_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::ContextTests_Simple_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   14|   namespace clangd {
#   15|   
#   16|-> TEST(ContextTests, Simple) {
#   17|     Key<int> IntParam;
#   18|     Key<int> ExtraIntParam;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/support/ContextTests.cpp:26:1: constructor_uses_global_object: The constructor of global object "clang::clangd::ContextTests_MoveOps_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::ContextTests_MoveOps_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   24|   }
#   25|   
#   26|-> TEST(ContextTests, MoveOps) {
#   27|     Key<std::unique_ptr<int>> Param;
#   28|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/support/ContextTests.cpp:36:1: constructor_uses_global_object: The constructor of global object "clang::clangd::ContextTests_Builders_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::ContextTests_Builders_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   34|   }
#   35|   
#   36|-> TEST(ContextTests, Builders) {
#   37|     Key<int> ParentParam;
#   38|     Key<int> ParentAndChildParam;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/support/ThreadingTests.cpp:20:1: constructor_uses_global_object: The constructor of global object "clang::clangd::ThreadingTest_TaskRunner_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::ThreadingTest_TaskRunner_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   18|   class ThreadingTest : public ::testing::Test {};
#   19|   
#   20|-> TEST_F(ThreadingTest, TaskRunner) {
#   21|     const int TasksCnt = 100;
#   22|     // This should be const, but MSVC does not allow to use const vars in lambdas

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/support/ThreadingTests.cpp:67:1: constructor_uses_global_object: The constructor of global object "clang::clangd::ThreadingTest_Memoize_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::ThreadingTest_Memoize_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   65|   }
#   66|   
#   67|-> TEST_F(ThreadingTest, Memoize) {
#   68|     const unsigned NumThreads = 5;
#   69|     const unsigned NumKeys = 100;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/support/ThreadingTests.cpp:96:1: constructor_uses_global_object: The constructor of global object "clang::clangd::ThreadingTest_MemoizeDeterministic_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::ThreadingTest_MemoizeDeterministic_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   94|   }
#   95|   
#   96|-> TEST_F(ThreadingTest, MemoizeDeterministic) {
#   97|     Memoize<llvm::DenseMap<int, char>> Cache;
#   98|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/clangd/unittests/support/ThreadingTests.cpp:127:1: constructor_uses_global_object: The constructor of global object "clang::clangd::PeriodicThrottlerTest_Minimal_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::clangd::PeriodicThrottlerTest_Minimal_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  125|   // It's hard to write a real test of this class, std::chrono is awkward to mock.
#  126|   // But test some degenerate cases at least.
#  127|-> TEST(PeriodicThrottlerTest, Minimal) {
#  128|     PeriodicThrottler Once(std::chrono::hours(24));
#  129|     EXPECT_TRUE(Once());

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/lib/FindHeaders.cpp:99:3: var_decl: Declaring variable "Results".
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/lib/FindHeaders.cpp:111:3: uninit_use: Using uninitialized value "Results". Field "Results.InlineElts" is uninitialized.
#  109|     if (!Results.empty())
#  110|       Results.front().Hint |= Hints::PreferredHeader;
#  111|->   return Results;
#  112|   }
#  113|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/lib/Record.cpp:392:3: var_decl: Declaring variable "Results".
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/lib/Record.cpp:399:3: uninit_use: Using uninitialized value "Results". Field "Results.InlineElts" is uninitialized.
#  397|         Results.push_back(*FE);
#  398|     }
#  399|->   return Results;
#  400|   }
#  401|   llvm::SmallVector<FileEntryRef>

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/lib/Types.cpp:157:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/lib/Types.cpp:177:3: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
#  175|     }
#  176|     }
#  177|->   return Result;
#  178|   }
#  179|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:51:20: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::IncludeCleaner" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::IncludeCleaner" might be created before "Allocator" is available.
#   49|                                  .trim();
#   50|   
#   51|-> cl::OptionCategory IncludeCleaner("clang-include-cleaner");
#   52|   
#   53|   cl::opt<std::string> HTMLReportPath{

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:51:20: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::IncludeCleaner" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::IncludeCleaner" might be created before "GlobalParser" is available.
#   49|                                  .trim();
#   50|   
#   51|-> cl::OptionCategory IncludeCleaner("clang-include-cleaner");
#   52|   
#   53|   cl::opt<std::string> HTMLReportPath{

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:51:20: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::IncludeCleaner" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::IncludeCleaner" might be created before "fuzzer::TPC" is available.
#   49|                                  .trim();
#   50|   
#   51|-> cl::OptionCategory IncludeCleaner("clang-include-cleaner");
#   52|   
#   53|   cl::opt<std::string> HTMLReportPath{

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:51:20: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::IncludeCleaner" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::IncludeCleaner" might be created before "scudo::RegionPageMap::Buffers" is available.
#   49|                                  .trim();
#   50|   
#   51|-> cl::OptionCategory IncludeCleaner("clang-include-cleaner");
#   52|   
#   53|   cl::opt<std::string> HTMLReportPath{

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:53:22: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::HTMLReportPath[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::HTMLReportPath[abi:cxx11]" might be created before "Allocator" is available.
#   51|   cl::OptionCategory IncludeCleaner("clang-include-cleaner");
#   52|   
#   53|-> cl::opt<std::string> HTMLReportPath{
#   54|       "html",
#   55|       cl::desc("Specify an output filename for an HTML report. "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:53:22: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::HTMLReportPath[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::HTMLReportPath[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   51|   cl::OptionCategory IncludeCleaner("clang-include-cleaner");
#   52|   
#   53|-> cl::opt<std::string> HTMLReportPath{
#   54|       "html",
#   55|       cl::desc("Specify an output filename for an HTML report. "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:53:22: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::HTMLReportPath[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::HTMLReportPath[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   51|   cl::OptionCategory IncludeCleaner("clang-include-cleaner");
#   52|   
#   53|-> cl::opt<std::string> HTMLReportPath{
#   54|       "html",
#   55|       cl::desc("Specify an output filename for an HTML report. "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:53:22: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::HTMLReportPath[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::HTMLReportPath[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   51|   cl::OptionCategory IncludeCleaner("clang-include-cleaner");
#   52|   
#   53|-> cl::opt<std::string> HTMLReportPath{
#   54|       "html",
#   55|       cl::desc("Specify an output filename for an HTML report. "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:60:22: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::OnlyHeaders[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::OnlyHeaders[abi:cxx11]" might be created before "Allocator" is available.
#   58|   };
#   59|   
#   60|-> cl::opt<std::string> OnlyHeaders{
#   61|       "only-headers",
#   62|       cl::desc("A comma-separated list of regexes to match against suffix of a "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:60:22: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::OnlyHeaders[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::OnlyHeaders[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   58|   };
#   59|   
#   60|-> cl::opt<std::string> OnlyHeaders{
#   61|       "only-headers",
#   62|       cl::desc("A comma-separated list of regexes to match against suffix of a "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:60:22: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::OnlyHeaders[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::OnlyHeaders[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   58|   };
#   59|   
#   60|-> cl::opt<std::string> OnlyHeaders{
#   61|       "only-headers",
#   62|       cl::desc("A comma-separated list of regexes to match against suffix of a "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:60:22: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::OnlyHeaders[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::OnlyHeaders[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   58|   };
#   59|   
#   60|-> cl::opt<std::string> OnlyHeaders{
#   61|       "only-headers",
#   62|       cl::desc("A comma-separated list of regexes to match against suffix of a "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:68:22: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::IgnoreHeaders[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::IgnoreHeaders[abi:cxx11]" might be created before "Allocator" is available.
#   66|   };
#   67|   
#   68|-> cl::opt<std::string> IgnoreHeaders{
#   69|       "ignore-headers",
#   70|       cl::desc("A comma-separated list of regexes to match against suffix of a "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:68:22: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::IgnoreHeaders[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::IgnoreHeaders[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   66|   };
#   67|   
#   68|-> cl::opt<std::string> IgnoreHeaders{
#   69|       "ignore-headers",
#   70|       cl::desc("A comma-separated list of regexes to match against suffix of a "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:68:22: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::IgnoreHeaders[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::IgnoreHeaders[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   66|   };
#   67|   
#   68|-> cl::opt<std::string> IgnoreHeaders{
#   69|       "ignore-headers",
#   70|       cl::desc("A comma-separated list of regexes to match against suffix of a "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:68:22: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::IgnoreHeaders[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::IgnoreHeaders[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   66|   };
#   67|   
#   68|-> cl::opt<std::string> IgnoreHeaders{
#   69|       "ignore-headers",
#   70|       cl::desc("A comma-separated list of regexes to match against suffix of a "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:77:21: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Print" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Print" might be created before "Allocator" is available.
#   75|   
#   76|   enum class PrintStyle { Changes, Final };
#   77|-> cl::opt<PrintStyle> Print{
#   78|       "print",
#   79|       cl::values(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:77:21: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Print" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Print" might be created before "fuzzer::TPC" is available.
#   75|   
#   76|   enum class PrintStyle { Changes, Final };
#   77|-> cl::opt<PrintStyle> Print{
#   78|       "print",
#   79|       cl::values(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:77:21: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Print" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Print" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   75|   
#   76|   enum class PrintStyle { Changes, Final };
#   77|-> cl::opt<PrintStyle> Print{
#   78|       "print",
#   79|       cl::values(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:77:21: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Print" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Print" might be created before "scudo::RegionPageMap::Buffers" is available.
#   75|   
#   76|   enum class PrintStyle { Changes, Final };
#   77|-> cl::opt<PrintStyle> Print{
#   78|       "print",
#   79|       cl::values(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:88:15: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Edit" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Edit" might be created before "Allocator" is available.
#   86|   };
#   87|   
#   88|-> cl::opt<bool> Edit{
#   89|       "edit",
#   90|       cl::desc("Apply edits to analyzed source files"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:88:15: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Edit" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Edit" might be created before "fuzzer::TPC" is available.
#   86|   };
#   87|   
#   88|-> cl::opt<bool> Edit{
#   89|       "edit",
#   90|       cl::desc("Apply edits to analyzed source files"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:88:15: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Edit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Edit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   86|   };
#   87|   
#   88|-> cl::opt<bool> Edit{
#   89|       "edit",
#   90|       cl::desc("Apply edits to analyzed source files"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:88:15: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Edit" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Edit" might be created before "scudo::RegionPageMap::Buffers" is available.
#   86|   };
#   87|   
#   88|-> cl::opt<bool> Edit{
#   89|       "edit",
#   90|       cl::desc("Apply edits to analyzed source files"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:94:15: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Insert" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Insert" might be created before "Allocator" is available.
#   92|   };
#   93|   
#   94|-> cl::opt<bool> Insert{
#   95|       "insert",
#   96|       cl::desc("Allow header insertions"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:94:15: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Insert" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Insert" might be created before "fuzzer::TPC" is available.
#   92|   };
#   93|   
#   94|-> cl::opt<bool> Insert{
#   95|       "insert",
#   96|       cl::desc("Allow header insertions"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:94:15: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Insert" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Insert" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   92|   };
#   93|   
#   94|-> cl::opt<bool> Insert{
#   95|       "insert",
#   96|       cl::desc("Allow header insertions"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:94:15: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Insert" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Insert" might be created before "scudo::RegionPageMap::Buffers" is available.
#   92|   };
#   93|   
#   94|-> cl::opt<bool> Insert{
#   95|       "insert",
#   96|       cl::desc("Allow header insertions"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:100:15: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Remove" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Remove" might be created before "Allocator" is available.
#   98|       cl::cat(IncludeCleaner),
#   99|   };
#  100|-> cl::opt<bool> Remove{
#  101|       "remove",
#  102|       cl::desc("Allow header removals"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:100:15: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Remove" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Remove" might be created before "fuzzer::TPC" is available.
#   98|       cl::cat(IncludeCleaner),
#   99|   };
#  100|-> cl::opt<bool> Remove{
#  101|       "remove",
#  102|       cl::desc("Allow header removals"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:100:15: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Remove" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Remove" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   98|       cl::cat(IncludeCleaner),
#   99|   };
#  100|-> cl::opt<bool> Remove{
#  101|       "remove",
#  102|       cl::desc("Allow header removals"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/include-cleaner/tool/IncludeCleaner.cpp:100:15: constructor_uses_global_object: The constructor of global object "clang::include_cleaner::<unnamed>::Remove" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::include_cleaner::<unnamed>::Remove" might be created before "scudo::RegionPageMap::Buffers" is available.
#   98|       cl::cat(IncludeCleaner),
#   99|   };
#  100|-> cl::opt<bool> Remove{
#  101|       "remove",
#  102|       cl::desc("Allow header removals"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/modularize/Modularize.cpp:265:5: constructor_uses_global_object: The constructor of global object "ListFileNames[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ListFileNames[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  263|   // Option to specify a file name for a list of header files to check.
#  264|   static cl::list<std::string>
#  265|->     ListFileNames(cl::Positional, cl::value_desc("list"),
#  266|                     cl::desc("<list of one or more header list files>"),
#  267|                     cl::CommaSeparated);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/modularize/Modularize.cpp:271:5: constructor_uses_global_object: The constructor of global object "CC1Arguments[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CC1Arguments[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  269|   // Collect all other arguments, which will be passed to the front end.
#  270|   static cl::list<std::string>
#  271|->     CC1Arguments(cl::ConsumeAfter,
#  272|                    cl::desc("<arguments to be passed to front end>..."));
#  273|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/modularize/Modularize.cpp:275:29: constructor_uses_global_object: The constructor of global object "HeaderPrefix[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HeaderPrefix[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  273|   
#  274|   // Option to specify a prefix to be prepended to the header names.
#  275|-> static cl::opt<std::string> HeaderPrefix(
#  276|       "prefix", cl::init(""),
#  277|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/modularize/Modularize.cpp:284:29: constructor_uses_global_object: The constructor of global object "ModuleMapPath[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ModuleMapPath[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  282|   // Option for assistant mode, telling modularize to output a module map
#  283|   // based on the headers list, and where to put it.
#  284|-> static cl::opt<std::string> ModuleMapPath(
#  285|       "module-map-path", cl::init(""),
#  286|       cl::desc("Turn on module map output and specify output path or file name."

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/modularize/Modularize.cpp:292:29: constructor_uses_global_object: The constructor of global object "ProblemFilesList[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ProblemFilesList[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  290|   // Option to specify list of problem files for assistant.
#  291|   // This will cause assistant to exclude these files.
#  292|-> static cl::opt<std::string> ProblemFilesList(
#  293|     "problem-files-list", cl::init(""),
#  294|     cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/modularize/Modularize.cpp:300:1: constructor_uses_global_object: The constructor of global object "RootModule[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RootModule[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  298|   // Option for assistant mode, telling modularize the name of the root module.
#  299|   static cl::opt<std::string>
#  300|-> RootModule("root-module", cl::init(""),
#  301|              cl::desc("Specify the name of the root module."));
#  302|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/modularize/Modularize.cpp:308:1: constructor_uses_global_object: The constructor of global object "BlockCheckHeaderListOnly" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BlockCheckHeaderListOnly" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  306|   // included inside blocks.
#  307|   static cl::opt<bool>
#  308|-> BlockCheckHeaderListOnly("block-check-header-list-only", cl::init(false),
#  309|   cl::desc("Only warn if #include directives are inside extern or namespace"
#  310|     " blocks if the included header is in the header list."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/modularize/Modularize.cpp:314:5: constructor_uses_global_object: The constructor of global object "IncludePaths[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "IncludePaths[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  312|   // Option for include paths for coverage check.
#  313|   static cl::list<std::string>
#  314|->     IncludePaths("I", cl::desc("Include path for coverage check."),
#  315|                    cl::value_desc("path"));
#  316|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/modularize/Modularize.cpp:318:22: constructor_uses_global_object: The constructor of global object "NoCoverageCheck" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "NoCoverageCheck" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  316|   
#  317|   // Option for disabling the coverage check.
#  318|-> static cl::opt<bool> NoCoverageCheck("no-coverage-check",
#  319|                                        cl::desc("Don't do the coverage check."));
#  320|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/modularize/Modularize.cpp:323:1: constructor_uses_global_object: The constructor of global object "CoverageCheckOnly" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CoverageCheckOnly" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  321|   // Option for just doing the coverage check.
#  322|   static cl::opt<bool>
#  323|-> CoverageCheckOnly("coverage-check-only", cl::init(false),
#  324|   cl::desc("Only do the coverage check."));
#  325|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/modularize/Modularize.cpp:328:1: constructor_uses_global_object: The constructor of global object "DisplayFileLists" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DisplayFileLists" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  326|   // Option for displaying lists of good, bad, and mixed files.
#  327|   static cl::opt<bool>
#  328|-> DisplayFileLists("display-file-lists", cl::init(false),
#  329|   cl::desc("Display lists of good files (no compile errors), problem files,"
#  330|     " and a combined list with problem files preceded by a '#'."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pp-trace/PPTrace.cpp:57:27: constructor_uses_global_object: The constructor of global object "clang::pp_trace::Cat" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::pp_trace::Cat" might be created before "Allocator" is available.
#   55|   namespace pp_trace {
#   56|   
#   57|-> static cl::OptionCategory Cat("pp-trace options");
#   58|   
#   59|   static cl::opt<std::string> Callbacks(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pp-trace/PPTrace.cpp:57:27: constructor_uses_global_object: The constructor of global object "clang::pp_trace::Cat" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "clang::pp_trace::Cat" might be created before "GlobalParser" is available.
#   55|   namespace pp_trace {
#   56|   
#   57|-> static cl::OptionCategory Cat("pp-trace options");
#   58|   
#   59|   static cl::opt<std::string> Callbacks(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pp-trace/PPTrace.cpp:57:27: constructor_uses_global_object: The constructor of global object "clang::pp_trace::Cat" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::pp_trace::Cat" might be created before "fuzzer::TPC" is available.
#   55|   namespace pp_trace {
#   56|   
#   57|-> static cl::OptionCategory Cat("pp-trace options");
#   58|   
#   59|   static cl::opt<std::string> Callbacks(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pp-trace/PPTrace.cpp:57:27: constructor_uses_global_object: The constructor of global object "clang::pp_trace::Cat" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::pp_trace::Cat" might be created before "scudo::RegionPageMap::Buffers" is available.
#   55|   namespace pp_trace {
#   56|   
#   57|-> static cl::OptionCategory Cat("pp-trace options");
#   58|   
#   59|   static cl::opt<std::string> Callbacks(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pp-trace/PPTrace.cpp:59:29: constructor_uses_global_object: The constructor of global object "clang::pp_trace::Callbacks[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::pp_trace::Callbacks[abi:cxx11]" might be created before "Allocator" is available.
#   57|   static cl::OptionCategory Cat("pp-trace options");
#   58|   
#   59|-> static cl::opt<std::string> Callbacks(
#   60|       "callbacks", cl::init("*"),
#   61|       cl::desc("Comma-separated list of globs describing the list of callbacks "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pp-trace/PPTrace.cpp:59:29: constructor_uses_global_object: The constructor of global object "clang::pp_trace::Callbacks[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::pp_trace::Callbacks[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   57|   static cl::OptionCategory Cat("pp-trace options");
#   58|   
#   59|-> static cl::opt<std::string> Callbacks(
#   60|       "callbacks", cl::init("*"),
#   61|       cl::desc("Comma-separated list of globs describing the list of callbacks "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pp-trace/PPTrace.cpp:59:29: constructor_uses_global_object: The constructor of global object "clang::pp_trace::Callbacks[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::pp_trace::Callbacks[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   57|   static cl::OptionCategory Cat("pp-trace options");
#   58|   
#   59|-> static cl::opt<std::string> Callbacks(
#   60|       "callbacks", cl::init("*"),
#   61|       cl::desc("Comma-separated list of globs describing the list of callbacks "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pp-trace/PPTrace.cpp:59:29: constructor_uses_global_object: The constructor of global object "clang::pp_trace::Callbacks[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::pp_trace::Callbacks[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   57|   static cl::OptionCategory Cat("pp-trace options");
#   58|   
#   59|-> static cl::opt<std::string> Callbacks(
#   60|       "callbacks", cl::init("*"),
#   61|       cl::desc("Comma-separated list of globs describing the list of callbacks "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pp-trace/PPTrace.cpp:67:29: constructor_uses_global_object: The constructor of global object "clang::pp_trace::OutputFileName[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::pp_trace::OutputFileName[abi:cxx11]" might be created before "Allocator" is available.
#   65|       cl::cat(Cat));
#   66|   
#   67|-> static cl::opt<std::string> OutputFileName(
#   68|       "output", cl::init("-"),
#   69|       cl::desc("Output trace to the given file name or '-' for stdout."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pp-trace/PPTrace.cpp:67:29: constructor_uses_global_object: The constructor of global object "clang::pp_trace::OutputFileName[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::pp_trace::OutputFileName[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   65|       cl::cat(Cat));
#   66|   
#   67|-> static cl::opt<std::string> OutputFileName(
#   68|       "output", cl::init("-"),
#   69|       cl::desc("Output trace to the given file name or '-' for stdout."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pp-trace/PPTrace.cpp:67:29: constructor_uses_global_object: The constructor of global object "clang::pp_trace::OutputFileName[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::pp_trace::OutputFileName[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   65|       cl::cat(Cat));
#   66|   
#   67|-> static cl::opt<std::string> OutputFileName(
#   68|       "output", cl::init("-"),
#   69|       cl::desc("Output trace to the given file name or '-' for stdout."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pp-trace/PPTrace.cpp:67:29: constructor_uses_global_object: The constructor of global object "clang::pp_trace::OutputFileName[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::pp_trace::OutputFileName[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   65|       cl::cat(Cat));
#   66|   
#   67|-> static cl::opt<std::string> OutputFileName(
#   68|       "output", cl::init("-"),
#   69|       cl::desc("Output trace to the given file name or '-' for stdout."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/gen/Main.cpp:37:18: constructor_uses_global_object: The constructor of global object "<unnamed>::Grammar[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Grammar[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   35|   };
#   36|   
#   37|-> opt<std::string> Grammar("grammar", desc("Parse a BNF grammar file."),
#   38|                            Required);
#   39|   opt<EmitType>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/gen/Main.cpp:40:5: constructor_uses_global_object: The constructor of global object "<unnamed>::Emit" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Emit" might be created before "Allocator" is available.
#   38|                            Required);
#   39|   opt<EmitType>
#   40|->     Emit(desc("which information to emit:"),
#   41|            values(clEnumValN(EmitSymbolList, "emit-symbol-list",
#   42|                              "Print nonterminal symbols (default)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/gen/Main.cpp:40:5: constructor_uses_global_object: The constructor of global object "<unnamed>::Emit" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Emit" might be created before "fuzzer::TPC" is available.
#   38|                            Required);
#   39|   opt<EmitType>
#   40|->     Emit(desc("which information to emit:"),
#   41|            values(clEnumValN(EmitSymbolList, "emit-symbol-list",
#   42|                              "Print nonterminal symbols (default)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/gen/Main.cpp:40:5: constructor_uses_global_object: The constructor of global object "<unnamed>::Emit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Emit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   38|                            Required);
#   39|   opt<EmitType>
#   40|->     Emit(desc("which information to emit:"),
#   41|            values(clEnumValN(EmitSymbolList, "emit-symbol-list",
#   42|                              "Print nonterminal symbols (default)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/gen/Main.cpp:40:5: constructor_uses_global_object: The constructor of global object "<unnamed>::Emit" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::Emit" might be created before "scudo::RegionPageMap::Buffers" is available.
#   38|                            Required);
#   39|   opt<EmitType>
#   40|->     Emit(desc("which information to emit:"),
#   41|            values(clEnumValN(EmitSymbolList, "emit-symbol-list",
#   42|                              "Print nonterminal symbols (default)"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/gen/Main.cpp:46:18: constructor_uses_global_object: The constructor of global object "<unnamed>::OutputFilename[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::OutputFilename[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   44|                              "Print the BNF grammar content as a string")));
#   45|   
#   46|-> opt<std::string> OutputFilename("o", init("-"), desc("Output"),
#   47|                                   value_desc("file"));
#   48|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/lib/Token.cpp:98:3: var_decl: Declaring variable "Opts".
llvm-project-19.0.0.src/clang-tools-extra/pseudo/lib/Token.cpp:115:3: uninit_use: Using uninitialized value "Opts". Field "Opts.GPUDefaultStream" is uninitialized.
#  113|     Opts.WChar = true;
#  114|   
#  115|->   return Opts;
#  116|   }
#  117|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/lib/cli/CLI.cpp:16:35: constructor_uses_global_object: The constructor of global object "Grammar[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Grammar[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   14|   #include "llvm/Support/MemoryBuffer.h"
#   15|   
#   16|-> static llvm::cl::opt<std::string> Grammar(
#   17|       "grammar",
#   18|       llvm::cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/tool/ClangPseudo.cpp:36:18: constructor_uses_global_object: The constructor of global object "PrintGrammar" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintGrammar" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   34|   using llvm::cl::opt;
#   35|   
#   36|-> static opt<bool> PrintGrammar("print-grammar", desc("Print the grammar"));
#   37|   static opt<bool> PrintGraph("print-graph",
#   38|                               desc("Print the LR graph for the grammar"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/tool/ClangPseudo.cpp:37:18: constructor_uses_global_object: The constructor of global object "PrintGraph" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintGraph" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   35|   
#   36|   static opt<bool> PrintGrammar("print-grammar", desc("Print the grammar"));
#   37|-> static opt<bool> PrintGraph("print-graph",
#   38|                               desc("Print the LR graph for the grammar"));
#   39|   static opt<bool> PrintTable("print-table",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/tool/ClangPseudo.cpp:39:18: constructor_uses_global_object: The constructor of global object "PrintTable" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintTable" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   37|   static opt<bool> PrintGraph("print-graph",
#   38|                               desc("Print the LR graph for the grammar"));
#   39|-> static opt<bool> PrintTable("print-table",
#   40|                               desc("Print the LR table for the grammar"));
#   41|   static opt<std::string> Source("source", desc("Source file"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/tool/ClangPseudo.cpp:41:25: constructor_uses_global_object: The constructor of global object "Source[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Source[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   39|   static opt<bool> PrintTable("print-table",
#   40|                               desc("Print the LR table for the grammar"));
#   41|-> static opt<std::string> Source("source", desc("Source file"));
#   42|   static opt<bool> PrintSource("print-source", desc("Print token stream"));
#   43|   static opt<bool> PrintTokens("print-tokens", desc("Print detailed token info"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/tool/ClangPseudo.cpp:42:18: constructor_uses_global_object: The constructor of global object "PrintSource" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintSource" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   40|                               desc("Print the LR table for the grammar"));
#   41|   static opt<std::string> Source("source", desc("Source file"));
#   42|-> static opt<bool> PrintSource("print-source", desc("Print token stream"));
#   43|   static opt<bool> PrintTokens("print-tokens", desc("Print detailed token info"));
#   44|   static opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/tool/ClangPseudo.cpp:43:18: constructor_uses_global_object: The constructor of global object "PrintTokens" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintTokens" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   41|   static opt<std::string> Source("source", desc("Source file"));
#   42|   static opt<bool> PrintSource("print-source", desc("Print token stream"));
#   43|-> static opt<bool> PrintTokens("print-tokens", desc("Print detailed token info"));
#   44|   static opt<bool>
#   45|       PrintDirectiveTree("print-directive-tree",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/tool/ClangPseudo.cpp:45:5: constructor_uses_global_object: The constructor of global object "PrintDirectiveTree" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintDirectiveTree" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   43|   static opt<bool> PrintTokens("print-tokens", desc("Print detailed token info"));
#   44|   static opt<bool>
#   45|->     PrintDirectiveTree("print-directive-tree",
#   46|                         desc("Print directive structure of source code"));
#   47|   static opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/tool/ClangPseudo.cpp:48:5: constructor_uses_global_object: The constructor of global object "StripDirectives" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StripDirectives" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   46|                         desc("Print directive structure of source code"));
#   47|   static opt<bool>
#   48|->     StripDirectives("strip-directives",
#   49|                       desc("Strip directives and select conditional sections"));
#   50|   static opt<bool> Disambiguate("disambiguate",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/tool/ClangPseudo.cpp:50:18: constructor_uses_global_object: The constructor of global object "Disambiguate" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Disambiguate" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   48|       StripDirectives("strip-directives",
#   49|                       desc("Strip directives and select conditional sections"));
#   50|-> static opt<bool> Disambiguate("disambiguate",
#   51|                                 desc("Choose best tree from parse forest"));
#   52|   static opt<bool> PrintStatistics("print-statistics", desc("Print GLR parser statistics"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/tool/ClangPseudo.cpp:52:18: constructor_uses_global_object: The constructor of global object "PrintStatistics" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintStatistics" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   50|   static opt<bool> Disambiguate("disambiguate",
#   51|                                 desc("Choose best tree from parse forest"));
#   52|-> static opt<bool> PrintStatistics("print-statistics", desc("Print GLR parser statistics"));
#   53|   static opt<bool> PrintForest("print-forest", desc("Print parse forest"));
#   54|   static opt<bool> ForestAbbrev("forest-abbrev", desc("Abbreviate parse forest"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/tool/ClangPseudo.cpp:53:18: constructor_uses_global_object: The constructor of global object "PrintForest" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintForest" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   51|                                 desc("Choose best tree from parse forest"));
#   52|   static opt<bool> PrintStatistics("print-statistics", desc("Print GLR parser statistics"));
#   53|-> static opt<bool> PrintForest("print-forest", desc("Print parse forest"));
#   54|   static opt<bool> ForestAbbrev("forest-abbrev", desc("Abbreviate parse forest"),
#   55|                                 init(true));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/tool/ClangPseudo.cpp:54:18: constructor_uses_global_object: The constructor of global object "ForestAbbrev" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ForestAbbrev" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   52|   static opt<bool> PrintStatistics("print-statistics", desc("Print GLR parser statistics"));
#   53|   static opt<bool> PrintForest("print-forest", desc("Print parse forest"));
#   54|-> static opt<bool> ForestAbbrev("forest-abbrev", desc("Abbreviate parse forest"),
#   55|                                 init(true));
#   56|   static opt<std::string> HTMLForest("html-forest",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/tool/ClangPseudo.cpp:56:25: constructor_uses_global_object: The constructor of global object "HTMLForest[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HTMLForest[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   54|   static opt<bool> ForestAbbrev("forest-abbrev", desc("Abbreviate parse forest"),
#   55|                                 init(true));
#   56|-> static opt<std::string> HTMLForest("html-forest",
#   57|                                      desc("output file for HTML forest"));
#   58|   static opt<std::string> StartSymbol("start-symbol",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/tool/ClangPseudo.cpp:58:25: constructor_uses_global_object: The constructor of global object "StartSymbol[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StartSymbol[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   56|   static opt<std::string> HTMLForest("html-forest",
#   57|                                      desc("output file for HTML forest"));
#   58|-> static opt<std::string> StartSymbol("start-symbol",
#   59|                                       desc("Specify the start symbol to parse"),
#   60|                                       init("translation-unit"));

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/unittests/BracketTest.cpp:45:8: address_of: Taking address with "*__begin2" yields a singleton pointer.
llvm-project-19.0.0.src/clang-tools-extra/pseudo/unittests/BracketTest.cpp:45:8: assign: Assigning: "Tok" = "*__begin2".
llvm-project-19.0.0.src/clang-tools-extra/pseudo/unittests/BracketTest.cpp:50:7: callee_ptr_arith: Passing "Tok" to function "pair" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
#   48|       else if (Tok.Pair < 0) {
#   49|         ASSERT_FALSE(Stack.empty()) << Tok;
#   50|->       ASSERT_EQ(Stack.back(), Tok.pair())
#   51|             << *Stack.back() << " != " << *Tok.pair() << " = pair of " << Tok;
#   52|         Stack.pop_back();

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/unittests/BracketTest.cpp:60:8: address_of: Taking address with "*__begin2" yields a singleton pointer.
llvm-project-19.0.0.src/clang-tools-extra/pseudo/unittests/BracketTest.cpp:60:8: assign: Assigning: "Tok" = "*__begin2".
llvm-project-19.0.0.src/clang-tools-extra/pseudo/unittests/BracketTest.cpp:83:5: callee_ptr_arith: Passing "Tok" to function "pair" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
#   81|       }();
#   82|       EXPECT_EQ(Tok.Pair > 0, Want.first) << Tok;
#   83|->     EXPECT_EQ(Tok.pair()->Kind, Want.second) << Tok;
#   84|     }
#   85|   }

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/pseudo/unittests/BracketTest.cpp:110:1: constructor_uses_global_object: The constructor of global object "clang::pseudo::Bracket_SimplePair_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::pseudo::Bracket_SimplePair_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  108|   }
#  109|   
#  110|-> TEST(Bracket, SimplePair) {
#  111|     verifyBrackets("^{ ^[ ^( ^)  ^( ^) ^] ^}");
#  112|     verifyBrackets(") ^{ ^[ ^] ^} (");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/tool-template/ToolTemplate.cpp:87:22: constructor_uses_global_object: The constructor of global object "CommonHelp" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "CommonHelp" might be created before "GlobalParser" is available.
#   85|   
#   86|   // Set up the command line options
#   87|-> static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   88|   static cl::OptionCategory ToolTemplateCategory("tool-template options");
#   89|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/tool-template/ToolTemplate.cpp:88:27: constructor_uses_global_object: The constructor of global object "ToolTemplateCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ToolTemplateCategory" might be created before "Allocator" is available.
#   86|   // Set up the command line options
#   87|   static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   88|-> static cl::OptionCategory ToolTemplateCategory("tool-template options");
#   89|   
#   90|   int main(int argc, const char **argv) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/tool-template/ToolTemplate.cpp:88:27: constructor_uses_global_object: The constructor of global object "ToolTemplateCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "ToolTemplateCategory" might be created before "GlobalParser" is available.
#   86|   // Set up the command line options
#   87|   static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   88|-> static cl::OptionCategory ToolTemplateCategory("tool-template options");
#   89|   
#   90|   int main(int argc, const char **argv) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/tool-template/ToolTemplate.cpp:88:27: constructor_uses_global_object: The constructor of global object "ToolTemplateCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ToolTemplateCategory" might be created before "fuzzer::TPC" is available.
#   86|   // Set up the command line options
#   87|   static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   88|-> static cl::OptionCategory ToolTemplateCategory("tool-template options");
#   89|   
#   90|   int main(int argc, const char **argv) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/tool-template/ToolTemplate.cpp:88:27: constructor_uses_global_object: The constructor of global object "ToolTemplateCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ToolTemplateCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   86|   // Set up the command line options
#   87|   static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   88|-> static cl::OptionCategory ToolTemplateCategory("tool-template options");
#   89|   
#   90|   int main(int argc, const char **argv) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-apply-replacements/ApplyReplacementsTest.cpp:34:1: constructor_uses_global_object: The constructor of global object "clang::tooling::ApplyReplacementsTest_mergeDiagnosticsWithNoFixes_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tooling::ApplyReplacementsTest_mergeDiagnosticsWithNoFixes_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   32|   // Test to ensure diagnostics with no fixes, will be merged correctly
#   33|   // before applying.
#   34|-> TEST(ApplyReplacementsTest, mergeDiagnosticsWithNoFixes) {
#   35|     IntrusiveRefCntPtr<DiagnosticOptions> DiagOpts(new DiagnosticOptions());
#   36|     DiagnosticsEngine Diagnostics(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/BitcodeTest.cpp:57:1: constructor_uses_global_object: The constructor of global object "clang::doc::BitcodeTest_emitNamespaceInfoBitcode_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::BitcodeTest_emitNamespaceInfoBitcode_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   55|   }
#   56|   
#   57|-> TEST(BitcodeTest, emitNamespaceInfoBitcode) {
#   58|     NamespaceInfo I;
#   59|     I.Name = "r";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/BitcodeTest.cpp:75:1: constructor_uses_global_object: The constructor of global object "clang::doc::BitcodeTest_emitRecordInfoBitcode_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::BitcodeTest_emitRecordInfoBitcode_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   73|   }
#   74|   
#   75|-> TEST(BitcodeTest, emitRecordInfoBitcode) {
#   76|     RecordInfo I;
#   77|     I.Name = "r";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/BitcodeTest.cpp:117:1: constructor_uses_global_object: The constructor of global object "clang::doc::BitcodeTest_emitFunctionInfoBitcode_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::BitcodeTest_emitFunctionInfoBitcode_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  115|   }
#  116|   
#  117|-> TEST(BitcodeTest, emitFunctionInfoBitcode) {
#  118|     FunctionInfo I;
#  119|     I.Name = "f";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/BitcodeTest.cpp:137:1: constructor_uses_global_object: The constructor of global object "clang::doc::BitcodeTest_emitMethodInfoBitcode_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::BitcodeTest_emitMethodInfoBitcode_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  135|   }
#  136|   
#  137|-> TEST(BitcodeTest, emitMethodInfoBitcode) {
#  138|     FunctionInfo I;
#  139|     I.Name = "f";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/BitcodeTest.cpp:159:1: constructor_uses_global_object: The constructor of global object "clang::doc::BitcodeTest_emitEnumInfoBitcode_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::BitcodeTest_emitEnumInfoBitcode_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  157|   }
#  158|   
#  159|-> TEST(BitcodeTest, emitEnumInfoBitcode) {
#  160|     EnumInfo I;
#  161|     I.Name = "e";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/BitcodeTest.cpp:177:1: constructor_uses_global_object: The constructor of global object "clang::doc::BitcodeTest_emitTypedefInfoBitcode_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::BitcodeTest_emitTypedefInfoBitcode_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  175|   }
#  176|   
#  177|-> TEST(BitcodeTest, emitTypedefInfoBitcode) {
#  178|     TypedefInfo I;
#  179|     I.Name = "MyInt";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/BitcodeTest.cpp:215:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTest_emitInfoWithCommentBitcode_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTest_emitInfoWithCommentBitcode_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  213|   }
#  214|   
#  215|-> TEST(SerializeTest, emitInfoWithCommentBitcode) {
#  216|     FunctionInfo F;
#  217|     F.Name = "F";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/GeneratorTest.cpp:18:1: constructor_uses_global_object: The constructor of global object "clang::doc::GeneratorTest_emitIndex_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::GeneratorTest_emitIndex_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   16|   namespace doc {
#   17|   
#   18|-> TEST(GeneratorTest, emitIndex) {
#   19|     Index Idx;
#   20|     auto InfoA = std::make_unique<Info>();

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/GeneratorTest.cpp:73:1: constructor_uses_global_object: The constructor of global object "clang::doc::GeneratorTest_sortIndex_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::GeneratorTest_sortIndex_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   71|   }
#   72|   
#   73|-> TEST(GeneratorTest, sortIndex) {
#   74|     Index Idx;
#   75|     Idx.Children.emplace_back("b");

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/HTMLGeneratorTest.cpp:32:3: var_decl: Declaring variable "CDCtx".
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/HTMLGeneratorTest.cpp:38:3: uninit_use: Using uninitialized value "CDCtx". Field "CDCtx.Idx.Path.InlineElts" is uninitialized.
#   36|         "../share/clang/clang-doc-default-stylesheet.css");
#   37|     CDCtx.JsScripts.emplace_back("index.js");
#   38|->   return CDCtx;
#   39|   }
#   40|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/HTMLGeneratorTest.cpp:41:1: constructor_uses_global_object: The constructor of global object "clang::doc::HTMLGeneratorTest_emitNamespaceHTML_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::HTMLGeneratorTest_emitNamespaceHTML_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   39|   }
#   40|   
#   41|-> TEST(HTMLGeneratorTest, emitNamespaceHTML) {
#   42|     NamespaceInfo I;
#   43|     I.Name = "Namespace";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/HTMLGeneratorTest.cpp:145:1: constructor_uses_global_object: The constructor of global object "clang::doc::HTMLGeneratorTest_emitRecordHTML_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::HTMLGeneratorTest_emitRecordHTML_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  143|   }
#  144|   
#  145|-> TEST(HTMLGeneratorTest, emitRecordHTML) {
#  146|     RecordInfo I;
#  147|     I.Name = "r";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/HTMLGeneratorTest.cpp:264:1: constructor_uses_global_object: The constructor of global object "clang::doc::HTMLGeneratorTest_emitFunctionHTML_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::HTMLGeneratorTest_emitFunctionHTML_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  262|   }
#  263|   
#  264|-> TEST(HTMLGeneratorTest, emitFunctionHTML) {
#  265|     FunctionInfo I;
#  266|     I.Name = "f";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/HTMLGeneratorTest.cpp:318:1: constructor_uses_global_object: The constructor of global object "clang::doc::HTMLGeneratorTest_emitEnumHTML_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::HTMLGeneratorTest_emitEnumHTML_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  316|   }
#  317|   
#  318|-> TEST(HTMLGeneratorTest, emitEnumHTML) {
#  319|     EnumInfo I;
#  320|     I.Name = "e";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/HTMLGeneratorTest.cpp:367:1: constructor_uses_global_object: The constructor of global object "clang::doc::HTMLGeneratorTest_emitCommentHTML_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::HTMLGeneratorTest_emitCommentHTML_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  365|   }
#  366|   
#  367|-> TEST(HTMLGeneratorTest, emitCommentHTML) {
#  368|     FunctionInfo I;
#  369|     I.Name = "f";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/MDGeneratorTest.cpp:24:1: constructor_uses_global_object: The constructor of global object "clang::doc::MDGeneratorTest_emitNamespaceMD_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::MDGeneratorTest_emitNamespaceMD_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   22|   }
#   23|   
#   24|-> TEST(MDGeneratorTest, emitNamespaceMD) {
#   25|     NamespaceInfo I;
#   26|     I.Name = "Namespace";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/MDGeneratorTest.cpp:80:1: constructor_uses_global_object: The constructor of global object "clang::doc::MDGeneratorTest_emitRecordMD_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::MDGeneratorTest_emitRecordMD_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   78|   }
#   79|   
#   80|-> TEST(MDGeneratorTest, emitRecordMD) {
#   81|     RecordInfo I;
#   82|     I.Name = "r";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/MDGeneratorTest.cpp:147:1: constructor_uses_global_object: The constructor of global object "clang::doc::MDGeneratorTest_emitFunctionMD_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::MDGeneratorTest_emitFunctionMD_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  145|   }
#  146|   
#  147|-> TEST(MDGeneratorTest, emitFunctionMD) {
#  148|     FunctionInfo I;
#  149|     I.Name = "f";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/MDGeneratorTest.cpp:179:1: constructor_uses_global_object: The constructor of global object "clang::doc::MDGeneratorTest_emitEnumMD_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::MDGeneratorTest_emitEnumMD_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  177|   }
#  178|   
#  179|-> TEST(MDGeneratorTest, emitEnumMD) {
#  180|     EnumInfo I;
#  181|     I.Name = "e";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/MDGeneratorTest.cpp:210:1: constructor_uses_global_object: The constructor of global object "clang::doc::MDGeneratorTest_emitCommentMD_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::MDGeneratorTest_emitCommentMD_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  208|   }
#  209|   
#  210|-> TEST(MDGeneratorTest, emitCommentMD) {
#  211|     FunctionInfo I;
#  212|     I.Name = "f";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/MergeTest.cpp:16:1: constructor_uses_global_object: The constructor of global object "clang::doc::MergeTest_mergeNamespaceInfos_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::MergeTest_mergeNamespaceInfos_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   14|   namespace doc {
#   15|   
#   16|-> TEST(MergeTest, mergeNamespaceInfos) {
#   17|     NamespaceInfo One;
#   18|     One.Name = "Namespace";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/MergeTest.cpp:78:1: constructor_uses_global_object: The constructor of global object "clang::doc::MergeTest_mergeRecordInfos_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::MergeTest_mergeRecordInfos_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   76|   }
#   77|   
#   78|-> TEST(MergeTest, mergeRecordInfos) {
#   79|     RecordInfo One;
#   80|     One.Name = "r";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/MergeTest.cpp:156:1: constructor_uses_global_object: The constructor of global object "clang::doc::MergeTest_mergeFunctionInfos_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::MergeTest_mergeFunctionInfos_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  154|   }
#  155|   
#  156|-> TEST(MergeTest, mergeFunctionInfos) {
#  157|     FunctionInfo One;
#  158|     One.Name = "f";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/MergeTest.cpp:231:1: constructor_uses_global_object: The constructor of global object "clang::doc::MergeTest_mergeEnumInfos_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::MergeTest_mergeEnumInfos_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  229|   }
#  230|   
#  231|-> TEST(MergeTest, mergeEnumInfos) {
#  232|     EnumInfo One;
#  233|     One.Name = "e";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:108:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTest_emitNamespaceInfo_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTest_emitNamespaceInfo_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  106|   
#  107|   // Test serialization of namespace declarations.
#  108|-> TEST(SerializeTest, emitNamespaceInfo) {
#  109|     EmittedInfoList Infos;
#  110|     ExtractInfosFromCode("namespace A { namespace B { void f() {} } }", 5,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:135:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTest_emitAnonymousNamespaceInfo_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTest_emitAnonymousNamespaceInfo_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  133|   }
#  134|   
#  135|-> TEST(SerializeTest, emitAnonymousNamespaceInfo) {
#  136|     EmittedInfoList Infos;
#  137|     ExtractInfosFromCode("namespace { }", 2, /*Public=*/false, Infos);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:146:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTest_emitRecordInfo_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTest_emitRecordInfo_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  144|   
#  145|   // Test serialization of record declarations.
#  146|-> TEST(SerializeTest, emitRecordInfo) {
#  147|     EmittedInfoList Infos;
#  148|     ExtractInfosFromCode(R"raw(class E {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:263:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTest_emitEnumInfo_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTest_emitEnumInfo_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  261|   
#  262|   // Test serialization of enum declarations.
#  263|-> TEST(SerializeTest, emitEnumInfo) {
#  264|     EmittedInfoList Infos;
#  265|     ExtractInfosFromCode("enum E { X, Y }; enum class G { A, B };", 2,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:290:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTest_emitUndefinedRecordInfo_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTest_emitUndefinedRecordInfo_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  288|   }
#  289|   
#  290|-> TEST(SerializeTest, emitUndefinedRecordInfo) {
#  291|     EmittedInfoList Infos;
#  292|     ExtractInfosFromCode("class E;", 2, /*Public=*/false, Infos);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:303:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTest_emitRecordMemberInfo_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTest_emitRecordMemberInfo_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  301|   }
#  302|   
#  303|-> TEST(SerializeTest, emitRecordMemberInfo) {
#  304|     EmittedInfoList Infos;
#  305|     ExtractInfosFromCode("struct E { int I; };", 2, /*Public=*/false, Infos);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:318:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTest_emitInternalRecordInfo_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTest_emitInternalRecordInfo_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  316|   }
#  317|   
#  318|-> TEST(SerializeTest, emitInternalRecordInfo) {
#  319|     EmittedInfoList Infos;
#  320|     ExtractInfosFromCode("class E { class G {}; };", 4, /*Public=*/false, Infos);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:342:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTest_emitPublicAnonymousNamespaceInfo_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTest_emitPublicAnonymousNamespaceInfo_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  340|   }
#  341|   
#  342|-> TEST(SerializeTest, emitPublicAnonymousNamespaceInfo) {
#  343|     EmittedInfoList Infos;
#  344|     ExtractInfosFromCode("namespace { class A; }", 0, /*Public=*/true, Infos);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:347:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTest_emitPublicFunctionInternalInfo_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTest_emitPublicFunctionInternalInfo_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  345|   }
#  346|   
#  347|-> TEST(SerializeTest, emitPublicFunctionInternalInfo) {
#  348|     EmittedInfoList Infos;
#  349|     ExtractInfosFromCode("int F() { class G {}; return 0; };", 1, /*Public=*/true,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:363:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTest_emitInlinedFunctionInfo_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTest_emitInlinedFunctionInfo_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  361|   }
#  362|   
#  363|-> TEST(SerializeTest, emitInlinedFunctionInfo) {
#  364|     EmittedInfoList Infos;
#  365|     ExtractInfosFromCode("inline void F(int I) { };", 1, /*Public=*/true, Infos);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:379:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTest_emitInheritedRecordInfo_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTest_emitInheritedRecordInfo_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  377|   }
#  378|   
#  379|-> TEST(SerializeTest, emitInheritedRecordInfo) {
#  380|     EmittedInfoList Infos;
#  381|     ExtractInfosFromCode(R"raw(class F { protected: void set(int N); };

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:521:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTest_emitModulePublicLFunctions_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTest_emitModulePublicLFunctions_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  519|   }
#  520|   
#  521|-> TEST(SerializeTest, emitModulePublicLFunctions) {
#  522|     EmittedInfoList Infos;
#  523|     std::vector<std::string> Args;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:559:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTest_emitChildRecords_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTest_emitChildRecords_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  557|   
#  558|   // Test serialization of child records in namespaces and other records
#  559|-> TEST(SerializeTest, emitChildRecords) {
#  560|     EmittedInfoList Infos;
#  561|     ExtractInfosFromCode("class A { class B {}; }; namespace { class C {}; } ", 8,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:586:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTest_emitChildNamespaces_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTest_emitChildNamespaces_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  584|   
#  585|   // Test serialization of child namespaces
#  586|-> TEST(SerializeTest, emitChildNamespaces) {
#  587|     EmittedInfoList Infos;
#  588|     ExtractInfosFromCode("namespace A { namespace B { } }", 4, /*Public=*/false,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:604:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTests_emitTypedefs_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTests_emitTypedefs_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  602|   }
#  603|   
#  604|-> TEST(SerializeTests, emitTypedefs) {
#  605|     EmittedInfoList Infos;
#  606|     ExtractInfosFromCode("typedef int MyInt; using MyDouble = double;", 2,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:631:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTests_emitFunctionTemplate_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTests_emitFunctionTemplate_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  629|   }
#  630|   
#  631|-> TEST(SerializeTests, emitFunctionTemplate) {
#  632|     EmittedInfoList Infos;
#  633|     // A template and a specialization.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/SerializeTest.cpp:671:1: constructor_uses_global_object: The constructor of global object "clang::doc::SerializeTests_emitClassTemplate_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::SerializeTests_emitClassTemplate_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  669|   }
#  670|   
#  671|-> TEST(SerializeTests, emitClassTemplate) {
#  672|     EmittedInfoList Infos;
#  673|     // This will generate 2x the number of infos: each Record will be followed by

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/YAMLGeneratorTest.cpp:25:1: constructor_uses_global_object: The constructor of global object "clang::doc::YAMLGeneratorTest_emitNamespaceYAML_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::YAMLGeneratorTest_emitNamespaceYAML_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   23|   }
#   24|   
#   25|-> TEST(YAMLGeneratorTest, emitNamespaceYAML) {
#   26|     NamespaceInfo I;
#   27|     I.Name = "Namespace";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/YAMLGeneratorTest.cpp:80:1: constructor_uses_global_object: The constructor of global object "clang::doc::YAMLGeneratorTest_emitRecordYAML_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::YAMLGeneratorTest_emitRecordYAML_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   78|   }
#   79|   
#   80|-> TEST(YAMLGeneratorTest, emitRecordYAML) {
#   81|     RecordInfo I;
#   82|     I.Name = "r";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/YAMLGeneratorTest.cpp:205:1: constructor_uses_global_object: The constructor of global object "clang::doc::YAMLGeneratorTest_emitFunctionYAML_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::YAMLGeneratorTest_emitFunctionYAML_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  203|   }
#  204|   
#  205|-> TEST(YAMLGeneratorTest, emitFunctionYAML) {
#  206|     FunctionInfo I;
#  207|     I.Name = "f";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/YAMLGeneratorTest.cpp:270:1: constructor_uses_global_object: The constructor of global object "clang::doc::YAMLGeneratorTest_emitSimpleEnumYAML_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::YAMLGeneratorTest_emitSimpleEnumYAML_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  268|   // enum e { X };
#  269|   // }
#  270|-> TEST(YAMLGeneratorTest, emitSimpleEnumYAML) {
#  271|     EnumInfo I;
#  272|     I.Name = "e";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/YAMLGeneratorTest.cpp:311:1: constructor_uses_global_object: The constructor of global object "clang::doc::YAMLGeneratorTest_enumTypedScopedEnumYAML_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::YAMLGeneratorTest_enumTypedScopedEnumYAML_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  309|   // Tests the equivalent of:
#  310|   // enum class e : short { X = FOO_BAR + 2 };
#  311|-> TEST(YAMLGeneratorTest, enumTypedScopedEnumYAML) {
#  312|     EnumInfo I;
#  313|     I.Name = "e";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/YAMLGeneratorTest.cpp:343:1: constructor_uses_global_object: The constructor of global object "clang::doc::YAMLGeneratorTest_enumTypedefYAML_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::YAMLGeneratorTest_enumTypedefYAML_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  341|   }
#  342|   
#  343|-> TEST(YAMLGeneratorTest, enumTypedefYAML) {
#  344|     TypedefInfo I;
#  345|     I.Name = "MyUsing";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-doc/YAMLGeneratorTest.cpp:368:1: constructor_uses_global_object: The constructor of global object "clang::doc::YAMLGeneratorTest_emitCommentYAML_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::doc::YAMLGeneratorTest_emitCommentYAML_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  366|   }
#  367|   
#  368|-> TEST(YAMLGeneratorTest, emitCommentYAML) {
#  369|     FunctionInfo I;
#  370|     I.Name = "f";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-include-fixer/find-all-symbols/FindAllSymbolsTests.cpp:141:1: constructor_uses_global_object: The constructor of global object "clang::find_all_symbols::FindAllSymbolsTest_VariableSymbols_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::find_all_symbols::FindAllSymbolsTest_VariableSymbols_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  139|   };
#  140|   
#  141|-> TEST_F(FindAllSymbolsTest, VariableSymbols) {
#  142|     static const char Header[] = R"(
#  143|         extern int xargc;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-include-fixer/find-all-symbols/FindAllSymbolsTests.cpp:171:1: constructor_uses_global_object: The constructor of global object "clang::find_all_symbols::FindAllSymbolsTest_ExternCSymbols_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::find_all_symbols::FindAllSymbolsTest_ExternCSymbols_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  169|   }
#  170|   
#  171|-> TEST_F(FindAllSymbolsTest, ExternCSymbols) {
#  172|     static const char Header[] = R"(
#  173|         extern "C" {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-include-fixer/find-all-symbols/FindAllSymbolsTests.cpp:198:1: constructor_uses_global_object: The constructor of global object "clang::find_all_symbols::FindAllSymbolsTest_CXXRecordSymbols_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::find_all_symbols::FindAllSymbolsTest_CXXRecordSymbols_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  196|   }
#  197|   
#  198|-> TEST_F(FindAllSymbolsTest, CXXRecordSymbols) {
#  199|     static const char Header[] = R"(
#  200|         struct Glob {};

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-include-fixer/find-all-symbols/FindAllSymbolsTests.cpp:235:1: constructor_uses_global_object: The constructor of global object "clang::find_all_symbols::FindAllSymbolsTest_CXXRecordSymbolsTemplate_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::find_all_symbols::FindAllSymbolsTest_CXXRecordSymbolsTemplate_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  233|   }
#  234|   
#  235|-> TEST_F(FindAllSymbolsTest, CXXRecordSymbolsTemplate) {
#  236|     static const char Header[] = R"(
#  237|         template <typename T>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-include-fixer/find-all-symbols/FindAllSymbolsTests.cpp:262:1: constructor_uses_global_object: The constructor of global object "clang::find_all_symbols::FindAllSymbolsTest_DontIgnoreTemplatePartialSpecialization_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::find_all_symbols::FindAllSymbolsTest_DontIgnoreTemplatePartialSpecialization_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  260|   }
#  261|   
#  262|-> TEST_F(FindAllSymbolsTest, DontIgnoreTemplatePartialSpecialization) {
#  263|     static const char Code[] = R"(
#  264|         template<class> class Class; // undefined

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-include-fixer/find-all-symbols/FindAllSymbolsTests.cpp:280:1: constructor_uses_global_object: The constructor of global object "clang::find_all_symbols::FindAllSymbolsTest_FunctionSymbols_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::find_all_symbols::FindAllSymbolsTest_FunctionSymbols_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  278|   }
#  279|   
#  280|-> TEST_F(FindAllSymbolsTest, FunctionSymbols) {
#  281|     static const char Header[] = R"(
#  282|         namespace na {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-include-fixer/find-all-symbols/FindAllSymbolsTests.cpp:327:1: constructor_uses_global_object: The constructor of global object "clang::find_all_symbols::FindAllSymbolsTest_NamespaceTest_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::find_all_symbols::FindAllSymbolsTest_NamespaceTest_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  325|   }
#  326|   
#  327|-> TEST_F(FindAllSymbolsTest, NamespaceTest) {
#  328|     static const char Header[] = R"(
#  329|         int X1;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-include-fixer/find-all-symbols/FindAllSymbolsTests.cpp:373:1: constructor_uses_global_object: The constructor of global object "clang::find_all_symbols::FindAllSymbolsTest_DecayedTypeTest_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::find_all_symbols::FindAllSymbolsTest_DecayedTypeTest_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  371|   }
#  372|   
#  373|-> TEST_F(FindAllSymbolsTest, DecayedTypeTest) {
#  374|     static const char Header[] = "void DecayedFunc(int x[], int y[10]) {}";
#  375|     static const char Main[] = R"(int main() { DecayedFunc(nullptr, nullptr); })";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-include-fixer/find-all-symbols/FindAllSymbolsTests.cpp:383:1: constructor_uses_global_object: The constructor of global object "clang::find_all_symbols::FindAllSymbolsTest_CTypedefTest_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::find_all_symbols::FindAllSymbolsTest_CTypedefTest_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  381|   }
#  382|   
#  383|-> TEST_F(FindAllSymbolsTest, CTypedefTest) {
#  384|     static const char Header[] = R"(
#  385|         typedef unsigned size_t_;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-include-fixer/find-all-symbols/FindAllSymbolsTests.cpp:412:1: constructor_uses_global_object: The constructor of global object "clang::find_all_symbols::FindAllSymbolsTest_EnumTest_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::find_all_symbols::FindAllSymbolsTest_EnumTest_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  410|   }
#  411|   
#  412|-> TEST_F(FindAllSymbolsTest, EnumTest) {
#  413|     static const char Header[] = R"(
#  414|         enum Glob_E { G1, G2 };

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-include-fixer/find-all-symbols/FindAllSymbolsTests.cpp:485:1: constructor_uses_global_object: The constructor of global object "clang::find_all_symbols::FindAllSymbolsTest_IWYUPrivatePragmaTest_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::find_all_symbols::FindAllSymbolsTest_IWYUPrivatePragmaTest_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  483|   }
#  484|   
#  485|-> TEST_F(FindAllSymbolsTest, IWYUPrivatePragmaTest) {
#  486|     static const char Header[] = R"(
#  487|       // IWYU pragma: private, include "bar.h"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-include-fixer/find-all-symbols/FindAllSymbolsTests.cpp:502:1: constructor_uses_global_object: The constructor of global object "clang::find_all_symbols::FindAllSymbolsTest_MacroTest_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::find_all_symbols::FindAllSymbolsTest_MacroTest_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  500|   }
#  501|   
#  502|-> TEST_F(FindAllSymbolsTest, MacroTest) {
#  503|     static const char Header[] = R"(
#  504|       #define X

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-include-fixer/find-all-symbols/FindAllSymbolsTests.cpp:528:1: constructor_uses_global_object: The constructor of global object "clang::find_all_symbols::FindAllSymbolsTest_MacroTestWithIWYU_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::find_all_symbols::FindAllSymbolsTest_MacroTestWithIWYU_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  526|   }
#  527|   
#  528|-> TEST_F(FindAllSymbolsTest, MacroTestWithIWYU) {
#  529|     static const char Header[] = R"(
#  530|       // IWYU pragma: private, include "bar.h"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-include-fixer/find-all-symbols/FindAllSymbolsTests.cpp:555:1: constructor_uses_global_object: The constructor of global object "clang::find_all_symbols::FindAllSymbolsTest_NoFriendTest_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::find_all_symbols::FindAllSymbolsTest_NoFriendTest_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  553|   }
#  554|   
#  555|-> TEST_F(FindAllSymbolsTest, NoFriendTest) {
#  556|     static const char Header[] = R"(
#  557|       class WorstFriend {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-query/QueryEngineTest.cpp:50:1: constructor_uses_global_object: The constructor of global object "QueryEngineTest_Basic_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "QueryEngineTest_Basic_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   48|   };
#   49|   
#   50|-> TEST_F(QueryEngineTest, Basic) {
#   51|     DynTypedMatcher FnMatcher = functionDecl();
#   52|     DynTypedMatcher FooMatcher = functionDecl(hasName("foo1"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-query/QueryEngineTest.cpp:138:1: constructor_uses_global_object: The constructor of global object "QueryEngineTest_LetAndMatch_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "QueryEngineTest_LetAndMatch_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  136|   }
#  137|   
#  138|-> TEST_F(QueryEngineTest, LetAndMatch) {
#  139|     EXPECT_TRUE(QueryParser::parse("let x \"foo1\"", S)->run(OS, S));
#  140|     EXPECT_EQ("", OS.str());

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-query/QueryParserTest.cpp:27:1: constructor_uses_global_object: The constructor of global object "QueryParserTest_NoOp_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "QueryParserTest_NoOp_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   25|   };
#   26|   
#   27|-> TEST_F(QueryParserTest, NoOp) {
#   28|     QueryRef Q = parse("");
#   29|     EXPECT_TRUE(isa<NoOpQuery>(Q));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-query/QueryParserTest.cpp:35:1: constructor_uses_global_object: The constructor of global object "QueryParserTest_Invalid_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "QueryParserTest_Invalid_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   33|   }
#   34|   
#   35|-> TEST_F(QueryParserTest, Invalid) {
#   36|     QueryRef Q = parse("foo");
#   37|     ASSERT_TRUE(isa<InvalidQuery>(Q));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-query/QueryParserTest.cpp:41:1: constructor_uses_global_object: The constructor of global object "QueryParserTest_Help_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "QueryParserTest_Help_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   39|   }
#   40|   
#   41|-> TEST_F(QueryParserTest, Help) {
#   42|     QueryRef Q = parse("help");
#   43|     ASSERT_TRUE(isa<HelpQuery>(Q));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-query/QueryParserTest.cpp:50:1: constructor_uses_global_object: The constructor of global object "QueryParserTest_Quit_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "QueryParserTest_Quit_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   48|   }
#   49|   
#   50|-> TEST_F(QueryParserTest, Quit) {
#   51|     QueryRef Q = parse("quit");
#   52|     ASSERT_TRUE(isa<QuitQuery>(Q));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-query/QueryParserTest.cpp:62:1: constructor_uses_global_object: The constructor of global object "QueryParserTest_Set_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "QueryParserTest_Set_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   60|   }
#   61|   
#   62|-> TEST_F(QueryParserTest, Set) {
#   63|   
#   64|     bool HasIntrospection = tooling::NodeIntrospection::hasIntrospectionSupport();

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-query/QueryParserTest.cpp:99:3: overrun-local: Overrunning array of 8 bytes at byte offset 15 by dereferencing pointer "llvm::cast(Q)->Var".
#   97|     Q = parse("set output dump");
#   98|     ASSERT_TRUE(isa<SetExclusiveOutputQuery >(Q));
#   99|->   EXPECT_EQ(&QuerySession::DetailedASTOutput, cast<SetExclusiveOutputQuery>(Q)->Var);
#  100|   
#  101|     Q = parse("set output detailed-ast");

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-query/QueryParserTest.cpp:103:3: overrun-local: Overrunning array of 8 bytes at byte offset 15 by dereferencing pointer "llvm::cast(Q)->Var".
#  101|     Q = parse("set output detailed-ast");
#  102|     ASSERT_TRUE(isa<SetExclusiveOutputQuery>(Q));
#  103|->   EXPECT_EQ(&QuerySession::DetailedASTOutput, cast<SetExclusiveOutputQuery>(Q)->Var);
#  104|   
#  105|     Q = parse("enable output detailed-ast");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-query/QueryParserTest.cpp:138:1: constructor_uses_global_object: The constructor of global object "QueryParserTest_Match_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "QueryParserTest_Match_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  136|   }
#  137|   
#  138|-> TEST_F(QueryParserTest, Match) {
#  139|     QueryRef Q = parse("match decl()");
#  140|     ASSERT_TRUE(isa<MatchQuery>(Q));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-query/QueryParserTest.cpp:148:1: constructor_uses_global_object: The constructor of global object "QueryParserTest_LetUnlet_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "QueryParserTest_LetUnlet_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  146|   }
#  147|   
#  148|-> TEST_F(QueryParserTest, LetUnlet) {
#  149|     QueryRef Q = parse("let foo decl()");
#  150|     ASSERT_TRUE(isa<LetQuery>(Q));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-query/QueryParserTest.cpp:186:1: constructor_uses_global_object: The constructor of global object "QueryParserTest_Comment_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "QueryParserTest_Comment_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  184|   }
#  185|   
#  186|-> TEST_F(QueryParserTest, Comment) {
#  187|     QueryRef Q = parse("# let foo decl()");
#  188|     ASSERT_TRUE(isa<NoOpQuery>(Q));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-query/QueryParserTest.cpp:197:1: constructor_uses_global_object: The constructor of global object "QueryParserTest_Complete_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "QueryParserTest_Complete_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  195|   }
#  196|   
#  197|-> TEST_F(QueryParserTest, Complete) {
#  198|     std::vector<llvm::LineEditor::Completion> Comps =
#  199|         QueryParser::complete("", 0, QS);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-query/QueryParserTest.cpp:276:1: constructor_uses_global_object: The constructor of global object "QueryParserTest_Multiline_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "QueryParserTest_Multiline_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  274|   }
#  275|   
#  276|-> TEST_F(QueryParserTest, Multiline) {
#  277|   
#  278|     // Single string with multiple commands

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:54:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Values_Builtin_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Values_Builtin_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   52|   // ----------------------------------------------------------------------------
#   53|   
#   54|-> TEST(Values, Builtin) {
#   55|     StringRef Snippet = "int target = 0;";
#   56|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:65:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Values_TypedefBuiltin_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Values_TypedefBuiltin_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   63|               runCheckOnCode<PointeeRTransform>(Snippet));
#   64|   }
#   65|-> TEST(Values, TypedefBuiltin) {
#   66|     StringRef T = "typedef int MyInt;";
#   67|     StringRef S = "MyInt target = 0;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:80:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Values_TypedefBuiltinPointer_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Values_TypedefBuiltinPointer_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   78|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#   79|   }
#   80|-> TEST(Values, TypedefBuiltinPointer) {
#   81|     StringRef T = "typedef int* MyInt;";
#   82|     StringRef S = "MyInt target = nullptr;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:95:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Values_UsingBuiltin_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Values_UsingBuiltin_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   93|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#   94|   }
#   95|-> TEST(Values, UsingBuiltin) {
#   96|     StringRef T = "using MyInt = int;";
#   97|     StringRef S = "MyInt target = 0;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:110:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Values_UsingBuiltinPointer_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Values_UsingBuiltinPointer_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  108|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  109|   }
#  110|-> TEST(Values, UsingBuiltinPointer) {
#  111|     StringRef T = "using MyInt = int*;";
#  112|     StringRef S = "MyInt target = nullptr;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:125:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Values_AutoValue_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Values_AutoValue_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  123|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  124|   }
#  125|-> TEST(Values, AutoValue) {
#  126|     StringRef T = "int f() { return 42; }\n";
#  127|     StringRef S = "auto target = f();";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:140:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Values_AutoPointer_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Values_AutoPointer_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  138|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  139|   }
#  140|-> TEST(Values, AutoPointer) {
#  141|     StringRef T = "int* f() { return nullptr; }\n";
#  142|     StringRef S = "auto target = f();";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:155:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Values_AutoReference_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Values_AutoReference_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  153|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  154|   }
#  155|-> TEST(Values, AutoReference) {
#  156|     StringRef T = "static int global = 42; int& f() { return global; }\n";
#  157|     StringRef S = "auto target = f();";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:170:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Values_DeclTypeValue_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Values_DeclTypeValue_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  168|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  169|   }
#  170|-> TEST(Values, DeclTypeValue) {
#  171|     StringRef T = "int f() { return 42; }\n";
#  172|     StringRef S = "decltype(f()) target = f();";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:185:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Values_DeclTypePointer_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Values_DeclTypePointer_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  183|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  184|   }
#  185|-> TEST(Values, DeclTypePointer) {
#  186|     // The pointer itself will be changed to 'const'. There is no
#  187|     // way to make the pointee 'const' with this syntax.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:202:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Values_DeclTypeReference_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Values_DeclTypeReference_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  200|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  201|   }
#  202|-> TEST(Values, DeclTypeReference) {
#  203|     // Same as pointer, but the reference itself will be marked 'const'.
#  204|     // This has no effect and will result in a warning afterwards. The

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:220:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Values_Parens_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Values_Parens_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  218|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  219|   }
#  220|-> TEST(Values, Parens) {
#  221|     StringRef Snippet = "int ((target)) = 0;";
#  222|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:238:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Arrays_Builtin_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Arrays_Builtin_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  236|   // ----------------------------------------------------------------------------
#  237|   
#  238|-> TEST(Arrays, Builtin) {
#  239|     StringRef Snippet = "int target[][1] = {{1}, {2}, {3}};";
#  240|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:251:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Arrays_BuiltinParens_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Arrays_BuiltinParens_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  249|               runCheckOnCode<ValueRTransform>(Snippet));
#  250|   }
#  251|-> TEST(Arrays, BuiltinParens) {
#  252|     StringRef Snippet = "int ((target))[][1] = {{1}, {2}, {3}};";
#  253|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:264:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Arrays_Pointers_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Arrays_Pointers_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  262|               runCheckOnCode<ValueRTransform>(Snippet));
#  263|   }
#  264|-> TEST(Arrays, Pointers) {
#  265|     StringRef Snippet = "int x; int* target[] = {&x, &x, &x};";
#  266|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:277:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Arrays_PointerPointers_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Arrays_PointerPointers_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  275|               runCheckOnCode<ValueRTransform>(Snippet));
#  276|   }
#  277|-> TEST(Arrays, PointerPointers) {
#  278|     StringRef Snippet = "int* x = nullptr; int** target[] = {&x, &x, &x};";
#  279|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:290:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Arrays_PointersParens_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Arrays_PointersParens_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  288|               runCheckOnCode<ValueRTransform>(Snippet));
#  289|   }
#  290|-> TEST(Arrays, PointersParens) {
#  291|     StringRef Snippet = "int x; int* (target)[] = {&x, &x, &x};";
#  292|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:308:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Reference_LValueBuiltin_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Reference_LValueBuiltin_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  306|   // ----------------------------------------------------------------------------
#  307|   
#  308|-> TEST(Reference, LValueBuiltin) {
#  309|     StringRef Snippet = "int x = 42; int& target = x;";
#  310|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:321:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Reference_RValueBuiltin_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Reference_RValueBuiltin_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  319|               runCheckOnCode<PointeeRTransform>(Snippet));
#  320|   }
#  321|-> TEST(Reference, RValueBuiltin) {
#  322|     StringRef Snippet = "int&& target = 42;";
#  323|     EXPECT_EQ("const int&& target = 42;",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:333:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Reference_LValueToPointer_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Reference_LValueToPointer_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  331|               runCheckOnCode<PointeeRTransform>(Snippet));
#  332|   }
#  333|-> TEST(Reference, LValueToPointer) {
#  334|     StringRef Snippet = "int* p; int *& target = p;";
#  335|     EXPECT_EQ("int* p; int * const& target = p;",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:345:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Reference_LValueParens_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Reference_LValueParens_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  343|               runCheckOnCode<PointeeRTransform>(Snippet));
#  344|   }
#  345|-> TEST(Reference, LValueParens) {
#  346|     StringRef Snippet = "int x = 42; int ((& target)) = x;";
#  347|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:358:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Reference_ToArray_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Reference_ToArray_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  356|               runCheckOnCode<PointeeRTransform>(Snippet));
#  357|   }
#  358|-> TEST(Reference, ToArray) {
#  359|     StringRef ArraySnippet = "int a[4] = {1, 2, 3, 4};";
#  360|     StringRef Snippet = "int (&target)[4] = a;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:373:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Reference_Auto_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Reference_Auto_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  371|               runCheckOnCode<PointeeRTransform>(Cat(Snippet)));
#  372|   }
#  373|-> TEST(Reference, Auto) {
#  374|     StringRef T = "static int global = 42; int& f() { return global; }\n";
#  375|     StringRef S = "auto& target = f();";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:393:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Pointers_SingleBuiltin_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Pointers_SingleBuiltin_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  391|   // ----------------------------------------------------------------------------
#  392|   
#  393|-> TEST(Pointers, SingleBuiltin) {
#  394|     StringRef Snippet = "int* target = nullptr;";
#  395|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:406:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Pointers_MultiBuiltin_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Pointers_MultiBuiltin_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  404|               runCheckOnCode<PointeeRTransform>(Snippet));
#  405|   }
#  406|-> TEST(Pointers, MultiBuiltin) {
#  407|     StringRef Snippet = "int** target = nullptr;";
#  408|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:419:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Pointers_ToArray_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Pointers_ToArray_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  417|               runCheckOnCode<PointeeRTransform>(Snippet));
#  418|   }
#  419|-> TEST(Pointers, ToArray) {
#  420|     StringRef ArraySnippet = "int a[4] = {1, 2, 3, 4};";
#  421|     StringRef Snippet = "int (*target)[4] = &a;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:434:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Pointers_Parens_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Pointers_Parens_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  432|               runCheckOnCode<PointeeRTransform>(Cat(Snippet)));
#  433|   }
#  434|-> TEST(Pointers, Parens) {
#  435|     StringRef Snippet = "int ((**target)) = nullptr;";
#  436|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:447:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Pointers_Auto_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Pointers_Auto_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  445|               runCheckOnCode<PointeeRTransform>(Snippet));
#  446|   }
#  447|-> TEST(Pointers, Auto) {
#  448|     StringRef T = "int* f() { return nullptr; }\n";
#  449|     StringRef S = "auto* target = f();";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:462:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Pointers_AutoParens_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Pointers_AutoParens_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  460|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  461|   }
#  462|-> TEST(Pointers, AutoParens) {
#  463|     StringRef T = "int* f() { return nullptr; }\n";
#  464|     StringRef S = "auto (((* target))) = f();";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:477:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Pointers_FunctionPointer_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Pointers_FunctionPointer_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  475|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  476|   }
#  477|-> TEST(Pointers, FunctionPointer) {
#  478|     StringRef S = "int (*target)(float, int, double) = nullptr;";
#  479|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:494:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Pointers_MemberFunctionPointer_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Pointers_MemberFunctionPointer_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  492|               runCheckOnCode<PointeeRTransform>(S));
#  493|   }
#  494|-> TEST(Pointers, MemberFunctionPointer) {
#  495|     StringRef T = "struct A { int f() { return 1; } };";
#  496|     StringRef S = "int (A::*target)() = &A::f;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:513:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Pointers_MemberDataPointer_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Pointers_MemberDataPointer_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  511|               runCheckOnCode<ValueLTransform>(Cat(S)));
#  512|   }
#  513|-> TEST(Pointers, MemberDataPointer) {
#  514|     StringRef T = "struct A { int member = 0; };";
#  515|     StringRef S = "int A::*target = &A::member;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:537:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::TagTypes_Struct_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::TagTypes_Struct_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  535|   // ----------------------------------------------------------------------------
#  536|   
#  537|-> TEST(TagTypes, Struct) {
#  538|     StringRef T = "struct Foo { int data; int method(); };\n";
#  539|     StringRef S = "struct Foo target{0};";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:596:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::TagTypes_Class_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::TagTypes_Class_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  594|               runCheckOnCode<PointeeRTransform>(S));
#  595|   }
#  596|-> TEST(TagTypes, Class) {
#  597|     StringRef T = "class Foo { int data; int method(); };\n";
#  598|     StringRef S = "class Foo target;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:631:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::TagTypes_Enum_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::TagTypes_Enum_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  629|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  630|   }
#  631|-> TEST(TagTypes, Enum) {
#  632|     StringRef T = "enum Foo { N_ONE, N_TWO, N_THREE };\n";
#  633|     StringRef S = "enum Foo target;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:666:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::TagTypes_Union_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::TagTypes_Union_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  664|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  665|   }
#  666|-> TEST(TagTypes, Union) {
#  667|     StringRef T = "union Foo { int yay; float nej; };\n";
#  668|     StringRef S = "union Foo target;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:706:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Macro_AllInMacro_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Macro_AllInMacro_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  704|   // ----------------------------------------------------------------------------
#  705|   
#  706|-> TEST(Macro, AllInMacro) {
#  707|     StringRef T = "#define DEFINE_VARIABLE int target = 42\n";
#  708|     StringRef S = "DEFINE_VARIABLE;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:717:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Macro_MacroParameter_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Macro_MacroParameter_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  715|     EXPECT_EQ(Cat("DEFINE_VARIABLE;"), runCheckOnCode<PointeeRTransform>(Cat(S)));
#  716|   }
#  717|-> TEST(Macro, MacroParameter) {
#  718|     StringRef T = "#define DEFINE_VARIABLE(X) int X = 42\n";
#  719|     StringRef S = "DEFINE_VARIABLE(target);";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:732:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Macro_MacroTypeValue_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Macro_MacroTypeValue_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  730|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  731|   }
#  732|-> TEST(Macro, MacroTypeValue) {
#  733|     StringRef T = "#define BAD_TYPEDEF int\n";
#  734|     StringRef S = "BAD_TYPEDEF target = 42;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:747:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Macro_MacroTypePointer_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Macro_MacroTypePointer_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  745|               runCheckOnCode<ValueRTransform>(Cat(S)));
#  746|   }
#  747|-> TEST(Macro, MacroTypePointer) {
#  748|     StringRef T = "#define BAD_TYPEDEF int *\n";
#  749|     StringRef S = "BAD_TYPEDEF target = nullptr;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:764:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Macro_MacroTypeReference_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Macro_MacroTypeReference_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  762|               runCheckOnCode<PointeeLTransform>(Cat(S)));
#  763|   }
#  764|-> TEST(Macro, MacroTypeReference) {
#  765|     StringRef T = "static int g = 42;\n#define BAD_TYPEDEF int&\n";
#  766|     StringRef S = "BAD_TYPEDEF target = g;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:782:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Macro_Variable_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Macro_Variable_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  780|   }
#  781|   // This failed in LLVM.
#  782|-> TEST(Macro, Variable) {
#  783|     StringRef M = "#define DEBUG(X) do { if (1) { X; } } while (0)\n";
#  784|     StringRef F = "void foo() ";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:794:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Macro_RangeLoop_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Macro_RangeLoop_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  792|               runCheckOnCode<ValueRTransform>(Cat(V)));
#  793|   }
#  794|-> TEST(Macro, RangeLoop) {
#  795|     StringRef M = "#define DEBUG(X) do { if (1) { X; }} while (false)\n";
#  796|     StringRef F = "void foo() { char array[] = {'a', 'b', 'c'}; ";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:812:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Template_TemplateVariable_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Template_TemplateVariable_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  810|   // ----------------------------------------------------------------------------
#  811|   
#  812|-> TEST(Template, TemplateVariable) {
#  813|     StringRef T = "template <typename T> T target = 3.1415;";
#  814|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:825:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Template_FunctionValue_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Template_FunctionValue_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  823|               runCheckOnCode<PointeeRTransform>(T));
#  824|   }
#  825|-> TEST(Template, FunctionValue) {
#  826|     StringRef T = "template <typename T> void f(T v) \n";
#  827|     StringRef S = "{ T target = v; }";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:840:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Template_FunctionPointer_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Template_FunctionPointer_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  838|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  839|   }
#  840|-> TEST(Template, FunctionPointer) {
#  841|     StringRef T = "template <typename T> void f(T* v) \n";
#  842|     StringRef S = "{ T* target = v; }";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:855:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Template_FunctionReference_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Template_FunctionReference_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  853|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  854|   }
#  855|-> TEST(Template, FunctionReference) {
#  856|     StringRef T = "template <typename T> void f(T& v) \n";
#  857|     StringRef S = "{ T& target = v; }";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:870:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Template_MultiInstantiationsFunction_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Template_MultiInstantiationsFunction_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  868|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  869|   }
#  870|-> TEST(Template, MultiInstantiationsFunction) {
#  871|     StringRef T = "template <typename T> void f(T v) \n";
#  872|     StringRef S = "{ T target = v; }";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:901:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Template_StructValue_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Template_StructValue_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  899|   }
#  900|   
#  901|-> TEST(Template, StructValue) {
#  902|     StringRef T = "template <typename T> struct S { void f(T& v) \n";
#  903|     StringRef S = "{ T target = v; }";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:917:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Template_StructPointer_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Template_StructPointer_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  915|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  916|   }
#  917|-> TEST(Template, StructPointer) {
#  918|     StringRef T = "template <typename T> struct S { void f(T* v) \n";
#  919|     StringRef S = "{ T* target = v; }";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:933:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Template_StructReference_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Template_StructReference_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  931|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  932|   }
#  933|-> TEST(Template, StructReference) {
#  934|     StringRef T = "template <typename T> struct S { void f(T& v) \n";
#  935|     StringRef S = "{ T& target = v; }";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:949:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Template_DependentReturnFunction_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Template_DependentReturnFunction_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  947|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  948|   }
#  949|-> TEST(Template, DependentReturnFunction) {
#  950|     StringRef TS = "template <typename T> struct TS { using value_type = T; };";
#  951|     StringRef T = "template <typename T> void foo() ";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:965:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Template_DependentReturnPointerFunction_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Template_DependentReturnPointerFunction_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  963|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  964|   }
#  965|-> TEST(Template, DependentReturnPointerFunction) {
#  966|     StringRef TS = "template <typename T> struct TS { using value_type = T; };";
#  967|     StringRef T = "template <typename T> void foo() ";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:981:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Template_DependentReturnReferenceFunction_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Template_DependentReturnReferenceFunction_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  979|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  980|   }
#  981|-> TEST(Template, DependentReturnReferenceFunction) {
#  982|     StringRef TS = "template <typename T> struct TS { using value_type = T; };";
#  983|     StringRef T = "template <typename T> void foo(T& f) ";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:997:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Template_VectorLikeType_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Template_VectorLikeType_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  995|               runCheckOnCode<PointeeRTransform>(Cat(S)));
#  996|   }
#  997|-> TEST(Template, VectorLikeType) {
#  998|     StringRef TS = "template <typename T> struct TS { TS(const T&) {} }; ";
#  999|     StringRef T = "void foo() ";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:1013:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::Template_SpecializedTemplate_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::Template_SpecializedTemplate_Test::test_info_" might be created before "fuzzer::TPC" is available.
# 1011|               runCheckOnCode<PointeeRTransform>(Cat(S)));
# 1012|   }
# 1013|-> TEST(Template, SpecializedTemplate) {
# 1014|     StringRef TS = "template <typename T = int> struct TS { TS(const T&) {} }; ";
# 1015|     StringRef TS2 = "template <> struct TS<double> { TS(const double&) {} }; ";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:1035:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ObjC_SimplePointers_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ObjC_SimplePointers_Test::test_info_" might be created before "fuzzer::TPC" is available.
# 1033|   // -----------------------------------------------------------------------------
# 1034|   
# 1035|-> TEST(ObjC, SimplePointers) {
# 1036|     StringRef S = "int * target = 0;";
# 1037|     EXPECT_EQ(runCheckOnCode<PointeeLTransform>(S, nullptr, "input.m"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:1046:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ObjC_ClassPointer_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ObjC_ClassPointer_Test::test_info_" might be created before "fuzzer::TPC" is available.
# 1044|               "int * const target = 0;");
# 1045|   }
# 1046|-> TEST(ObjC, ClassPointer) {
# 1047|     StringRef TB = "@class Object;\nint main() {\n";
# 1048|     StringRef S = "Object *target;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/AddConstTest.cpp:1062:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ObjC_InterfacePointer_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ObjC_InterfacePointer_Test::test_info_" might be created before "fuzzer::TPC" is available.
# 1060|               Cat("Object *const target;"));
# 1061|   }
# 1062|-> TEST(ObjC, InterfacePointer) {
# 1063|     StringRef TB = "@interface I\n";
# 1064|     StringRef S = "- (void) foo: (int *) target;";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ClangTidyDiagnosticConsumerTest.cpp:69:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ClangTidyDiagnosticConsumer_SortsErrors_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ClangTidyDiagnosticConsumer_SortsErrors_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   67|   } // namespace
#   68|   
#   69|-> TEST(ClangTidyDiagnosticConsumer, SortsErrors) {
#   70|     std::vector<ClangTidyError> Errors;
#   71|     runCheckOnCode<TestCheck>("int a;", &Errors);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ClangTidyDiagnosticConsumerTest.cpp:78:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ClangTidyDiagnosticConsumer_HandlesSourceRangeHighlight_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ClangTidyDiagnosticConsumer_HandlesSourceRangeHighlight_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   76|   }
#   77|   
#   78|-> TEST(ClangTidyDiagnosticConsumer, HandlesSourceRangeHighlight) {
#   79|     std::vector<ClangTidyError> Errors;
#   80|     runCheckOnCode<HighlightTestCheck>("int abc;", &Errors);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ClangTidyDiagnosticConsumerTest.cpp:96:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ClangTidyDiagnosticConsumer_InvalidSourceLocationRangesIgnored_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ClangTidyDiagnosticConsumer_InvalidSourceLocationRangesIgnored_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   94|   }
#   95|   
#   96|-> TEST(ClangTidyDiagnosticConsumer, InvalidSourceLocationRangesIgnored) {
#   97|     std::vector<ClangTidyError> Errors;
#   98|     runCheckOnCode<InvalidRangeTestCheck>("int x;", &Errors);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ClangTidyOptionsTest.cpp:29:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ParseLineFilter_EmptyFilter_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ParseLineFilter_EmptyFilter_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   27|   namespace test {
#   28|   
#   29|-> TEST(ParseLineFilter, EmptyFilter) {
#   30|     ClangTidyGlobalOptions Options;
#   31|     EXPECT_FALSE(parseLineFilter("", Options));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ClangTidyOptionsTest.cpp:37:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ParseLineFilter_InvalidFilter_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ParseLineFilter_InvalidFilter_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   35|   }
#   36|   
#   37|-> TEST(ParseLineFilter, InvalidFilter) {
#   38|     ClangTidyGlobalOptions Options;
#   39|     EXPECT_TRUE(!!parseLineFilter("asdf", Options));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ClangTidyOptionsTest.cpp:52:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ParseLineFilter_ValidFilter_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ParseLineFilter_ValidFilter_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   50|   }
#   51|   
#   52|-> TEST(ParseLineFilter, ValidFilter) {
#   53|     ClangTidyGlobalOptions Options;
#   54|     std::error_code Error = parseLineFilter(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ClangTidyOptionsTest.cpp:77:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ParseConfiguration_ValidConfiguration_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ParseConfiguration_ValidConfiguration_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   75|   }
#   76|   
#   77|-> TEST(ParseConfiguration, ValidConfiguration) {
#   78|     llvm::ErrorOr<ClangTidyOptions> Options =
#   79|         parseConfiguration(llvm::MemoryBufferRef(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ClangTidyOptionsTest.cpp:96:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ParseConfiguration_ChecksSeparatedByNewlines_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ParseConfiguration_ChecksSeparatedByNewlines_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   94|   }
#   95|   
#   96|-> TEST(ParseConfiguration, ChecksSeparatedByNewlines) {
#   97|     auto MemoryBuffer = llvm::MemoryBufferRef("Checks: |\n"
#   98|                                               "  -*,misc-*\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ClangTidyOptionsTest.cpp:110:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ParseConfiguration_MergeConfigurations_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ParseConfiguration_MergeConfigurations_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  108|   }
#  109|   
#  110|-> TEST(ParseConfiguration, MergeConfigurations) {
#  111|     llvm::ErrorOr<ClangTidyOptions> Options1 =
#  112|         parseConfiguration(llvm::MemoryBufferRef(R"(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ClangTidyOptionsTest.cpp:227:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ParseConfiguration_CollectDiags_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ParseConfiguration_CollectDiags_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  225|   using ::testing::UnorderedElementsAre;
#  226|   
#  227|-> TEST(ParseConfiguration, CollectDiags) {
#  228|     DiagCollecter Collector;
#  229|     auto ParseWithDiags = [&](llvm::StringRef Buffer) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ClangTidyOptionsTest.cpp:315:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::CheckOptionsValidation_MissingOptions_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::CheckOptionsValidation_MissingOptions_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  313|   namespace test {
#  314|   
#  315|-> TEST(CheckOptionsValidation, MissingOptions) {
#  316|     ClangTidyOptions Options;
#  317|     ClangTidyContext Context(std::make_unique<DefaultOptionsProvider>(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ClangTidyOptionsTest.cpp:330:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::CheckOptionsValidation_ValidIntOptions_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::CheckOptionsValidation_ValidIntOptions_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  328|   }
#  329|   
#  330|-> TEST(CheckOptionsValidation, ValidIntOptions) {
#  331|     ClangTidyOptions Options;
#  332|     auto &CheckOptions = Options.CheckOptions;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ClangTidyOptionsTest.cpp:395:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ValidConfiguration_ValidEnumOptions_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ValidConfiguration_ValidEnumOptions_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  393|   }
#  394|   
#  395|-> TEST(ValidConfiguration, ValidEnumOptions) {
#  396|   
#  397|     ClangTidyOptions Options;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/DeclRefExprUtilsTest.cpp:106:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ConstReferenceDeclRefExprsTest_ConstValueVar_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ConstReferenceDeclRefExprsTest_ConstValueVar_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  104|   }
#  105|   
#  106|-> TEST(ConstReferenceDeclRefExprsTest, ConstValueVar) {
#  107|     RunTest<0>(R"(
#  108|       void f(const S target) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/DeclRefExprUtilsTest.cpp:139:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ConstReferenceDeclRefExprsTest_ConstRefVar_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ConstReferenceDeclRefExprsTest_ConstRefVar_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  137|   }
#  138|   
#  139|-> TEST(ConstReferenceDeclRefExprsTest, ConstRefVar) {
#  140|     RunTest<0>(R"(
#  141|       void f(const S& target) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/DeclRefExprUtilsTest.cpp:171:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ConstReferenceDeclRefExprsTest_DEBUGREMOVEME_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ConstReferenceDeclRefExprsTest_DEBUGREMOVEME_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  169|   }
#  170|   
#  171|-> TEST(ConstReferenceDeclRefExprsTest, DEBUGREMOVEME) {
#  172|     RunTest<0>(R"(
#  173|       void f(S target, const S& other) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/DeclRefExprUtilsTest.cpp:179:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ConstReferenceDeclRefExprsTest_ValueVar_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ConstReferenceDeclRefExprsTest_ValueVar_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  177|   }
#  178|   
#  179|-> TEST(ConstReferenceDeclRefExprsTest, ValueVar) {
#  180|     RunTest<0>(R"(
#  181|       void f(S target, const S& other) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/DeclRefExprUtilsTest.cpp:218:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ConstReferenceDeclRefExprsTest_RefVar_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ConstReferenceDeclRefExprsTest_RefVar_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  216|   }
#  217|   
#  218|-> TEST(ConstReferenceDeclRefExprsTest, RefVar) {
#  219|     RunTest<0>(R"(
#  220|       void f(S& target) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/DeclRefExprUtilsTest.cpp:256:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ConstReferenceDeclRefExprsTest_PtrVar_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ConstReferenceDeclRefExprsTest_PtrVar_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  254|   }
#  255|   
#  256|-> TEST(ConstReferenceDeclRefExprsTest, PtrVar) {
#  257|     RunTest<1>(R"(
#  258|       void f(S* target) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/DeclRefExprUtilsTest.cpp:292:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ConstReferenceDeclRefExprsTest_ConstPtrVar_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ConstReferenceDeclRefExprsTest_ConstPtrVar_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  290|   }
#  291|   
#  292|-> TEST(ConstReferenceDeclRefExprsTest, ConstPtrVar) {
#  293|     RunTest<1>(R"(
#  294|       void f(const S* target) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/DeclRefExprUtilsTest.cpp:326:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ConstReferenceDeclRefExprsTest_ConstPtrPtrVar_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ConstReferenceDeclRefExprsTest_ConstPtrPtrVar_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  324|   }
#  325|   
#  326|-> TEST(ConstReferenceDeclRefExprsTest, ConstPtrPtrVar) {
#  327|     RunTest<2>(R"(
#  328|       void f(const S** target) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/DeclRefExprUtilsTest.cpp:356:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ConstReferenceDeclRefExprsTest_ConstPtrConstPtrVar_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ConstReferenceDeclRefExprsTest_ConstPtrConstPtrVar_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  354|   }
#  355|   
#  356|-> TEST(ConstReferenceDeclRefExprsTest, ConstPtrConstPtrVar) {
#  357|     RunTest<2>(R"(
#  358|       void f(const S* const* target) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/GoogleModuleTest.cpp:12:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ExplicitConstructorCheckTest_SingleArgumentConstructorsOnly_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ExplicitConstructorCheckTest_SingleArgumentConstructorsOnly_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   10|   namespace test {
#   11|   
#   12|-> TEST(ExplicitConstructorCheckTest, SingleArgumentConstructorsOnly) {
#   13|     EXPECT_NO_CHANGES(ExplicitConstructorCheck, "class C { C(); };");
#   14|     EXPECT_NO_CHANGES(ExplicitConstructorCheck, "class C { C(int i, int j); };");

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/GoogleModuleTest.cpp:23:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ExplicitConstructorCheckTest_Basic_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ExplicitConstructorCheckTest_Basic_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   21|   }
#   22|   
#   23|-> TEST(ExplicitConstructorCheckTest, Basic) {
#   24|     EXPECT_EQ("class C { explicit C(int i); };",
#   25|               runCheckOnCode<ExplicitConstructorCheck>("class C { C(int i); };"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/GoogleModuleTest.cpp:28:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ExplicitConstructorCheckTest_DefaultParameters_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ExplicitConstructorCheckTest_DefaultParameters_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   26|   }
#   27|   
#   28|-> TEST(ExplicitConstructorCheckTest, DefaultParameters) {
#   29|     EXPECT_EQ("class C { explicit C(int i, int j = 0); };",
#   30|               runCheckOnCode<ExplicitConstructorCheck>(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/GoogleModuleTest.cpp:34:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ExplicitConstructorCheckTest_OutOfLineDefinitions_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ExplicitConstructorCheckTest_OutOfLineDefinitions_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   32|   }
#   33|   
#   34|-> TEST(ExplicitConstructorCheckTest, OutOfLineDefinitions) {
#   35|     EXPECT_EQ("class C { explicit C(int i); }; C::C(int i) {}",
#   36|               runCheckOnCode<ExplicitConstructorCheck>(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/GoogleModuleTest.cpp:40:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ExplicitConstructorCheckTest_RemoveExplicit_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ExplicitConstructorCheckTest_RemoveExplicit_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   38|   }
#   39|   
#   40|-> TEST(ExplicitConstructorCheckTest, RemoveExplicit) {
#   41|     EXPECT_EQ("class A { A(const A&); };\n"
#   42|               "class B { /*asdf*/  B(B&&); };\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/GoogleModuleTest.cpp:50:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ExplicitConstructorCheckTest_RemoveExplicitWithMacros_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ExplicitConstructorCheckTest_RemoveExplicitWithMacros_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   48|   }
#   49|   
#   50|-> TEST(ExplicitConstructorCheckTest, RemoveExplicitWithMacros) {
#   51|     EXPECT_EQ(
#   52|         "#define A(T) class T##Bar { explicit T##Bar(const T##Bar &b) {} };\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/GoogleModuleTest.cpp:84:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::GlobalNamesInHeadersCheckTest_UsingDeclarations_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::GlobalNamesInHeadersCheckTest_UsingDeclarations_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   82|   };
#   83|   
#   84|-> TEST_F(GlobalNamesInHeadersCheckTest, UsingDeclarations) {
#   85|     EXPECT_TRUE(runCheckOnCode("using std::string;", "foo.h"));
#   86|     EXPECT_FALSE(runCheckOnCode("using std::string;", "foo.cpp"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/GoogleModuleTest.cpp:94:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::GlobalNamesInHeadersCheckTest_UsingDirectives_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::GlobalNamesInHeadersCheckTest_UsingDirectives_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   92|   }
#   93|   
#   94|-> TEST_F(GlobalNamesInHeadersCheckTest, UsingDirectives) {
#   95|     EXPECT_TRUE(runCheckOnCode("using namespace std;", "foo.h"));
#   96|     EXPECT_FALSE(runCheckOnCode("using namespace std;", "foo.cpp"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/GoogleModuleTest.cpp:104:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::GlobalNamesInHeadersCheckTest_RegressionAnonymousNamespace_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::GlobalNamesInHeadersCheckTest_RegressionAnonymousNamespace_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  102|   }
#  103|   
#  104|-> TEST_F(GlobalNamesInHeadersCheckTest, RegressionAnonymousNamespace) {
#  105|     EXPECT_FALSE(runCheckOnCode("namespace {}", "foo.h"));
#  106|   }

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/LLVMModuleTest.cpp:65:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::LLVMHeaderGuardCheckTest_FixHeaderGuards_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::LLVMHeaderGuardCheckTest_FixHeaderGuards_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   63|   } // namespace
#   64|   
#   65|-> TEST(LLVMHeaderGuardCheckTest, FixHeaderGuards) {
#   66|     EXPECT_EQ("#ifndef LLVM_ADT_FOO_H\n"
#   67|               "#define LLVM_ADT_FOO_H\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/LLVMModuleTest.cpp:302:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::IncludeOrderCheck_GTestHeaders_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::IncludeOrderCheck_GTestHeaders_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  300|   }
#  301|   
#  302|-> TEST(IncludeOrderCheck, GTestHeaders) {
#  303|     EXPECT_EQ(
#  304|         R"cpp(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/NamespaceAliaserTest.cpp:67:1: constructor_uses_global_object: The constructor of global object "clang::tidy::utils::NamespaceAliaserTest_AddNewAlias_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::utils::NamespaceAliaserTest_AddNewAlias_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   65|   }
#   66|   
#   67|-> TEST(NamespaceAliaserTest, AddNewAlias) {
#   68|     EXPECT_EQ("#include \"foo.h\"\n"
#   69|               "void f() {\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/NamespaceAliaserTest.cpp:77:1: constructor_uses_global_object: The constructor of global object "clang::tidy::utils::NamespaceAliaserTest_ReuseAlias_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::utils::NamespaceAliaserTest_ReuseAlias_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   75|   }
#   76|   
#   77|-> TEST(NamespaceAliaserTest, ReuseAlias) {
#   78|     EXPECT_EQ(
#   79|         "#include \"foo.h\"\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/NamespaceAliaserTest.cpp:86:1: constructor_uses_global_object: The constructor of global object "clang::tidy::utils::NamespaceAliaserTest_AddsOnlyOneAlias_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::utils::NamespaceAliaserTest_AddsOnlyOneAlias_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   84|   }
#   85|   
#   86|-> TEST(NamespaceAliaserTest, AddsOnlyOneAlias) {
#   87|     EXPECT_EQ("#include \"foo.h\"\n"
#   88|               "void f() {\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/NamespaceAliaserTest.cpp:96:1: constructor_uses_global_object: The constructor of global object "clang::tidy::utils::NamespaceAliaserTest_LocalConflict_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::utils::NamespaceAliaserTest_LocalConflict_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   94|   }
#   95|   
#   96|-> TEST(NamespaceAliaserTest, LocalConflict) {
#   97|     EXPECT_EQ("#include \"foo.h\"\n"
#   98|               "void f() {\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/NamespaceAliaserTest.cpp:106:1: constructor_uses_global_object: The constructor of global object "clang::tidy::utils::NamespaceAliaserTest_GlobalConflict_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::utils::NamespaceAliaserTest_GlobalConflict_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  104|   }
#  105|   
#  106|-> TEST(NamespaceAliaserTest, GlobalConflict) {
#  107|     EXPECT_EQ("#include \"foo.h\"\n"
#  108|               "namespace b = foo;\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ObjCModuleTest.cpp:19:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ObjCForbiddenSubclassing_AllowedSubclass_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ObjCForbiddenSubclassing_AllowedSubclass_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   17|   namespace test {
#   18|   
#   19|-> TEST(ObjCForbiddenSubclassing, AllowedSubclass) {
#   20|     std::vector<ClangTidyError> Errors;
#   21|     runCheckOnCode<ForbiddenSubclassingCheck>(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ObjCModuleTest.cpp:31:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ObjCForbiddenSubclassing_ForbiddenSubclass_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ObjCForbiddenSubclassing_ForbiddenSubclass_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   29|   }
#   30|   
#   31|-> TEST(ObjCForbiddenSubclassing, ForbiddenSubclass) {
#   32|     std::vector<ClangTidyError> Errors;
#   33|     runCheckOnCode<ForbiddenSubclassingCheck>(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/OptionsProviderTest.cpp:19:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::ClangTidyOptionsProvider_InMemoryFileSystems_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::ClangTidyOptionsProvider_InMemoryFileSystems_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   17|   namespace test {
#   18|   
#   19|-> TEST(ClangTidyOptionsProvider, InMemoryFileSystems) {
#   20|     llvm::IntrusiveRefCntPtr<llvm::vfs::InMemoryFileSystem> FileSystem(
#   21|         new llvm::vfs::InMemoryFileSystem);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/OverlappingReplacementsTest.cpp:137:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::OverlappingReplacementsTest_UseCharCheckTest_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::OverlappingReplacementsTest_UseCharCheckTest_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  135|   } // namespace
#  136|   
#  137|-> TEST(OverlappingReplacementsTest, UseCharCheckTest) {
#  138|     const char Code[] =
#  139|         R"(void f() {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/OverlappingReplacementsTest.cpp:156:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::OverlappingReplacementsTest_IfFalseCheckTest_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::OverlappingReplacementsTest_IfFalseCheckTest_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  154|   }
#  155|   
#  156|-> TEST(OverlappingReplacementsTest, IfFalseCheckTest) {
#  157|     const char Code[] =
#  158|         R"(void f() {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/OverlappingReplacementsTest.cpp:179:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::OverlappingReplacementsTest_StartsWithCheckTest_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::OverlappingReplacementsTest_StartsWithCheckTest_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  177|   }
#  178|   
#  179|-> TEST(OverlappingReplacementsTest, StartsWithCheckTest) {
#  180|     const char Code[] =
#  181|         R"(void f() {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/OverlappingReplacementsTest.cpp:204:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::OverlappingReplacementsTest_EndsWithCheckTest_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::OverlappingReplacementsTest_EndsWithCheckTest_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  202|   }
#  203|   
#  204|-> TEST(OverlappingReplacementsTest, EndsWithCheckTest) {
#  205|     const char Code[] =
#  206|         R"(void f() {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/OverlappingReplacementsTest.cpp:229:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::OverlappingReplacementTest_ReplacementsDoNotOverlap_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::OverlappingReplacementTest_ReplacementsDoNotOverlap_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  227|   }
#  228|   
#  229|-> TEST(OverlappingReplacementTest, ReplacementsDoNotOverlap) {
#  230|     std::string Res;
#  231|     const char Code[] =

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/OverlappingReplacementsTest.cpp:271:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::OverlappingReplacementsTest_ReplacementInsideOtherReplacement_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::OverlappingReplacementsTest_ReplacementInsideOtherReplacement_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  269|   }
#  270|   
#  271|-> TEST(OverlappingReplacementsTest, ReplacementInsideOtherReplacement) {
#  272|     std::string Res;
#  273|     const char Code[] =

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/OverlappingReplacementsTest.cpp:328:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::OverlappingReplacements_TwoReplacementsInsideOne_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::OverlappingReplacements_TwoReplacementsInsideOne_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  326|   }
#  327|   
#  328|-> TEST(OverlappingReplacements, TwoReplacementsInsideOne) {
#  329|     std::string Res;
#  330|     const char Code[] =

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/OverlappingReplacementsTest.cpp:357:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::OverlappingReplacementsTest_ApplyAtMostOneOfTheChangesWhenPartialOverlapping_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::OverlappingReplacementsTest_ApplyAtMostOneOfTheChangesWhenPartialOverlapping_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  355|   }
#  356|   
#  357|-> TEST(OverlappingReplacementsTest,
#  358|        ApplyAtMostOneOfTheChangesWhenPartialOverlapping) {
#  359|     std::string Res;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/OverlappingReplacementsTest.cpp:387:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::OverlappingReplacementsTest_TwoErrorsHavePerfectOverlapping_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::OverlappingReplacementsTest_TwoErrorsHavePerfectOverlapping_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  385|   }
#  386|   
#  387|-> TEST(OverlappingReplacementsTest, TwoErrorsHavePerfectOverlapping) {
#  388|     std::string Res;
#  389|     const char Code[] =

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp:15:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::NamespaceCommentCheckTest_Basic_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::NamespaceCommentCheckTest_Basic_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   13|   using readability::SimplifyBooleanExprCheck;
#   14|   
#   15|-> TEST(NamespaceCommentCheckTest, Basic) {
#   16|     EXPECT_EQ("namespace i {\n} // namespace i",
#   17|               runCheckOnCode<NamespaceCommentCheck>("namespace i {\n}"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp:25:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::NamespaceCommentCheckTest_SingleLineNamespaces_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::NamespaceCommentCheckTest_SingleLineNamespaces_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   23|   }
#   24|   
#   25|-> TEST(NamespaceCommentCheckTest, SingleLineNamespaces) {
#   26|     EXPECT_EQ(
#   27|         "namespace i { namespace j { } }",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp:31:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::NamespaceCommentCheckTest_CheckExistingComments_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::NamespaceCommentCheckTest_CheckExistingComments_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   29|   }
#   30|   
#   31|-> TEST(NamespaceCommentCheckTest, CheckExistingComments) {
#   32|     EXPECT_EQ("namespace i { namespace j {\n"
#   33|               "} /* namespace j */ } // namespace i\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp:83:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::NamespaceCommentCheckTest_FixWrongComments_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::NamespaceCommentCheckTest_FixWrongComments_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   81|   }
#   82|   
#   83|-> TEST(NamespaceCommentCheckTest, FixWrongComments) {
#   84|     EXPECT_EQ("namespace i { namespace jJ0_ {\n"
#   85|               "} // namespace jJ0_\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp:103:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::BracesAroundStatementsCheckTest_IfWithComments_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::BracesAroundStatementsCheckTest_IfWithComments_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  101|   }
#  102|   
#  103|-> TEST(BracesAroundStatementsCheckTest, IfWithComments) {
#  104|     EXPECT_EQ("int main() {\n"
#  105|               "  if (false /*dummy token*/) {\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp:140:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::BracesAroundStatementsCheckTest_If_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::BracesAroundStatementsCheckTest_If_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  138|   }
#  139|   
#  140|-> TEST(BracesAroundStatementsCheckTest, If) {
#  141|     EXPECT_NO_CHANGES(BracesAroundStatementsCheck, "int main() {\n"
#  142|                                                    "  if (false) {\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp:241:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::BracesAroundStatementsCheckTest_IfElseWithShortStatements_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::BracesAroundStatementsCheckTest_IfElseWithShortStatements_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  239|   }
#  240|   
#  241|-> TEST(BracesAroundStatementsCheckTest, IfElseWithShortStatements) {
#  242|     ClangTidyOptions Options;
#  243|     Options.CheckOptions["test-check-0.ShortStatementLines"] = "1";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp:275:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::BracesAroundStatementsCheckTest_For_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::BracesAroundStatementsCheckTest_For_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  273|   }
#  274|   
#  275|-> TEST(BracesAroundStatementsCheckTest, For) {
#  276|     EXPECT_NO_CHANGES(BracesAroundStatementsCheck, "int main() {\n"
#  277|                                                    "  for (;;) {\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp:310:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::BracesAroundStatementsCheckTest_ForRange_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::BracesAroundStatementsCheckTest_ForRange_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  308|   }
#  309|   
#  310|-> TEST(BracesAroundStatementsCheckTest, ForRange) {
#  311|     EXPECT_NO_CHANGES(BracesAroundStatementsCheck, "int main() {\n"
#  312|                                                    "  int arr[4];\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp:335:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::BracesAroundStatementsCheckTest_DoWhile_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::BracesAroundStatementsCheckTest_DoWhile_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  333|   }
#  334|   
#  335|-> TEST(BracesAroundStatementsCheckTest, DoWhile) {
#  336|     EXPECT_NO_CHANGES(BracesAroundStatementsCheck, "int main() {\n"
#  337|                                                    "  do {\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp:353:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::BracesAroundStatementsCheckTest_While_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::BracesAroundStatementsCheckTest_While_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  351|   }
#  352|   
#  353|-> TEST(BracesAroundStatementsCheckTest, While) {
#  354|     EXPECT_NO_CHANGES(BracesAroundStatementsCheck, "int main() {\n"
#  355|                                                    "  while (false) {\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp:417:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::BracesAroundStatementsCheckTest_Nested_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::BracesAroundStatementsCheckTest_Nested_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  415|   }
#  416|   
#  417|-> TEST(BracesAroundStatementsCheckTest, Nested) {
#  418|     EXPECT_EQ("int main() {\n"
#  419|               "  do { if (true) {}} while (false);\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp:452:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::BracesAroundStatementsCheckTest_Macros_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::BracesAroundStatementsCheckTest_Macros_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  450|   }
#  451|   
#  452|-> TEST(BracesAroundStatementsCheckTest, Macros) {
#  453|     EXPECT_NO_CHANGES(BracesAroundStatementsCheck,
#  454|                       "#define IF(COND) if (COND) return -1;\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp:489:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::BracesAroundStatementsCheckTest_ImplicitCastInReturn_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::BracesAroundStatementsCheckTest_ImplicitCastInReturn_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  487|     EXPECT_EQ(Code, runCheckOnCode<Check>(Code, nullptr, "input.cc",             \
#  488|                                           std::nullopt, Opts))
#  489|-> TEST(BracesAroundStatementsCheckTest, ImplicitCastInReturn) {
#  490|     ClangTidyOptions Opts;
#  491|     Opts.CheckOptions["test-check-0.ShortStatementLines"] = "1";

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp:506:1: constructor_uses_global_object: The constructor of global object "clang::tidy::test::SimplifyBooleanExprCheckTest_CodeWithError_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::test::SimplifyBooleanExprCheckTest_CodeWithError_Test::test_info_" might be created before "fuzzer::TPC" is available.
#  504|   }
#  505|   
#  506|-> TEST(SimplifyBooleanExprCheckTest, CodeWithError) {
#  507|     // Fixes PR55557
#  508|     // Need to downgrade Wreturn-type from error as runCheckOnCode will fatal_exit

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/UsingInserterTest.cpp:71:1: constructor_uses_global_object: The constructor of global object "clang::tidy::utils::UsingInserterTest_ReusesExisting_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::utils::UsingInserterTest_ReusesExisting_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   69|   }
#   70|   
#   71|-> TEST(UsingInserterTest, ReusesExisting) {
#   72|     EXPECT_EQ("#include \"foo.h\"\n"
#   73|               "namespace {"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/UsingInserterTest.cpp:85:1: constructor_uses_global_object: The constructor of global object "clang::tidy::utils::UsingInserterTest_ReusesExistingGlobal_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::utils::UsingInserterTest_ReusesExistingGlobal_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   83|   }
#   84|   
#   85|-> TEST(UsingInserterTest, ReusesExistingGlobal) {
#   86|     EXPECT_EQ("#include \"foo.h\"\n"
#   87|               "using ::foo::func;\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang-tools-extra/unittests/clang-tidy/UsingInserterTest.cpp:99:1: constructor_uses_global_object: The constructor of global object "clang::tidy::utils::UsingInserterTest_AvoidsConflict_Test::test_info_" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::tidy::utils::UsingInserterTest_AvoidsConflict_Test::test_info_" might be created before "fuzzer::TPC" is available.
#   97|   }
#   98|   
#   99|-> TEST(UsingInserterTest, AvoidsConflict) {
#  100|     EXPECT_EQ("#include \"foo.h\"\n"
#  101|               "namespace {"

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/include/clang/AST/APValue.h:367:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/include/clang/AST/APValue.h:369:5: uninit_use: Using uninitialized value "Result". Field "Result.Data" is uninitialized.
#  367|       APValue Result;
#  368|       Result.Kind = Indeterminate;
#  369|->     return Result;
#  370|     }
#  371|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/include/clang/AST/ASTTypeTraits.h:376:7: var_decl: Declaring variable "Node".
llvm-project-19.0.0.src/clang/include/clang/AST/ASTTypeTraits.h:378:7: uninit_use: Using uninitialized value "Node". Field "Node.Storage" is uninitialized.
#  376|         DynTypedNode Node;
#  377|         Node.NodeKind = ASTNodeKind::DenseMapInfo::getEmptyKey();
#  378|->       return Node;
#  379|       }
#  380|       static inline DynTypedNode getTombstoneKey() {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/include/clang/AST/ASTTypeTraits.h:381:7: var_decl: Declaring variable "Node".
llvm-project-19.0.0.src/clang/include/clang/AST/ASTTypeTraits.h:383:7: uninit_use: Using uninitialized value "Node". Field "Node.Storage" is uninitialized.
#  381|         DynTypedNode Node;
#  382|         Node.NodeKind = ASTNodeKind::DenseMapInfo::getTombstoneKey();
#  383|->       return Node;
#  384|       }
#  385|       static unsigned getHashValue(const DynTypedNode &Val) {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/DeclCXX.h:3288:5: address_of: Taking address with "&this->ExprWithTemporary" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/DeclCXX.h:3288:5: ptr_arith: Using "&this->ExprWithTemporary" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 3286|     // Iterators
# 3287|     Stmt::child_range childrenExpr() {
# 3288|->     return Stmt::child_range(&ExprWithTemporary, &ExprWithTemporary + 1);
# 3289|     }
# 3290|   

Error: RETURN_LOCAL (CWE-562):
llvm-project-19.0.0.src/clang/include/clang/AST/DeclContextInternals.h:54:5: local_ptr_assign_local: Assigning: "NewTail" = "&NewHead" (address of local variable "NewHead").
llvm-project-19.0.0.src/clang/include/clang/AST/DeclContextInternals.h:57:9: local_ptr_assign_ptr: Assigning: "NewLast" = "NewTail".
llvm-project-19.0.0.src/clang/include/clang/AST/DeclContextInternals.h:92:7: return_local_addr_alias: Returning pointer "NewLast" which points to local variable "NewHead".
#   90|       else {
#   91|         assert(NewLast && NewLast->is<NamedDecl *>() && "Not the tail?");
#   92|->       return NewLast;
#   93|       }
#   94|     }

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/DeclGroup.h:107:7: address_of: Taking address with "&this->D" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/DeclGroup.h:107:7: ptr_arith: Using "&this->D" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  105|     iterator end() {
#  106|       if (isSingleDecl())
#  107|->       return D ? &D+1 : nullptr;
#  108|       DeclGroup &G = getDeclGroup();
#  109|       return &G[0] + G.size();

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/DeclGroup.h:120:7: address_of: Taking address with "&this->D" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/DeclGroup.h:120:7: ptr_arith: Using "&this->D" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  118|     const_iterator end() const {
#  119|       if (isSingleDecl())
#  120|->       return D ? &D+1 : nullptr;
#  121|       const DeclGroup &G = getDeclGroup();
#  122|       return &G[0] + G.size();

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/DeclOpenMP.h:53:5: new_object: Calling single-object form of 'new': "new (C, DC, clang::OMPDeclarativeDirective<clang::Decl>::size(Clauses.size(), NumChildren)) clang::OMPAllocateDecl(DC, std::forward(P))".
llvm-project-19.0.0.src/clang/include/clang/AST/DeclOpenMP.h:53:5: assign: Assigning: "Inst" = "new (C, DC, clang::OMPDeclarativeDirective<clang::Decl>::size(Clauses.size(), NumChildren)) clang::OMPAllocateDecl(DC, std::forward(P))".
llvm-project-19.0.0.src/clang/include/clang/AST/DeclOpenMP.h:55:5: ptr_arith: Using "Inst" as an array.  This might corrupt or misinterpret adjacent memory locations.
#   53|       auto *Inst = new (C, DC, size(Clauses.size(), NumChildren))
#   54|           T(DC, std::forward<Params>(P)...);
#   55|->     Inst->Data = OMPChildren::Create(Inst + 1, Clauses,
#   56|                                        /*AssociatedStmt=*/nullptr, NumChildren);
#   57|       Inst->Data->setClauses(Clauses);

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/DeclOpenMP.h:65:5: new_object: Calling single-object form of 'new': "new (C, ID, clang::OMPDeclarativeDirective<clang::Decl>::size(NumClauses, NumChildren)) clang::OMPAllocateDecl(NULL, std::forward(P))".
llvm-project-19.0.0.src/clang/include/clang/AST/DeclOpenMP.h:65:5: assign: Assigning: "Inst" = "new (C, ID, clang::OMPDeclarativeDirective<clang::Decl>::size(NumClauses, NumChildren)) clang::OMPAllocateDecl(NULL, std::forward(P))".
llvm-project-19.0.0.src/clang/include/clang/AST/DeclOpenMP.h:67:5: ptr_arith: Using "Inst" as an array.  This might corrupt or misinterpret adjacent memory locations.
#   65|       auto *Inst = new (C, ID, size(NumClauses, NumChildren))
#   66|           T(nullptr, std::forward<Params>(P)...);
#   67|->     Inst->Data = OMPChildren::CreateEmpty(
#   68|           Inst + 1, NumClauses, /*HasAssociatedStmt=*/false, NumChildren);
#   69|       return Inst;

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:1153:28: address_of: Taking address with "&this->SubExpr" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:1153:28: ptr_arith: Using "&this->SubExpr" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 1151|     llvm::APSInt getResultAsAPSInt() const;
# 1152|     // Iterators
# 1153|->   child_range children() { return child_range(&SubExpr, &SubExpr+1); }
# 1154|     const_child_range children() const {
# 1155|       return const_child_range(&SubExpr, &SubExpr + 1);

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:1738:28: address_of: Taking address with "&this->Val" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:1738:28: ptr_arith: Using "&this->Val" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 1736|   
# 1737|     // Iterators
# 1738|->   child_range children() { return child_range(&Val, &Val+1); }
# 1739|     const_child_range children() const {
# 1740|       return const_child_range(&Val, &Val + 1);

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:2318:28: address_of: Taking address with "&this->Val" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:2318:28: ptr_arith: Using "&this->Val" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 2316|   
# 2317|     // Iterators
# 2318|->   child_range children() { return child_range(&Val, &Val+1); }
# 2319|     const_child_range children() const {
# 2320|       return const_child_range(&Val, &Val + 1);

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:3405:28: address_of: Taking address with "&this->Base" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:3405:28: ptr_arith: Using "&this->Base" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 3403|   
# 3404|     // Iterators
# 3405|->   child_range children() { return child_range(&Base, &Base+1); }
# 3406|     const_child_range children() const {
# 3407|       return const_child_range(&Base, &Base + 1);

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:3628:28: address_of: Taking address with "&this->Op" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:3628:28: ptr_arith: Using "&this->Op" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 3626|   
# 3627|     // Iterators
# 3628|->   child_range children() { return child_range(&Op, &Op+1); }
# 3629|     const_child_range children() const { return const_child_range(&Op, &Op + 1); }
# 3630|   };

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:4419:28: address_of: Taking address with "&this->SubStmt" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:4419:28: ptr_arith: Using "&this->SubStmt" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 4417|   
# 4418|     // Iterators
# 4419|->   child_range children() { return child_range(&SubStmt, &SubStmt+1); }
# 4420|     const_child_range children() const {
# 4421|       return const_child_range(&SubStmt, &SubStmt + 1);

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:4543:28: address_of: Taking address with "&this->SrcExpr" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:4543:28: ptr_arith: Using "&this->SrcExpr" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 4541|   
# 4542|     // Iterators
# 4543|->   child_range children() { return child_range(&SrcExpr, &SrcExpr+1); }
# 4544|     const_child_range children() const {
# 4545|       return const_child_range(&SrcExpr, &SrcExpr + 1);

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:4708:28: address_of: Taking address with "&this->Val" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:4708:28: ptr_arith: Using "&this->Val" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 4706|   
# 4707|     // Iterators
# 4708|->   child_range children() { return child_range(&Val, &Val+1); }
# 4709|     const_child_range children() const {
# 4710|       return const_child_range(&Val, &Val + 1);

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:6165:28: address_of: Taking address with "&this->Base" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:6165:28: ptr_arith: Using "&this->Base" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 6163|   
# 6164|     // Iterators
# 6165|->   child_range children() { return child_range(&Base, &Base+1); }
# 6166|     const_child_range children() const {
# 6167|       return const_child_range(&Base, &Base + 1);

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:6269:28: address_of: Taking address with "&this->SrcExpr" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/Expr.h:6269:28: ptr_arith: Using "&this->SrcExpr" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 6267|   
# 6268|     // Iterators
# 6269|->   child_range children() { return child_range(&SrcExpr, &SrcExpr+1); }
# 6270|     const_child_range children() const {
# 6271|       return const_child_range(&SrcExpr, &SrcExpr + 1);

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:357:5: address_of: Taking address with "&this->SemanticForm" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:357:5: ptr_arith: Using "&this->SemanticForm" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  355|   
#  356|     child_range children() {
#  357|->     return child_range(&SemanticForm, &SemanticForm + 1);
#  358|     }
#  359|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:833:28: address_of: Taking address with "&this->SubExpr" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:833:28: ptr_arith: Using "&this->SubExpr" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  831|     }
#  832|   
#  833|->   child_range children() { return child_range(&SubExpr, &SubExpr + 1); }
#  834|   
#  835|     const_child_range children() const {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:910:5: address_of: Taking address with "&this->Operand" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:910:5: assign: Assigning: "begin" = "reinterpret_cast<clang::Stmt **>(&this->Operand)".
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:911:5: ptr_arith: Using "begin" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  909|         return child_range(child_iterator(), child_iterator());
#  910|       auto **begin = reinterpret_cast<Stmt **>(&Operand);
#  911|->     return child_range(begin, begin + 1);
#  912|     }
#  913|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:1123:5: address_of: Taking address with "&this->Operand" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:1123:5: assign: Assigning: "begin" = "reinterpret_cast<clang::Stmt **>(&this->Operand)".
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:1124:5: ptr_arith: Using "begin" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 1122|         return child_range(child_iterator(), child_iterator());
# 1123|       auto **begin = reinterpret_cast<Stmt **>(&Operand);
# 1124|->     return child_range(begin, begin + 1);
# 1125|     }
# 1126|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:1249:5: address_of: Taking address with "&this->Operand" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:1249:5: ptr_arith: Using "&this->Operand" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 1247|     // Iterators
# 1248|     child_range children() {
# 1249|->     return child_range(&Operand, Operand ? &Operand + 1 : &Operand);
# 1250|     }
# 1251|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:2746:28: address_of: Taking address with "&this->Base" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:2746:28: ptr_arith: Using "&this->Base" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 2744|   
# 2745|     // Iterators
# 2746|->   child_range children() { return child_range(&Base, &Base + 1); }
# 2747|   
# 2748|     const_child_range children() const {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:3520:28: address_of: Taking address with "&this->SubExpr" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:3520:28: ptr_arith: Using "&this->SubExpr" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 3518|   
# 3519|     // Iterators
# 3520|->   child_range children() { return child_range(&SubExpr, &SubExpr + 1); }
# 3521|   
# 3522|     const_child_range children() const {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:3907:5: address_of: Taking address with "&this->Base" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:3907:5: ptr_arith: Using "&this->Base" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 3905|       if (isImplicitAccess())
# 3906|         return child_range(child_iterator(), child_iterator());
# 3907|->     return child_range(&Base, &Base + 1);
# 3908|     }
# 3909|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:4076:5: address_of: Taking address with "&this->Base" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:4076:5: ptr_arith: Using "&this->Base" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 4074|       if (isImplicitAccess())
# 4075|         return child_range(child_iterator(), child_iterator());
# 4076|->     return child_range(&Base, &Base + 1);
# 4077|     }
# 4078|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:4149:28: address_of: Taking address with "&this->Operand" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:4149:28: ptr_arith: Using "&this->Operand" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 4147|   
# 4148|     // Iterators
# 4149|->   child_range children() { return child_range(&Operand, &Operand + 1); }
# 4150|   
# 4151|     const_child_range children() const {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:4532:28: address_of: Taking address with "&this->Replacement" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprCXX.h:4532:28: ptr_arith: Using "&this->Replacement" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 4530|   
# 4531|     // Iterators
# 4532|->   child_range children() { return child_range(&Replacement, &Replacement + 1); }
# 4533|   
# 4534|     const_child_range children() const {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprObjC.h:75:28: address_of: Taking address with "&this->String" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprObjC.h:75:28: ptr_arith: Using "&this->String" as an array.  This might corrupt or misinterpret adjacent memory locations.
#   73|   
#   74|     // Iterators
#   75|->   child_range children() { return child_range(&String, &String+1); }
#   76|   
#   77|     const_child_range children() const {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprObjC.h:166:28: address_of: Taking address with "&this->SubExpr" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprObjC.h:166:28: ptr_arith: Using "&this->SubExpr" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  164|   
#  165|     // Iterators
#  166|->   child_range children() { return child_range(&SubExpr, &SubExpr+1); }
#  167|   
#  168|     const_child_range children() const {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprObjC.h:604:28: address_of: Taking address with "&this->Base" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprObjC.h:604:28: ptr_arith: Using "&this->Base" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  602|   
#  603|     // Iterators
#  604|->   child_range children() { return child_range(&Base, &Base+1); }
#  605|   
#  606|     const_child_range children() const {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprObjC.h:1542:28: address_of: Taking address with "&this->Base" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprObjC.h:1542:28: ptr_arith: Using "&this->Base" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 1540|   
# 1541|     // Iterators
# 1542|->   child_range children() { return child_range(&Base, &Base+1); }
# 1543|   
# 1544|     const_child_range children() const {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ExprObjC.h:1605:28: address_of: Taking address with "&this->Operand" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ExprObjC.h:1605:28: ptr_arith: Using "&this->Operand" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 1603|     bool shouldCopy() const { return ObjCIndirectCopyRestoreExprBits.ShouldCopy; }
# 1604|   
# 1605|->   child_range children() { return child_range(&Operand, &Operand+1); }
# 1606|   
# 1607|     const_child_range children() const {

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/clang/include/clang/AST/IgnoreExpr.h:38:5: move: "Fns" is moved (indicated by "std::forward(Fns)").
llvm-project-19.0.0.src/clang/include/clang/AST/IgnoreExpr.h:38:5: use_after_move: "Fns" is used after it has been already moved.
#   36|     while (E != LastE) {
#   37|       LastE = E;
#   38|->     E = detail::IgnoreExprNodesImpl(E, std::forward<FnTys>(Fns)...);
#   39|     }
#   40|     return E;

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/OpenMPClause.h:604:28: address_of: Taking address with "&this->Condition" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/OpenMPClause.h:604:28: ptr_arith: Using "&this->Condition" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  602|     SourceLocation getNameModifierLoc() const { return NameModifierLoc; }
#  603|   
#  604|->   child_range children() { return child_range(&Condition, &Condition + 1); }
#  605|   
#  606|     const_child_range children() const {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/OpenMPClause.h:1901:28: address_of: Taking address with "&this->NumForLoops" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/OpenMPClause.h:1901:28: ptr_arith: Using "&this->NumForLoops" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 1899|     const Expr *getLoopCounter(unsigned NumLoop) const;
# 1900|   
# 1901|->   child_range children() { return child_range(&NumForLoops, &NumForLoops + 1); }
# 1902|   
# 1903|     const_child_range children() const {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/ParentMapContext.h:113:5: address_of: Taking address with "&(*this).SingleNode" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/ParentMapContext.h:113:5: ptr_arith: Using "&(*this).SingleNode" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  111|   
#  112|     const DynTypedNode *end() const {
#  113|->     return !IsSingleNode ? Nodes.end() : &SingleNode + 1;
#  114|     }
#  115|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/Stmt.h:1983:28: address_of: Taking address with "&this->SubStmt" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/Stmt.h:1983:28: ptr_arith: Using "&this->SubStmt" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 1981|   
# 1982|     // Iterators
# 1983|->   child_range children() { return child_range(&SubStmt, &SubStmt + 1); }
# 1984|   
# 1985|     const_child_range children() const {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/Stmt.h:2061:28: address_of: Taking address with "&this->SubStmt" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/Stmt.h:2061:28: ptr_arith: Using "&this->SubStmt" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 2059|     SourceLocation getEndLoc() const LLVM_READONLY { return SubStmt->getEndLoc();}
# 2060|   
# 2061|->   child_range children() { return child_range(&SubStmt, &SubStmt + 1); }
# 2062|   
# 2063|     const_child_range children() const {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/Stmt.h:2124:28: address_of: Taking address with "&this->SubStmt" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/Stmt.h:2124:28: ptr_arith: Using "&this->SubStmt" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 2122|     SourceLocation getEndLoc() const LLVM_READONLY { return SubStmt->getEndLoc();}
# 2123|   
# 2124|->   child_range children() { return child_range(&SubStmt, &SubStmt + 1); }
# 2125|   
# 2126|     const_child_range children() const {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/Stmt.h:3088:7: address_of: Taking address with "&this->RetExpr" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/Stmt.h:3088:7: ptr_arith: Using "&this->RetExpr" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 3086|     child_range children() {
# 3087|       if (RetExpr)
# 3088|->       return child_range(&RetExpr, &RetExpr + 1);
# 3089|       return child_range(child_iterator(), child_iterator());
# 3090|     }

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/StmtObjC.h:119:28: address_of: Taking address with "&this->Body" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/StmtObjC.h:119:28: ptr_arith: Using "&this->Body" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  117|     }
#  118|   
#  119|->   child_range children() { return child_range(&Body, &Body + 1); }
#  120|   
#  121|     const_child_range children() const {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/include/clang/AST/StmtOpenACC.h:98:7: address_of: Taking address with "&this->AssociatedStmt" yields a singleton pointer.
llvm-project-19.0.0.src/clang/include/clang/AST/StmtOpenACC.h:98:7: ptr_arith: Using "&this->AssociatedStmt" as an array.  This might corrupt or misinterpret adjacent memory locations.
#   96|     child_range children() {
#   97|       if (getAssociatedStmt())
#   98|->       return child_range(&AssociatedStmt, &AssociatedStmt + 1);
#   99|       return child_range(child_iterator(), child_iterator());
#  100|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:172:5: var_decl: Declaring variable "Bases".
llvm-project-19.0.0.src/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:194:5: uninit_use: Using uninitialized value "Bases". Field "Bases.InlineElts" is uninitialized.
#  192|         Bases.emplace_back(BaseClass);
#  193|       }
#  194|->     return Bases;
#  195|     }
#  196|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/include/clang/Frontend/CommandLineSourceLoc.h:34:5: var_decl: Declaring variable "PSL".
llvm-project-19.0.0.src/clang/include/clang/Frontend/CommandLineSourceLoc.h:50:5: uninit_use: Using uninitialized value "PSL". Field "PSL.Line" is uninitialized.
#   48|       }
#   49|   
#   50|->     return PSL;
#   51|     }
#   52|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/include/clang/Sema/DeclSpec.h:1670:5: var_decl: Declaring variable "I".
llvm-project-19.0.0.src/clang/include/clang/Sema/DeclSpec.h:1680:5: uninit_use: Using uninitialized value "I". Field "I.AttrList.AttrList.InlineElts" is uninitialized.
# 1678|       I.Ptr.AtomicQualLoc   = AtomicQualLoc;
# 1679|       I.Ptr.UnalignedQualLoc = UnalignedQualLoc;
# 1680|->     return I;
# 1681|     }
# 1682|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/include/clang/Sema/DeclSpec.h:1686:5: var_decl: Declaring variable "I".
llvm-project-19.0.0.src/clang/include/clang/Sema/DeclSpec.h:1691:5: uninit_use: Using uninitialized value "I". Field "I.AttrList.AttrList.InlineElts" is uninitialized.
# 1689|       I.Ref.HasRestrict = (TypeQuals & DeclSpec::TQ_restrict) != 0;
# 1690|       I.Ref.LValueRef   = lvalue;
# 1691|->     return I;
# 1692|     }
# 1693|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/include/clang/Sema/DeclSpec.h:1698:5: var_decl: Declaring variable "I".
llvm-project-19.0.0.src/clang/include/clang/Sema/DeclSpec.h:1706:5: uninit_use: Using uninitialized value "I". Field "I.AttrList.AttrList.InlineElts" is uninitialized.
# 1704|       I.Arr.isStar    = isStar;
# 1705|       I.Arr.NumElts   = NumElts;
# 1706|->     return I;
# 1707|     }
# 1708|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/include/clang/Sema/DeclSpec.h:1740:5: var_decl: Declaring variable "I".
llvm-project-19.0.0.src/clang/include/clang/Sema/DeclSpec.h:1744:5: uninit_use: Using uninitialized value "I". Field "I.AttrList.AttrList.InlineElts" is uninitialized.
# 1742|       I.Loc           = Loc;
# 1743|       I.Cls.TypeQuals = TypeQuals;
# 1744|->     return I;
# 1745|     }
# 1746|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/include/clang/Sema/DeclSpec.h:1750:5: var_decl: Declaring variable "I".
llvm-project-19.0.0.src/clang/include/clang/Sema/DeclSpec.h:1754:5: uninit_use: Using uninitialized value "I". Field "I.AttrList.AttrList.InlineElts" is uninitialized.
# 1752|       I.Loc           = Loc;
# 1753|       I.Cls.TypeQuals = TypeQuals;
# 1754|->     return I;
# 1755|     }
# 1756|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/include/clang/Sema/DeclSpec.h:1761:5: var_decl: Declaring variable "I".
llvm-project-19.0.0.src/clang/include/clang/Sema/DeclSpec.h:1769:5: uninit_use: Using uninitialized value "I". Field "I.AttrList.AttrList.InlineElts" is uninitialized.
# 1767|       I.Mem.TypeQuals = TypeQuals;
# 1768|       new (I.Mem.ScopeMem) CXXScopeSpec(SS);
# 1769|->     return I;
# 1770|     }
# 1771|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/include/clang/Sema/DeclSpec.h:1775:5: var_decl: Declaring variable "I".
llvm-project-19.0.0.src/clang/include/clang/Sema/DeclSpec.h:1779:5: uninit_use: Using uninitialized value "I". Field "I" is uninitialized.
# 1777|       I.Loc           = LParenLoc;
# 1778|       I.EndLoc        = RParenLoc;
# 1779|->     return I;
# 1780|     }
# 1781|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:225:3: var_decl: Declaring variable "APINotes".
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:293:9: uninit_use: Using uninitialized value "APINotes". Field "APINotes.InlineElts" is uninitialized.
#  291|         if (auto File = findAPINotesFile(*SearchDir, ModuleName)) {
#  292|           APINotes.push_back(*File);
#  293|->         return APINotes;
#  294|         }
#  295|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:225:3: var_decl: Declaring variable "APINotes".
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:299:3: uninit_use: Using uninitialized value "APINotes". Field "APINotes.InlineElts" is uninitialized.
#  297|   
#  298|     // Didn't find any API notes.
#  299|->   return APINotes;
#  300|   }
#  301|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:332:3: var_decl: Declaring variable "Results".
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:338:5: uninit_use: Using uninitialized value "Results". Field "Results.InlineElts" is uninitialized.
#  336|       Results.append(getCurrentModuleReaders().begin(),
#  337|                      getCurrentModuleReaders().end());
#  338|->     return Results;
#  339|     }
#  340|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:332:3: var_decl: Declaring variable "Results".
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:343:5: uninit_use: Using uninitialized value "Results". Field "Results.InlineElts" is uninitialized.
#  341|     // If we're not allowed to implicitly load API notes files, we're done.
#  342|     if (!ImplicitAPINotes)
#  343|->     return Results;
#  344|   
#  345|     // If we don't have source location information, we're done.

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:332:3: var_decl: Declaring variable "Results".
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:347:5: uninit_use: Using uninitialized value "Results". Field "Results.InlineElts" is uninitialized.
#  345|     // If we don't have source location information, we're done.
#  346|     if (Loc.isInvalid())
#  347|->     return Results;
#  348|   
#  349|     // API notes are associated with the expansion location. Retrieve the

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:332:3: var_decl: Declaring variable "Results".
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:354:5: uninit_use: Using uninitialized value "Results". Field "Results.InlineElts" is uninitialized.
#  352|     FileID ID = SM.getFileID(ExpansionLoc);
#  353|     if (ID.isInvalid())
#  354|->     return Results;
#  355|     OptionalFileEntryRef File = SM.getFileEntryRefForID(ID);
#  356|     if (!File)

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:332:3: var_decl: Declaring variable "Results".
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:357:5: uninit_use: Using uninitialized value "Results". Field "Results.InlineElts" is uninitialized.
#  355|     OptionalFileEntryRef File = SM.getFileEntryRefForID(ID);
#  356|     if (!File)
#  357|->     return Results;
#  358|   
#  359|     // Look for API notes in the directory corresponding to this file, or one of

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:332:3: var_decl: Declaring variable "Results".
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:462:3: uninit_use: Using uninitialized value "Results". Field "Results.InlineElts" is uninitialized.
#  460|       Readers[Visited] = Dir ? ReaderEntry(*Dir) : ReaderEntry();
#  461|   
#  462|->   return Results;
#  463|   }
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesManager.cpp:462:3: note: trimmed 1 message(s) with length over 512

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesReader.cpp:81:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesReader.cpp:92:5: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
#   90|         Result.push_back({version, UnversionedData});
#   91|       }
#   92|->     return Result;
#   93|     }
#   94|   };

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesReader.cpp:414:5: var_decl: Declaring variable "Key".
llvm-project-19.0.0.src/clang/lib/APINotes/APINotesReader.cpp:421:5: uninit_use: Using uninitialized value "Key". Field "Key.Identifiers.InlineElts" is uninitialized.
#  419|             endian::readNext<uint32_t, llvm::endianness::little>(Data));
#  420|       }
#  421|->     return Key;
#  422|     }
#  423|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransAutoreleasePool.cpp:166:10: var_decl: Declaring variable "I".
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransAutoreleasePool.cpp:167:60: uninit_use_in_call: Using uninitialized value "I.DGE" when calling "operator ++".
#  165|   
#  166|       for (Stmt::child_iterator
#  167|->            I = S->body_begin(), E = S->body_end(); I != E; ++I) {
#  168|         Stmt *child = getEssential(*I);
#  169|         if (DeclStmt *DclS = dyn_cast<DeclStmt>(child)) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransAutoreleasePool.cpp:166:10: var_decl: Declaring variable "I".
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransAutoreleasePool.cpp:182:17: uninit_use: Using uninitialized value "I". Field "I.DGE" is uninitialized.
#  180|                   Scopes.back().PoolVar = VD;
#  181|                   Scopes.back().CompoundParent = S;
#  182|->                 Scopes.back().Begin = I;
#  183|                 }
#  184|               }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransAutoreleasePool.cpp:166:10: var_decl: Declaring variable "I".
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransAutoreleasePool.cpp:197:15: uninit_use: Using uninitialized value "I". Field "I.DGE" is uninitialized.
#  195|                 Scopes.back().PoolVar = VD;
#  196|                 Scopes.back().CompoundParent = S;
#  197|->               Scopes.back().Begin = I;
#  198|               }
#  199|             }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransAutoreleasePool.cpp:166:10: var_decl: Declaring variable "I".
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransAutoreleasePool.cpp:208:9: uninit_use: Using uninitialized value "I". Field "I.DGE" is uninitialized.
#  206|         if (isPoolDrain(Scopes.back().PoolVar, child)) {
#  207|           PoolScope &scope = Scopes.back();
#  208|->         scope.End = I;
#  209|           handlePoolScope(scope, S);
#  210|           Scopes.pop_back();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:287:3: var_decl: Declaring variable "data".
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:291:3: uninit_use_in_call: Using uninitialized value "data". Field "data.S" is uninitialized when calling "push_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
#  289|     data.Loc = loc;
#  290|     data.Text1 = text;
#  291|->   CachedActions.push_back(data);
#  292|   }
#  293|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:297:3: var_decl: Declaring variable "data".
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:301:3: uninit_use_in_call: Using uninitialized value "data". Field "data.S" is uninitialized when calling "push_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
#  299|     data.Loc = loc;
#  300|     data.Text1 = text;
#  301|->   CachedActions.push_back(data);
#  302|   }
#  303|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:306:3: var_decl: Declaring variable "data".
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:309:3: uninit_use_in_call: Using uninitialized value "data". Field "data.S" is uninitialized when calling "push_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
#  307|     data.Kind = Act_Remove;
#  308|     data.R1 = range;
#  309|->   CachedActions.push_back(data);
#  310|   }
#  311|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:314:3: var_decl: Declaring variable "data".
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:319:3: uninit_use_in_call: Using uninitialized value "data". Field "data.DiagIDs.InlineElts" is uninitialized when calling "push_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
#  317|       S = E->IgnoreImplicit(); // important for uniquing
#  318|     data.S = S;
#  319|->   CachedActions.push_back(data);
#  320|   }
#  321|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:332:3: var_decl: Declaring variable "data".
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:336:3: uninit_use_in_call: Using uninitialized value "data". Field "data.S" is uninitialized when calling "push_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
#  334|     data.R1 = range;
#  335|     data.R2 = replacementRange;
#  336|->   CachedActions.push_back(data);
#  337|   }
#  338|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:343:3: var_decl: Declaring variable "data".
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:348:3: uninit_use_in_call: Using uninitialized value "data". Field "data.S" is uninitialized when calling "push_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
#  346|     data.Text1 = text;
#  347|     data.Text2 = replacementText;
#  348|->   CachedActions.push_back(data);
#  349|   }
#  350|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:362:3: var_decl: Declaring variable "data".
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:366:3: uninit_use_in_call: Using uninitialized value "data". Field "data.S" is uninitialized when calling "push_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
#  364|     data.R1 = range;
#  365|     data.Loc = parentIndent;
#  366|->   CachedActions.push_back(data);
#  367|   }
#  368|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:375:3: var_decl: Declaring variable "data".
llvm-project-19.0.0.src/clang/lib/ARCMigrate/TransformActions.cpp:379:3: uninit_use_in_call: Using uninitialized value "data". Field "data.S" is uninitialized when calling "push_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
#  377|     data.R1 = range;
#  378|     data.DiagIDs.append(IDs.begin(), IDs.end());
#  379|->   CachedActions.push_back(data);
#  380|     return true;
#  381|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/APValue.cpp:311:10: uninit_in_ctor: Fields of "this" are uninitialized at the beginning of the constructor.
llvm-project-19.0.0.src/clang/lib/AST/APValue.cpp:355:7: uninit_use_in_call: Using uninitialized value "this->Data" when calling "getArrayInitializedElt".
#  353|       MakeArray(RHS.getArrayInitializedElts(), RHS.getArraySize());
#  354|       for (unsigned I = 0, N = RHS.getArrayInitializedElts(); I != N; ++I)
#  355|->       getArrayInitializedElt(I) = RHS.getArrayInitializedElt(I);
#  356|       if (RHS.hasArrayFiller())
#  357|         getArrayFiller() = RHS.getArrayFiller();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/APValue.cpp:311:10: uninit_in_ctor: Fields of "this" are uninitialized at the beginning of the constructor.
llvm-project-19.0.0.src/clang/lib/AST/APValue.cpp:362:7: uninit_use_in_call: Using uninitialized value "this->Data" when calling "getStructBase".
#  360|       MakeStruct(RHS.getStructNumBases(), RHS.getStructNumFields());
#  361|       for (unsigned I = 0, N = RHS.getStructNumBases(); I != N; ++I)
#  362|->       getStructBase(I) = RHS.getStructBase(I);
#  363|       for (unsigned I = 0, N = RHS.getStructNumFields(); I != N; ++I)
#  364|         getStructField(I) = RHS.getStructField(I);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ASTContext.cpp:171:3: var_decl: Declaring variable "Locations".
llvm-project-19.0.0.src/clang/lib/AST/ASTContext.cpp:212:3: uninit_use: Using uninitialized value "Locations". Field "Locations.InlineElts" is uninitialized.
#  210|     }
#  211|   
#  212|->   return Locations;
#  213|   }
#  214|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ASTContext.cpp:12634:3: var_decl: Declaring variable "R".
llvm-project-19.0.0.src/clang/lib/AST/ASTContext.cpp:12638:3: uninit_use: Using uninitialized value "R". Field "R.InlineElts" is uninitialized.
#12636|     assert(!Different);
#12637|     (void)Different;
#12638|->   return R;
#12639|   }
#12640|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ASTContext.cpp:13349:3: var_decl: Declaring variable "R".
llvm-project-19.0.0.src/clang/lib/AST/ASTContext.cpp:13358:3: uninit_use: Using uninitialized value "R". Field "R.InlineElts" is uninitialized.
#13356|       T = NT.split();
#13357|     }
#13358|->   return R;
#13359|   }
#13360|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ASTImporter.cpp:111:5: var_decl: Declaring variable "Redecls".
llvm-project-19.0.0.src/clang/lib/AST/ASTImporter.cpp:118:5: uninit_use: Using uninitialized value "Redecls". Field "Redecls.InlineElts" is uninitialized.
#  116|       Redecls.push_back(D->getFirstDecl());
#  117|       std::reverse(Redecls.begin(), Redecls.end());
#  118|->     return Redecls;
#  119|     }
#  120|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ASTImporter.cpp:10233:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/AST/ASTImporter.cpp:10262:5: uninit_use_in_call: Using uninitialized value "((clang::APValue::Arr const *)(char const *)&Result.Data)->Elts" when calling "operator ()".
#10260|       Result.MakeArray(FromValue.getArrayInitializedElts(),
#10261|                        FromValue.getArraySize());
#10262|->     ImportLoop(((const APValue::Arr *)(const char *)&FromValue.Data)->Elts,
#10263|                  ((const APValue::Arr *)(const char *)&Result.Data)->Elts,
#10264|                  FromValue.getArrayInitializedElts());

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ASTImporter.cpp:10233:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/AST/ASTImporter.cpp:10269:5: uninit_use_in_call: Using uninitialized value "((clang::APValue::StructData const *)(char const *)&Result.Data)->Elts" when calling "operator ()".
#10267|       Result.MakeStruct(FromValue.getStructNumBases(),
#10268|                         FromValue.getStructNumFields());
#10269|->     ImportLoop(
#10270|           ((const APValue::StructData *)(const char *)&FromValue.Data)->Elts,
#10271|           ((const APValue::StructData *)(const char *)&Result.Data)->Elts,

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ASTImporter.cpp:10233:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/AST/ASTImporter.cpp:10279:7: uninit_use_in_call: Using uninitialized value "Result.Data" when calling "~APValue".
#10277|       APValue ImpValue = importChecked(Err, FromValue.getUnionValue());
#10278|       if (Err)
#10279|->       return std::move(Err);
#10280|       Result.setUnion(cast<FieldDecl>(ImpFDecl), ImpValue);
#10281|       break;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ASTImporter.cpp:10233:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/AST/ASTImporter.cpp:10389:3: uninit_use_in_call: Using uninitialized value "Result.Data" when calling "Expected".
#10387|     if (Err)
#10388|       return std::move(Err);
#10389|->   return Result;
#10390|   }
#10391|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/Availability.cpp:24:3: var_decl: Declaring variable "Availability".
llvm-project-19.0.0.src/clang/lib/AST/Availability.cpp:45:3: uninit_use: Using uninitialized value "Availability". Field "Availability.Domain.InlineElts" is uninitialized.
#   43|           Availability.UnconditionallyDeprecated = true;
#   44|     }
#   45|->   return Availability;
#   46|   }
#   47|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/AST/Decl.cpp:3105:3: new_object: Calling single-object form of 'new': "new (Context->Allocate(Size, 8U)) clang::FunctionDecl::DefaultedOrDeletedFunctionInfo".
llvm-project-19.0.0.src/clang/lib/AST/Decl.cpp:3105:3: assign: Assigning: "Info" = "new (Context->Allocate(Size, 8U)) clang::FunctionDecl::DefaultedOrDeletedFunctionInfo".
llvm-project-19.0.0.src/clang/lib/AST/Decl.cpp:3110:3: callee_ptr_arith: Passing "Info" to function "getTrailingObjects" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 3108|     Info->HasDeletedMessage = DeletedMessage != nullptr;
# 3109|   
# 3110|->   std::uninitialized_copy(Lookups.begin(), Lookups.end(),
# 3111|                             Info->getTrailingObjects<DeclAccessPair>());
# 3112|     if (DeletedMessage)

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/AST/Decl.cpp:5292:3: new_object: Calling single-object form of 'new': "new (C, DC, llvm::TrailingObjects<clang::PragmaCommentDecl, char>::additionalSizeToAlloc(Arg.size() + 1UL)) clang::PragmaCommentDecl(DC, CommentLoc, CommentKind)".
llvm-project-19.0.0.src/clang/lib/AST/Decl.cpp:5292:3: assign: Assigning: "PCD" = "new (C, DC, llvm::TrailingObjects<clang::PragmaCommentDecl, char>::additionalSizeToAlloc(Arg.size() + 1UL)) clang::PragmaCommentDecl(DC, CommentLoc, CommentKind)".
llvm-project-19.0.0.src/clang/lib/AST/Decl.cpp:5295:3: callee_ptr_arith: Passing "PCD" to function "getTrailingObjects" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 5293|         new (C, DC, additionalSizeToAlloc<char>(Arg.size() + 1))
# 5294|             PragmaCommentDecl(DC, CommentLoc, CommentKind);
# 5295|->   memcpy(PCD->getTrailingObjects<char>(), Arg.data(), Arg.size());
# 5296|     PCD->getTrailingObjects<char>()[Arg.size()] = '\0';
# 5297|     return PCD;

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/AST/Decl.cpp:5314:3: new_object: Calling single-object form of 'new': "new (C, DC, llvm::TrailingObjects<clang::PragmaDetectMismatchDecl, char>::additionalSizeToAlloc(ValueStart + Value.size() + 1UL)) clang::PragmaDetectMismatchDecl(DC, Loc, ValueStart)".
llvm-project-19.0.0.src/clang/lib/AST/Decl.cpp:5314:3: assign: Assigning: "PDMD" = "new (C, DC, llvm::TrailingObjects<clang::PragmaDetectMismatchDecl, char>::additionalSizeToAlloc(ValueStart + Value.size() + 1UL)) clang::PragmaDetectMismatchDecl(DC, Loc, ValueStart)".
llvm-project-19.0.0.src/clang/lib/AST/Decl.cpp:5317:3: callee_ptr_arith: Passing "PDMD" to function "getTrailingObjects" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 5315|         new (C, DC, additionalSizeToAlloc<char>(ValueStart + Value.size() + 1))
# 5316|             PragmaDetectMismatchDecl(DC, Loc, ValueStart);
# 5317|->   memcpy(PDMD->getTrailingObjects<char>(), Name.data(), Name.size());
# 5318|     PDMD->getTrailingObjects<char>()[Name.size()] = '\0';
# 5319|     memcpy(PDMD->getTrailingObjects<char>() + ValueStart, Value.data(),

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/AST/DeclBase.cpp:109:5: new_object: Calling single-object form of 'new': "new (Buffer) clang::Module *ParentModule".
llvm-project-19.0.0.src/clang/lib/AST/DeclBase.cpp:109:5: ptr_arith: Using "new (Buffer) clang::Module *ParentModule" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  107|       auto *ParentModule =
#  108|           Parent ? cast<Decl>(Parent)->getOwningModule() : nullptr;
#  109|->     return new (Buffer) Module*(ParentModule) + 1;
#  110|     }
#  111|     return ::operator new(Size + Extra, Ctx);

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/AST/DeclCXX.cpp:3227:3: new_object: Calling single-object form of 'new': "new (C, ID, Extra) clang::UsingPackDecl(NULL, NULL, llvm::ArrayRef<clang::NamedDecl *>(std::nullopt))".
llvm-project-19.0.0.src/clang/lib/AST/DeclCXX.cpp:3227:3: assign: Assigning: "Result" = "new (C, ID, Extra) clang::UsingPackDecl(NULL, NULL, llvm::ArrayRef<clang::NamedDecl *>(std::nullopt))".
llvm-project-19.0.0.src/clang/lib/AST/DeclCXX.cpp:3230:3: callee_ptr_arith: Passing "Result" to function "getTrailingObjects" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 3228|         new (C, ID, Extra) UsingPackDecl(nullptr, nullptr, std::nullopt);
# 3229|     Result->NumExpansions = NumExpansions;
# 3230|->   auto *Trail = Result->getTrailingObjects<NamedDecl *>();
# 3231|     for (unsigned I = 0; I != NumExpansions; ++I)
# 3232|       new (Trail + I) NamedDecl*(nullptr);

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/AST/DeclCXX.cpp:3375:3: new_object: Calling single-object form of 'new': "new (C, ID, Extra) clang::DecompositionDecl(C, NULL, clang::SourceLocation(), clang::SourceLocation(), clang::QualType(), NULL, (clang::StorageClass)0, llvm::ArrayRef<clang::BindingDecl *>(std::nullopt))".
llvm-project-19.0.0.src/clang/lib/AST/DeclCXX.cpp:3375:3: assign: Assigning: "Result" = "new (C, ID, Extra) clang::DecompositionDecl(C, NULL, clang::SourceLocation(), clang::SourceLocation(), clang::QualType(), NULL, (clang::StorageClass)0, llvm::ArrayRef<clang::BindingDecl *>(std::nullopt))".
llvm-project-19.0.0.src/clang/lib/AST/DeclCXX.cpp:3380:3: callee_ptr_arith: Passing "Result" to function "getTrailingObjects" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 3378|     // Set up and clean out the bindings array.
# 3379|     Result->NumBindings = NumBindings;
# 3380|->   auto *Trail = Result->getTrailingObjects<BindingDecl *>();
# 3381|     for (unsigned I = 0; I != NumBindings; ++I)
# 3382|       new (Trail + I) BindingDecl*(nullptr);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/DeclCXX.cpp:3497:5: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitStruct(), 0U, 4U)".
llvm-project-19.0.0.src/clang/lib/AST/DeclCXX.cpp:3497:5: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
# 3495|       using llvm::APInt;
# 3496|       using llvm::APSInt;
# 3497|->     APVal = APValue(APValue::UninitStruct(), 0, 4);
# 3498|       APVal.getStructField(0) = APValue(APSInt(APInt(32, PartVal.Part1), true));
# 3499|       APVal.getStructField(1) = APValue(APSInt(APInt(16, PartVal.Part2), true));

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/DeclCXX.cpp:3501:5: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitArray(), 8U, 8U)".
llvm-project-19.0.0.src/clang/lib/AST/DeclCXX.cpp:3501:5: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
# 3499|       APVal.getStructField(1) = APValue(APSInt(APInt(16, PartVal.Part2), true));
# 3500|       APVal.getStructField(2) = APValue(APSInt(APInt(16, PartVal.Part3), true));
# 3501|->     APValue &Arr = APVal.getStructField(3) =
# 3502|           APValue(APValue::UninitArray(), 8, 8);
# 3503|       for (unsigned I = 0; I != 8; ++I) {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/AST/Expr.cpp:2088:3: new_object: Calling single-object form of 'new': "new (Buffer) clang::ImplicitCastExpr(T, Kind, Operand, PathSize, FPO, VK)".
llvm-project-19.0.0.src/clang/lib/AST/Expr.cpp:2088:3: assign: Assigning: "E" = "new (Buffer) clang::ImplicitCastExpr(T, Kind, Operand, PathSize, FPO, VK)".
llvm-project-19.0.0.src/clang/lib/AST/Expr.cpp:2091:5: callee_ptr_arith: Passing "E" to function "getTrailingObjects" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 2089|         new (Buffer) ImplicitCastExpr(T, Kind, Operand, PathSize, FPO, VK);
# 2090|     if (PathSize)
# 2091|->     std::uninitialized_copy_n(BasePath->data(), BasePath->size(),
# 2092|                                 E->getTrailingObjects<CXXBaseSpecifier *>());
# 2093|     return E;

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/AST/Expr.cpp:2115:3: new_object: Calling single-object form of 'new': "new (Buffer) clang::CStyleCastExpr(T, VK, K, Op, PathSize, FPO, WrittenTy, L, R)".
llvm-project-19.0.0.src/clang/lib/AST/Expr.cpp:2115:3: assign: Assigning: "E" = "new (Buffer) clang::CStyleCastExpr(T, VK, K, Op, PathSize, FPO, WrittenTy, L, R)".
llvm-project-19.0.0.src/clang/lib/AST/Expr.cpp:2118:5: callee_ptr_arith: Passing "E" to function "getTrailingObjects" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 2116|         new (Buffer) CStyleCastExpr(T, VK, K, Op, PathSize, FPO, WrittenTy, L, R);
# 2117|     if (PathSize)
# 2118|->     std::uninitialized_copy_n(BasePath->data(), BasePath->size(),
# 2119|                                 E->getTrailingObjects<CXXBaseSpecifier *>());
# 2120|     return E;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/Expr.cpp:2340:5: var_decl: Declaring variable "Value".
llvm-project-19.0.0.src/clang/lib/AST/Expr.cpp:2347:9: uninit_use_in_call: Using uninitialized value "Value.Data" when calling "getStructField".
# 2345|           clang::Preprocessor::processPathForFileMacro(Path, Ctx.getLangOpts(),
# 2346|                                                        Ctx.getTargetInfo());
# 2347|->         Value.getStructField(F->getFieldIndex()) = MakeStringLiteral(Path);
# 2348|         } else if (Name == "_M_function_name") {
# 2349|           // Note: this emits the PrettyFunction name -- different than what

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/Expr.cpp:2340:5: var_decl: Declaring variable "Value".
llvm-project-19.0.0.src/clang/lib/AST/Expr.cpp:2352:9: uninit_use_in_call: Using uninitialized value "Value.Data" when calling "getStructField".
# 2350|           // __builtin_FUNCTION() above returns!
# 2351|           const auto *CurDecl = dyn_cast<Decl>(Context);
# 2352|->         Value.getStructField(F->getFieldIndex()) = MakeStringLiteral(
# 2353|               CurDecl && !isa<TranslationUnitDecl>(CurDecl)
# 2354|                   ? StringRef(PredefinedExpr::ComputeName(

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/Expr.cpp:2340:5: var_decl: Declaring variable "Value".
llvm-project-19.0.0.src/clang/lib/AST/Expr.cpp:2359:9: uninit_use_in_call: Using uninitialized value "Value.Data" when calling "getStructField".
# 2357|         } else if (Name == "_M_line") {
# 2358|           llvm::APSInt IntVal = Ctx.MakeIntValue(PLoc.getLine(), F->getType());
# 2359|->         Value.getStructField(F->getFieldIndex()) = APValue(IntVal);
# 2360|         } else if (Name == "_M_column") {
# 2361|           llvm::APSInt IntVal = Ctx.MakeIntValue(PLoc.getColumn(), F->getType());

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/Expr.cpp:2340:5: var_decl: Declaring variable "Value".
llvm-project-19.0.0.src/clang/lib/AST/Expr.cpp:2362:9: uninit_use_in_call: Using uninitialized value "Value.Data" when calling "getStructField".
# 2360|         } else if (Name == "_M_column") {
# 2361|           llvm::APSInt IntVal = Ctx.MakeIntValue(PLoc.getColumn(), F->getType());
# 2362|->         Value.getStructField(F->getFieldIndex()) = APValue(IntVal);
# 2363|         }
# 2364|       }

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/AST/ExprCXX.cpp:721:3: new_object: Calling single-object form of 'new': "new (Buffer) clang::CXXStaticCastExpr(T, VK, K, Op, PathSize, WrittenTy, FPO, L, RParenLoc, AngleBrackets)".
llvm-project-19.0.0.src/clang/lib/AST/ExprCXX.cpp:721:3: assign: Assigning: "E" = "new (Buffer) clang::CXXStaticCastExpr(T, VK, K, Op, PathSize, WrittenTy, FPO, L, RParenLoc, AngleBrackets)".
llvm-project-19.0.0.src/clang/lib/AST/ExprCXX.cpp:724:5: callee_ptr_arith: Passing "E" to function "getTrailingObjects" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
#  722|                                              FPO, L, RParenLoc, AngleBrackets);
#  723|     if (PathSize)
#  724|->     std::uninitialized_copy_n(BasePath->data(), BasePath->size(),
#  725|                                 E->getTrailingObjects<CXXBaseSpecifier *>());
#  726|     return E;

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/AST/ExprCXX.cpp:748:3: new_object: Calling single-object form of 'new': "new (Buffer) clang::CXXDynamicCastExpr(T, VK, K, Op, PathSize, WrittenTy, L, RParenLoc, AngleBrackets)".
llvm-project-19.0.0.src/clang/lib/AST/ExprCXX.cpp:748:3: assign: Assigning: "E" = "new (Buffer) clang::CXXDynamicCastExpr(T, VK, K, Op, PathSize, WrittenTy, L, RParenLoc, AngleBrackets)".
llvm-project-19.0.0.src/clang/lib/AST/ExprCXX.cpp:752:5: callee_ptr_arith: Passing "E" to function "getTrailingObjects" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
#  750|                                         RParenLoc, AngleBrackets);
#  751|     if (PathSize)
#  752|->     std::uninitialized_copy_n(BasePath->data(), BasePath->size(),
#  753|                                 E->getTrailingObjects<CXXBaseSpecifier *>());
#  754|     return E;

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/AST/ExprCXX.cpp:811:3: new_object: Calling single-object form of 'new': "new (Buffer) clang::CXXReinterpretCastExpr(T, VK, K, Op, PathSize, WrittenTy, L, RParenLoc, AngleBrackets)".
llvm-project-19.0.0.src/clang/lib/AST/ExprCXX.cpp:811:3: assign: Assigning: "E" = "new (Buffer) clang::CXXReinterpretCastExpr(T, VK, K, Op, PathSize, WrittenTy, L, RParenLoc, AngleBrackets)".
llvm-project-19.0.0.src/clang/lib/AST/ExprCXX.cpp:815:5: callee_ptr_arith: Passing "E" to function "getTrailingObjects" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
#  813|                                             RParenLoc, AngleBrackets);
#  814|     if (PathSize)
#  815|->     std::uninitialized_copy_n(BasePath->data(), BasePath->size(),
#  816|                                 E->getTrailingObjects<CXXBaseSpecifier *>());
#  817|     return E;

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/AST/ExprCXX.cpp:860:3: new_object: Calling single-object form of 'new': "new (Buffer) clang::CXXFunctionalCastExpr(T, VK, Written, K, Op, PathSize, FPO, L, R)".
llvm-project-19.0.0.src/clang/lib/AST/ExprCXX.cpp:860:3: assign: Assigning: "E" = "new (Buffer) clang::CXXFunctionalCastExpr(T, VK, Written, K, Op, PathSize, FPO, L, R)".
llvm-project-19.0.0.src/clang/lib/AST/ExprCXX.cpp:863:5: callee_ptr_arith: Passing "E" to function "getTrailingObjects" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
#  861|         CXXFunctionalCastExpr(T, VK, Written, K, Op, PathSize, FPO, L, R);
#  862|     if (PathSize)
#  863|->     std::uninitialized_copy_n(BasePath->data(), BasePath->size(),
#  864|                                 E->getTrailingObjects<CXXBaseSpecifier *>());
#  865|     return E;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:1789:7: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(this->getDecl(), this->isDerivedMember(), llvm::ArrayRef<clang::CXXRecordDecl const *>(this->Path))".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:1789:7: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
# 1787|   
# 1788|       void moveInto(APValue &V) const {
# 1789|->       V = APValue(getDecl(), isDerivedMember(), Path);
# 1790|       }
# 1791|       void setFrom(const APValue &V) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:2739:3: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(Info.Ctx->getFloatTypeSemantics(DestType), 1UL)".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:2739:3: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 2737|                                    QualType SrcType, const APSInt &Value,
# 2738|                                    QualType DestType, APFloat &Result) {
# 2739|->   Result = APFloat(Info.Ctx.getFloatTypeSemantics(DestType), 1);
# 2740|     llvm::RoundingMode RM = getActiveRoundingMode(Info, E);
# 2741|     APFloat::opStatus St = Result.convertFromAPInt(Value, Value.isSigned(), RM);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:3484:3: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitArray(), std::min(unsigned int const(S->getLength()), Elts), Elts)".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:3484:3: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
# 3482|   
# 3483|     unsigned Elts = CAT->getZExtSize();
# 3484|->   Result = APValue(APValue::UninitArray(),
# 3485|                      std::min(S->getLength(), Elts), Elts);
# 3486|     APSInt Value(Info.Ctx.getTypeSize(CharType),

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:3507:3: var_decl: Declaring variable "NewValue".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:3509:5: uninit_use_in_call: Using uninitialized value "NewValue.Data" when calling "getArrayInitializedElt".
# 3507|     APValue NewValue(APValue::UninitArray(), NewElts, Size);
# 3508|     for (unsigned I = 0; I != OldElts; ++I)
# 3509|->     NewValue.getArrayInitializedElt(I).swap(Array.getArrayInitializedElt(I));
# 3510|     for (unsigned I = OldElts; I != NewElts; ++I)
# 3511|       NewValue.getArrayInitializedElt(I) = Array.getArrayFiller();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:4894:5: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitStruct(), RD->getNumBases(), std::distance(RD->field_begin(), RD->field_end()))".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:4894:5: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
# 4892|         return true;
# 4893|       }
# 4894|->     Result = APValue(APValue::UninitStruct(), RD->getNumBases(),
# 4895|                        std::distance(RD->field_begin(), RD->field_end()));
# 4896|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:4915:5: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitArray(), 0U, AT->getZExtSize())".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:4915:5: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
# 4913|     if (auto *AT =
# 4914|             dyn_cast_or_null<ConstantArrayType>(T->getAsArrayTypeUnsafe())) {
# 4915|->     Result = APValue(APValue::UninitArray(), 0, AT->getZExtSize());
# 4916|       if (Result.hasArrayFiller())
# 4917|         Success &=

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:6412:7: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitStruct(), RD->getNumBases(), std::distance(RD->field_begin(), RD->field_end()))".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:6412:7: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
# 6410|     if (!Result.hasValue()) {
# 6411|       if (!RD->isUnion())
# 6412|->       Result = APValue(APValue::UninitStruct(), RD->getNumBases(),
# 6413|                          std::distance(RD->field_begin(), RD->field_end()));
# 6414|       else

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7332:7: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(Semantics, Val)".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7332:7: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 7330|         const llvm::fltSemantics &Semantics =
# 7331|             Info.Ctx.getFloatTypeSemantics(QualType(T, 0));
# 7332|->       return APValue(APFloat(Semantics, Val));
# 7333|       }
# 7334|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7346:5: var_decl: Declaring variable "ResultVal".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7358:11: uninit_use_in_call: Using uninitialized value "ResultVal.Data" when calling "~APValue".
# 7356|               BS.getType(), Layout.getBaseClassOffset(BaseDecl) + Offset);
# 7357|           if (!SubObj)
# 7358|->           return std::nullopt;
# 7359|           ResultVal.getStructBase(I) = *SubObj;
# 7360|         }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7346:5: var_decl: Declaring variable "ResultVal".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7359:9: uninit_use_in_call: Using uninitialized value "ResultVal.Data" when calling "getStructBase".
# 7357|           if (!SubObj)
# 7358|             return std::nullopt;
# 7359|->         ResultVal.getStructBase(I) = *SubObj;
# 7360|         }
# 7361|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7346:5: var_decl: Declaring variable "ResultVal".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7371:9: uninit_use_in_call: Using uninitialized value "ResultVal.Data" when calling "~APValue".
# 7369|           Info.FFDiag(BCE->getBeginLoc(),
# 7370|                       diag::note_constexpr_bit_cast_unsupported_bitfield);
# 7371|->         return std::nullopt;
# 7372|         }
# 7373|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7346:5: var_decl: Declaring variable "ResultVal".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7383:9: uninit_use_in_call: Using uninitialized value "ResultVal.Data" when calling "~APValue".
# 7381|         std::optional<APValue> SubObj = visitType(FieldTy, FieldOffset);
# 7382|         if (!SubObj)
# 7383|->         return std::nullopt;
# 7384|         ResultVal.getStructField(FieldIdx) = *SubObj;
# 7385|         ++FieldIdx;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7346:5: var_decl: Declaring variable "ResultVal".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7384:7: uninit_use_in_call: Using uninitialized value "ResultVal.Data" when calling "getStructField".
# 7382|         if (!SubObj)
# 7383|           return std::nullopt;
# 7384|->       ResultVal.getStructField(FieldIdx) = *SubObj;
# 7385|         ++FieldIdx;
# 7386|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7406:5: var_decl: Declaring variable "ArrayValue".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7411:9: uninit_use_in_call: Using uninitialized value "ArrayValue.Data" when calling "~APValue".
# 7409|             visitType(Ty->getElementType(), Offset + I * ElementWidth);
# 7410|         if (!ElementValue)
# 7411|->         return std::nullopt;
# 7412|         ArrayValue.getArrayInitializedElt(I) = std::move(*ElementValue);
# 7413|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7406:5: var_decl: Declaring variable "ArrayValue".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:7412:7: uninit_use_in_call: Using uninitialized value "ArrayValue.Data" when calling "getArrayInitializedElt".
# 7410|         if (!ElementValue)
# 7411|           return std::nullopt;
# 7412|->       ArrayValue.getArrayInitializedElt(I) = std::move(*ElementValue);
# 7413|       }
# 7414|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:10206:3: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitStruct(), (CD ? CD->getNumBases() : 0U), std::distance(RD->field_begin(), RD->field_end()))".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:10206:3: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
#10204|     assert(!RD->isUnion() && "Expected non-union class type");
#10205|     const CXXRecordDecl *CD = dyn_cast<CXXRecordDecl>(RD);
#10206|->   Result = APValue(APValue::UninitStruct(), CD ? CD->getNumBases() : 0,
#10207|                      std::distance(RD->field_begin(), RD->field_end()));
#10208|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:10367:5: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitStruct(), (CXXRD ? CXXRD->getNumBases() : 0U), std::distance(RD->field_begin(), RD->field_end()))".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:10367:5: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
#10365|   
#10366|     if (!Result.hasValue())
#10367|->     Result = APValue(APValue::UninitStruct(), CXXRD ? CXXRD->getNumBases() : 0,
#10368|                        std::distance(RD->field_begin(), RD->field_end()));
#10369|     unsigned ElementNo = 0;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:10550:3: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitStruct(), 0U, 2U)".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:10550:3: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
#10548|   
#10549|     // FIXME: What if the initializer_list type has base classes, etc?
#10550|->   Result = APValue(APValue::UninitStruct(), 0, 2);
#10551|     Array.moveInto(Result.getStructField(0));
#10552|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:10590:3: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitStruct(), 0U, NumFields)".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:10590:3: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
#10588|            "fields within the closure type");
#10589|   
#10590|->   Result = APValue(APValue::UninitStruct(), /*NumBases*/0, NumFields);
#10591|     // Iterate through all the lambda's closure object's fields and initialize
#10592|     // them.

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:10978:7: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(0.)".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:10978:7: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#10976|     if (SourceTy->isIntegerType()) {
#10977|       if (DestTy->isRealFloatingType()) {
#10978|->       Result = APValue(APFloat(0.0));
#10979|         return HandleIntToFloatCast(Info, E, FPO, SourceTy, Original.getInt(),
#10980|                                     DestTy, Result.getFloat());

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:11116:11: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitArray(), 0U, 0U)".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:11116:11: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
#11114|             // is represented as an ImplicitValueInitExpr of incomplete array
#11115|             // type. In this case, the array has zero elements.
#11116|->           Result = APValue(APValue::UninitArray(), 0, 0);
#11117|             return true;
#11118|           }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:11123:7: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitArray(), 0U, CAT->getZExtSize())".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:11123:7: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
#11121|         }
#11122|   
#11123|->       Result = APValue(APValue::UninitArray(), 0, CAT->getZExtSize());
#11124|         if (!Result.hasArrayFiller())
#11125|           return true;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:11258:3: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitArray(), NumEltsToInit, NumElts)".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:11258:3: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
#11256|                             << NumEltsToInit << ".\n");
#11257|   
#11258|->   Result = APValue(APValue::UninitArray(), NumEltsToInit, NumElts);
#11259|   
#11260|     // If the array was previously zero-initialized, preserve the

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:11307:3: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitArray(), Elements, Elements)".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:11307:3: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
#11305|   
#11306|     uint64_t Elements = CAT->getZExtSize();
#11307|->   Result = APValue(APValue::UninitArray(), Elements, Elements);
#11308|   
#11309|     LValue Subobject = This;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:11358:5: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitArray(), 0U, FinalSize)".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:11358:5: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
#11356|                                                : APValue();
#11357|   
#11358|->     *Value = APValue(APValue::UninitArray(), 0, FinalSize);
#11359|       if (FinalSize == 0)
#11360|         return true;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:11378:7: var_decl: Declaring variable "NewValue".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:11380:9: uninit_use_in_call: Using uninitialized value "NewValue.Data" when calling "getArrayInitializedElt".
#11378|         APValue NewValue(APValue::UninitArray(), N, FinalSize);
#11379|         for (unsigned I = 0; I < OldElts; ++I)
#11380|->         NewValue.getArrayInitializedElt(I).swap(
#11381|               Value->getArrayInitializedElt(I));
#11382|         Value->swap(NewValue);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:11606:5: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::APFixedPoint(V))".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:11606:5: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
#11604|       assert(V.getWidth() == Info.Ctx.getIntWidth(E->getType()) &&
#11605|              "Invalid evaluation result.");
#11606|->     Result = APValue(V);
#11607|       return true;
#11608|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13409:7: var_decl: Declaring variable "RHS".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13410:7: uninit_use_in_call: Using uninitialized value "RHS.Val.Data" when calling "swap".
#13408|         const BinaryOperator *Bop = cast<BinaryOperator>(job.E);
#13409|         EvalResult RHS;
#13410|->       RHS.swap(Result);
#13411|         Result.Failed = !VisitBinOp(job.LHSResult, RHS, Bop, Result.Val);
#13412|         Queue.pop_back();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13492:9: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(LHS.FloatReal.getSemantics())".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13492:9: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#13490|         if (LHSOK) {
#13491|           LHS.makeComplexFloat();
#13492|->         LHS.FloatImag = APFloat(LHS.FloatReal.getSemantics());
#13493|         }
#13494|       } else {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13482:5: var_decl: Declaring variable "LHS".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13498:7: uninit_use_in_call: Using uninitialized value "LHS.FloatImag.U" when calling "~ComplexValue".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13498:7: uninit_use_in_call: Using uninitialized value "LHS.FloatReal.U" when calling "~ComplexValue".
#13496|       }
#13497|       if (!LHSOK && !Info.noteFailure())
#13498|->       return false;
#13499|   
#13500|       if (E->getRHS()->getType()->isRealFloatingType()) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13482:5: var_decl: Declaring variable "RHS".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13498:7: uninit_use_in_call: Using uninitialized value "RHS.FloatImag.U" when calling "~ComplexValue".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13498:7: uninit_use_in_call: Using uninitialized value "RHS.FloatReal.U" when calling "~ComplexValue".
#13496|       }
#13497|       if (!LHSOK && !Info.noteFailure())
#13498|->       return false;
#13499|   
#13500|       if (E->getRHS()->getType()->isRealFloatingType()) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13482:5: var_decl: Declaring variable "LHS".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13502:9: uninit_use_in_call: Using uninitialized value "LHS.FloatImag.U" when calling "~ComplexValue".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13502:9: uninit_use_in_call: Using uninitialized value "LHS.FloatReal.U" when calling "~ComplexValue".
#13500|       if (E->getRHS()->getType()->isRealFloatingType()) {
#13501|         if (!EvaluateFloat(E->getRHS(), RHS.FloatReal, Info) || !LHSOK)
#13502|->         return false;
#13503|         RHS.makeComplexFloat();
#13504|         RHS.FloatImag = APFloat(RHS.FloatReal.getSemantics());

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13482:5: var_decl: Declaring variable "RHS".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13502:9: uninit_use_in_call: Using uninitialized value "RHS.FloatImag.U" when calling "~ComplexValue".
#13500|       if (E->getRHS()->getType()->isRealFloatingType()) {
#13501|         if (!EvaluateFloat(E->getRHS(), RHS.FloatReal, Info) || !LHSOK)
#13502|->         return false;
#13503|         RHS.makeComplexFloat();
#13504|         RHS.FloatImag = APFloat(RHS.FloatReal.getSemantics());

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13504:7: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(RHS.FloatReal.getSemantics())".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13504:7: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#13502|           return false;
#13503|         RHS.makeComplexFloat();
#13504|->       RHS.FloatImag = APFloat(RHS.FloatReal.getSemantics());
#13505|       } else if (!EvaluateComplex(E->getRHS(), RHS, Info) || !LHSOK)
#13506|         return false;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13525:5: var_decl: Declaring variable "LHS".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:13529:7: uninit_use_in_call: Using uninitialized value "LHS.U" when calling "~APFloat".
#13527|       bool LHSOK = EvaluateFloat(E->getRHS(), RHS, Info);
#13528|       if (!LHSOK && !Info.noteFailure())
#13529|->       return false;
#13530|   
#13531|       if (!EvaluateFloat(E->getLHS(), LHS, Info) || !LHSOK)

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:14751:5: var_decl: Declaring variable "RHS".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:14754:7: uninit_use_in_call: Using uninitialized value "RHS.U" when calling "~APFloat".
#14752|       if (!EvaluateFloat(E->getArg(0), Result, Info) ||
#14753|           !EvaluateFloat(E->getArg(1), RHS, Info))
#14754|->       return false;
#14755|       Result.copySign(RHS);
#14756|       return true;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:14765:5: var_decl: Declaring variable "RHS".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:14768:7: uninit_use_in_call: Using uninitialized value "RHS.U" when calling "~APFloat".
#14766|       if (!EvaluateFloat(E->getArg(0), Result, Info) ||
#14767|           !EvaluateFloat(E->getArg(1), RHS, Info))
#14768|->       return false;
#14769|       // When comparing zeroes, return +0.0 if one of the zeroes is positive.
#14770|       if (Result.isZero() && RHS.isZero() && Result.isNegative())

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:14783:5: var_decl: Declaring variable "RHS".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:14786:7: uninit_use_in_call: Using uninitialized value "RHS.U" when calling "~APFloat".
#14784|       if (!EvaluateFloat(E->getArg(0), Result, Info) ||
#14785|           !EvaluateFloat(E->getArg(1), RHS, Info))
#14786|->       return false;
#14787|       // When comparing zeroes, return -0.0 if one of the zeroes is negative.
#14788|       if (Result.isZero() && RHS.isZero() && RHS.isNegative())

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:14844:3: var_decl: Declaring variable "RHS".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:14847:5: uninit_use_in_call: Using uninitialized value "RHS.U" when calling "~APFloat".
#14845|     bool LHSOK = EvaluateFloat(E->getLHS(), Result, Info);
#14846|     if (!LHSOK && !Info.noteFailure())
#14847|->     return false;
#14848|     return EvaluateFloat(E->getRHS(), RHS, Info) && LHSOK &&
#14849|            handleFloatFloatBinOp(Info, E, Result, E->getOpcode(), RHS);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:14964:5: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(Imag->getSemantics())".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:14964:5: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#14962|         return false;
#14963|   
#14964|->     Result.FloatReal = APFloat(Imag.getSemantics());
#14965|       return true;
#14966|     } else {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:15056:5: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(Real->getSemantics())".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:15056:5: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#15054|   
#15055|       Result.makeComplexFloat();
#15056|->     Result.FloatImag = APFloat(Real.getSemantics());
#15057|       return true;
#15058|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:15144:7: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(Real->getSemantics())".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:15144:7: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#15142|       if (LHSOK) {
#15143|         Result.makeComplexFloat();
#15144|->       Result.FloatImag = APFloat(Real.getSemantics());
#15145|       }
#15146|     } else {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:15159:5: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(Real->getSemantics())".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:15159:5: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#15157|         return false;
#15158|       RHS.makeComplexFloat();
#15159|->     RHS.FloatImag = APFloat(Real.getSemantics());
#15160|     } else if (!EvaluateComplex(E->getRHS(), RHS, Info) || !LHSOK)
#15161|       return false;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:15317:13: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(A->getSemantics(), (A->isInfinity() ? 1 : 0))".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:15317:13: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#15315|             } else if ((A.isInfinity() || B.isInfinity()) && C.isFinite() &&
#15316|                        D.isFinite()) {
#15317|->             A = APFloat::copySign(
#15318|                   APFloat(A.getSemantics(), A.isInfinity() ? 1 : 0), A);
#15319|               B = APFloat::copySign(

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:15319:13: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(B->getSemantics(), (B->isInfinity() ? 1 : 0))".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:15319:13: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#15317|               A = APFloat::copySign(
#15318|                   APFloat(A.getSemantics(), A.isInfinity() ? 1 : 0), A);
#15319|->             B = APFloat::copySign(
#15320|                   APFloat(B.getSemantics(), B.isInfinity() ? 1 : 0), B);
#15321|               ResR = APFloat::getInf(ResR.getSemantics()) * (A * C + B * D);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:15324:13: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(C->getSemantics(), (C->isInfinity() ? 1 : 0))".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:15324:13: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#15322|               ResI = APFloat::getInf(ResI.getSemantics()) * (B * C - A * D);
#15323|             } else if (MaxCD.isInfinity() && A.isFinite() && B.isFinite()) {
#15324|->             C = APFloat::copySign(
#15325|                   APFloat(C.getSemantics(), C.isInfinity() ? 1 : 0), C);
#15326|               D = APFloat::copySign(

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:15326:13: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(D->getSemantics(), (D->isInfinity() ? 1 : 0))".
llvm-project-19.0.0.src/clang/lib/AST/ExprConstant.cpp:15326:13: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#15324|               C = APFloat::copySign(
#15325|                   APFloat(C.getSemantics(), C.isInfinity() ? 1 : 0), C);
#15326|->             D = APFloat::copySign(
#15327|                   APFloat(D.getSemantics(), D.isInfinity() ? 1 : 0), D);
#15328|               ResR = APFloat::getZero(ResR.getSemantics()) * (A * C + B * D);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/Interp/Floating.h:123:5: var_decl: Declaring variable "F".
llvm-project-19.0.0.src/clang/lib/AST/Interp/Floating.h:124:5: uninit_use_in_call: Using uninitialized value "F.U" when calling "convertFromAPInt".
#  122|                                           Floating &Result) {
#  123|       APFloat F = APFloat(Sem);
#  124|->     APFloat::opStatus Status = F.convertFromAPInt(Val, Val.isSigned(), RM);
#  125|       Result = Floating(F);
#  126|       return Status;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/Interp/Floating.h:135:5: temporary: Creating temporary of type "clang::interp::APFloat" in "clang::interp::APFloat(Sem, API)".
llvm-project-19.0.0.src/clang/lib/AST/Interp/Floating.h:135:5: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#  133|       llvm::LoadIntFromMemory(API, (const uint8_t *)Buff, Size / 8);
#  134|   
#  135|->     return Floating(APFloat(Sem, API));
#  136|     }
#  137|   

Error: WRAPPER_ESCAPE (CWE-825):
llvm-project-19.0.0.src/clang/lib/AST/Interp/Interp.h:2162:3: extract: Calling "get" which extracts wrapped state from local "NewFrame".
llvm-project-19.0.0.src/clang/lib/AST/Interp/Interp.h:2162:3: escape: The internal representation of local "NewFrame" escapes into "S.Current", but is destroyed when it exits scope.
# 2160|     auto NewFrame = std::make_unique<InterpFrame>(S, Func, OpPC, VarArgSize);
# 2161|     InterpFrame *FrameBefore = S.Current;
# 2162|->   S.Current = NewFrame.get();
# 2163|   
# 2164|     APValue CallResult;

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/lib/AST/Interp/Interp.h:2169:5: alloc_fn: Storage is returned from allocation function "release". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/lib/AST/Interp/Interp.h:2169:5: leaked_storage: Ignoring storage allocated by "NewFrame.release()" leaks it.
# 2167|     // have a caller set.
# 2168|     if (Interpret(S, CallResult)) {
# 2169|->     NewFrame.release(); // Frame was delete'd already.
# 2170|       assert(S.Current == FrameBefore);
# 2171|       return true;

Error: WRAPPER_ESCAPE (CWE-825):
llvm-project-19.0.0.src/clang/lib/AST/Interp/Interp.h:2213:3: extract: Calling "get" which extracts wrapped state from local "NewFrame".
llvm-project-19.0.0.src/clang/lib/AST/Interp/Interp.h:2213:3: escape: The internal representation of local "NewFrame" escapes into "S.Current", but is destroyed when it exits scope.
# 2211|     auto NewFrame = std::make_unique<InterpFrame>(S, Func, OpPC, VarArgSize);
# 2212|     InterpFrame *FrameBefore = S.Current;
# 2213|->   S.Current = NewFrame.get();
# 2214|   
# 2215|     APValue CallResult;

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/lib/AST/Interp/Interp.h:2220:5: alloc_fn: Storage is returned from allocation function "release". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/lib/AST/Interp/Interp.h:2220:5: leaked_storage: Ignoring storage allocated by "NewFrame.release()" leaks it.
# 2218|     // have a caller set.
# 2219|     if (Interpret(S, CallResult)) {
# 2220|->     NewFrame.release(); // Frame was delete'd already.
# 2221|       assert(S.Current == FrameBefore);
# 2222|       return true;

Error: WRAPPER_ESCAPE (CWE-825):
llvm-project-19.0.0.src/clang/lib/AST/Interp/Interp.h:2279:3: extract: Calling "get" which extracts wrapped state from local "NewFrame".
llvm-project-19.0.0.src/clang/lib/AST/Interp/Interp.h:2279:3: escape: The internal representation of local "NewFrame" escapes into "S.Current", but is destroyed when it exits scope.
# 2277|   
# 2278|     InterpFrame *FrameBefore = S.Current;
# 2279|->   S.Current = NewFrame.get();
# 2280|   
# 2281|     if (InterpretBuiltin(S, PC, Func, CE)) {

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/lib/AST/Interp/Interp.h:2282:5: alloc_fn: Storage is returned from allocation function "release". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/lib/AST/Interp/Interp.h:2282:5: leaked_storage: Ignoring storage allocated by "NewFrame.release()" leaks it.
# 2280|   
# 2281|     if (InterpretBuiltin(S, PC, Func, CE)) {
# 2282|->     NewFrame.release();
# 2283|       return true;
# 2284|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/Interp/InterpShared.cpp:18:3: var_decl: Declaring variable "NonNullArgs".
llvm-project-19.0.0.src/clang/lib/AST/Interp/InterpShared.cpp:20:5: uninit_use: Using uninitialized value "NonNullArgs". Field "NonNullArgs.Bits.InlineElts" is uninitialized.
#   18|     llvm::BitVector NonNullArgs;
#   19|     if (!F)
#   20|->     return NonNullArgs;
#   21|   
#   22|     assert(F);

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/Interp/InterpStack.h:49:5: move: "*Ptr" is moved (indicated by "std::move(Ptr)").
llvm-project-19.0.0.src/clang/lib/AST/Interp/InterpStack.h:50:5: use_after_move: "*Ptr" is used after it has been already moved.
#   48|       T *Ptr = &peekInternal<T>();
#   49|       T Value = std::move(*Ptr);
#   50|->     Ptr->~T();
#   51|       shrink(aligned_size<T>());
#   52|       return Value;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/Interp/Pointer.cpp:358:9: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitStruct(), NB, NF)".
llvm-project-19.0.0.src/clang/lib/AST/Interp/Pointer.cpp:358:9: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
#  356|           unsigned NV = Ptr.isBaseClass() ? 0 : Record->getNumVirtualBases();
#  357|   
#  358|->         R = APValue(APValue::UninitStruct(), NB, NF);
#  359|   
#  360|           for (unsigned I = 0; I < NF; ++I) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/Interp/Pointer.cpp:391:7: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(clang::APValue::UninitArray(), 0U, 0U)".
llvm-project-19.0.0.src/clang/lib/AST/Interp/Pointer.cpp:391:7: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
#  389|   
#  390|       if (Ty->isIncompleteArrayType()) {
#  391|->       R = APValue(APValue::UninitArray(), 0, 0);
#  392|         return true;
#  393|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/Interp/Pointer.cpp:398:7: temporary: Creating temporary of type "clang::APValue" in "clang::APValue((clang::APValue::UninitArray)clang::APValue::UninitArray({}), NumElems, NumElems)".
llvm-project-19.0.0.src/clang/lib/AST/Interp/Pointer.cpp:398:7: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
#  396|         const size_t NumElems = Ptr.getNumElems();
#  397|         QualType ElemTy = AT->getElementType();
#  398|->       R = APValue(APValue::UninitArray{}, NumElems, NumElems);
#  399|   
#  400|         bool Ok = true;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ItaniumMangle.cpp:5553:7: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloat(Imag->getValue()).getSemantics())".
llvm-project-19.0.0.src/clang/lib/AST/ItaniumMangle.cpp:5553:7: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 5551|             dyn_cast<FloatingLiteral>(IE->getSubExpr())) {
# 5552|         // Mangle a floating-point zero of the appropriate type.
# 5553|->       mangleFloat(llvm::APFloat(Imag->getValue().getSemantics()));
# 5554|         Out << '_';
# 5555|         mangleFloat(Imag->getValue());

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ItaniumMangle.cpp:6085:7: temporary: Creating temporary of type "clang::APValue" in "clang::APValue(D, false, llvm::ArrayRef<clang::CXXRecordDecl const *>())".
llvm-project-19.0.0.src/clang/lib/AST/ItaniumMangle.cpp:6085:7: uninit_use_in_call: Using uninitialized value "<temporary>.Data" when calling "~APValue".
# 6083|       if (D->isCXXInstanceMember())
# 6084|         // Simple pointer-to-member with no conversion.
# 6085|->       Value = APValue(D, /*IsDerivedMember=*/false, /*Path=*/{});
# 6086|       else if (D->getType()->isArrayType() &&
# 6087|                Ctx.hasSimilarType(Ctx.getDecayedType(D->getType()),

Error: USE_AFTER_FREE (CWE-416):
llvm-project-19.0.0.src/clang/lib/AST/NestedNameSpecifier.cpp:538:5: freed_arg: "free" frees "this->Buffer". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/lib/AST/NestedNameSpecifier.cpp:558:3: deref_arg: Calling "Append" dereferences freed pointer "this->Buffer".
#  556|     // Deep copy.
#  557|     BufferSize = 0;
#  558|->   Append(Other.Buffer, Other.Buffer + Other.BufferSize, Buffer, BufferSize,
#  559|            BufferCapacity);
#  560|     return *this;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/ODRDiagsEmitter.cpp:1199:9: var_decl: Declaring variable "ExpandedList".
llvm-project-19.0.0.src/clang/lib/AST/ODRDiagsEmitter.cpp:1208:9: uninit_use: Using uninitialized value "ExpandedList". Field "ExpandedList.InlineElts" is uninitialized.
# 1206|                                llvm::make_pointer_range(TA.getPackAsArray()));
# 1207|           }
# 1208|->         return ExpandedList;
# 1209|         };
# 1210|         llvm::SmallVector<const TemplateArgument *, 8> FirstExpandedList =

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/AST/OpenMPClause.cpp:304:3: address_of: Taking address with "&this->Condition" yields a singleton pointer.
llvm-project-19.0.0.src/clang/lib/AST/OpenMPClause.cpp:304:3: ptr_arith: Using "&this->Condition" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  302|     if (Stmt **C = getAddrOfExprAsWritten(getPreInitStmt()))
#  303|       return child_range(C, C + 1);
#  304|->   return child_range(&Condition, &Condition + 1);
#  305|   }
#  306|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/AST/OpenMPClause.cpp:1654:3: new_object: Calling single-object form of 'new': "new (Mem) clang::OMPInitClause(InteropInfo.IsTarget, InteropInfo.IsTargetSync, StartLoc, LParenLoc, VarLoc, EndLoc, InteropInfo.PreferTypes.size() + 1UL)".
llvm-project-19.0.0.src/clang/lib/AST/OpenMPClause.cpp:1654:3: assign: Assigning: "Clause" = "new (Mem) clang::OMPInitClause(InteropInfo.IsTarget, InteropInfo.IsTargetSync, StartLoc, LParenLoc, VarLoc, EndLoc, InteropInfo.PreferTypes.size() + 1UL)".
llvm-project-19.0.0.src/clang/lib/AST/OpenMPClause.cpp:1658:3: callee_ptr_arith: Passing "Clause" to function "getTrailingObjects" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 1656|         VarLoc, EndLoc, InteropInfo.PreferTypes.size() + 1);
# 1657|     Clause->setInteropVar(InteropVar);
# 1658|->   llvm::copy(InteropInfo.PreferTypes, Clause->getTrailingObjects<Expr *>() + 1);
# 1659|     return Clause;
# 1660|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/AST/PrintfFormatString.cpp:112:3: var_decl: Declaring variable "FS".
llvm-project-19.0.0.src/clang/lib/AST/PrintfFormatString.cpp:423:3: uninit_use_in_call: Using uninitialized value "FS". Field "FS.HasThousandsGrouping.position" is uninitialized when calling "SpecifierResult".
#  421|       return !H.HandleInvalidPrintfConversionSpecifier(FS, Start, Len);
#  422|     }
#  423|->   return PrintfSpecifierResult(Start, FS);
#  424|   }
#  425|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:111:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:118:7: uninit_use_in_call: Using uninitialized value "Result.Value.Value" when calling "TokenInfo".
#  116|         Result.Text = StringRef(CodeCompletionLocation, 0);
#  117|         CodeCompletionLocation = nullptr;
#  118|->       return Result;
#  119|       }
#  120|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:111:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:118:7: uninit_use_in_call: Using uninitialized value "Result.Value.Value" when calling "~TokenInfo".
#  116|         Result.Text = StringRef(CodeCompletionLocation, 0);
#  117|         CodeCompletionLocation = nullptr;
#  118|->       return Result;
#  119|       }
#  120|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:111:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:124:7: uninit_use_in_call: Using uninitialized value "Result.Value.Value" when calling "TokenInfo".
#  122|         Result.Kind = TokenInfo::TK_Eof;
#  123|         Result.Text = "";
#  124|->       return Result;
#  125|       }
#  126|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:111:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:124:7: uninit_use_in_call: Using uninitialized value "Result.Value.Value" when calling "~TokenInfo".
#  122|         Result.Kind = TokenInfo::TK_Eof;
#  123|         Result.Text = "";
#  124|->       return Result;
#  125|       }
#  126|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:111:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:130:7: uninit_use_in_call: Using uninitialized value "Result.Value.Value" when calling "~TokenInfo".
#  128|       case '#':
#  129|         Code = Code.drop_until([](char c) { return c == '\n'; });
#  130|->       return getNextToken();
#  131|       case ',':
#  132|         Result.Kind = TokenInfo::TK_Comma;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:111:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:184:13: uninit_use_in_call: Using uninitialized value "Result.Value.Value" when calling "TokenInfo".
#  182|               Result.Text = Code.substr(0, TokenLength);
#  183|               Code = Code.drop_front(TokenLength);
#  184|->             return Result;
#  185|             }
#  186|             if (TokenLength == Code.size() || !isAlphanumeric(Code[TokenLength]))

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:111:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:184:13: uninit_use_in_call: Using uninitialized value "Result.Value.Value" when calling "~TokenInfo".
#  182|               Result.Text = Code.substr(0, TokenLength);
#  183|               Code = Code.drop_front(TokenLength);
#  184|->             return Result;
#  185|             }
#  186|             if (TokenLength == Code.size() || !isAlphanumeric(Code[TokenLength]))

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:111:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:210:5: uninit_use_in_call: Using uninitialized value "Result.Value.Value" when calling "TokenInfo".
#  208|   
#  209|       Result.Range.End = currentLocation();
#  210|->     return Result;
#  211|     }
#  212|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:111:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:210:5: uninit_use_in_call: Using uninitialized value "Result.Value.Value" when calling "~TokenInfo".
#  208|   
#  209|       Result.Range.End = currentLocation();
#  210|->     return Result;
#  211|     }
#  212|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:473:3: var_decl: Declaring variable "EndToken".
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:492:11: uninit_use_in_call: Using uninitialized value "EndToken.Value.Value" when calling "~TokenInfo".
#  490|             Error->addError(CommaToken.Range, Error->ET_ParserNoComma)
#  491|                 << CommaToken.Text;
#  492|->           return false;
#  493|           }
#  494|         }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:499:7: var_decl: Declaring variable "ArgValue".
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:504:9: uninit_use_in_call: Using uninitialized value "ArgValue.Value.Value" when calling "~ParserValue".
#  502|         if (Tokenizer->peekNextToken().Kind == TokenInfo::TK_CodeCompletion) {
#  503|           addExpressionCompletions();
#  504|->         return false;
#  505|         }
#  506|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:499:7: var_decl: Declaring variable "ArgValue".
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:525:9: uninit_use_in_call: Using uninitialized value "ArgValue.Value.Value" when calling "~ParserValue".
#  523|                           Error->ET_RegistryMatcherNotFound)
#  524|               << NodeMatcherToken.Text;
#  525|->         return false;
#  526|         }
#  527|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:473:3: var_decl: Declaring variable "EndToken".
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:548:5: uninit_use_in_call: Using uninitialized value "EndToken.Value.Value" when calling "~TokenInfo".
#  546|     if (EndToken.Kind == TokenInfo::TK_Eof) {
#  547|       Error->addError(OpenToken.Range, Error->ET_ParserNoCloseParen);
#  548|->     return false;
#  549|     }
#  550|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:641:3: var_decl: Declaring variable "EndToken".
llvm-project-19.0.0.src/clang/lib/ASTMatchers/Dynamic/Parser.cpp:660:11: uninit_use_in_call: Using uninitialized value "EndToken.Value.Value" when calling "~TokenInfo".
#  658|             Error->addError(CommaToken.Range, Error->ET_ParserNoComma)
#  659|                 << CommaToken.Text;
#  660|->           return false;
#  661|           }
#  662|         }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Analysis/CloneDetection.cpp:381:7: var_decl: Declaring variable "NewGroup".
llvm-project-19.0.0.src/clang/lib/Analysis/CloneDetection.cpp:403:7: uninit_use_in_call: Using uninitialized value "NewGroup". Field "NewGroup.InlineElts" is uninitialized when calling "push_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
#  401|         // We created a new clone group with matching hash codes and move it to
#  402|         // the result vector.
#  403|->       Result.push_back(NewGroup);
#  404|       }
#  405|     }

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp:36:35: constructor_uses_global_object: The constructor of global object "DataflowLog[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "DataflowLog[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   34|   #include <vector>
#   35|   
#   36|-> static llvm::cl::opt<std::string> DataflowLog(
#   37|       "dataflow-log", llvm::cl::Hidden, llvm::cl::ValueOptional,
#   38|       llvm::cl::desc("Emit log of dataflow analysis. With no arg, writes textual "

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Analysis/FlowSensitive/SimplifyConstraints.cpp:68:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Analysis/FlowSensitive/SimplifyConstraints.cpp:72:3: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
#   70|          MemberIt != EquivalentAtoms.member_end(); ++MemberIt)
#   71|       Result.push_back(*MemberIt);
#   72|->   return Result;
#   73|   }
#   74|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Analysis/IssueHash.cpp:176:3: var_decl: Declaring variable "Res".
llvm-project-19.0.0.src/clang/lib/Analysis/IssueHash.cpp:182:3: uninit_use: Using uninitialized value "Res". Field "Res.InlineElts" is uninitialized.
#  180|     llvm::MD5::stringifyResult(MD5Res, Res);
#  181|   
#  182|->   return Res;
#  183|   }
#  184|   

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/clang/lib/Analysis/MacroExpansionContext.cpp:227:3: move: "TokenAsString" is moved (indicated by "std::move(TokenAsString)").
llvm-project-19.0.0.src/clang/lib/Analysis/MacroExpansionContext.cpp:230:5: use_after_move: "TokenAsString" is used after it has been already moved.
#  228|         ExpandedTokens.try_emplace(CurrExpansionLoc, std::move(TokenAsString));
#  229|     if (!Inserted)
#  230|->     It->getSecond().append(TokenAsString);
#  231|   }
#  232|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Analysis/UninitializedValues.cpp:520:5: var_decl: Declaring variable "Use".
llvm-project-19.0.0.src/clang/lib/Analysis/UninitializedValues.cpp:524:7: uninit_use: Using uninitialized value "Use". Field "Use.UninitBranches.InlineElts" is uninitialized.
#  522|       assert(isUninitialized(v));
#  523|       if (Use.getKind() == UninitUse::Always)
#  524|->       return Use;
#  525|   
#  526|       // If an edge which leads unconditionally to this use did not initialize

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Analysis/UnsafeBufferUsage.cpp:2808:3: var_decl: Declaring variable "FixItsSharedByParms".
llvm-project-19.0.0.src/clang/lib/Analysis/UnsafeBufferUsage.cpp:2822:3: uninit_use: Using uninitialized value "FixItsSharedByParms". Field "FixItsSharedByParms.InlineElts" is uninitialized.
# 2820|         FixItsForVariable.erase(Member);
# 2821|     }
# 2822|->   return FixItsSharedByParms;
# 2823|   }
# 2824|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/Basic/Diagnostic.cpp:820:7: address_of: Taking address with "&CodepointValue" yields a singleton pointer.
llvm-project-19.0.0.src/clang/lib/Basic/Diagnostic.cpp:820:7: assign: Assigning: "CpPtr" = "&CodepointValue".
llvm-project-19.0.0.src/clang/lib/Basic/Diagnostic.cpp:824:7: ptr_arith: Using "CpPtr" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  822|         const unsigned char *CodepointEnd =
#  823|             Begin + llvm::getNumBytesForUTF8(*Begin);
#  824|->       llvm::ConversionResult Res = llvm::ConvertUTF8toUTF32(
#  825|             &Begin, CodepointEnd, &CpPtr, CpPtr + 1, llvm::strictConversion);
#  826|         (void)Res;

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/Basic/Sanitizers.cpp:57:3: overrun-buffer-val: Overrunning buffer pointed to by "&this->maskLoToHigh[0]" of 16 bytes by passing it to a function which accesses it at byte offset 63.
#   55|   
#   56|   llvm::hash_code SanitizerMask::hash_value() const {
#   57|->   return llvm::hash_combine_range(&maskLoToHigh[0], &maskLoToHigh[kNumElem]);
#   58|   }
#   59|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Basic/TargetID.cpp:23:3: var_decl: Declaring variable "Ret".
llvm-project-19.0.0.src/clang/lib/Basic/TargetID.cpp:27:5: uninit_use: Using uninitialized value "Ret". Field "Ret.InlineElts" is uninitialized.
#   25|                                  : llvm::AMDGPU::parseArchR600(Proc);
#   26|     if (ProcKind == llvm::AMDGPU::GK_NONE)
#   27|->     return Ret;
#   28|     auto Features = T.isAMDGCN() ? llvm::AMDGPU::getArchAttrAMDGCN(ProcKind)
#   29|                                  : llvm::AMDGPU::getArchAttrR600(ProcKind);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Basic/TargetID.cpp:23:3: var_decl: Declaring variable "Ret".
llvm-project-19.0.0.src/clang/lib/Basic/TargetID.cpp:34:3: uninit_use: Using uninitialized value "Ret". Field "Ret.InlineElts" is uninitialized.
#   32|     if (Features & llvm::AMDGPU::FEATURE_XNACK)
#   33|       Ret.push_back("xnack");
#   34|->   return Ret;
#   35|   }
#   36|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/CodeGen/BackendUtil.cpp:103:22: constructor_uses_global_object: The constructor of global object "llvm::ClSanitizeOnOptimizerEarlyEP" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ClSanitizeOnOptimizerEarlyEP" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  101|   
#  102|   // Experiment to move sanitizers earlier.
#  103|-> static cl::opt<bool> ClSanitizeOnOptimizerEarlyEP(
#  104|       "sanitizer-early-opt-ep", cl::Optional,
#  105|       cl::desc("Insert sanitizers on OptimizerEarlyEP."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/CodeGen/BackendUtil.cpp:109:41: constructor_uses_global_object: The constructor of global object "llvm::ClPGOColdFuncAttr" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ClPGOColdFuncAttr" might be created before "Allocator" is available.
#  107|   // Experiment to mark cold functions as optsize/minsize/optnone.
#  108|   // TODO: remove once this is exposed as a proper driver flag.
#  109|-> static cl::opt<PGOOptions::ColdFuncOpt> ClPGOColdFuncAttr(
#  110|       "pgo-cold-func-opt", cl::init(PGOOptions::ColdFuncOpt::Default), cl::Hidden,
#  111|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/CodeGen/BackendUtil.cpp:109:41: constructor_uses_global_object: The constructor of global object "llvm::ClPGOColdFuncAttr" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ClPGOColdFuncAttr" might be created before "fuzzer::TPC" is available.
#  107|   // Experiment to mark cold functions as optsize/minsize/optnone.
#  108|   // TODO: remove once this is exposed as a proper driver flag.
#  109|-> static cl::opt<PGOOptions::ColdFuncOpt> ClPGOColdFuncAttr(
#  110|       "pgo-cold-func-opt", cl::init(PGOOptions::ColdFuncOpt::Default), cl::Hidden,
#  111|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/CodeGen/BackendUtil.cpp:109:41: constructor_uses_global_object: The constructor of global object "llvm::ClPGOColdFuncAttr" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ClPGOColdFuncAttr" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  107|   // Experiment to mark cold functions as optsize/minsize/optnone.
#  108|   // TODO: remove once this is exposed as a proper driver flag.
#  109|-> static cl::opt<PGOOptions::ColdFuncOpt> ClPGOColdFuncAttr(
#  110|       "pgo-cold-func-opt", cl::init(PGOOptions::ColdFuncOpt::Default), cl::Hidden,
#  111|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/CodeGen/BackendUtil.cpp:109:41: constructor_uses_global_object: The constructor of global object "llvm::ClPGOColdFuncAttr" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ClPGOColdFuncAttr" might be created before "scudo::RegionPageMap::Buffers" is available.
#  107|   // Experiment to mark cold functions as optsize/minsize/optnone.
#  108|   // TODO: remove once this is exposed as a proper driver flag.
#  109|-> static cl::opt<PGOOptions::ColdFuncOpt> ClPGOColdFuncAttr(
#  110|       "pgo-cold-func-opt", cl::init(PGOOptions::ColdFuncOpt::Default), cl::Hidden,
#  111|       cl::desc(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/CodeGen/BackendUtil.cpp:125:15: constructor_uses_global_object: The constructor of global object "llvm::ClRelinkBuiltinBitcodePostop" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::ClRelinkBuiltinBitcodePostop" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  123|   
#  124|   // Re-link builtin bitcodes after optimization
#  125|-> cl::opt<bool> ClRelinkBuiltinBitcodePostop(
#  126|       "relink-builtin-bitcode-postop", cl::Optional,
#  127|       cl::desc("Re-link builtin bitcodes after optimization."));

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGBlocks.h:223:7: var_decl: Declaring variable "v".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGBlocks.h:226:7: uninit_use: Using uninitialized value "v". Field "v.Offset" is uninitialized.
#  224|         v.Data = reinterpret_cast<uintptr_t>(value);
#  225|         v.Cap = Cap;
#  226|->       return v;
#  227|       }
#  228|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGBuiltin.cpp:17169:5: var_decl: Declaring variable "Result" without initializer.
llvm-project-19.0.0.src/clang/lib/CodeGen/CGBuiltin.cpp:17192:5: uninit_use: Using uninitialized value "Result".
#17190|         Result =
#17191|             StoreSubVec(1, NumBytes - Stored - 1, IsLE ? Stored : 15 - Stored);
#17192|->     return Result;
#17193|     }
#17194|     // Square root

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGCall.cpp:386:3: var_decl: Declaring variable "argTypes".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGCall.cpp:389:3: uninit_use: Using uninitialized value "argTypes". Field "argTypes.InlineElts" is uninitialized.
#  387|     for (auto &arg : args)
#  388|       argTypes.push_back(ctx.getCanonicalParamType(arg.Ty));
#  389|->   return argTypes;
#  390|   }
#  391|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGCall.cpp:394:3: var_decl: Declaring variable "argTypes".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGCall.cpp:397:3: uninit_use: Using uninitialized value "argTypes". Field "argTypes.InlineElts" is uninitialized.
#  395|     for (auto &arg : args)
#  396|       argTypes.push_back(ctx.getCanonicalParamType(arg->getType()));
#  397|->   return argTypes;
#  398|   }
#  399|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGCall.cpp:403:3: var_decl: Declaring variable "result".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGCall.cpp:407:3: uninit_use: Using uninitialized value "result". Field "result.InlineElts" is uninitialized.
#  405|       addExtParameterInfosForCall(result, proto, prefixArgs, totalArgs);
#  406|     }
#  407|->   return result;
#  408|   }
#  409|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGCall.cpp:1062:7: overrun-local: Overrunning array of 1 8-byte elements at element index 1 (byte offset 15) by dereferencing pointer "&BS + 1".
# 1060|       for (const CXXBaseSpecifier *BS : RExp->Bases) {
# 1061|         // Perform a single step derived-to-base conversion.
# 1062|->       Address Base =
# 1063|             GetAddressOfBaseClass(This, Ty->getAsCXXRecordDecl(), &BS, &BS + 1,
# 1064|                                   /*NullCheckValue=*/false, SourceLocation());

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGCall.cpp:1119:7: overrun-local: Overrunning array of 1 8-byte elements at element index 1 (byte offset 15) by dereferencing pointer "&BS + 1".
# 1117|       for (const CXXBaseSpecifier *BS : RExp->Bases) {
# 1118|         // Perform a single step derived-to-base conversion.
# 1119|->       Address Base =
# 1120|             GetAddressOfBaseClass(This, Ty->getAsCXXRecordDecl(), &BS, &BS + 1,
# 1121|                                   /*NullCheckValue=*/false, SourceLocation());

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGCall.cpp:4821:3: var_decl: Declaring variable "BundleList".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGCall.cpp:4823:3: uninit_use: Using uninitialized value "BundleList". Field "BundleList.InlineElts" is uninitialized.
# 4821|     SmallVector<llvm::OperandBundleDef, 1> BundleList;
# 4822|     BundleList.emplace_back("funclet", CurrentFuncletPad);
# 4823|->   return BundleList;
# 4824|   }
# 4825|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGCleanup.cpp:166:3: new_object: Calling single-object form of 'new': "new (Buffer) clang::CodeGen::EHCleanupScope(IsNormalCleanup, IsEHCleanup, Size, this->BranchFixups.size(), this->InnermostNormalCleanup, this->InnermostEHScope)".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGCleanup.cpp:166:3: assign: Assigning: "Scope" = "new (Buffer) clang::CodeGen::EHCleanupScope(IsNormalCleanup, IsEHCleanup, Size, this->BranchFixups.size(), this->InnermostNormalCleanup, this->InnermostEHScope)".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGCleanup.cpp:190:3: callee_ptr_arith: Passing "Scope" to function "getCleanupBuffer" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
#  188|       CGF->EmitSehCppScopeBegin();
#  189|   
#  190|->   return Scope->getCleanupBuffer();
#  191|   }
#  192|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGCoroutine.cpp:557:3: var_decl: Declaring variable "BundleList".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGCoroutine.cpp:562:3: uninit_use: Using uninitialized value "BundleList". Field "BundleList.InlineElts" is uninitialized.
#  560|       BundleList.emplace_back("funclet", EHPad);
#  561|   
#  562|->   return BundleList;
#  563|   }
#  564|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGDebugInfo.cpp:1108:3: var_decl: Declaring variable "Identifier".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGDebugInfo.cpp:1112:5: uninit_use: Using uninitialized value "Identifier". Field "Identifier.InlineElts" is uninitialized.
# 1110|   
# 1111|     if (!needsTypeIdentifier(TD, CGM, TheCU))
# 1112|->     return Identifier;
# 1113|     if (const auto *RD = dyn_cast<CXXRecordDecl>(TD))
# 1114|       if (RD->getDefinition())

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGDebugInfo.cpp:1108:3: var_decl: Declaring variable "Identifier".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGDebugInfo.cpp:1117:9: uninit_use: Using uninitialized value "Identifier". Field "Identifier.InlineElts" is uninitialized.
# 1115|         if (RD->isDynamicClass() &&
# 1116|             CGM.getVTableLinkage(RD) == llvm::GlobalValue::ExternalLinkage)
# 1117|->         return Identifier;
# 1118|   
# 1119|     // TODO: This is using the RTTI name. Is there a better way to get

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGDebugInfo.cpp:1108:3: var_decl: Declaring variable "Identifier".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGDebugInfo.cpp:1123:3: uninit_use: Using uninitialized value "Identifier". Field "Identifier.InlineElts" is uninitialized.
# 1121|     llvm::raw_svector_ostream Out(Identifier);
# 1122|     CGM.getCXXABI().getMangleContext().mangleCXXRTTIName(QualType(Ty, 0), Out);
# 1123|->   return Identifier;
# 1124|   }
# 1125|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGDebugInfo.cpp:1326:3: var_decl: Declaring variable "SpecArgs".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGDebugInfo.cpp:1351:3: uninit_use: Using uninitialized value "SpecArgs". Field "SpecArgs.InlineElts" is uninitialized.
# 1349|       SubstArgs = SubstArgs.drop_front();
# 1350|     }
# 1351|->   return SpecArgs;
# 1352|   }
# 1353|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExpr.cpp:57:28: constructor_uses_global_object: The constructor of global object "ClSanitizeDebugDeoptimization" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ClSanitizeDebugDeoptimization" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   55|   
#   56|   // Experiment to make sanitizers easier to debug
#   57|-> static llvm::cl::opt<bool> ClSanitizeDebugDeoptimization(
#   58|       "ubsan-unique-traps", llvm::cl::Optional,
#   59|       llvm::cl::desc("Deoptimize traps for UBSAN so there is 1 trap per check."));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExpr.cpp:63:28: constructor_uses_global_object: The constructor of global object "ClSanitizeGuardChecks" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ClSanitizeGuardChecks" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   61|   // TODO: Introduce frontend options to enabled per sanitizers, similar to
#   62|   // `fsanitize-trap`.
#   63|-> static llvm::cl::opt<bool> ClSanitizeGuardChecks(
#   64|       "ubsan-guard-checks", llvm::cl::Optional,
#   65|       llvm::cl::desc("Guard UBSAN checks with `llvm.allow.ubsan.check()`."));

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExpr.cpp:1219:5: var_decl: Declaring variable "FVal".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExpr.cpp:1221:7: uninit_use_in_call: Using uninitialized value "FVal.U" when calling "changeSign".
# 1219|       llvm::APFloat FVal(getContext().getFloatTypeSemantics(ElemTy), 1);
# 1220|       if (!isInc)
# 1221|->       FVal.changeSign();
# 1222|       NextVal = llvm::ConstantFP::get(getLLVMContext(), FVal);
# 1223|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExpr.cpp:1219:5: var_decl: Declaring variable "FVal".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExpr.cpp:1222:5: uninit_use_in_call: Using uninitialized value "FVal.U" when calling "get".
# 1220|       if (!isInc)
# 1221|         FVal.changeSign();
# 1222|->     NextVal = llvm::ConstantFP::get(getLLVMContext(), FVal);
# 1223|   
# 1224|       // Add the inc/dec to the real part.

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExpr.cpp:6125:3: var_decl: Declaring variable "result".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExpr.cpp:6186:3: uninit_use: Using uninitialized value "result". Field "result.LV.LVType" is uninitialized.
# 6184|       opaques[i].unbind(CGF);
# 6185|   
# 6186|->   return result;
# 6187|   }
# 6188|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExpr.cpp:6125:3: var_decl: Declaring variable "result".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExpr.cpp:6186:3: uninit_use: Using uninitialized value "result". Field "result.RV.IsVolatile" is uninitialized.
# 6184|       opaques[i].unbind(CGF);
# 6185|   
# 6186|->   return result;
# 6187|   }
# 6188|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExprCXX.cpp:264:3: var_decl: Declaring variable "TrivialAssignmentRHS".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExprCXX.cpp:317:7: uninit_use: Using uninitialized value "TrivialAssignmentRHS". Field "TrivialAssignmentRHS.LVType" is uninitialized.
#  315|         // emitting call arguments, in order to preserve TBAA information from
#  316|         // the RHS.
#  317|->       LValue RHS = isa<CXXOperatorCallExpr>(CE)
#  318|                          ? TrivialAssignmentRHS
#  319|                          : EmitLValue(*CE->arg_begin());

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExprScalar.cpp:986:5: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(SrcSema, 1UL)".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExprScalar.cpp:986:5: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#  984|       // Find the largest value which is too small to represent (before
#  985|       // truncation toward zero).
#  986|->     MinSrc.subtract(APFloat(SrcSema, 1), APFloat::rmTowardNegative);
#  987|   
#  988|     APSInt Max = APSInt::getMaxValue(Width, Unsigned);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExprScalar.cpp:998:5: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(SrcSema, 1UL)".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExprScalar.cpp:998:5: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#  996|       // Find the smallest value which is too large to represent (before
#  997|       // truncation toward zero).
#  998|->     MaxSrc.add(APFloat(SrcSema, 1), APFloat::rmTowardPositive);
#  999|   
# 1000|     // If we're converting from __half, convert the range to float to match

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExprScalar.cpp:2810:7: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(1f)".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGExprScalar.cpp:2810:7: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 2808|         llvm::Instruction::BinaryOps op =
# 2809|             isInc ? llvm::Instruction::FAdd : llvm::Instruction::FSub;
# 2810|->       llvm::Value *amt = llvm::ConstantFP::get(
# 2811|             VMContext, llvm::APFloat(static_cast<float>(1.0)));
# 2812|         llvm::Value *old =

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGObjC.cpp:1342:3: overrun-buffer-val: Overrunning struct type _ZN5clang11DeclRefExprE of 32 bytes by passing it to a function which accesses it at byte offset 47.
# 1340|                        argVar->getType().getNonReferenceType(), VK_LValue,
# 1341|                        SourceLocation());
# 1342|->   llvm::Value *argAddr = CGF.EmitLValue(&argRef).getPointer(CGF);
# 1343|     args.add(RValue::get(argAddr), CGF.getContext().VoidPtrTy);
# 1344|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGObjC.cpp:1386:3: overrun-buffer-val: Overrunning struct type _ZN5clang11DeclRefExprE of 32 bytes by passing it to a function which accesses it at byte offset 47.
# 1384|                        argVar->getType().getNonReferenceType(), VK_LValue,
# 1385|                        SourceLocation());
# 1386|->   llvm::Value *argAddr = CGF.EmitLValue(&argRef).getPointer(CGF);
# 1387|     args.add(RValue::get(argAddr), CGF.getContext().VoidPtrTy);
# 1388|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGObjC.cpp:3136:3: var_decl: Declaring variable "result" without initializer.
llvm-project-19.0.0.src/clang/lib/CodeGen/CGObjC.cpp:3177:3: uninit_use: Using uninitialized value "result".
# 3175|       opaques[i].unbind(CGF);
# 3176|   
# 3177|->   return result;
# 3178|   }
# 3179|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGObjCMac.cpp:1194:5: var_decl: Declaring variable "result".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGObjCMac.cpp:1203:5: uninit_use: Using uninitialized value "result". Field "result.InlineElts" is uninitialized.
# 1201|       }
# 1202|   
# 1203|->     return result;
# 1204|     }
# 1205|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGOpenMPRuntime.cpp:376:7: overrun-buffer-val: Overrunning struct type _ZN5clang11DeclRefExprE of 32 bytes by passing it to a function which accesses it at byte offset 47.
#  374|                         VD->getType().getNonReferenceType(), VK_LValue,
#  375|                         C.getLocation());
#  376|->       PrivScope.addPrivate(VD, CGF.EmitLValue(&DRE).getAddress(CGF));
#  377|       }
#  378|       (void)PrivScope.Privatize();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGOpenMPRuntime.cpp:7504:5: var_decl: Declaring variable "ElementTypeSize" without initializer.
llvm-project-19.0.0.src/clang/lib/CodeGen/CGOpenMPRuntime.cpp:7567:5: uninit_use_in_call: Using uninitialized value "ElementTypeSize" when calling "get".
# 7565|       auto *DI = DimSizes.begin() + 1;
# 7566|       // Product of dimension.
# 7567|->     llvm::Value *DimProd =
# 7568|           llvm::ConstantInt::get(CGF.CGM.Int64Ty, ElementTypeSize);
# 7569|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGOpenMPRuntime.cpp:11784:3: var_decl: Declaring variable "Checker".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGOpenMPRuntime.cpp:11792:3: uninit_use_in_call: Using uninitialized value "Checker.IVLVal". Field "Checker.IVLVal.LVType" is uninitialized when calling "getFoundData".
#11790|     LValue IVLVal;
#11791|     llvm::Function *FoundFn;
#11792|->   std::tie(FoundE, FoundD, UniqueDeclName, IVLVal, FoundFn) =
#11793|         Checker.getFoundData();
#11794|     if (FoundFn != CGF.CurFn) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGStmt.cpp:922:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGStmt.cpp:945:7: uninit_use_in_call: Using uninitialized value "Result.Val.Data" when calling "~EvalResult".
#  943|       if (HasEmptyBody && CondIsTrue) {
#  944|         CurFn->removeFnAttr(llvm::Attribute::MustProgress);
#  945|->       return false;
#  946|       }
#  947|       return true;

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGStmtOpenMP.cpp:875:13: overrun-buffer-val: Overrunning struct type _ZN5clang11DeclRefExprE of 32 bytes by passing it to a function which accesses it at byte offset 47.
#  873|             } else {
#  874|               assert(!CE && "Expected non-constant firstprivate.");
#  875|->             OriginalLVal = EmitLValue(&DRE);
#  876|             }
#  877|           } else {

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGStmtOpenMP.cpp:878:11: overrun-buffer-val: Overrunning struct type _ZN5clang11DeclRefExprE of 32 bytes by passing it to a function which accesses it at byte offset 47.
#  876|             }
#  877|           } else {
#  878|->           OriginalLVal = EmitLValue(&DRE);
#  879|           }
#  880|           QualType Type = VD->getType();

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGStmtOpenMP.cpp:1000:11: overrun-buffer-val: Overrunning struct type _ZN5clang11DeclRefExprE of 32 bytes by passing it to a function which accesses it at byte offset 47.
#  998|             DeclRefExpr DRE(getContext(), const_cast<VarDecl *>(VD), true,
#  999|                             (*IRef)->getType(), VK_LValue, (*IRef)->getExprLoc());
# 1000|->           MasterAddr = EmitLValue(&DRE).getAddress(*this);
# 1001|             LocalDeclMap.erase(VD);
# 1002|           } else {

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGStmtOpenMP.cpp:1079:9: overrun-buffer-val: Overrunning struct type _ZN5clang11DeclRefExprE of 32 bytes by passing it to a function which accesses it at byte offset 47.
# 1077|                           CapturedStmtInfo->lookup(OrigVD) != nullptr,
# 1078|                           (*IRef)->getType(), VK_LValue, (*IRef)->getExprLoc());
# 1079|->         PrivateScope.addPrivate(DestVD, EmitLValue(&DRE).getAddress(*this));
# 1080|           // Check if the variable is also a firstprivate: in this case IInit is
# 1081|           // not generated. Initialization of this variable will happen in codegen

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGStmtOpenMP.cpp:2213:7: overrun-buffer-val: Overrunning struct type _ZN5clang11DeclRefExprE of 32 bytes by passing it to a function which accesses it at byte offset 47.
# 2211|                         CapturedStmtInfo->lookup(OrigVD) != nullptr,
# 2212|                         (*IC)->getType(), VK_LValue, (*IC)->getExprLoc());
# 2213|->       Address OrigAddr = EmitLValue(&DRE).getAddress(*this);
# 2214|         CodeGenFunction::OMPPrivateScope VarScope(*this);
# 2215|         VarScope.addPrivate(OrigVD, OrigAddr);

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGStmtOpenMP.cpp:2280:7: overrun-buffer-val: Overrunning struct type _ZN5clang11DeclRefExprE of 32 bytes by passing it to a function which accesses it at byte offset 47.
# 2278|                         LocalDeclMap.count(VD) || CapturedStmtInfo->lookup(VD),
# 2279|                         E->getType(), VK_LValue, E->getExprLoc());
# 2280|->       (void)LoopScope.addPrivate(PrivateVD, EmitLValue(&DRE).getAddress(*this));
# 2281|       } else {
# 2282|         (void)LoopScope.addPrivate(PrivateVD, VarEmission.getAllocatedAddress());

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGStmtOpenMP.cpp:2452:9: overrun-buffer-val: Overrunning struct type _ZN5clang11DeclRefExprE of 32 bytes by passing it to a function which accesses it at byte offset 47.
# 2450|                           /*RefersToEnclosingVariableOrCapture=*/false,
# 2451|                           (*IPC)->getType(), VK_LValue, (*IPC)->getExprLoc());
# 2452|->         OrigAddr = EmitLValue(&DRE).getAddress(*this);
# 2453|         }
# 2454|         OMPPrivateScope VarScope(*this);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGStmtOpenMP.cpp:3813:3: var_decl: Declaring variable "HasLastprivates" without initializer.
llvm-project-19.0.0.src/clang/lib/CodeGen/CGStmtOpenMP.cpp:3853:3: uninit_use: Using uninitialized value "HasLastprivates".
# 3851|                                                    emitDispatchForLoopBounds);
# 3852|     }
# 3853|->   return HasLastprivates;
# 3854|   }
# 3855|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGStmtOpenMP.cpp:4861:9: overrun-buffer-val: Overrunning struct type _ZN5clang11DeclRefExprE of 32 bytes by passing it to a function which accesses it at byte offset 47.
# 4859|                           Pair.second->getType(), VK_LValue,
# 4860|                           Pair.second->getExprLoc());
# 4861|->         Scope.addPrivate(Pair.first, CGF.EmitLValue(&DRE).getAddress(CGF));
# 4862|         }
# 4863|         for (const auto &Pair : PrivatePtrs) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGValue.h:442:5: var_decl: Declaring variable "R".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGValue.h:447:5: uninit_use: Using uninitialized value "R". Field "R" is uninitialized.
#  445|       R.Addr = Addr;
#  446|       assert(Addr.getType()->isPointerTy());
#  447|->     return R;
#  448|     }
#  449|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CGValue.h:488:5: var_decl: Declaring variable "R".
llvm-project-19.0.0.src/clang/lib/CodeGen/CGValue.h:493:5: uninit_use: Using uninitialized value "R". Field "R" is uninitialized.
#  491|                    LValueBaseInfo(AlignmentSource::Decl), TBAAAccessInfo());
#  492|       R.V = V;
#  493|->     return R;
#  494|     }
#  495|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CodeGenABITypes.cpp:86:3: var_decl: Declaring variable "implicitArgs".
llvm-project-19.0.0.src/clang/lib/CodeGen/CodeGenABITypes.cpp:93:3: uninit_use: Using uninitialized value "implicitArgs". Field "implicitArgs.Prefix.InlineElts" is uninitialized.
#   91|       implicitArgs.Suffix.push_back(arg.Value);
#   92|     }
#   93|->   return implicitArgs;
#   94|   }
#   95|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/CodeGen/CodeGenModule.cpp:82:28: constructor_uses_global_object: The constructor of global object "LimitedCoverage" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "LimitedCoverage" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   80|   using namespace CodeGen;
#   81|   
#   82|-> static llvm::cl::opt<bool> LimitedCoverage(
#   83|       "limited-coverage-experimental", llvm::cl::Hidden,
#   84|       llvm::cl::desc("Emit limited coverage mapping information (experimental)"));

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CodeGenModule.cpp:6514:3: var_decl: Declaring variable "EvalResult".
llvm-project-19.0.0.src/clang/lib/CodeGen/CodeGenModule.cpp:6589:3: uninit_use_in_call: Using uninitialized value "EvalResult.Val.Data" when calling "~EvalResult".
# 6587|     Entry = CV;
# 6588|   
# 6589|->   return ConstantAddress(CV, Type, Align);
# 6590|   }
# 6591|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/CodeGen/CodeGenPGO.cpp:31:5: constructor_uses_global_object: The constructor of global object "EnableValueProfiling" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EnableValueProfiling" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   29|   
#   30|   static llvm::cl::opt<bool>
#   31|->     EnableValueProfiling("enable-value-profiling",
#   32|                            llvm::cl::desc("Enable value profiling"),
#   33|                            llvm::cl::Hidden, llvm::cl::init(false));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/CodeGen/CoverageMappingGen.cpp:36:5: constructor_uses_global_object: The constructor of global object "llvm::EnableSingleByteCoverage" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "llvm::EnableSingleByteCoverage" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   34|   namespace llvm {
#   35|   cl::opt<bool>
#   36|->     EnableSingleByteCoverage("enable-single-byte-coverage",
#   37|                                llvm::cl::ZeroOrMore,
#   38|                                llvm::cl::desc("Enable single byte coverage"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/CodeGen/CoverageMappingGen.cpp:42:28: constructor_uses_global_object: The constructor of global object "EmptyLineCommentCoverage" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "EmptyLineCommentCoverage" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   40|   } // namespace llvm
#   41|   
#   42|-> static llvm::cl::opt<bool> EmptyLineCommentCoverage(
#   43|       "emptyline-comment-coverage",
#   44|       llvm::cl::desc("Emit emptylines and comment lines as skipped regions (only "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/CodeGen/CoverageMappingGen.cpp:48:21: constructor_uses_global_object: The constructor of global object "SystemHeadersCoverage" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SystemHeadersCoverage" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   46|       llvm::cl::init(true), llvm::cl::Hidden);
#   47|   
#   48|-> llvm::cl::opt<bool> SystemHeadersCoverage(
#   49|       "system-headers-coverage",
#   50|       llvm::cl::desc("Enable collecting coverage from system headers"),

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/CodeGen/CoverageMappingGen.cpp:517:5: var_decl: Declaring variable "Filter".
llvm-project-19.0.0.src/clang/lib/CodeGen/CoverageMappingGen.cpp:541:5: uninit_use: Using uninitialized value "Filter". Field "Filter.Vector.InlineElts" is uninitialized.
#  539|             SR.LineEnd, SR.ColumnEnd));
#  540|       }
#  541|->     return Filter;
#  542|     }
#  543|   };

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Driver/Compilation.cpp:104:10: assign: Assigning: "ArgPtr" = "*__begin2".
llvm-project-19.0.0.src/clang/lib/Driver/Compilation.cpp:105:7: set_unmanaged_raw_ptr: Function "AddSynthesizedArg" sets a smart pointer with "ArgPtr".
llvm-project-19.0.0.src/clang/lib/Driver/Compilation.cpp:104:10: assign: Assigning: "ArgPtr" = "*__begin2".
llvm-project-19.0.0.src/clang/lib/Driver/Compilation.cpp:105:7: multiple_init_smart_ptr: Function "AddSynthesizedArg" sets a smart pointer with "ArgPtr", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Driver/Compilation.cpp:105:7: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  103|       // Add allocated arguments to the final DAL.
#  104|       for (auto *ArgPtr : AllocatedArgs)
#  105|->       Entry->AddSynthesizedArg(ArgPtr);
#  106|     }
#  107|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Driver/Driver.cpp:5486:7: var_decl: Declaring variable "DevA".
llvm-project-19.0.0.src/clang/lib/Driver/Driver.cpp:5494:7: uninit_use: Using uninitialized value "DevA". Field "DevA.InlineElts" is uninitialized.
# 5492|                                          DepA->getOffloadingDeviceKind()));
# 5493|         });
# 5494|->       return DevA;
# 5495|       }
# 5496|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/Driver/OffloadBundler.cpp:68:5: constructor_uses_global_object: The constructor of global object "ClangOffloadBundlerTimerGroup" itself makes use of global object "TimerLock" defined in another compilation unit.  The order of construction is unspecified, so "ClangOffloadBundlerTimerGroup" might be created before "TimerLock" is available.
#   66|   
#   67|   static llvm::TimerGroup
#   68|->     ClangOffloadBundlerTimerGroup("Clang Offload Bundler Timer Group",
#   69|                                     "Timer group for clang offload bundler");
#   70|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/Driver/OffloadBundler.cpp:68:5: destructor_uses_global_object: The destructor of global object "ClangOffloadBundlerTimerGroup" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "ClangOffloadBundlerTimerGroup" might be called after "fuzzer::TPC" has already been destroyed.
#   66|   
#   67|   static llvm::TimerGroup
#   68|->     ClangOffloadBundlerTimerGroup("Clang Offload Bundler Timer Group",
#   69|                                     "Timer group for clang offload bundler");
#   70|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Driver/OffloadBundler.cpp:491:5: var_decl: Declaring variable "File".
llvm-project-19.0.0.src/clang/lib/Driver/OffloadBundler.cpp:495:5: uninit_use_in_call: Using uninitialized value "File". Field "File.InlineElts" is uninitialized when calling "push_front". [Note: The source code implementation of the function has been overridden by a builtin model.]
#  493|               sys::fs::createTemporaryFile("clang-offload-bundler", "tmp", File))
#  494|         return createFileError(File, EC);
#  495|->     Files.push_front(File);
#  496|   
#  497|       if (Contents) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp:172:3: var_decl: Declaring variable "BCLibs".
llvm-project-19.0.0.src/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp:177:3: uninit_use: Using uninitialized value "BCLibs". Field "BCLibs.InlineElts" is uninitialized.
#  175|       BCLibs.emplace_back(BCLib);
#  176|   
#  177|->   return BCLibs;
#  178|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Driver/ToolChains/CommonArgs.cpp:330:3: var_decl: Declaring variable "UnifiedFeatures".
llvm-project-19.0.0.src/clang/lib/Driver/ToolChains/CommonArgs.cpp:337:3: uninit_use: Using uninitialized value "UnifiedFeatures". Field "UnifiedFeatures.InlineElts" is uninitialized.
#  335|     }
#  336|   
#  337|->   return UnifiedFeatures;
#  338|   }
#  339|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Driver/ToolChains/OHOS.cpp:287:3: var_decl: Declaring variable "Paths".
llvm-project-19.0.0.src/clang/lib/Driver/ToolChains/OHOS.cpp:308:3: uninit_use: Using uninitialized value "Paths". Field "Paths.InlineElts" is uninitialized.
#  306|     Paths.push_back(P.c_str());
#  307|   
#  308|->   return Paths;
#  309|   }
#  310|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Driver/ToolChains/OHOS.cpp:408:3: var_decl: Declaring variable "Paths".
llvm-project-19.0.0.src/clang/lib/Driver/ToolChains/OHOS.cpp:412:3: uninit_use: Using uninitialized value "Paths". Field "Paths.InlineElts" is uninitialized.
#  410|     Paths.push_back(
#  411|         makePath({getDriver().ResourceDir, "lib", getMultiarchTriple(Triple)}));
#  412|->   return Paths;
#  413|   }
#  414|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Driver/Types.cpp:387:3: var_decl: Declaring variable "P".
llvm-project-19.0.0.src/clang/lib/Driver/Types.cpp:393:3: uninit_use: Using uninitialized value "P". Field "P.InlineElts" is uninitialized.
#  391|         P.push_back(static_cast<phases::ID>(I));
#  392|     assert(P.size() <= phases::MaxNumberOfPhases && "Too many phases in list");
#  393|->   return P;
#  394|   }
#  395|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Edit/Commit.cpp:187:3: var_decl: Declaring variable "data".
llvm-project-19.0.0.src/clang/lib/Edit/Commit.cpp:193:3: uninit_use_in_call: Using uninitialized value "data". Field "data.Length" is uninitialized when calling "push_back".
#  191|     data.Text = text.copy(StrAlloc);
#  192|     data.BeforePrev = beforePreviousInsertions;
#  193|->   CachedEdits.push_back(data);
#  194|   }
#  195|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Edit/Commit.cpp:217:3: var_decl: Declaring variable "data".
llvm-project-19.0.0.src/clang/lib/Edit/Commit.cpp:222:3: uninit_use_in_call: Using uninitialized value "data". Field "data.BeforePrev" is uninitialized when calling "push_back".
#  220|     data.Offset = Offs;
#  221|     data.Length = Len;
#  222|->   CachedEdits.push_back(data);
#  223|   }
#  224|   

Error: INTEGER_OVERFLOW (CWE-190):
llvm-project-19.0.0.src/clang/lib/Format/BreakableToken.cpp:103:3: tainted_data_return: Called function "Text.find_last_of(clang::format::Blanks, MaxSplitBytes)", and a possible return value is known to be less than zero.
llvm-project-19.0.0.src/clang/lib/Format/BreakableToken.cpp:103:3: assign: Assigning: "SpaceOffset" = "Text.find_last_of(clang::format::Blanks, MaxSplitBytes)".
llvm-project-19.0.0.src/clang/lib/Format/BreakableToken.cpp:130:5: overflow: The expression "SpaceOffset + 1UL" is considered to have possibly overflowed.
llvm-project-19.0.0.src/clang/lib/Format/BreakableToken.cpp:130:5: overflow_sink: "SpaceOffset + 1UL", which might have overflowed, is passed to "Text[SpaceOffset + 1UL]".
#  128|   
#  129|       // Avoid ever breaking before a @tag or a { in JavaScript.
#  130|->     if (Style.isJavaScript() && SpaceOffset + 1 < Text.size() &&
#  131|           (Text[SpaceOffset + 1] == '{' || Text[SpaceOffset + 1] == '@')) {
#  132|         SpaceOffset = Text.find_last_of(Blanks, SpaceOffset);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/Format/BreakableToken.cpp:691:28: constructor_uses_global_object: The constructor of global object "clang::format::BreakableBlockComment::ContentIndentingJavadocAnnotations" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::format::BreakableBlockComment::ContentIndentingJavadocAnnotations" might be created before "Allocator" is available.
#  689|   
#  690|   const llvm::StringSet<>
#  691|->     BreakableBlockComment::ContentIndentingJavadocAnnotations = {
#  692|           "@param", "@return",     "@returns", "@throws",  "@type", "@template",
#  693|           "@see",   "@deprecated", "@define",  "@exports", "@mods", "@private",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/Format/BreakableToken.cpp:691:28: constructor_uses_global_object: The constructor of global object "clang::format::BreakableBlockComment::ContentIndentingJavadocAnnotations" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::format::BreakableBlockComment::ContentIndentingJavadocAnnotations" might be created before "fuzzer::TPC" is available.
#  689|   
#  690|   const llvm::StringSet<>
#  691|->     BreakableBlockComment::ContentIndentingJavadocAnnotations = {
#  692|           "@param", "@return",     "@returns", "@throws",  "@type", "@template",
#  693|           "@see",   "@deprecated", "@define",  "@exports", "@mods", "@private",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/Format/BreakableToken.cpp:691:28: constructor_uses_global_object: The constructor of global object "clang::format::BreakableBlockComment::ContentIndentingJavadocAnnotations" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::format::BreakableBlockComment::ContentIndentingJavadocAnnotations" might be created before "scudo::RegionPageMap::Buffers" is available.
#  689|   
#  690|   const llvm::StringSet<>
#  691|->     BreakableBlockComment::ContentIndentingJavadocAnnotations = {
#  692|           "@param", "@return",     "@returns", "@throws",  "@type", "@template",
#  693|           "@see",   "@deprecated", "@define",  "@exports", "@mods", "@private",

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Format/Format.cpp:3842:3: var_decl: Declaring variable "LangOpts".
llvm-project-19.0.0.src/clang/lib/Format/Format.cpp:3868:3: uninit_use: Using uninitialized value "LangOpts". Field "LangOpts.GPUDefaultStream" is uninitialized.
# 3866|     LangOpts.DeclSpecKeyword = 1; // To get __declspec.
# 3867|     LangOpts.C99 = 1; // To get kw_restrict for non-underscore-prefixed restrict.
# 3868|->   return LangOpts;
# 3869|   }
# 3870|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/Format/FormatTokenLexer.cpp:397:43: constructor_uses_global_object: The constructor of global object "clang::format::FormatTokenLexer::CSharpAttributeTargets" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "clang::format::FormatTokenLexer::CSharpAttributeTargets" might be created before "Allocator" is available.
#  395|   // Valid C# attribute targets:
#  396|   // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets
#  397|-> const llvm::StringSet<> FormatTokenLexer::CSharpAttributeTargets = {
#  398|       "assembly", "module",   "field",  "event", "method",
#  399|       "param",    "property", "return", "type",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/Format/FormatTokenLexer.cpp:397:43: constructor_uses_global_object: The constructor of global object "clang::format::FormatTokenLexer::CSharpAttributeTargets" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "clang::format::FormatTokenLexer::CSharpAttributeTargets" might be created before "fuzzer::TPC" is available.
#  395|   // Valid C# attribute targets:
#  396|   // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets
#  397|-> const llvm::StringSet<> FormatTokenLexer::CSharpAttributeTargets = {
#  398|       "assembly", "module",   "field",  "event", "method",
#  399|       "param",    "property", "return", "type",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/Format/FormatTokenLexer.cpp:397:43: constructor_uses_global_object: The constructor of global object "clang::format::FormatTokenLexer::CSharpAttributeTargets" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "clang::format::FormatTokenLexer::CSharpAttributeTargets" might be created before "scudo::RegionPageMap::Buffers" is available.
#  395|   // Valid C# attribute targets:
#  396|   // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets
#  397|-> const llvm::StringSet<> FormatTokenLexer::CSharpAttributeTargets = {
#  398|       "assembly", "module",   "field",  "event", "method",
#  399|       "param",    "property", "return", "type",

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Format/SortJavaScriptImports.cpp:266:5: var_decl: Declaring variable "ReferencesSorted".
llvm-project-19.0.0.src/clang/lib/Format/SortJavaScriptImports.cpp:284:5: uninit_use: Using uninitialized value "ReferencesSorted". Field "ReferencesSorted.InlineElts" is uninitialized.
#  282|                                 SortChunk.end());
#  283|       }
#  284|->     return ReferencesSorted;
#  285|     }
#  286|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/lib/Frontend/ASTUnit.cpp:711:7: alloc_fn: Storage is returned from allocation function "release". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/lib/Frontend/ASTUnit.cpp:711:7: leaked_storage: Failing to save or free storage allocated by "this->OwningPreviousClient.release()" leaks it.
#  709|     ~CaptureDroppedDiagnostics() {
#  710|       if (Diags.getClient() == &Client)
#  711|->       Diags.setClient(PreviousClient, !!OwningPreviousClient.release());
#  712|     }
#  713|   };

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/lib/Frontend/CompilerInstance.cpp:453:3: alloc_fn: Storage is returned from allocation function "operator new". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/lib/Frontend/CompilerInstance.cpp:453:3: var_assign: Assigning: "HeaderInfo" = storage returned from "new clang::HeaderSearch(std::shared_ptr<clang::HeaderSearchOptions>(this->getHeaderSearchOptsPtr()), this->getSourceManager(), this->getDiagnostics(), this->getLangOpts(), this->getTarget())".
llvm-project-19.0.0.src/clang/lib/Frontend/CompilerInstance.cpp:456:3: noescape: Resource "HeaderInfo" is not freed or pointed-to in "make_shared".
llvm-project-19.0.0.src/clang/lib/Frontend/CompilerInstance.cpp:539:1: leaked_storage: Variable "HeaderInfo" going out of scope leaks the storage it points to.
#  537|                              /*ShowDepth=*/true, /*MSStyle=*/true);
#  538|     }
#  539|-> }
#  540|   
#  541|   std::string CompilerInstance::getSpecificModuleCachePath(StringRef ModuleHash) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Frontend/CompilerInvocation.cpp:1400:3: var_decl: Declaring variable "Values".
llvm-project-19.0.0.src/clang/lib/Frontend/CompilerInvocation.cpp:1402:3: uninit_use: Using uninitialized value "Values". Field "Values.InlineElts" is uninitialized.
# 1400|     SmallVector<StringRef, 4> Values;
# 1401|     serializeSanitizerSet(S, Values);
# 1402|->   return Values;
# 1403|   }
# 1404|   

Error: WRAPPER_ESCAPE (CWE-825):
llvm-project-19.0.0.src/clang/lib/Frontend/FrontendAction.cpp:1120:5: extract: Calling "get" which extracts wrapped state from temporary of type "std::unique_ptr<clang::ASTConsumer, std::default_delete<clang::ASTConsumer> >".
llvm-project-19.0.0.src/clang/lib/Frontend/FrontendAction.cpp:1120:5: escape: The internal representation of temporary of type "std::unique_ptr<clang::ASTConsumer, std::default_delete<clang::ASTConsumer> >" escapes, but is destroyed when it exits scope.
# 1118|       CI.resetAndLeakSema();
# 1119|       CI.resetAndLeakASTContext();
# 1120|->     llvm::BuryPointer(CI.takeASTConsumer().get());
# 1121|     } else {
# 1122|       CI.setSema(nullptr);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Frontend/LayoutOverrideSource.cpp:49:3: var_decl: Declaring variable "CurrentLayout".
llvm-project-19.0.0.src/clang/lib/Frontend/LayoutOverrideSource.cpp:62:9: uninit_use_in_call: Using uninitialized value "CurrentLayout.Align" when calling "operator =".
llvm-project-19.0.0.src/clang/lib/Frontend/LayoutOverrideSource.cpp:62:9: uninit_use_in_call: Using uninitialized value "CurrentLayout.Size" when calling "operator =".
#   60|         // Flush the last type/layout, if there is one.
#   61|         if (!CurrentType.empty())
#   62|->         Layouts[CurrentType] = CurrentLayout;
#   63|         CurrentLayout = Layout();
#   64|   

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:991:3: assign: Assigning: "<storage from new>" = "operator new(64UL)".
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:991:3: set_unmanaged_raw_ptr: Function "unique_ptr" sets "MicrosoftExtHandler" with "new <unnamed>::UnknownPragmaHandler("#pragma", Callbacks, PP->getLangOpts().MicrosoftExt)".
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1004:3: get_raw_ptr: Function "get" returns a pointer managed by "MicrosoftExtHandler".
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1004:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "MicrosoftExtHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1004:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
# 1002|         /*RequireTokenExpansion=*/PP.getLangOpts().MicrosoftExt));
# 1003|   
# 1004|->   PP.AddPragmaHandler(MicrosoftExtHandler.get());
# 1005|     PP.AddPragmaHandler("GCC", GCCHandler.get());
# 1006|     PP.AddPragmaHandler("clang", ClangHandler.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:996:3: assign: Assigning: "<storage from new>" = "operator new(64UL)".
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:996:3: set_unmanaged_raw_ptr: Function "unique_ptr" sets "GCCHandler" with "new <unnamed>::UnknownPragmaHandler("#pragma GCC", Callbacks, PP->getLangOpts().MicrosoftExt)".
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1005:3: get_raw_ptr: Function "get" returns a pointer managed by "GCCHandler".
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1005:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "GCCHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1005:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
# 1003|   
# 1004|     PP.AddPragmaHandler(MicrosoftExtHandler.get());
# 1005|->   PP.AddPragmaHandler("GCC", GCCHandler.get());
# 1006|     PP.AddPragmaHandler("clang", ClangHandler.get());
# 1007|   

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1000:3: assign: Assigning: "<storage from new>" = "operator new(64UL)".
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1000:3: set_unmanaged_raw_ptr: Function "unique_ptr" sets "ClangHandler" with "new <unnamed>::UnknownPragmaHandler("#pragma clang", Callbacks, PP->getLangOpts().MicrosoftExt)".
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1006:3: get_raw_ptr: Function "get" returns a pointer managed by "ClangHandler".
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1006:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "ClangHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1006:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
# 1004|     PP.AddPragmaHandler(MicrosoftExtHandler.get());
# 1005|     PP.AddPragmaHandler("GCC", GCCHandler.get());
# 1006|->   PP.AddPragmaHandler("clang", ClangHandler.get());
# 1007|   
# 1008|     // The tokens after pragma omp need to be expanded.

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1013:3: assign: Assigning: "<storage from new>" = "operator new(64UL)".
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1013:3: set_unmanaged_raw_ptr: Function "unique_ptr" sets "OpenMPHandler" with "new <unnamed>::UnknownPragmaHandler("#pragma omp", Callbacks, true)".
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1016:3: get_raw_ptr: Function "get" returns a pointer managed by "OpenMPHandler".
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1016:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "OpenMPHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Frontend/PrintPreprocessedOutput.cpp:1016:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
# 1014|         new UnknownPragmaHandler("#pragma omp", Callbacks,
# 1015|                                  /*RequireTokenExpansion=*/true));
# 1016|->   PP.AddPragmaHandler("omp", OpenMPHandler.get());
# 1017|   
# 1018|     PP.addPPCallbacks(std::unique_ptr<PPCallbacks>(Callbacks));

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/lib/Frontend/Rewrite/FixItRewriter.cpp:48:3: alloc_fn: Storage is returned from allocation function "release". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/lib/Frontend/Rewrite/FixItRewriter.cpp:48:3: leaked_storage: Failing to save or free storage allocated by "this->Owner.release()" leaks it.
#   46|   
#   47|   FixItRewriter::~FixItRewriter() {
#   48|->   Diags.setClient(Client, Owner.release() != nullptr);
#   49|   }
#   50|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/Frontend/TextDiagnostic.cpp:139:5: address_of: Taking address with "&C" yields a singleton pointer.
llvm-project-19.0.0.src/clang/lib/Frontend/TextDiagnostic.cpp:139:5: assign: Assigning: "CPtr" = "&C".
llvm-project-19.0.0.src/clang/lib/Frontend/TextDiagnostic.cpp:143:5: ptr_arith: Using "CPtr" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  141|       // Begin and end before conversion.
#  142|       unsigned char const *OriginalBegin = Begin;
#  143|->     llvm::ConversionResult Res = llvm::ConvertUTF8toUTF32(
#  144|           &Begin, End, &CPtr, CPtr + 1, llvm::strictConversion);
#  145|       (void)Res;

Error: INTEGER_OVERFLOW (CWE-190):
llvm-project-19.0.0.src/clang/lib/Frontend/TextDiagnostic.cpp:1056:7: tainted_data_return: Called function "llvm::sys::locale::columnWidth(llvm::StringRef(H.CodeToInsert))", and a possible return value may be less than zero.
llvm-project-19.0.0.src/clang/lib/Frontend/TextDiagnostic.cpp:1056:7: overflow: The expression "HintCol + llvm::sys::locale::columnWidth(llvm::StringRef(H.CodeToInsert))" might be negative, but is used in a context that treats it as unsigned.
llvm-project-19.0.0.src/clang/lib/Frontend/TextDiagnostic.cpp:1056:7: assign: Assigning: "PrevHintEndCol" = "HintCol + llvm::sys::locale::columnWidth(llvm::StringRef(H.CodeToInsert))".
llvm-project-19.0.0.src/clang/lib/Frontend/TextDiagnostic.cpp:1043:9: overflow: The expression "PrevHintEndCol + 1U" is deemed underflowed because at least one of its arguments has underflowed.
llvm-project-19.0.0.src/clang/lib/Frontend/TextDiagnostic.cpp:1043:9: assign: Assigning: "HintCol" = "PrevHintEndCol + 1U".
llvm-project-19.0.0.src/clang/lib/Frontend/TextDiagnostic.cpp:1047:7: overflow: The expression "HintCol - PrevHintEndCol" is deemed underflowed because at least one of its arguments has underflowed.
llvm-project-19.0.0.src/clang/lib/Frontend/TextDiagnostic.cpp:1047:7: overflow: The expression "FixItInsertionLine.size() + (HintCol - PrevHintEndCol)" is deemed underflowed because at least one of its arguments has underflowed.
llvm-project-19.0.0.src/clang/lib/Frontend/TextDiagnostic.cpp:1047:7: overflow: The expression "FixItInsertionLine.size() + (HintCol - PrevHintEndCol) + H.CodeToInsert.size()" is deemed underflowed because at least one of its arguments has underflowed.
llvm-project-19.0.0.src/clang/lib/Frontend/TextDiagnostic.cpp:1047:7: cast_overflow: An assign that casts to a different type, which might trigger an overflow.
llvm-project-19.0.0.src/clang/lib/Frontend/TextDiagnostic.cpp:1051:9: overflow_sink: "NewFixItLineSize", which might have underflowed, is passed to "FixItInsertionLine.resize(NewFixItLineSize, ' ')". [Note: The source code implementation of the function has been overridden by a builtin model.]
# 1049|                                     H.CodeToInsert.size();
# 1050|         if (NewFixItLineSize > FixItInsertionLine.size())
# 1051|->         FixItInsertionLine.resize(NewFixItLineSize, ' ');
# 1052|   
# 1053|         std::copy(H.CodeToInsert.begin(), H.CodeToInsert.end(),

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Frontend/TextDiagnostic.cpp:1083:3: var_decl: Declaring variable "LineRanges".
llvm-project-19.0.0.src/clang/lib/Frontend/TextDiagnostic.cpp:1121:3: uninit_use: Using uninitialized value "LineRanges". Field "LineRanges.InlineElts" is uninitialized.
# 1119|     }
# 1120|   
# 1121|->   return LineRanges;
# 1122|   }
# 1123|   

Error: INTEGER_OVERFLOW (CWE-190):
llvm-project-19.0.0.src/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:798:26: tainted_data_return: Called function "C.find('\\', last)", and a possible return value is known to be less than zero.
llvm-project-19.0.0.src/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:798:26: assign: Assigning: "loc" = "C.find('\\', last)".
llvm-project-19.0.0.src/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:804:5: overflow: The expression "loc + 1UL" is considered to have possibly overflowed.
llvm-project-19.0.0.src/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:804:5: assign: Assigning: "last" = "loc + 1UL".
llvm-project-19.0.0.src/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:806:5: overflow_sink: "last", which might have overflowed, is passed to "C[last]".
#  804|       last = loc + 1;
#  805|   
#  806|->     if (C[last] == '\n' || C[last] == '\r') {
#  807|         ++last;
#  808|   

Error: INTEGER_OVERFLOW (CWE-190):
llvm-project-19.0.0.src/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:798:26: tainted_data_return: Called function "C.find('\\', last)", and a possible return value is known to be less than zero.
llvm-project-19.0.0.src/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:798:26: assign: Assigning: "loc" = "C.find('\\', last)".
llvm-project-19.0.0.src/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:804:5: overflow: The expression "loc + 1UL" is considered to have possibly overflowed.
llvm-project-19.0.0.src/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:804:5: assign: Assigning: "last" = "loc + 1UL".
llvm-project-19.0.0.src/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:812:11: overflow: The expression "last - 1UL" is deemed overflowed because at least one of its arguments has overflowed.
llvm-project-19.0.0.src/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:812:11: overflow_sink: "last - 1UL", which might have underflowed, is passed to "C[last - 1UL]".
#  810|         if (last < C.size())
#  811|           if (C[last] == '\n' || C[last] == '\r')
#  812|->           if (C[last] != C[last-1])
#  813|               ++last;
#  814|       } else {

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:1138:3: alloc_fn: Storage is returned from allocation function "release". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/lib/Frontend/VerifyDiagnosticConsumer.cpp:1138:3: leaked_storage: Failing to save or free storage allocated by "Owner.release()" leaks it.
# 1136|     }
# 1137|   
# 1138|->   Diags.setClient(CurClient, Owner.release() != nullptr);
# 1139|   
# 1140|     // Reset the buffer, we have processed all the diagnostics in it.

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/lib/Interpreter/Value.cpp:36:5: alloc_fn: Storage is returned from allocation function "operator new[]". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/lib/Interpreter/Value.cpp:36:5: var_assign: Assigning: "Buf" = storage returned from "new unsigned char[<unnamed>::ValueStorage::getPayloadOffset() + AllocSize]".
llvm-project-19.0.0.src/clang/lib/Interpreter/Value.cpp:38:5: identity_transfer: Passing "Buf" as argument 2 to function "operator new", which returns that argument. [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/lib/Interpreter/Value.cpp:38:5: noescape: Resource "Buf" is not freed or pointed-to in "operator new". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/lib/Interpreter/Value.cpp:38:5: var_assign: Assigning: "VS" = storage returned from "new (Buf) <unnamed>::ValueStorage(DtorF, AllocSize, ElementsSize)".
llvm-project-19.0.0.src/clang/lib/Interpreter/Value.cpp:39:5: noescape: Resource "VS" is not freed or pointed-to in "getPayload".
llvm-project-19.0.0.src/clang/lib/Interpreter/Value.cpp:40:5: noescape: Resource "VS" is not freed or pointed-to in "getPayload".
llvm-project-19.0.0.src/clang/lib/Interpreter/Value.cpp:40:5: leaked_storage: Variable "VS" going out of scope leaks the storage it points to.
llvm-project-19.0.0.src/clang/lib/Interpreter/Value.cpp:40:5: leaked_storage: Variable "Buf" going out of scope leaks the storage it points to.
#   38|       ValueStorage *VS = new (Buf) ValueStorage(DtorF, AllocSize, ElementsSize);
#   39|       std::memcpy(VS->getPayload(), Canary, sizeof(Canary));
#   40|->     return VS->getPayload();
#   41|     }
#   42|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Lex/DependencyDirectivesScanner.cpp:72:5: var_decl: Declaring variable "LangOpts".
llvm-project-19.0.0.src/clang/lib/Lex/DependencyDirectivesScanner.cpp:78:5: uninit_use: Using uninitialized value "LangOpts". Field "LangOpts.GPUDefaultStream" is uninitialized.
#   76|       // FIXME: we do not enable C11 or C++11, so we are missing u/u8/U"" and
#   77|       // R"()" literals.
#   78|->     return LangOpts;
#   79|     }
#   80|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Lex/Lexer.cpp:1533:3: var_decl: Declaring variable "CharBuf".
llvm-project-19.0.0.src/clang/lib/Lex/Lexer.cpp:1536:3: uninit_use: Using uninitialized value "CharBuf". Field "CharBuf.InlineElts" is uninitialized.
# 1534|     llvm::raw_svector_ostream CharOS(CharBuf);
# 1535|     llvm::write_hex(CharOS, C, llvm::HexPrintStyle::Upper, 4);
# 1536|->   return CharBuf;
# 1537|   }
# 1538|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/Lex/Lexer.cpp:1818:3: address_of: Taking address with "&CodePoint" yields a singleton pointer.
llvm-project-19.0.0.src/clang/lib/Lex/Lexer.cpp:1818:3: callee_ptr_arith: Passing "&CodePoint" to function "convertUTF8Sequence" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 1816|     const char *UnicodePtr = CharStart;
# 1817|   
# 1818|->   llvm::ConversionResult ConvResult = llvm::convertUTF8Sequence(
# 1819|         (const llvm::UTF8 **)&UnicodePtr, (const llvm::UTF8 *)BufferEnd,
# 1820|         &CodePoint, llvm::strictConversion);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Lex/Lexer.cpp:3383:3: var_decl: Declaring variable "NumHexDigits" without initializer.
llvm-project-19.0.0.src/clang/lib/Lex/Lexer.cpp:3404:3: uninit_use: Using uninitialized value "NumHexDigits".
# 3402|   
# 3403|     uint32_t CodePoint = 0;
# 3404|->   while (Count != NumHexDigits || Delimited) {
# 3405|       char C = getCharAndSize(CurPtr, CharSize);
# 3406|       if (!Delimited && Count == 0 && C == '{') {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/Lex/Lexer.cpp:4431:5: address_of: Taking address with "&CodePoint" yields a singleton pointer.
llvm-project-19.0.0.src/clang/lib/Lex/Lexer.cpp:4431:5: callee_ptr_arith: Passing "&CodePoint" to function "convertUTF8Sequence" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 4429|       // an escaped newline.
# 4430|       --CurPtr;
# 4431|->     llvm::ConversionResult Status =
# 4432|           llvm::convertUTF8Sequence((const llvm::UTF8 **)&CurPtr,
# 4433|                                     (const llvm::UTF8 *)BufferEnd,

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/Lex/MacroArgs.cpp:51:5: new_object: Calling single-object form of 'new': "new (llvm::safe_malloc(llvm::TrailingObjects<clang::MacroArgs, clang::Token>::totalSizeToAlloc(UnexpArgTokens.size()))) clang::MacroArgs(UnexpArgTokens.size(), VarargsElided, MI->getNumParams())".
llvm-project-19.0.0.src/clang/lib/Lex/MacroArgs.cpp:51:5: assign: Assigning: "Result" = "new (llvm::safe_malloc(llvm::TrailingObjects<clang::MacroArgs, clang::Token>::totalSizeToAlloc(UnexpArgTokens.size()))) clang::MacroArgs(UnexpArgTokens.size(), VarargsElided, MI->getNumParams())".
llvm-project-19.0.0.src/clang/lib/Lex/MacroArgs.cpp:69:5: callee_ptr_arith: Passing "Result" to function "getTrailingObjects" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
#   67|                     "uninitialized array (as opposed to reusing a cached "
#   68|                     "MacroArgs)");
#   69|->     std::copy(UnexpArgTokens.begin(), UnexpArgTokens.end(),
#   70|                 Result->getTrailingObjects<Token>());
#   71|     }

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/lib/Lex/ModuleMap.cpp:918:5: alloc_fn: Storage is returned from allocation function "release". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/lib/Lex/ModuleMap.cpp:918:5: leaked_storage: Ignoring storage allocated by "Submodule->release()" leaks it.
#  916|     for (auto &Submodule : PendingSubmodules) {
#  917|       Submodule->setParent(Result);
#  918|->     Submodule.release(); // now owned by parent
#  919|     }
#  920|     PendingSubmodules.clear();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Lex/PPMacroExpansion.cpp:1320:3: var_decl: Declaring variable "ResultTok" without initializer.
llvm-project-19.0.0.src/clang/lib/Lex/PPMacroExpansion.cpp:1392:9: uninit_use_in_call: Using uninitialized value "ResultTok.Kind" when calling "getIdentifierInfo".
# 1390|       if (!SuppressDiagnostic) {
# 1391|         if (auto Diag = PP.Diag(Tok.getLocation(), diag::err_pp_expected_after)) {
# 1392|->         if (IdentifierInfo *LastII = ResultTok.getIdentifierInfo())
# 1393|             Diag << LastII;
# 1394|           else

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Lex/PPMacroExpansion.cpp:1320:3: var_decl: Declaring variable "ResultTok" without initializer.
llvm-project-19.0.0.src/clang/lib/Lex/PPMacroExpansion.cpp:1392:9: uninit_use_in_call: Using uninitialized value "ResultTok.Kind" when calling "getIdentifierInfo".
llvm-project-19.0.0.src/clang/lib/Lex/PPMacroExpansion.cpp:1392:9: uninit_use_in_call: Using uninitialized value "ResultTok.PtrData" when calling "getIdentifierInfo".
# 1390|       if (!SuppressDiagnostic) {
# 1391|         if (auto Diag = PP.Diag(Tok.getLocation(), diag::err_pp_expected_after)) {
# 1392|->         if (IdentifierInfo *LastII = ResultTok.getIdentifierInfo())
# 1393|             Diag << LastII;
# 1394|           else

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Lex/PPMacroExpansion.cpp:1320:3: var_decl: Declaring variable "ResultTok" without initializer.
llvm-project-19.0.0.src/clang/lib/Lex/PPMacroExpansion.cpp:1396:9: uninit_use_in_call: Using uninitialized value "ResultTok.Loc" when calling "getLocation".
# 1394|           else
# 1395|             Diag << ResultTok.getKind();
# 1396|->         Diag << tok::r_paren << ResultTok.getLocation();
# 1397|         }
# 1398|         PP.Diag(LParenLoc, diag::note_matching) << tok::l_paren;

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/lib/Lex/Pragma.cpp:103:3: alloc_fn: Storage is returned from allocation function "release". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/lib/Lex/Pragma.cpp:103:3: leaked_storage: Ignoring storage allocated by "llvm::iterator_facade_base<llvm::StringMapIterator<std::unique_ptr<clang::PragmaHandler, std::default_delete<clang::PragmaHandler> > >, std::forward_iterator_tag, llvm::StringMapEntry<std::unique_ptr<clang::PragmaHandler, std::default_delete<clang::PragmaHandler> > >, long, llvm::StringMapEntry<std::unique_ptr<clang::PragmaHandler, std::default_delete<clang::PragmaHandler> > > *, llvm::StringMapEntry<std::unique_ptr<clang::PragmaHandler, std::default_delete<clang::PragmaHandle [...]
#  101|            "Handler not registered in this namespace");
#  102|     // Release ownership back to the caller.
#  103|->   I->getValue().release();
#  104|     Handlers.erase(I);
#  105|   }
llvm-project-19.0.0.src/clang/lib/Lex/Pragma.cpp:103:3: note: trimmed 1 message(s) with length over 512

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Parse/ParseOpenACC.cpp:634:3: var_decl: Declaring variable "Clauses".
llvm-project-19.0.0.src/clang/lib/Parse/ParseOpenACC.cpp:649:7: uninit_use: Using uninitialized value "Clauses". Field "Clauses.InlineElts" is uninitialized.
#  647|         // error.
#  648|         SkipUntilEndOfDirective(*this);
#  649|->       return Clauses;
#  650|       }
#  651|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Parse/ParseOpenACC.cpp:634:3: var_decl: Declaring variable "Clauses".
llvm-project-19.0.0.src/clang/lib/Parse/ParseOpenACC.cpp:652:3: uninit_use: Using uninitialized value "Clauses". Field "Clauses.InlineElts" is uninitialized.
#  650|       }
#  651|     }
#  652|->   return Clauses;
#  653|   }
#  654|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Parse/ParseOpenACC.cpp:1266:3: var_decl: Declaring variable "Vars".
llvm-project-19.0.0.src/clang/lib/Parse/ParseOpenACC.cpp:1273:5: uninit_use: Using uninitialized value "Vars". Field "Vars.InlineElts" is uninitialized.
# 1271|     } else if (CanContinue == OpenACCParseCanContinue::Cannot) {
# 1272|       SkipUntil(tok::r_paren, tok::annot_pragma_openacc_end, StopBeforeMatch);
# 1273|->     return Vars;
# 1274|     }
# 1275|   

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:419:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:419:3: assign_smart_ptr: Function "operator =" assigns "this->AlignHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:420:3: get_raw_ptr: Function "get" returns a pointer managed by "this->AlignHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:420:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->AlignHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:420:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  418|   void Parser::initializePragmaHandlers() {
#  419|     AlignHandler = std::make_unique<PragmaAlignHandler>();
#  420|->   PP.AddPragmaHandler(AlignHandler.get());
#  421|   
#  422|     GCCVisibilityHandler = std::make_unique<PragmaGCCVisibilityHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:422:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:422:3: assign_smart_ptr: Function "operator =" assigns "this->GCCVisibilityHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:423:3: get_raw_ptr: Function "get" returns a pointer managed by "this->GCCVisibilityHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:423:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->GCCVisibilityHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:423:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  421|   
#  422|     GCCVisibilityHandler = std::make_unique<PragmaGCCVisibilityHandler>();
#  423|->   PP.AddPragmaHandler("GCC", GCCVisibilityHandler.get());
#  424|   
#  425|     OptionsHandler = std::make_unique<PragmaOptionsHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:425:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:425:3: assign_smart_ptr: Function "operator =" assigns "this->OptionsHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:426:3: get_raw_ptr: Function "get" returns a pointer managed by "this->OptionsHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:426:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->OptionsHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:426:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  424|   
#  425|     OptionsHandler = std::make_unique<PragmaOptionsHandler>();
#  426|->   PP.AddPragmaHandler(OptionsHandler.get());
#  427|   
#  428|     PackHandler = std::make_unique<PragmaPackHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:428:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:428:3: assign_smart_ptr: Function "operator =" assigns "this->PackHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:429:3: get_raw_ptr: Function "get" returns a pointer managed by "this->PackHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:429:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->PackHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:429:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  427|   
#  428|     PackHandler = std::make_unique<PragmaPackHandler>();
#  429|->   PP.AddPragmaHandler(PackHandler.get());
#  430|   
#  431|     MSStructHandler = std::make_unique<PragmaMSStructHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:431:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:431:3: assign_smart_ptr: Function "operator =" assigns "this->MSStructHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:432:3: get_raw_ptr: Function "get" returns a pointer managed by "this->MSStructHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:432:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSStructHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:432:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  430|   
#  431|     MSStructHandler = std::make_unique<PragmaMSStructHandler>();
#  432|->   PP.AddPragmaHandler(MSStructHandler.get());
#  433|   
#  434|     UnusedHandler = std::make_unique<PragmaUnusedHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:434:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:434:3: assign_smart_ptr: Function "operator =" assigns "this->UnusedHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:435:3: get_raw_ptr: Function "get" returns a pointer managed by "this->UnusedHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:435:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->UnusedHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:435:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  433|   
#  434|     UnusedHandler = std::make_unique<PragmaUnusedHandler>();
#  435|->   PP.AddPragmaHandler(UnusedHandler.get());
#  436|   
#  437|     WeakHandler = std::make_unique<PragmaWeakHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:437:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:437:3: assign_smart_ptr: Function "operator =" assigns "this->WeakHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:438:3: get_raw_ptr: Function "get" returns a pointer managed by "this->WeakHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:438:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->WeakHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:438:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  436|   
#  437|     WeakHandler = std::make_unique<PragmaWeakHandler>();
#  438|->   PP.AddPragmaHandler(WeakHandler.get());
#  439|   
#  440|     RedefineExtnameHandler = std::make_unique<PragmaRedefineExtnameHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:440:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:440:3: assign_smart_ptr: Function "operator =" assigns "this->RedefineExtnameHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:441:3: get_raw_ptr: Function "get" returns a pointer managed by "this->RedefineExtnameHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:441:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->RedefineExtnameHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:441:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  439|   
#  440|     RedefineExtnameHandler = std::make_unique<PragmaRedefineExtnameHandler>();
#  441|->   PP.AddPragmaHandler(RedefineExtnameHandler.get());
#  442|   
#  443|     FPContractHandler = std::make_unique<PragmaFPContractHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:443:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:443:3: assign_smart_ptr: Function "operator =" assigns "this->FPContractHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:444:3: get_raw_ptr: Function "get" returns a pointer managed by "this->FPContractHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:444:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->FPContractHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:444:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  442|   
#  443|     FPContractHandler = std::make_unique<PragmaFPContractHandler>();
#  444|->   PP.AddPragmaHandler("STDC", FPContractHandler.get());
#  445|   
#  446|     STDCFenvAccessHandler = std::make_unique<PragmaSTDC_FENV_ACCESSHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:446:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:446:3: assign_smart_ptr: Function "operator =" assigns "this->STDCFenvAccessHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:447:3: get_raw_ptr: Function "get" returns a pointer managed by "this->STDCFenvAccessHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:447:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->STDCFenvAccessHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:447:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  445|   
#  446|     STDCFenvAccessHandler = std::make_unique<PragmaSTDC_FENV_ACCESSHandler>();
#  447|->   PP.AddPragmaHandler("STDC", STDCFenvAccessHandler.get());
#  448|   
#  449|     STDCFenvRoundHandler = std::make_unique<PragmaSTDC_FENV_ROUNDHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:449:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:449:3: assign_smart_ptr: Function "operator =" assigns "this->STDCFenvRoundHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:450:3: get_raw_ptr: Function "get" returns a pointer managed by "this->STDCFenvRoundHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:450:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->STDCFenvRoundHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:450:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  448|   
#  449|     STDCFenvRoundHandler = std::make_unique<PragmaSTDC_FENV_ROUNDHandler>();
#  450|->   PP.AddPragmaHandler("STDC", STDCFenvRoundHandler.get());
#  451|   
#  452|     STDCCXLIMITHandler = std::make_unique<PragmaSTDC_CX_LIMITED_RANGEHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:452:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:452:3: assign_smart_ptr: Function "operator =" assigns "this->STDCCXLIMITHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:453:3: get_raw_ptr: Function "get" returns a pointer managed by "this->STDCCXLIMITHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:453:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->STDCCXLIMITHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:453:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  451|   
#  452|     STDCCXLIMITHandler = std::make_unique<PragmaSTDC_CX_LIMITED_RANGEHandler>();
#  453|->   PP.AddPragmaHandler("STDC", STDCCXLIMITHandler.get());
#  454|   
#  455|     STDCUnknownHandler = std::make_unique<PragmaSTDC_UnknownHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:455:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:455:3: assign_smart_ptr: Function "operator =" assigns "this->STDCUnknownHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:456:3: get_raw_ptr: Function "get" returns a pointer managed by "this->STDCUnknownHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:456:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->STDCUnknownHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:456:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  454|   
#  455|     STDCUnknownHandler = std::make_unique<PragmaSTDC_UnknownHandler>();
#  456|->   PP.AddPragmaHandler("STDC", STDCUnknownHandler.get());
#  457|   
#  458|     PCSectionHandler = std::make_unique<PragmaClangSectionHandler>(Actions);

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:458:3: assign: Assigning: "<temporary>" = "std::make_unique(this->Actions)".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:458:3: assign_smart_ptr: Function "operator =" assigns "this->PCSectionHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:459:3: get_raw_ptr: Function "get" returns a pointer managed by "this->PCSectionHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:459:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->PCSectionHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:459:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  457|   
#  458|     PCSectionHandler = std::make_unique<PragmaClangSectionHandler>(Actions);
#  459|->   PP.AddPragmaHandler("clang", PCSectionHandler.get());
#  460|   
#  461|     if (getLangOpts().OpenCL) {

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:462:5: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:462:5: assign_smart_ptr: Function "operator =" assigns "this->OpenCLExtensionHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:463:5: get_raw_ptr: Function "get" returns a pointer managed by "this->OpenCLExtensionHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:463:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->OpenCLExtensionHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:463:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  461|     if (getLangOpts().OpenCL) {
#  462|       OpenCLExtensionHandler = std::make_unique<PragmaOpenCLExtensionHandler>();
#  463|->     PP.AddPragmaHandler("OPENCL", OpenCLExtensionHandler.get());
#  464|   
#  465|       PP.AddPragmaHandler("OPENCL", FPContractHandler.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:465:5: get_raw_ptr: Function "get" returns a pointer managed by "this->FPContractHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:465:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->FPContractHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:465:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  463|       PP.AddPragmaHandler("OPENCL", OpenCLExtensionHandler.get());
#  464|   
#  465|->     PP.AddPragmaHandler("OPENCL", FPContractHandler.get());
#  466|     }
#  467|     if (getLangOpts().OpenMP)

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:468:5: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:468:5: assign_smart_ptr: Function "operator =" assigns "this->OpenMPHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:471:3: get_raw_ptr: Function "get" returns a pointer managed by "this->OpenMPHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:471:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->OpenMPHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:471:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  469|     else
#  470|       OpenMPHandler = std::make_unique<PragmaNoOpenMPHandler>();
#  471|->   PP.AddPragmaHandler(OpenMPHandler.get());
#  472|   
#  473|     if (getLangOpts().OpenACC)

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:474:5: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:474:5: assign_smart_ptr: Function "operator =" assigns "this->OpenACCHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:477:3: get_raw_ptr: Function "get" returns a pointer managed by "this->OpenACCHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:477:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->OpenACCHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:477:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  475|     else
#  476|       OpenACCHandler = std::make_unique<PragmaNoOpenACCHandler>();
#  477|->   PP.AddPragmaHandler(OpenACCHandler.get());
#  478|   
#  479|     if (getLangOpts().MicrosoftExt ||

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:481:5: assign: Assigning: "<temporary>" = "std::make_unique(this->Actions)".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:481:5: assign_smart_ptr: Function "operator =" assigns "this->MSCommentHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:482:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSCommentHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:482:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSCommentHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:482:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  480|         getTargetInfo().getTriple().isOSBinFormatELF()) {
#  481|       MSCommentHandler = std::make_unique<PragmaCommentHandler>(Actions);
#  482|->     PP.AddPragmaHandler(MSCommentHandler.get());
#  483|     }
#  484|   

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:485:3: assign: Assigning: "<temporary>" = "std::make_unique(this->Actions)".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:485:3: assign_smart_ptr: Function "operator =" assigns "this->FloatControlHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:486:3: get_raw_ptr: Function "get" returns a pointer managed by "this->FloatControlHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:486:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->FloatControlHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:486:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  484|   
#  485|     FloatControlHandler = std::make_unique<PragmaFloatControlHandler>(Actions);
#  486|->   PP.AddPragmaHandler(FloatControlHandler.get());
#  487|     if (getLangOpts().MicrosoftExt) {
#  488|       MSDetectMismatchHandler =

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:488:5: assign: Assigning: "<temporary>" = "std::make_unique(this->Actions)".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:488:5: assign_smart_ptr: Function "operator =" assigns "this->MSDetectMismatchHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:490:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSDetectMismatchHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:490:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSDetectMismatchHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:490:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  488|       MSDetectMismatchHandler =
#  489|           std::make_unique<PragmaDetectMismatchHandler>(Actions);
#  490|->     PP.AddPragmaHandler(MSDetectMismatchHandler.get());
#  491|       MSPointersToMembers = std::make_unique<PragmaMSPointersToMembers>();
#  492|       PP.AddPragmaHandler(MSPointersToMembers.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:491:5: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:491:5: assign_smart_ptr: Function "operator =" assigns "this->MSPointersToMembers" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:492:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSPointersToMembers".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:492:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSPointersToMembers.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:492:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  490|       PP.AddPragmaHandler(MSDetectMismatchHandler.get());
#  491|       MSPointersToMembers = std::make_unique<PragmaMSPointersToMembers>();
#  492|->     PP.AddPragmaHandler(MSPointersToMembers.get());
#  493|       MSVtorDisp = std::make_unique<PragmaMSVtorDisp>();
#  494|       PP.AddPragmaHandler(MSVtorDisp.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:493:5: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:493:5: assign_smart_ptr: Function "operator =" assigns "this->MSVtorDisp" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:494:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSVtorDisp".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:494:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSVtorDisp.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:494:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  492|       PP.AddPragmaHandler(MSPointersToMembers.get());
#  493|       MSVtorDisp = std::make_unique<PragmaMSVtorDisp>();
#  494|->     PP.AddPragmaHandler(MSVtorDisp.get());
#  495|       MSInitSeg = std::make_unique<PragmaMSPragma>("init_seg");
#  496|       PP.AddPragmaHandler(MSInitSeg.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:495:5: assign: Assigning: "<temporary>" = "std::make_unique("init_seg")".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:495:5: assign_smart_ptr: Function "operator =" assigns "this->MSInitSeg" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:496:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSInitSeg".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:496:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSInitSeg.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:496:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  494|       PP.AddPragmaHandler(MSVtorDisp.get());
#  495|       MSInitSeg = std::make_unique<PragmaMSPragma>("init_seg");
#  496|->     PP.AddPragmaHandler(MSInitSeg.get());
#  497|       MSDataSeg = std::make_unique<PragmaMSPragma>("data_seg");
#  498|       PP.AddPragmaHandler(MSDataSeg.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:497:5: assign: Assigning: "<temporary>" = "std::make_unique("data_seg")".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:497:5: assign_smart_ptr: Function "operator =" assigns "this->MSDataSeg" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:498:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSDataSeg".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:498:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSDataSeg.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:498:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  496|       PP.AddPragmaHandler(MSInitSeg.get());
#  497|       MSDataSeg = std::make_unique<PragmaMSPragma>("data_seg");
#  498|->     PP.AddPragmaHandler(MSDataSeg.get());
#  499|       MSBSSSeg = std::make_unique<PragmaMSPragma>("bss_seg");
#  500|       PP.AddPragmaHandler(MSBSSSeg.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:499:5: assign: Assigning: "<temporary>" = "std::make_unique("bss_seg")".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:499:5: assign_smart_ptr: Function "operator =" assigns "this->MSBSSSeg" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:500:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSBSSSeg".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:500:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSBSSSeg.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:500:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  498|       PP.AddPragmaHandler(MSDataSeg.get());
#  499|       MSBSSSeg = std::make_unique<PragmaMSPragma>("bss_seg");
#  500|->     PP.AddPragmaHandler(MSBSSSeg.get());
#  501|       MSConstSeg = std::make_unique<PragmaMSPragma>("const_seg");
#  502|       PP.AddPragmaHandler(MSConstSeg.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:501:5: assign: Assigning: "<temporary>" = "std::make_unique("const_seg")".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:501:5: assign_smart_ptr: Function "operator =" assigns "this->MSConstSeg" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:502:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSConstSeg".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:502:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSConstSeg.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:502:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  500|       PP.AddPragmaHandler(MSBSSSeg.get());
#  501|       MSConstSeg = std::make_unique<PragmaMSPragma>("const_seg");
#  502|->     PP.AddPragmaHandler(MSConstSeg.get());
#  503|       MSCodeSeg = std::make_unique<PragmaMSPragma>("code_seg");
#  504|       PP.AddPragmaHandler(MSCodeSeg.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:503:5: assign: Assigning: "<temporary>" = "std::make_unique("code_seg")".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:503:5: assign_smart_ptr: Function "operator =" assigns "this->MSCodeSeg" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:504:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSCodeSeg".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:504:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSCodeSeg.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:504:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  502|       PP.AddPragmaHandler(MSConstSeg.get());
#  503|       MSCodeSeg = std::make_unique<PragmaMSPragma>("code_seg");
#  504|->     PP.AddPragmaHandler(MSCodeSeg.get());
#  505|       MSSection = std::make_unique<PragmaMSPragma>("section");
#  506|       PP.AddPragmaHandler(MSSection.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:505:5: assign: Assigning: "<temporary>" = "std::make_unique("section")".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:505:5: assign_smart_ptr: Function "operator =" assigns "this->MSSection" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:506:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSSection".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:506:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSSection.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:506:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  504|       PP.AddPragmaHandler(MSCodeSeg.get());
#  505|       MSSection = std::make_unique<PragmaMSPragma>("section");
#  506|->     PP.AddPragmaHandler(MSSection.get());
#  507|       MSStrictGuardStackCheck =
#  508|           std::make_unique<PragmaMSPragma>("strict_gs_check");

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:507:5: assign: Assigning: "<temporary>" = "std::make_unique("strict_gs_check")".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:507:5: assign_smart_ptr: Function "operator =" assigns "this->MSStrictGuardStackCheck" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:509:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSStrictGuardStackCheck".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:509:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSStrictGuardStackCheck.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:509:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  507|       MSStrictGuardStackCheck =
#  508|           std::make_unique<PragmaMSPragma>("strict_gs_check");
#  509|->     PP.AddPragmaHandler(MSStrictGuardStackCheck.get());
#  510|       MSFunction = std::make_unique<PragmaMSPragma>("function");
#  511|       PP.AddPragmaHandler(MSFunction.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:510:5: assign: Assigning: "<temporary>" = "std::make_unique("function")".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:510:5: assign_smart_ptr: Function "operator =" assigns "this->MSFunction" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:511:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSFunction".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:511:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSFunction.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:511:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  509|       PP.AddPragmaHandler(MSStrictGuardStackCheck.get());
#  510|       MSFunction = std::make_unique<PragmaMSPragma>("function");
#  511|->     PP.AddPragmaHandler(MSFunction.get());
#  512|       MSAllocText = std::make_unique<PragmaMSPragma>("alloc_text");
#  513|       PP.AddPragmaHandler(MSAllocText.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:512:5: assign: Assigning: "<temporary>" = "std::make_unique("alloc_text")".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:512:5: assign_smart_ptr: Function "operator =" assigns "this->MSAllocText" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:513:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSAllocText".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:513:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSAllocText.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:513:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  511|       PP.AddPragmaHandler(MSFunction.get());
#  512|       MSAllocText = std::make_unique<PragmaMSPragma>("alloc_text");
#  513|->     PP.AddPragmaHandler(MSAllocText.get());
#  514|       MSOptimize = std::make_unique<PragmaMSPragma>("optimize");
#  515|       PP.AddPragmaHandler(MSOptimize.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:514:5: assign: Assigning: "<temporary>" = "std::make_unique("optimize")".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:514:5: assign_smart_ptr: Function "operator =" assigns "this->MSOptimize" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:515:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSOptimize".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:515:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSOptimize.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:515:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  513|       PP.AddPragmaHandler(MSAllocText.get());
#  514|       MSOptimize = std::make_unique<PragmaMSPragma>("optimize");
#  515|->     PP.AddPragmaHandler(MSOptimize.get());
#  516|       MSRuntimeChecks = std::make_unique<PragmaMSRuntimeChecksHandler>();
#  517|       PP.AddPragmaHandler(MSRuntimeChecks.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:516:5: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:516:5: assign_smart_ptr: Function "operator =" assigns "this->MSRuntimeChecks" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:517:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSRuntimeChecks".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:517:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSRuntimeChecks.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:517:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  515|       PP.AddPragmaHandler(MSOptimize.get());
#  516|       MSRuntimeChecks = std::make_unique<PragmaMSRuntimeChecksHandler>();
#  517|->     PP.AddPragmaHandler(MSRuntimeChecks.get());
#  518|       MSIntrinsic = std::make_unique<PragmaMSIntrinsicHandler>();
#  519|       PP.AddPragmaHandler(MSIntrinsic.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:518:5: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:518:5: assign_smart_ptr: Function "operator =" assigns "this->MSIntrinsic" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:519:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSIntrinsic".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:519:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSIntrinsic.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:519:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  517|       PP.AddPragmaHandler(MSRuntimeChecks.get());
#  518|       MSIntrinsic = std::make_unique<PragmaMSIntrinsicHandler>();
#  519|->     PP.AddPragmaHandler(MSIntrinsic.get());
#  520|       MSFenvAccess = std::make_unique<PragmaMSFenvAccessHandler>();
#  521|       PP.AddPragmaHandler(MSFenvAccess.get());

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:520:5: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:520:5: assign_smart_ptr: Function "operator =" assigns "this->MSFenvAccess" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:521:5: get_raw_ptr: Function "get" returns a pointer managed by "this->MSFenvAccess".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:521:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MSFenvAccess.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:521:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  519|       PP.AddPragmaHandler(MSIntrinsic.get());
#  520|       MSFenvAccess = std::make_unique<PragmaMSFenvAccessHandler>();
#  521|->     PP.AddPragmaHandler(MSFenvAccess.get());
#  522|     }
#  523|   

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:525:5: assign: Assigning: "<temporary>" = "std::make_unique(this->Actions)".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:525:5: assign_smart_ptr: Function "operator =" assigns "this->CUDAForceHostDeviceHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:527:5: get_raw_ptr: Function "get" returns a pointer managed by "this->CUDAForceHostDeviceHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:527:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->CUDAForceHostDeviceHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:527:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  525|       CUDAForceHostDeviceHandler =
#  526|           std::make_unique<PragmaForceCUDAHostDeviceHandler>(Actions);
#  527|->     PP.AddPragmaHandler("clang", CUDAForceHostDeviceHandler.get());
#  528|     }
#  529|   

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:530:3: assign: Assigning: "<temporary>" = "std::make_unique(this->Actions)".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:530:3: assign_smart_ptr: Function "operator =" assigns "this->OptimizeHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:531:3: get_raw_ptr: Function "get" returns a pointer managed by "this->OptimizeHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:531:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->OptimizeHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:531:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  529|   
#  530|     OptimizeHandler = std::make_unique<PragmaOptimizeHandler>(Actions);
#  531|->   PP.AddPragmaHandler("clang", OptimizeHandler.get());
#  532|   
#  533|     LoopHintHandler = std::make_unique<PragmaLoopHintHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:533:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:533:3: assign_smart_ptr: Function "operator =" assigns "this->LoopHintHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:534:3: get_raw_ptr: Function "get" returns a pointer managed by "this->LoopHintHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:534:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->LoopHintHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:534:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  532|   
#  533|     LoopHintHandler = std::make_unique<PragmaLoopHintHandler>();
#  534|->   PP.AddPragmaHandler("clang", LoopHintHandler.get());
#  535|   
#  536|     UnrollHintHandler = std::make_unique<PragmaUnrollHintHandler>("unroll");

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:536:3: assign: Assigning: "<temporary>" = "std::make_unique("unroll")".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:536:3: assign_smart_ptr: Function "operator =" assigns "this->UnrollHintHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:537:3: get_raw_ptr: Function "get" returns a pointer managed by "this->UnrollHintHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:537:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->UnrollHintHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:537:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  535|   
#  536|     UnrollHintHandler = std::make_unique<PragmaUnrollHintHandler>("unroll");
#  537|->   PP.AddPragmaHandler(UnrollHintHandler.get());
#  538|     PP.AddPragmaHandler("GCC", UnrollHintHandler.get());
#  539|   

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:538:3: get_raw_ptr: Function "get" returns a pointer managed by "this->UnrollHintHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:538:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->UnrollHintHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:538:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  536|     UnrollHintHandler = std::make_unique<PragmaUnrollHintHandler>("unroll");
#  537|     PP.AddPragmaHandler(UnrollHintHandler.get());
#  538|->   PP.AddPragmaHandler("GCC", UnrollHintHandler.get());
#  539|   
#  540|     NoUnrollHintHandler = std::make_unique<PragmaUnrollHintHandler>("nounroll");

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:540:3: assign: Assigning: "<temporary>" = "std::make_unique("nounroll")".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:540:3: assign_smart_ptr: Function "operator =" assigns "this->NoUnrollHintHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:541:3: get_raw_ptr: Function "get" returns a pointer managed by "this->NoUnrollHintHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:541:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->NoUnrollHintHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:541:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  539|   
#  540|     NoUnrollHintHandler = std::make_unique<PragmaUnrollHintHandler>("nounroll");
#  541|->   PP.AddPragmaHandler(NoUnrollHintHandler.get());
#  542|     PP.AddPragmaHandler("GCC", NoUnrollHintHandler.get());
#  543|   

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:542:3: get_raw_ptr: Function "get" returns a pointer managed by "this->NoUnrollHintHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:542:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->NoUnrollHintHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:542:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  540|     NoUnrollHintHandler = std::make_unique<PragmaUnrollHintHandler>("nounroll");
#  541|     PP.AddPragmaHandler(NoUnrollHintHandler.get());
#  542|->   PP.AddPragmaHandler("GCC", NoUnrollHintHandler.get());
#  543|   
#  544|     UnrollAndJamHintHandler =

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:544:3: assign: Assigning: "<temporary>" = "std::make_unique("unroll_and_jam")".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:544:3: assign_smart_ptr: Function "operator =" assigns "this->UnrollAndJamHintHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:546:3: get_raw_ptr: Function "get" returns a pointer managed by "this->UnrollAndJamHintHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:546:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->UnrollAndJamHintHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:546:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  544|     UnrollAndJamHintHandler =
#  545|         std::make_unique<PragmaUnrollHintHandler>("unroll_and_jam");
#  546|->   PP.AddPragmaHandler(UnrollAndJamHintHandler.get());
#  547|   
#  548|     NoUnrollAndJamHintHandler =

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:548:3: assign: Assigning: "<temporary>" = "std::make_unique("nounroll_and_jam")".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:548:3: assign_smart_ptr: Function "operator =" assigns "this->NoUnrollAndJamHintHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:550:3: get_raw_ptr: Function "get" returns a pointer managed by "this->NoUnrollAndJamHintHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:550:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->NoUnrollAndJamHintHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:550:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  548|     NoUnrollAndJamHintHandler =
#  549|         std::make_unique<PragmaUnrollHintHandler>("nounroll_and_jam");
#  550|->   PP.AddPragmaHandler(NoUnrollAndJamHintHandler.get());
#  551|   
#  552|     FPHandler = std::make_unique<PragmaFPHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:552:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:552:3: assign_smart_ptr: Function "operator =" assigns "this->FPHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:553:3: get_raw_ptr: Function "get" returns a pointer managed by "this->FPHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:553:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->FPHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:553:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  551|   
#  552|     FPHandler = std::make_unique<PragmaFPHandler>();
#  553|->   PP.AddPragmaHandler("clang", FPHandler.get());
#  554|   
#  555|     AttributePragmaHandler =

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:555:3: assign: Assigning: "<temporary>" = "std::make_unique(this->AttrFactory)".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:555:3: assign_smart_ptr: Function "operator =" assigns "this->AttributePragmaHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:557:3: get_raw_ptr: Function "get" returns a pointer managed by "this->AttributePragmaHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:557:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->AttributePragmaHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:557:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  555|     AttributePragmaHandler =
#  556|         std::make_unique<PragmaAttributeHandler>(AttrFactory);
#  557|->   PP.AddPragmaHandler("clang", AttributePragmaHandler.get());
#  558|   
#  559|     MaxTokensHerePragmaHandler = std::make_unique<PragmaMaxTokensHereHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:559:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:559:3: assign_smart_ptr: Function "operator =" assigns "this->MaxTokensHerePragmaHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:560:3: get_raw_ptr: Function "get" returns a pointer managed by "this->MaxTokensHerePragmaHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:560:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MaxTokensHerePragmaHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:560:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  558|   
#  559|     MaxTokensHerePragmaHandler = std::make_unique<PragmaMaxTokensHereHandler>();
#  560|->   PP.AddPragmaHandler("clang", MaxTokensHerePragmaHandler.get());
#  561|   
#  562|     MaxTokensTotalPragmaHandler = std::make_unique<PragmaMaxTokensTotalHandler>();

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:562:3: assign: Assigning: "<temporary>" = "std::make_unique()".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:562:3: assign_smart_ptr: Function "operator =" assigns "this->MaxTokensTotalPragmaHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:563:3: get_raw_ptr: Function "get" returns a pointer managed by "this->MaxTokensTotalPragmaHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:563:3: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->MaxTokensTotalPragmaHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:563:3: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  561|   
#  562|     MaxTokensTotalPragmaHandler = std::make_unique<PragmaMaxTokensTotalHandler>();
#  563|->   PP.AddPragmaHandler("clang", MaxTokensTotalPragmaHandler.get());
#  564|   
#  565|     if (getTargetInfo().getTriple().isRISCV()) {

Error: MULTIPLE_INIT_SMART_PTRS (CWE-1341):
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:566:5: assign: Assigning: "<temporary>" = "std::make_unique(this->Actions)".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:566:5: assign_smart_ptr: Function "operator =" assigns "this->RISCVPragmaHandler" with "<temporary>".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:567:5: get_raw_ptr: Function "get" returns a pointer managed by "this->RISCVPragmaHandler".
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:567:5: multiple_init_smart_ptr: Function "AddPragmaHandler" sets a smart pointer with "this->RISCVPragmaHandler.get()", but it is already managed by another smart pointer.
llvm-project-19.0.0.src/clang/lib/Parse/ParsePragma.cpp:567:5: remediation: Either release the raw pointer from the smart pointer, or share/transfer the raw pointer by using a copy/move/assignment operation.
#  565|     if (getTargetInfo().getTriple().isRISCV()) {
#  566|       RISCVPragmaHandler = std::make_unique<PragmaRISCVHandler>(Actions);
#  567|->     PP.AddPragmaHandler("clang", RISCVPragmaHandler.get());
#  568|     }
#  569|   }

Error: VIRTUAL_DTOR (CWE-772):
llvm-project-19.0.0.src/clang/lib/Rewrite/DeltaTree.cpp:55:9: no_virtual_dtor: Class "<unnamed>::DeltaTreeNode" does not have a virtual destructor.
llvm-project-19.0.0.src/clang/lib/Rewrite/DeltaTree.cpp:128:5: dtor_in_derived: Class "<unnamed>::DeltaTreeInteriorNode" has a destructor and a pointer to it is upcast to class "<unnamed>::DeltaTreeNode" which doesn't have a virtual destructor.
llvm-project-19.0.0.src/clang/lib/Rewrite/DeltaTree.cpp:314:5: upcast: Example 1: Casting from a pointer to "<unnamed>::DeltaTreeInteriorNode" to a pointer to "<unnamed>::DeltaTreeNode" in "New".
llvm-project-19.0.0.src/clang/lib/Rewrite/DeltaTree.cpp:163:5: delete: Example 1: Deletion of type "<unnamed>::DeltaTreeNode".
llvm-project-19.0.0.src/clang/lib/Rewrite/DeltaTree.cpp:311:5: alloc: Example 1: Allocated an object of type "<unnamed>::DeltaTreeInteriorNode".
#   53|     /// DeltaTreeNode - The common part of all nodes.
#   54|     ///
#   55|->   class DeltaTreeNode {
#   56|     public:
#   57|       struct InsertResult {

Error: INTEGER_OVERFLOW (CWE-190):
llvm-project-19.0.0.src/clang/lib/Rewrite/Rewriter.cpp:299:3: tainted_data_return: Called function "this->getRangeSize(clang::SourceRange(Loc, Loc), rangeOpts)", and a possible return value may be less than zero.
llvm-project-19.0.0.src/clang/lib/Rewrite/Rewriter.cpp:299:3: overflow: The expression "StartOffs += this->getRangeSize(clang::SourceRange(Loc, Loc), rangeOpts)" might be negative, but is used in a context that treats it as unsigned.
llvm-project-19.0.0.src/clang/lib/Rewrite/Rewriter.cpp:300:3: overflow_sink: "StartOffs", which might be negative, is passed to "this->getEditBuffer(FID)->InsertText(StartOffs, Str, true)".
#  298|     rangeOpts.IncludeInsertsAtBeginOfRange = false;
#  299|     StartOffs += getRangeSize(SourceRange(Loc, Loc), rangeOpts);
#  300|->   getEditBuffer(FID).InsertText(StartOffs, Str, /*InsertAfter*/true);
#  301|     return false;
#  302|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/AnalysisBasedWarnings.cpp:1827:5: var_decl: Declaring variable "ONS".
llvm-project-19.0.0.src/clang/lib/Sema/AnalysisBasedWarnings.cpp:1836:5: uninit_use: Using uninitialized value "ONS". Field "ONS.InlineElts" is uninitialized.
# 1834|         ONS.push_back(std::move(FNote));
# 1835|       }
# 1836|->     return ONS;
# 1837|     }
# 1838|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/DeclSpec.cpp:191:3: var_decl: Declaring variable "I".
llvm-project-19.0.0.src/clang/lib/Sema/DeclSpec.cpp:291:3: uninit_use: Using uninitialized value "I". Field "I.AttrList.AttrList.InlineElts" is uninitialized.
#  289|     }
#  290|   
#  291|->   return I;
#  292|   }
#  293|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/Sema/SemaCXXScopeSpec.cpp:1020:3: new_object: Calling single-object form of 'new': "new (Mem) <unnamed>::NestedNameSpecifierAnnotation".
llvm-project-19.0.0.src/clang/lib/Sema/SemaCXXScopeSpec.cpp:1020:3: assign: Assigning: "Annotation" = "new (Mem) <unnamed>::NestedNameSpecifierAnnotation".
llvm-project-19.0.0.src/clang/lib/Sema/SemaCXXScopeSpec.cpp:1023:3: ptr_arith: Using "Annotation" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 1021|       = new (Mem) NestedNameSpecifierAnnotation;
# 1022|     Annotation->NNS = SS.getScopeRep();
# 1023|->   memcpy(Annotation + 1, SS.location_data(), SS.location_size());
# 1024|     return Annotation;
# 1025|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaChecking.cpp:321:3: var_decl: Declaring variable "AlignResult".
llvm-project-19.0.0.src/clang/lib/Sema/SemaChecking.cpp:353:5: uninit_use_in_call: Using uninitialized value "AlignResult.Val.Data" when calling "~EvalResult".
#  351|         SourceLocation(), Source);
#  352|     if (SrcArg.isInvalid())
#  353|->     return true;
#  354|     TheCall->setArg(0, SrcArg.get());
#  355|     ExprResult AlignArg =

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/Sema/SemaChecking.cpp:11766:5: address_of: Taking address with "&CodePoint" yields a singleton pointer.
llvm-project-19.0.0.src/clang/lib/Sema/SemaChecking.cpp:11766:5: callee_ptr_arith: Passing "&CodePoint" to function "convertUTF8Sequence" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
#11764|       const llvm::UTF8 *E =
#11765|           reinterpret_cast<const llvm::UTF8 *>(csStart + csLen);
#11766|->     llvm::ConversionResult Result =
#11767|           llvm::convertUTF8Sequence(B, E, &CodePoint, llvm::strictConversion);
#11768|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaChecking.cpp:16122:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Sema/SemaChecking.cpp:16137:3: uninit_use_in_call: Using uninitialized value "Result.Val.Data" when calling "~EvalResult".
#16135|           S.Diag(ExprLoc, diag::warn_left_shift_in_bool_context) << E;
#16136|       }
#16137|->   }
#16138|   
#16139|     if (const auto *CO = dyn_cast<ConditionalOperator>(E)) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaChecking.cpp:16392:7: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Sema/SemaChecking.cpp:16412:5: uninit_use_in_call: Using uninitialized value "Result.Val.Data" when calling "~EvalResult".
#16410|           }
#16411|         }
#16412|->     }
#16413|     } else if (Target->isUnsaturatedFixedPointType()) {
#16414|       if (Source->isIntegerType()) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaChecking.cpp:16415:7: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Sema/SemaChecking.cpp:16433:5: uninit_use_in_call: Using uninitialized value "Result.Val.Data" when calling "~EvalResult".
#16431|           }
#16432|         }
#16433|->     }
#16434|     }
#16435|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaCodeComplete.cpp:1124:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Sema/SemaCodeComplete.cpp:1131:5: uninit_use_in_call: Using uninitialized value "Result" when calling "CodeCompletionResult".
# 1129|                                   std::move(R.FixIts));
# 1130|       Result.ShadowDecl = Using;
# 1131|->     MaybeAddResult(Result, CurContext);
# 1132|       return;
# 1133|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaCodeComplete.cpp:1361:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Sema/SemaCodeComplete.cpp:1368:5: uninit_use_in_call: Using uninitialized value "Result" when calling "CodeCompletionResult".
# 1366|                                   std::move(R.FixIts));
# 1367|       Result.ShadowDecl = Using;
# 1368|->     AddResult(Result, CurContext, Hiding, /*InBaseClass=*/false,
# 1369|                 /*BaseExprType=*/BaseExprType);
# 1370|       return;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaCodeComplete.cpp:1744:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Sema/SemaCodeComplete.cpp:1746:5: uninit_use_in_call: Using uninitialized value "Result" when calling "CodeCompletionResult".
# 1744|       ResultBuilder::Result Result(ND, Results.getBasePriority(ND), nullptr,
# 1745|                                    false, IsAccessible(ND, Ctx), FixIts);
# 1746|->     Results.AddResult(Result, InitialLookupCtx, Hiding, InBaseClass, BaseType);
# 1747|     }
# 1748|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaCodeComplete.cpp:5564:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Sema/SemaCodeComplete.cpp:5566:7: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
# 5564|       SmallVector<const Expr *, 1> Result;
# 5565|       if (DC == nullptr)
# 5566|->       return Result;
# 5567|       // Primary templates can have constraints.
# 5568|       if (const auto *TD = cast<Decl>(DC)->getDescribedTemplate())

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaCodeComplete.cpp:5564:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Sema/SemaCodeComplete.cpp:5576:5: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
# 5574|       if (const auto *VTPSD = dyn_cast<VarTemplatePartialSpecializationDecl>(DC))
# 5575|         VTPSD->getAssociatedConstraints(Result);
# 5576|->     return Result;
# 5577|     }
# 5578|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaConcept.cpp:1407:3: var_decl: Declaring variable "Res".
llvm-project-19.0.0.src/clang/lib/Sema/SemaConcept.cpp:1419:3: uninit_use: Using uninitialized value "Res". Field "Res.InlineElts" is uninitialized.
# 1417|         Res.emplace_back(Combined);
# 1418|       }
# 1419|->   return Res;
# 1420|   }
# 1421|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaConcept.cpp:1436:3: var_decl: Declaring variable "Res".
llvm-project-19.0.0.src/clang/lib/Sema/SemaConcept.cpp:1449:3: uninit_use: Using uninitialized value "Res". Field "Res.InlineElts" is uninitialized.
# 1447|       }
# 1448|     }
# 1449|->   return Res;
# 1450|   }
# 1451|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaDecl.cpp:6636:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Sema/SemaDecl.cpp:6639:5: uninit_use_in_call: Using uninitialized value "Result.Val.Data" when calling "~EvalResult".
# 6637|     if (!VLATy->getSizeExpr() ||
# 6638|         !VLATy->getSizeExpr()->EvaluateAsInt(Result, Context))
# 6639|->     return QualType();
# 6640|   
# 6641|     llvm::APSInt Res = Result.Val.getInt();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaDeclAttr.cpp:10179:7: var_decl: Declaring variable "EmptyWeakInfos".
llvm-project-19.0.0.src/clang/lib/Sema/SemaDeclAttr.cpp:10180:7: uninit_use_in_call: Using uninitialized value "EmptyWeakInfos.set_.TheMap.NumEntries" when calling "swap".
llvm-project-19.0.0.src/clang/lib/Sema/SemaDeclAttr.cpp:10180:7: uninit_use_in_call: Using uninitialized value "EmptyWeakInfos.set_.TheMap.NumTombstones" when calling "swap".
#10178|           DeclApplyPragmaWeak(S, ND, W);
#10179|         std::remove_reference_t<decltype(WeakInfos)> EmptyWeakInfos;
#10180|->       WeakInfos.swap(EmptyWeakInfos);
#10181|       }
#10182|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaDeclCXX.cpp:9234:3: var_decl: Declaring variable "ExceptSpec".
llvm-project-19.0.0.src/clang/lib/Sema/SemaDeclCXX.cpp:9237:5: uninit_use: Using uninitialized value "ExceptSpec". Field "ExceptSpec.Exceptions.InlineElts" is uninitialized.
# 9235|   
# 9236|     if (FD->isInvalidDecl())
# 9237|->     return ExceptSpec;
# 9238|   
# 9239|     // The common case is that we just defined the comparison function. In that

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaDeclCXX.cpp:9234:3: var_decl: Declaring variable "ExceptSpec".
llvm-project-19.0.0.src/clang/lib/Sema/SemaDeclCXX.cpp:9270:3: uninit_use: Using uninitialized value "ExceptSpec". Field "ExceptSpec.Exceptions.InlineElts" is uninitialized.
# 9268|     }
# 9269|   
# 9270|->   return ExceptSpec;
# 9271|   }
# 9272|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaDeclCXX.cpp:17494:3: var_decl: Declaring variable "Status".
llvm-project-19.0.0.src/clang/lib/Sema/SemaDeclCXX.cpp:17505:5: uninit_use_in_call: Using uninitialized value "Status.Val.Data" when calling "~EvalResult".
#17503|       for (const auto &Note : Notes)
#17504|         Diag(Note.first, Note.second);
#17505|->     return !ErrorOnInvalidMessage;
#17506|     }
#17507|     return true;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaExpr.cpp:3859:3: var_decl: Declaring variable "Val".
llvm-project-19.0.0.src/clang/lib/Sema/SemaExpr.cpp:3861:3: uninit_use_in_call: Using uninitialized value "Val.U" when calling "GetFloatValue".
# 3859|     APFloat Val(Format);
# 3860|   
# 3861|->   APFloat::opStatus result = Literal.GetFloatValue(Val);
# 3862|   
# 3863|     // Overflow is always an error, but underflow is only an error if

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/Sema/SemaExpr.cpp:8081:5: address_of: Taking address with "&subExpr" yields a singleton pointer.
llvm-project-19.0.0.src/clang/lib/Sema/SemaExpr.cpp:8081:5: assign: Assigning: "exprs" = "&subExpr".
llvm-project-19.0.0.src/clang/lib/Sema/SemaExpr.cpp:8134:5: ptr_arith: Using "exprs" as an array.  This might corrupt or misinterpret adjacent memory locations.
# 8132|       }
# 8133|   
# 8134|->     initExprs.append(exprs, exprs + numExprs);
# 8135|     }
# 8136|     // FIXME: This means that pretty-printing the final AST will produce curly

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaExpr.cpp:10957:3: var_decl: Declaring variable "RHSValue".
llvm-project-19.0.0.src/clang/lib/Sema/SemaExpr.cpp:10964:1: uninit_use_in_call: Using uninitialized value "RHSValue.Val.Data" when calling "~EvalResult".
#10962|                             S.PDiag(diag::warn_remainder_division_by_zero)
#10963|                               << IsDiv << RHS.get()->getSourceRange());
#10964|-> }
#10965|   
#10966|   QualType Sema::CheckMultiplyDivideOperands(ExprResult &LHS, ExprResult &RHS,

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaExpr.cpp:11593:3: var_decl: Declaring variable "RHSResult".
llvm-project-19.0.0.src/clang/lib/Sema/SemaExpr.cpp:11596:5: uninit_use_in_call: Using uninitialized value "RHSResult.Val.Data" when calling "~EvalResult".
#11594|     if (RHS.get()->isValueDependent() ||
#11595|         !RHS.get()->EvaluateAsInt(RHSResult, S.Context))
#11596|->     return;
#11597|     llvm::APSInt Right = RHSResult.Val.getInt();
#11598|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaExprCXX.cpp:1854:3: var_decl: Declaring variable "Best".
llvm-project-19.0.0.src/clang/lib/Sema/SemaExprCXX.cpp:1882:3: uninit_use: Using uninitialized value "Best". Field "Best.Destroying" is uninitialized.
# 1880|     }
# 1881|   
# 1882|->   return Best;
# 1883|   }
# 1884|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/clang/lib/Sema/SemaExprCXX.cpp:2084:3: address_of: Taking address with "&Initializer" yields a singleton pointer.
llvm-project-19.0.0.src/clang/lib/Sema/SemaExprCXX.cpp:2084:3: identity_transfer: Passing "&Initializer" as argument 1 to constructor for class "MutableArrayRef", which sets "Exprs->Data" to that argument.
llvm-project-19.0.0.src/clang/lib/Sema/SemaExprCXX.cpp:2136:7: callee_ptr_arith: Passing "Exprs->Data" via argument "Exprs" to function "operator []" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 2134|       bool Braced = (InitStyle == CXXNewInitializationStyle::Braces);
# 2135|       if (Braced) {
# 2136|->       auto *ILE = cast<InitListExpr>(Exprs[0]);
# 2137|         Inits = MultiExprArg(ILE->getInits(), ILE->getNumInits());
# 2138|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3774:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3783:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3781|     }
# 3782|     S.Type = BaseType;
# 3783|->   Steps.push_back(S);
# 3784|   }
# 3785|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3788:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3791:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3789|     S.Kind = BindingTemporary? SK_BindReferenceToTemporary : SK_BindReference;
# 3790|     S.Type = T;
# 3791|->   Steps.push_back(S);
# 3792|   }
# 3793|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3795:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3798:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3796|     S.Kind = SK_FinalCopy;
# 3797|     S.Type = T;
# 3798|->   Steps.push_back(S);
# 3799|   }
# 3800|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3802:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3805:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3803|     S.Kind = SK_ExtraneousCopyToTemporary;
# 3804|     S.Type = T;
# 3805|->   Steps.push_back(S);
# 3806|   }
# 3807|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3824:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3838:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3836|     }
# 3837|     S.Type = Ty;
# 3838|->   Steps.push_back(S);
# 3839|   }
# 3840|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3842:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3845:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3843|     S.Kind = SK_FunctionReferenceConversion;
# 3844|     S.Type = Ty;
# 3845|->   Steps.push_back(S);
# 3846|   }
# 3847|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3849:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3852:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3850|     S.Kind = SK_AtomicConversion;
# 3851|     S.Type = Ty;
# 3852|->   Steps.push_back(S);
# 3853|   }
# 3854|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3867:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3870:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3868|     S.Kind = SK_ListInitialization;
# 3869|     S.Type = T;
# 3870|->   Steps.push_back(S);
# 3871|   }
# 3872|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3888:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3891:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3889|     S.Kind = SK_ZeroInitialization;
# 3890|     S.Type = T;
# 3891|->   Steps.push_back(S);
# 3892|   }
# 3893|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3895:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3898:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3896|     S.Kind = SK_CAssignment;
# 3897|     S.Type = T;
# 3898|->   Steps.push_back(S);
# 3899|   }
# 3900|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3902:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3905:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3903|     S.Kind = SK_StringInit;
# 3904|     S.Type = T;
# 3905|->   Steps.push_back(S);
# 3906|   }
# 3907|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3909:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3912:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3910|     S.Kind = SK_ObjCObjectConversion;
# 3911|     S.Type = T;
# 3912|->   Steps.push_back(S);
# 3913|   }
# 3914|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3916:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3919:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3917|     S.Kind = IsGNUExtension ? SK_GNUArrayInit : SK_ArrayInit;
# 3918|     S.Type = T;
# 3919|->   Steps.push_back(S);
# 3920|   }
# 3921|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3923:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3926:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "insert".
# 3924|     S.Kind = SK_ArrayLoopIndex;
# 3925|     S.Type = EltT;
# 3926|->   Steps.insert(Steps.begin(), S);
# 3927|   
# 3928|     S.Kind = SK_ArrayLoopInit;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3934:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3937:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3935|     S.Kind = SK_ParenthesizedArrayInit;
# 3936|     S.Type = T;
# 3937|->   Steps.push_back(S);
# 3938|   }
# 3939|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3942:3: var_decl: Declaring variable "s".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3946:3: uninit_use_in_call: Using uninitialized value "s". Field "s" is uninitialized when calling "push_back".
# 3944|                          : SK_PassByIndirectRestore);
# 3945|     s.Type = type;
# 3946|->   Steps.push_back(s);
# 3947|   }
# 3948|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3950:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3953:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3951|     S.Kind = SK_ProduceObjCObject;
# 3952|     S.Type = T;
# 3953|->   Steps.push_back(S);
# 3954|   }
# 3955|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3957:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3960:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3958|     S.Kind = SK_StdInitializerList;
# 3959|     S.Type = T;
# 3960|->   Steps.push_back(S);
# 3961|   }
# 3962|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3964:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3967:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3965|     S.Kind = SK_OCLSamplerInit;
# 3966|     S.Type = T;
# 3967|->   Steps.push_back(S);
# 3968|   }
# 3969|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3971:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3974:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3972|     S.Kind = SK_OCLZeroOpaqueType;
# 3973|     S.Type = T;
# 3974|->   Steps.push_back(S);
# 3975|   }
# 3976|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3978:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3981:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "push_back".
# 3979|     S.Kind = SK_ParenthesizedListInit;
# 3980|     S.Type = T;
# 3981|->   Steps.push_back(S);
# 3982|   }
# 3983|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3988:3: var_decl: Declaring variable "S".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:3991:3: uninit_use_in_call: Using uninitialized value "S". Field "S" is uninitialized when calling "insert".
# 3989|     S.Kind = SK_UnwrapInitList;
# 3990|     S.Type = Syntactic->getInit(0)->getType();
# 3991|->   Steps.insert(Steps.begin(), S);
# 3992|   
# 3993|     S.Kind = SK_RewrapInitList;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:9266:9: var_decl: Declaring variable "ER".
llvm-project-19.0.0.src/clang/lib/Sema/SemaInit.cpp:9272:7: uninit_use_in_call: Using uninitialized value "ER.Val.Data" when calling "~EvalResult".
# 9270|             S.Diag(Kind.getLocation(), diag::err_c23_constexpr_pointer_not_null);
# 9271|           }
# 9272|->       }
# 9273|   
# 9274|         bool Complained;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaLookup.cpp:664:3: alloc_fn: Calling "operator new" which returns uninitialized memory. [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/lib/Sema/SemaLookup.cpp:664:3: assign: Assigning: "this->Paths" = "new clang::CXXBasePaths(true, true, true)", which points to uninitialized data.
llvm-project-19.0.0.src/clang/lib/Sema/SemaLookup.cpp:665:3: uninit_use_in_call: Using uninitialized value "this->Paths->ClassSubobjects.NumEntries" when calling "swap".
llvm-project-19.0.0.src/clang/lib/Sema/SemaLookup.cpp:665:3: uninit_use_in_call: Using uninitialized value "this->Paths->ClassSubobjects.NumTombstones" when calling "swap".
#  663|   void LookupResult::setAmbiguousBaseSubobjects(CXXBasePaths &P) {
#  664|     Paths = new CXXBasePaths;
#  665|->   Paths->swap(P);
#  666|     addDeclsFromBasePaths(*Paths);
#  667|     resolveKind();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaLookup.cpp:672:3: alloc_fn: Calling "operator new" which returns uninitialized memory. [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/lib/Sema/SemaLookup.cpp:672:3: assign: Assigning: "this->Paths" = "new clang::CXXBasePaths(true, true, true)", which points to uninitialized data.
llvm-project-19.0.0.src/clang/lib/Sema/SemaLookup.cpp:673:3: uninit_use_in_call: Using uninitialized value "this->Paths->ClassSubobjects.NumEntries" when calling "swap".
llvm-project-19.0.0.src/clang/lib/Sema/SemaLookup.cpp:673:3: uninit_use_in_call: Using uninitialized value "this->Paths->ClassSubobjects.NumTombstones" when calling "swap".
#  671|   void LookupResult::setAmbiguousBaseSubobjectTypes(CXXBasePaths &P) {
#  672|     Paths = new CXXBasePaths;
#  673|->   Paths->swap(P);
#  674|     addDeclsFromBasePaths(*Paths);
#  675|     resolveKind();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaLookup.cpp:4958:3: var_decl: Declaring variable "Chain".
llvm-project-19.0.0.src/clang/lib/Sema/SemaLookup.cpp:4966:3: uninit_use: Using uninitialized value "Chain". Field "Chain.InlineElts" is uninitialized.
# 4964|         Chain.push_back(DC->getPrimaryContext());
# 4965|     }
# 4966|->   return Chain;
# 4967|   }
# 4968|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:6382:5: var_decl: Declaring variable "DSAChecker".
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:6427:9: uninit_use_in_call: Using uninitialized element of array "DSAChecker.ImplicitMap". Field "DSAChecker.ImplicitMap[0][0].InlineElts" is uninitialized when calling "getImplicitMap".
# 6425|         auto Kind = static_cast<OpenMPDefaultmapClauseKind>(VC);
# 6426|         for (unsigned I = 0; I < OMPC_MAP_delete; ++I) {
# 6427|->         ArrayRef<Expr *> ImplicitMap = DSAChecker.getImplicitMap(
# 6428|               Kind, static_cast<OpenMPMapClauseKind>(I));
# 6429|           ImplicitMaps[VC][I].append(ImplicitMap.begin(), ImplicitMap.end());

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:6382:5: var_decl: Declaring variable "DSAChecker".
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:6431:7: uninit_use_in_call: Using uninitialized element of array "DSAChecker.ImplicitMapModifier". Field "DSAChecker.ImplicitMapModifier[0].InlineElts" is uninitialized when calling "getImplicitMapModifier".
# 6429|           ImplicitMaps[VC][I].append(ImplicitMap.begin(), ImplicitMap.end());
# 6430|         }
# 6431|->       ArrayRef<OpenMPMapModifierKind> ImplicitModifier =
# 6432|             DSAChecker.getImplicitMapModifier(Kind);
# 6433|         ImplicitMapModifiers[VC].append(ImplicitModifier.begin(),

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:9865:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:9871:7: uninit_use_in_call: Using uninitialized value "Result.Val.Data" when calling "~EvalResult".
# 9869|       } else {
# 9870|         Built.clear(/*Size=*/1);
# 9871|->       return 1;
# 9872|       }
# 9873|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:9877:5: var_decl: Declaring variable "EVResult".
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:9893:7: uninit_use_in_call: Using uninitialized value "EVResult.Val.Data" when calling "~EvalResult".
# 9891|       } else {
# 9892|         Built.clear(/*Size=*/1);
# 9893|->       return 1;
# 9894|       }
# 9895|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:21305:13: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:21314:11: uninit_use_in_call: Using uninitialized value "Result.Val.Data" when calling "~EvalResult".
#21312|                 continue;
#21313|               }
#21314|->           }
#21315|   
#21316|             // OpenMP 5.0, 2.17.11 depend Clause, Restrictions, C/C++

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:21708:7: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:21719:5: uninit_use_in_call: Using uninitialized value "Result.Val.Data" when calling "~EvalResult".
#21717|         assert(!RelevantExpr && "RelevantExpr is expected to be nullptr");
#21718|         RelevantExpr = TE;
#21719|->     }
#21720|   
#21721|       // Record the component - we don't have any declaration associated.

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:21787:7: var_decl: Declaring variable "ResultL".
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:21807:5: uninit_use_in_call: Using uninitialized value "ResultL.Val.Data" when calling "~EvalResult".
#21805|         assert(!RelevantExpr && "RelevantExpr is expected to be nullptr");
#21806|         RelevantExpr = TE;
#21807|->     }
#21808|   
#21809|       // Record the component - we don't have any declaration associated.

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:21786:7: var_decl: Declaring variable "ResultR".
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:21807:5: uninit_use_in_call: Using uninitialized value "ResultR.Val.Data" when calling "~EvalResult".
#21805|         assert(!RelevantExpr && "RelevantExpr is expected to be nullptr");
#21806|         RelevantExpr = TE;
#21807|->     }
#21808|   
#21809|       // Record the component - we don't have any declaration associated.

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:24873:7: var_decl: Declaring variable "EvResult".
llvm-project-19.0.0.src/clang/lib/Sema/SemaOpenMP.cpp:24887:5: uninit_use_in_call: Using uninitialized value "EvResult.Val.Data" when calling "~EvalResult".
#24885|           }
#24886|         }
#24887|->     }
#24888|       NewDims.push_back(Dim);
#24889|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaOverload.cpp:387:9: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Sema/SemaOverload.cpp:388:9: uninit_use_in_call: Using uninitialized value "Result.U" when calling "convertFromAPInt".
#  386|           // Convert the integer to the floating type.
#  387|           llvm::APFloat Result(Ctx.getFloatTypeSemantics(ToType));
#  388|->         Result.convertFromAPInt(*IntConstantValue, IntConstantValue->isSigned(),
#  389|                                   llvm::APFloat::rmNearestTiesToEven);
#  390|           // And back.

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaOverload.cpp:422:7: var_decl: Declaring variable "R".
llvm-project-19.0.0.src/clang/lib/Sema/SemaOverload.cpp:461:5: uninit_use_in_call: Using uninitialized value "R.Val.Data" when calling "~EvalResult".
#  459|           return NK_Variable_Narrowing;
#  460|         }
#  461|->     }
#  462|       return NK_Not_Narrowing;
#  463|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaOverload.cpp:686:3: var_decl: Declaring variable "Result" without initializer.
llvm-project-19.0.0.src/clang/lib/Sema/SemaOverload.cpp:762:3: uninit_use: Using uninitialized value "Result". Field "Result.Diagnostic" is uninitialized.
#  760|     }
#  761|   
#  762|->   return Result;
#  763|   }
#  764|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaOverload.cpp:12614:3: var_decl: Declaring variable "Cands".
llvm-project-19.0.0.src/clang/lib/Sema/SemaOverload.cpp:12648:3: uninit_use: Using uninitialized value "Cands". Field "Cands.InlineElts" is uninitialized.
#12646|         Cands, CompareOverloadCandidatesForDisplay(S, OpLoc, Args.size(), Kind));
#12647|   
#12648|->   return Cands;
#12649|   }
#12650|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaOverload.cpp:13364:3: var_decl: Declaring variable "DAP" without initializer.
llvm-project-19.0.0.src/clang/lib/Sema/SemaOverload.cpp:13439:5: uninit_use: Using uninitialized value "DAP".
#13437|           return nullptr;
#13438|       }
#13439|->     Pair = DAP;
#13440|     }
#13441|     return Result;

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/Sema/SemaStmt.cpp:2344:9: alias: Assigning: "DeducedInit" = "&OpaqueId". "DeducedInit" now points to byte 0 of "OpaqueId" (which consists of 24 bytes).
llvm-project-19.0.0.src/clang/lib/Sema/SemaStmt.cpp:2351:11: overrun-buffer-val: Overrunning struct type _ZN5clang15OpaqueValueExprE of 24 bytes by passing it to a function which accesses it at byte offset 47.
# 2349|           if (Result != TemplateDeductionResult::Success &&
# 2350|               Result != TemplateDeductionResult::AlreadyDiagnosed)
# 2351|->           DiagnoseAutoDeductionFailure(D, DeducedInit);
# 2352|           if (FirstType.isNull()) {
# 2353|             D->setInvalidDecl();

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/Sema/SemaStmt.cpp:3906:5: alias: Assigning: "RetExpr" = "&VoidVal". "RetExpr" now points to byte 0 of "VoidVal" (which consists of 24 bytes).
llvm-project-19.0.0.src/clang/lib/Sema/SemaStmt.cpp:3922:5: overrun-buffer-val: Overrunning struct type _ZN5clang22CXXScalarValueInitExprE of 24 bytes by passing it to a function which accesses it at byte offset 31.
# 3920|       }
# 3921|       TemplateSpecCandidateSet FailedTSC(TemplateSpecLoc);
# 3922|->     TemplateDeductionResult Res = DeduceAutoType(
# 3923|           OrigResultType, RetExpr, Deduced, Info, /*DependentDeduction=*/false,
# 3924|           /*IgnoreConstraints=*/false, &FailedTSC);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaStmtAsm.cpp:753:3: var_decl: Declaring variable "Eval".
llvm-project-19.0.0.src/clang/lib/Sema/SemaStmtAsm.cpp:755:5: uninit_use_in_call: Using uninitialized value "Eval.Val.Data" when calling "~EvalResult".
#  753|     Expr::EvalResult Eval;
#  754|     if (T->isFunctionType() || T->isDependentType())
#  755|->     return Info.setLabel(Res);
#  756|     if (Res->isPRValue()) {
#  757|       bool IsEnum = isa<clang::EnumType>(T);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplate.cpp:2726:3: var_decl: Declaring variable "Results".
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplate.cpp:2731:3: uninit_use: Using uninitialized value "Results". Field "Results.InlineElts" is uninitialized.
# 2729|         Results.push_back(Index);
# 2730|     }
# 2731|->   return Results;
# 2732|   }
# 2733|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateDeduction.cpp:3286:3: var_decl: Declaring variable "Result" without initializer.
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateDeduction.cpp:3292:3: uninit_use: Using uninitialized value "Result".
# 3290|                                                  TemplateArgs, Deduced, Info);
# 3291|     });
# 3292|->   return Result;
# 3293|   }
# 3294|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateDeduction.cpp:4360:5: var_decl: Declaring variable "Result" without initializer.
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateDeduction.cpp:4366:5: uninit_use: Using uninitialized value "Result".
# 4364|             Info);
# 4365|       });
# 4366|->     if (Result != TemplateDeductionResult::Success)
# 4367|         return Result;
# 4368|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateDeduction.cpp:4526:3: var_decl: Declaring variable "Result" without initializer.
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateDeduction.cpp:4535:3: uninit_use: Using uninitialized value "Result".
# 4533|           });
# 4534|     });
# 4535|->   return Result;
# 4536|   }
# 4537|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateDeduction.cpp:4621:5: var_decl: Declaring variable "Result" without initializer.
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateDeduction.cpp:4627:5: uninit_use: Using uninitialized value "Result".
# 4625|             &FunctionType, Info);
# 4626|       });
# 4627|->     if (Result != TemplateDeductionResult::Success)
# 4628|         return Result;
# 4629|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateDeduction.cpp:4667:3: var_decl: Declaring variable "Result" without initializer.
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateDeduction.cpp:4673:3: uninit_use: Using uninitialized value "Result".
# 4671|                                                Specialization, Info);
# 4672|     });
# 4673|->   if (Result != TemplateDeductionResult::Success)
# 4674|       return Result;
# 4675|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateDeduction.cpp:4848:3: var_decl: Declaring variable "Result" without initializer.
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateDeduction.cpp:4855:3: uninit_use: Using uninitialized value "Result".
# 4853|     });
# 4854|     Specialization = cast_or_null<CXXConversionDecl>(ConversionSpecialized);
# 4855|->   return Result;
# 4856|   }
# 4857|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateDeduction.cpp:5939:3: var_decl: Declaring variable "AtLeastAsSpecialized" without initializer.
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateDeduction.cpp:5946:3: uninit_use: Using uninitialized value "AtLeastAsSpecialized".
# 5944|               Deduced, Info) == TemplateDeductionResult::Success;
# 5945|     });
# 5946|->   return AtLeastAsSpecialized;
# 5947|   }
# 5948|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateInstantiate.cpp:501:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateInstantiate.cpp:561:7: uninit_use: Using uninitialized value "Result". Field "Result.TemplateArgumentLists.InlineElts" is uninitialized.
#  559|   
#  560|       if (R.IsDone)
#  561|->       return Result;
#  562|       if (R.ClearRelativeToPrimary)
#  563|         RelativeToPrimary = false;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:4108:3: var_decl: Declaring variable "SubstD" without initializer.
llvm-project-19.0.0.src/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:4112:3: uninit_use: Using uninitialized value "SubstD".
# 4110|       SubstD = Instantiator.Visit(D);
# 4111|     });
# 4112|->   return SubstD;
# 4113|   }
# 4114|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/TreeTransform.h:11116:5: var_decl: Declaring variable "InstantiatedVarList".
llvm-project-19.0.0.src/clang/lib/Sema/TreeTransform.h:11129:5: uninit_use: Using uninitialized value "InstantiatedVarList". Field "InstantiatedVarList.InlineElts" is uninitialized.
#11127|       }
#11128|   
#11129|->     return InstantiatedVarList;
#11130|     }
#11131|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Sema/TreeTransform.h:11452:3: var_decl: Declaring variable "TransformedClauses".
llvm-project-19.0.0.src/clang/lib/Sema/TreeTransform.h:11458:3: uninit_use: Using uninitialized value "TransformedClauses". Field "TransformedClauses.InlineElts" is uninitialized.
#11456|         TransformedClauses.push_back(TransformedClause);
#11457|     }
#11458|->   return TransformedClauses;
#11459|   }
#11460|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Serialization/ASTReader.cpp:940:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Serialization/ASTReader.cpp:971:3: uninit_use: Using uninitialized value "Result". Field "Result.Instance.InlineElts" is uninitialized.
#  969|     }
#  970|   
#  971|->   return Result;
#  972|   }
#  973|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Serialization/ASTReader.cpp:11763:3: var_decl: Declaring variable "VarList".
llvm-project-19.0.0.src/clang/lib/Serialization/ASTReader.cpp:11766:3: uninit_use: Using uninitialized value "VarList". Field "VarList.InlineElts" is uninitialized.
#11764|     for (unsigned I = 0; I < NumVars; ++I)
#11765|       VarList.push_back(readSubExpr());
#11766|->   return VarList;
#11767|   }
#11768|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Serialization/ASTReaderStmt.cpp:790:3: var_decl: Declaring variable "Satisfaction".
llvm-project-19.0.0.src/clang/lib/Serialization/ASTReaderStmt.cpp:808:3: uninit_use: Using uninitialized value "Satisfaction". Field "Satisfaction.TemplateArgs.InlineElts" is uninitialized.
#  806|       }
#  807|     }
#  808|->   return Satisfaction;
#  809|   }
#  810|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Serialization/GlobalModuleIndex.cpp:111:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/Serialization/GlobalModuleIndex.cpp:118:5: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
#  116|       }
#  117|   
#  118|->     return Result;
#  119|     }
#  120|   };

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp:51:3: var_decl: Declaring variable "Message".
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp:64:3: uninit_use: Using uninitialized value "Message". Field "Message.InlineElts" is uninitialized.
#   62|     }
#   63|   
#   64|->   return Message;
#   65|   }
#   66|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp:493:3: var_decl: Declaring variable "NameParts".
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp:501:3: uninit_use: Using uninitialized value "NameParts". Field "NameParts.InlineElts" is uninitialized.
#  499|     }
#  500|     NameParts.emplace_back(C.Name);
#  501|->   return NameParts;
#  502|   }
#  503|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/MacOSKeychainAPIChecker.cpp:258:3: assignment: Assigning: "idx" = "<unnamed>::MacOSKeychainAPIChecker::getTrackedFunctionIndex(funName, true)". The value of "idx" is now between 2 and 100000 (inclusive).
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/MacOSKeychainAPIChecker.cpp:260:5: overrun-local: Overrunning array "<unnamed>::MacOSKeychainAPIChecker::FunctionsToTrack" of 8 24-byte elements at element index 99999 (byte offset 2399999) using index "idx" (which evaluates to 99999).
#  258|     idx = getTrackedFunctionIndex(funName, true);
#  259|     if (idx != InvalidIdx) {
#  260|->     unsigned paramIdx = FunctionsToTrack[idx].Param;
#  261|       if (CE->getNumArgs() <= paramIdx)
#  262|         return;

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/MacOSKeychainAPIChecker.cpp:290:3: assignment: Assigning: "idx" = "<unnamed>::MacOSKeychainAPIChecker::getTrackedFunctionIndex(funName, false)". The value of "idx" is now between 2 and 100000 (inclusive).
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/MacOSKeychainAPIChecker.cpp:294:3: overrun-local: Overrunning array "<unnamed>::MacOSKeychainAPIChecker::FunctionsToTrack" of 8 24-byte elements at element index 99999 (byte offset 2399999) using index "idx" (which evaluates to 99999).
#  292|       return;
#  293|   
#  294|->   unsigned paramIdx = FunctionsToTrack[idx].Param;
#  295|     if (CE->getNumArgs() <= paramIdx)
#  296|       return;

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/MacOSKeychainAPIChecker.cpp:404:3: assignment: Assigning: "idx" = "<unnamed>::MacOSKeychainAPIChecker::getTrackedFunctionIndex(funName, true)". The value of "idx" is now between 2 and 100000 (inclusive).
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/MacOSKeychainAPIChecker.cpp:408:3: overrun-local: Overrunning array "<unnamed>::MacOSKeychainAPIChecker::FunctionsToTrack" of 8 24-byte elements at element index 99999 (byte offset 2399999) using index "idx" (which evaluates to 99999).
#  406|       return;
#  407|   
#  408|->   const Expr *ArgExpr = CE->getArg(FunctionsToTrack[idx].Param);
#  409|     // If the argument entered as an enclosing function parameter, skip it to
#  410|     // avoid false positives.

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/MacOSKeychainAPIChecker.cpp:632:3: assignment: Assigning: "Idx" = "<unnamed>::MacOSKeychainAPIChecker::getTrackedFunctionIndex(funName, true)". The value of "Idx" is now between 2 and 100000 (inclusive).
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/MacOSKeychainAPIChecker.cpp:634:3: overrun-local: Overrunning array "<unnamed>::MacOSKeychainAPIChecker::FunctionsToTrack" of 8 24-byte elements at element index 100000 (byte offset 2400023) using index "Idx" (which evaluates to 100000).
#  632|     unsigned Idx = getTrackedFunctionIndex(funName, true);
#  633|     assert(Idx != InvalidIdx && "This should be a call to an allocator.");
#  634|->   const Expr *ArgExpr = CE->getArg(FunctionsToTrack[Idx].Param);
#  635|     PathDiagnosticLocation Pos(ArgExpr, BRC.getSourceManager(),
#  636|                                N->getLocationContext());

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/StackAddrEscapeChecker.cpp:140:3: var_decl: Declaring variable "Regions".
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/StackAddrEscapeChecker.cpp:147:3: uninit_use: Using uninitialized value "Regions". Field "Regions.InlineElts" is uninitialized.
#  145|         Regions.push_back(Region);
#  146|     }
#  147|->   return Regions;
#  148|   }
#  149|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/ValistChecker.cpp:103:20: constructor_uses_global_object: The constructor of global object "<unnamed>::ValistChecker::VAListAccepters" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ValistChecker::VAListAccepters" might be created before "Allocator" is available.
#  101|   
#  102|   const SmallVector<ValistChecker::VAListAccepter, 15>
#  103|->     ValistChecker::VAListAccepters = {{{CDM::CLibrary, {"vfprintf"}, 3}, 2},
#  104|                                         {{CDM::CLibrary, {"vfscanf"}, 3}, 2},
#  105|                                         {{CDM::CLibrary, {"vprintf"}, 2}, 1},

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/ValistChecker.cpp:103:20: constructor_uses_global_object: The constructor of global object "<unnamed>::ValistChecker::VAListAccepters" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ValistChecker::VAListAccepters" might be created before "fuzzer::TPC" is available.
#  101|   
#  102|   const SmallVector<ValistChecker::VAListAccepter, 15>
#  103|->     ValistChecker::VAListAccepters = {{{CDM::CLibrary, {"vfprintf"}, 3}, 2},
#  104|                                         {{CDM::CLibrary, {"vfscanf"}, 3}, 2},
#  105|                                         {{CDM::CLibrary, {"vprintf"}, 2}, 1},

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Checkers/ValistChecker.cpp:103:20: constructor_uses_global_object: The constructor of global object "<unnamed>::ValistChecker::VAListAccepters" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::ValistChecker::VAListAccepters" might be created before "scudo::RegionPageMap::Buffers" is available.
#  101|   
#  102|   const SmallVector<ValistChecker::VAListAccepter, 15>
#  103|->     ValistChecker::VAListAccepters = {{{CDM::CLibrary, {"vfprintf"}, 3}, 2},
#  104|                                         {{CDM::CLibrary, {"vfscanf"}, 3}, 2},
#  105|                                         {{CDM::CLibrary, {"vprintf"}, 2}, 1},

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:829:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:846:3: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
#  844|                           ValueFactory.getValue(ToInt));
#  845|     }
#  846|->   return Result;
#  847|   }
#  848|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:1614:3: var_decl: Declaring variable "Extents".
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:1618:3: uninit_use: Using uninitialized value "Extents". Field "Extents.InlineElts" is uninitialized.
# 1616|       Extents.push_back(CAT->getZExtSize());
# 1617|     } while ((CAT = dyn_cast<ConstantArrayType>(CAT->getElementType())));
# 1618|->   return Extents;
# 1619|   }
# 1620|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Core/SarifDiagnostics.cpp:131:3: var_decl: Declaring variable "Flows".
llvm-project-19.0.0.src/clang/lib/StaticAnalyzer/Core/SarifDiagnostics.cpp:142:3: uninit_use: Using uninitialized value "Flows". Field "Flows.InlineElts" is uninitialized.
#  140|       Flows.push_back(Flow);
#  141|     }
#  142|->   return Flows;
#  143|   }
#  144|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Support/RISCVVIntrinsicUtils.cpp:1181:3: var_decl: Declaring variable "PrototypeDescriptors".
llvm-project-19.0.0.src/clang/lib/Support/RISCVVIntrinsicUtils.cpp:1198:3: uninit_use: Using uninitialized value "PrototypeDescriptors". Field "PrototypeDescriptors.InlineElts" is uninitialized.
# 1196|       Prototypes = Prototypes.drop_front(Idx + 1);
# 1197|     }
# 1198|->   return PrototypeDescriptors;
# 1199|   }
# 1200|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/Tooling/AllTUsExecution.cpp:59:5: constructor_uses_global_object: The constructor of global object "clang::tooling::Filter[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::tooling::Filter[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   57|   
#   58|   llvm::cl::opt<std::string>
#   59|->     Filter("filter",
#   60|              llvm::cl::desc("Only process files that match this filter. "
#   61|                             "This flag only applies to all-TUs."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/Tooling/AllTUsExecution.cpp:151:25: constructor_uses_global_object: The constructor of global object "clang::tooling::ExecutorConcurrency" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::tooling::ExecutorConcurrency" might be created before "llvm::cl::TopLevelSubCommand" is available.
#  149|   }
#  150|   
#  151|-> llvm::cl::opt<unsigned> ExecutorConcurrency(
#  152|       "execute-concurrency",
#  153|       llvm::cl::desc("The number of threads used to process all files in "

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp:614:5: var_decl: Declaring variable "FakeInputPath".
llvm-project-19.0.0.src/clang/lib/Tooling/DependencyScanning/DependencyScanningWorker.cpp:622:5: uninit_use_in_call: Using uninitialized value "FakeInputPath". Field "FakeInputPath.InlineElts" is uninitialized when calling "emplace_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
#  620|   
#  621|       ModifiedCommandLine = CommandLine;
#  622|->     ModifiedCommandLine->emplace_back(FakeInputPath);
#  623|     }
#  624|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/Tooling/DumpTool/ClangSrcLocDump.cpp:30:30: constructor_uses_global_object: The constructor of global object "IncludeDirectories[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "IncludeDirectories[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   28|   using namespace llvm;
#   29|   
#   30|-> static cl::list<std::string> IncludeDirectories(
#   31|       "I", cl::desc("Include directories to use while compiling"),
#   32|       cl::value_desc("directory"), cl::Required, cl::OneOrMore, cl::Prefix);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/Tooling/DumpTool/ClangSrcLocDump.cpp:35:5: constructor_uses_global_object: The constructor of global object "SkipProcessing" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SkipProcessing" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|   
#   34|   static cl::opt<bool>
#   35|->     SkipProcessing("skip-processing",
#   36|                      cl::desc("Avoid processing the AST header file"),
#   37|                      cl::Required, cl::value_desc("bool"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/Tooling/DumpTool/ClangSrcLocDump.cpp:39:29: constructor_uses_global_object: The constructor of global object "JsonOutputPath[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "JsonOutputPath[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   37|                      cl::Required, cl::value_desc("bool"));
#   38|   
#   39|-> static cl::opt<std::string> JsonOutputPath("json-output-path",
#   40|                                              cl::desc("json output path"),
#   41|                                              cl::Required,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/lib/Tooling/Execution.cpp:19:5: constructor_uses_global_object: The constructor of global object "clang::tooling::ExecutorName[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "clang::tooling::ExecutorName[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   17|   
#   18|   llvm::cl::opt<std::string>
#   19|->     ExecutorName("executor", llvm::cl::desc("The name of the executor to use."),
#   20|                    llvm::cl::init("standalone"));
#   21|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Tooling/Inclusions/HeaderIncludes.cpp:22:3: var_decl: Declaring variable "LangOpts".
llvm-project-19.0.0.src/clang/lib/Tooling/Inclusions/HeaderIncludes.cpp:33:3: uninit_use: Using uninitialized value "LangOpts". Field "LangOpts.GPUDefaultStream" is uninitialized.
#   31|     LangOpts.DeclSpecKeyword = 1; // To get __declspec.
#   32|     LangOpts.WChar = 1;           // To get wchar_t
#   33|->   return LangOpts;
#   34|   }
#   35|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Tooling/Inclusions/Stdlib/StandardLibrary.cpp:245:3: var_decl: Declaring variable "Results".
llvm-project-19.0.0.src/clang/lib/Tooling/Inclusions/Stdlib/StandardLibrary.cpp:248:3: uninit_use: Using uninitialized value "Results". Field "Results.InlineElts" is uninitialized.
#  246|     for (auto HeaderID : getMappingPerLang(Language)->SymbolHeaderIDs[ID])
#  247|       Results.emplace_back(Header(HeaderID, Language));
#  248|->   return Results;
#  249|   }
#  250|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/lib/Tooling/Refactoring/Lookup.cpp:31:3: var_decl: Declaring variable "Namespaces".
llvm-project-19.0.0.src/clang/lib/Tooling/Refactoring/Lookup.cpp:42:3: uninit_use: Using uninitialized value "Namespaces". Field "Namespaces.InlineElts" is uninitialized.
#   40|          Context = GetNextNamedNamespace(Context->getParent()))
#   41|       Namespaces.push_back(cast<NamespaceDecl>(Context));
#   42|->   return Namespaces;
#   43|   }
#   44|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/amdgpu-arch/AMDGPUArch.cpp:19:22: constructor_uses_global_object: The constructor of global object "Help" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Help" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   17|   using namespace llvm;
#   18|   
#   19|-> static cl::opt<bool> Help("h", cl::desc("Alias for -help"), cl::Hidden);
#   20|   
#   21|   // Mark all our options with this category.

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/amdgpu-arch/AMDGPUArch.cpp:22:27: constructor_uses_global_object: The constructor of global object "AMDGPUArchCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "AMDGPUArchCategory" might be created before "Allocator" is available.
#   20|   
#   21|   // Mark all our options with this category.
#   22|-> static cl::OptionCategory AMDGPUArchCategory("amdgpu-arch options");
#   23|   
#   24|   static void PrintVersion(raw_ostream &OS) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/amdgpu-arch/AMDGPUArch.cpp:22:27: constructor_uses_global_object: The constructor of global object "AMDGPUArchCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "AMDGPUArchCategory" might be created before "GlobalParser" is available.
#   20|   
#   21|   // Mark all our options with this category.
#   22|-> static cl::OptionCategory AMDGPUArchCategory("amdgpu-arch options");
#   23|   
#   24|   static void PrintVersion(raw_ostream &OS) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/amdgpu-arch/AMDGPUArch.cpp:22:27: constructor_uses_global_object: The constructor of global object "AMDGPUArchCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "AMDGPUArchCategory" might be created before "fuzzer::TPC" is available.
#   20|   
#   21|   // Mark all our options with this category.
#   22|-> static cl::OptionCategory AMDGPUArchCategory("amdgpu-arch options");
#   23|   
#   24|   static void PrintVersion(raw_ostream &OS) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/amdgpu-arch/AMDGPUArch.cpp:22:27: constructor_uses_global_object: The constructor of global object "AMDGPUArchCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "AMDGPUArchCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   20|   
#   21|   // Mark all our options with this category.
#   22|-> static cl::OptionCategory AMDGPUArchCategory("amdgpu-arch options");
#   23|   
#   24|   static void PrintVersion(raw_ostream &OS) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/apinotes-test/APINotesTest.cpp:17:36: constructor_uses_global_object: The constructor of global object "APINotes[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "APINotes[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   15|   #include "llvm/Support/WithColor.h"
#   16|   
#   17|-> static llvm::cl::list<std::string> APINotes(llvm::cl::Positional,
#   18|                                               llvm::cl::desc("[<apinotes> ...]"),
#   19|                                               llvm::cl::Required);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/apinotes-test/APINotesTest.cpp:22:5: constructor_uses_global_object: The constructor of global object "OutputFileName[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OutputFileName[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   20|   
#   21|   static llvm::cl::opt<std::string>
#   22|->     OutputFileName("o", llvm::cl::desc("output filename"),
#   23|                      llvm::cl::value_desc("filename"), llvm::cl::init("-"));
#   24|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/arcmt-test/arcmt-test.cpp:27:1: constructor_uses_global_object: The constructor of global object "CheckOnly" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "CheckOnly" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   25|   
#   26|   static llvm::cl::opt<bool>
#   27|-> CheckOnly("check-only",
#   28|         llvm::cl::desc("Just check for issues that need to be handled manually"));
#   29|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/arcmt-test/arcmt-test.cpp:35:1: constructor_uses_global_object: The constructor of global object "OutputTransformations" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "OutputTransformations" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|   
#   34|   static llvm::cl::opt<bool>
#   35|-> OutputTransformations("output-transformations",
#   36|                         llvm::cl::desc("Print the source transformations"));
#   37|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/arcmt-test/arcmt-test.cpp:39:1: constructor_uses_global_object: The constructor of global object "VerifyDiags" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyDiags" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   37|   
#   38|   static llvm::cl::opt<bool>
#   39|-> VerifyDiags("verify",llvm::cl::desc("Verify emitted diagnostics and warnings"));
#   40|   
#   41|   static llvm::cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/arcmt-test/arcmt-test.cpp:42:1: constructor_uses_global_object: The constructor of global object "VerboseOpt" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerboseOpt" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   40|   
#   41|   static llvm::cl::opt<bool>
#   42|-> VerboseOpt("v", llvm::cl::desc("Enable verbose output"));
#   43|   
#   44|   static llvm::cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/arcmt-test/arcmt-test.cpp:45:1: constructor_uses_global_object: The constructor of global object "VerifyTransformedFiles" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "VerifyTransformedFiles" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   43|   
#   44|   static llvm::cl::opt<bool>
#   45|-> VerifyTransformedFiles("verify-transformed-files",
#   46|   llvm::cl::desc("Read pairs of file mappings (typically the output of "
#   47|                  "c-arcmt-test) and compare their contents with the filenames "

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/arcmt-test/arcmt-test.cpp:51:1: constructor_uses_global_object: The constructor of global object "RemappingsFile[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "RemappingsFile[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   49|   
#   50|   static llvm::cl::opt<std::string>
#   51|-> RemappingsFile("remappings-file",
#   52|                  llvm::cl::desc("Pairs of file mappings (typically the output of "
#   53|                  "c-arcmt-test)"));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/arcmt-test/arcmt-test.cpp:56:1: constructor_uses_global_object: The constructor of global object "ResultFiles[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ResultFiles[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   54|   
#   55|   static llvm::cl::list<std::string>
#   56|-> ResultFiles(llvm::cl::Positional, llvm::cl::desc("<filename>..."));
#   57|   
#   58|   static llvm::cl::extrahelp extraHelp(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/arcmt-test/arcmt-test.cpp:58:28: constructor_uses_global_object: The constructor of global object "extraHelp" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "extraHelp" might be created before "GlobalParser" is available.
#   56|   ResultFiles(llvm::cl::Positional, llvm::cl::desc("<filename>..."));
#   57|   
#   58|-> static llvm::cl::extrahelp extraHelp(
#   59|     "\nusage with compiler args: arcmt-test [options] --args [compiler flags]\n");
#   60|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:285:3: alloc_fn: Calling "malloc" which returns uninitialized memory. [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:285:3: assign: Assigning: "*unsaved_files" = "(struct CXUnsavedFile *)malloc(24UL * *num_unsaved_files)", which points to uninitialized data.
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:300:7: uninit_use_in_call: Using uninitialized value "(*unsaved_files)->Contents" when calling "free_remapped_files".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:300:7: uninit_use_in_call: Using uninitialized value "(*unsaved_files)->Filename" when calling "free_remapped_files".
#  298|         fprintf(stderr,
#  299|                 "error: %sfrom:to argument is missing comma\n", opt_name);
#  300|->       free_remapped_files(*unsaved_files, i);
#  301|         *unsaved_files = 0;
#  302|         *num_unsaved_files = 0;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:285:3: alloc_fn: Calling "malloc" which returns uninitialized memory. [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:285:3: assign: Assigning: "*unsaved_files" = "(struct CXUnsavedFile *)malloc(24UL * *num_unsaved_files)", which points to uninitialized data.
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:311:7: uninit_use_in_call: Using uninitialized value "(*unsaved_files)->Contents" when calling "free_remapped_files".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:311:7: uninit_use_in_call: Using uninitialized value "(*unsaved_files)->Filename" when calling "free_remapped_files".
#  309|         fprintf(stderr, "error: cannot open file %s that we are remapping to\n",
#  310|                 sep + 1);
#  311|->       free_remapped_files(*unsaved_files, i);
#  312|         *unsaved_files = 0;
#  313|         *num_unsaved_files = 0;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:285:3: alloc_fn: Calling "malloc" which returns uninitialized memory. [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:285:3: assign: Assigning: "*unsaved_files" = "(struct CXUnsavedFile *)malloc(24UL * *num_unsaved_files)", which points to uninitialized data.
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:329:7: uninit_use_in_call: Using uninitialized value "(*unsaved_files)->Contents" when calling "free_remapped_files".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:329:7: uninit_use_in_call: Using uninitialized value "(*unsaved_files)->Filename" when calling "free_remapped_files".
#  327|                 (feof(to_file) ? "EOF" : "error"), sep + 1);
#  328|         fclose(to_file);
#  329|->       free_remapped_files(*unsaved_files, i);
#  330|         free(contents);
#  331|         *unsaved_files = 0;

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2343:3: alloc_fn: Storage is returned from allocation function "clang_createIndex".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2343:3: var_assign: Assigning: "Idx" = storage returned from "clang_createIndex(1, 1)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2349:3: noescape: Resource "Idx" is not freed or pointed-to in "CreateTranslationUnit".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2350:5: leaked_storage: Variable "Idx" going out of scope leaks the storage it points to.
# 2348|   
# 2349|     if (!CreateTranslationUnit(Idx, ast_file, &TU))
# 2350|->     return 1;
# 2351|   
# 2352|     if ((fp = fopen(source_file, "r")) == NULL) {

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2900:3: alloc_fn: Storage is returned from allocation function "malloc". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2900:3: var_assign: Assigning: "Locations" = storage returned from "malloc(NumLocations * 16UL)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2905:5: noescape: Resource "&Locations[Loc].filename" is not freed or pointed-to in "parse_file_line_column".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2908:7: leaked_storage: Variable "Locations" going out of scope leaks the storage it points to.
# 2906|                                               &Locations[Loc].line,
# 2907|                                               &Locations[Loc].column, 0, 0)))
# 2908|->       return errorCode;
# 2909|     }
# 2910|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2900:3: alloc_fn: Storage is returned from allocation function "malloc". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2900:3: var_assign: Assigning: "Locations" = storage returned from "malloc(NumLocations * 16UL)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2913:5: leaked_storage: Variable "Locations" going out of scope leaks the storage it points to.
# 2911|     if (parse_remapped_files(argc, argv, NumLocations + 1, &unsaved_files,
# 2912|                              &num_unsaved_files))
# 2913|->     return -1;
# 2914|   
# 2915|     if (getenv("CINDEXTEST_EDITING"))

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2900:3: alloc_fn: Storage is returned from allocation function "malloc". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2900:3: var_assign: Assigning: "Locations" = storage returned from "malloc(NumLocations * 16UL)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2930:5: leaked_storage: Variable "Locations" going out of scope leaks the storage it points to.
# 2928|       fprintf(stderr, "unable to parse input\n");
# 2929|       describeLibclangFailure(Err);
# 2930|->     return -1;
# 2931|     }
# 2932|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2900:3: alloc_fn: Storage is returned from allocation function "malloc". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2900:3: var_assign: Assigning: "Locations" = storage returned from "malloc(NumLocations * 16UL)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2934:5: leaked_storage: Variable "Locations" going out of scope leaks the storage it points to.
# 2932|   
# 2933|     if (checkForErrors(TU) != 0)
# 2934|->     return -1;
# 2935|   
# 2936|     for (I = 0; I != Repeats; ++I) {

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2900:3: alloc_fn: Storage is returned from allocation function "malloc". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2900:3: var_assign: Assigning: "Locations" = storage returned from "malloc(NumLocations * 16UL)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:2943:9: leaked_storage: Variable "Locations" going out of scope leaks the storage it points to.
# 2941|           describeLibclangFailure(Err);
# 2942|           clang_disposeTranslationUnit(TU);
# 2943|->         return 1;
# 2944|         }
# 2945|       }

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3194:3: alloc_fn: Storage is returned from allocation function "malloc". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3194:3: var_assign: Assigning: "Locations" = storage returned from "malloc(NumLocations * 16UL)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3199:5: noescape: Resource "&Locations[Loc].filename" is not freed or pointed-to in "parse_file_line_column".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3202:7: leaked_storage: Variable "Locations" going out of scope leaks the storage it points to.
# 3200|                                               &Locations[Loc].line,
# 3201|                                               &Locations[Loc].column, 0, 0)))
# 3202|->       return errorCode;
# 3203|     }
# 3204|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3194:3: alloc_fn: Storage is returned from allocation function "malloc". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3194:3: var_assign: Assigning: "Locations" = storage returned from "malloc(NumLocations * 16UL)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3207:5: leaked_storage: Variable "Locations" going out of scope leaks the storage it points to.
# 3205|     if (parse_remapped_files(argc, argv, NumLocations + 1, &unsaved_files,
# 3206|                              &num_unsaved_files))
# 3207|->     return -1;
# 3208|   
# 3209|     if (getenv("CINDEXTEST_EDITING"))

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3194:3: alloc_fn: Storage is returned from allocation function "malloc". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3194:3: var_assign: Assigning: "Locations" = storage returned from "malloc(NumLocations * 16UL)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3225:5: leaked_storage: Variable "Locations" going out of scope leaks the storage it points to.
# 3223|       describeLibclangFailure(Err);
# 3224|       clang_disposeTranslationUnit(TU);
# 3225|->     return -1;
# 3226|     }
# 3227|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3194:3: alloc_fn: Storage is returned from allocation function "malloc". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3194:3: var_assign: Assigning: "Locations" = storage returned from "malloc(NumLocations * 16UL)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3229:5: leaked_storage: Variable "Locations" going out of scope leaks the storage it points to.
# 3227|   
# 3228|     if (checkForErrors(TU) != 0)
# 3229|->     return -1;
# 3230|   
# 3231|     for (I = 0; I != Repeats; ++I) {

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3194:3: alloc_fn: Storage is returned from allocation function "malloc". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3194:3: var_assign: Assigning: "Locations" = storage returned from "malloc(NumLocations * 16UL)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3238:9: leaked_storage: Variable "Locations" going out of scope leaks the storage it points to.
# 3236|           describeLibclangFailure(Err);
# 3237|           clang_disposeTranslationUnit(TU);
# 3238|->         return 1;
# 3239|         }
# 3240|       }

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3303:3: alloc_fn: Storage is returned from allocation function "malloc". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3303:3: var_assign: Assigning: "Filenames" = storage returned from "malloc(NumFilenames * 8UL)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3313:5: leaked_storage: Variable "Filenames" going out of scope leaks the storage it points to.
# 3311|     if (parse_remapped_files(argc, argv, NumFilenames + 1, &unsaved_files,
# 3312|                              &num_unsaved_files))
# 3313|->     return -1;
# 3314|   
# 3315|     if (getenv("CINDEXTEST_EDITING"))

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3303:3: alloc_fn: Storage is returned from allocation function "malloc". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3303:3: var_assign: Assigning: "Filenames" = storage returned from "malloc(NumFilenames * 8UL)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3332:5: leaked_storage: Variable "Filenames" going out of scope leaks the storage it points to.
# 3330|       describeLibclangFailure(Err);
# 3331|       clang_disposeTranslationUnit(TU);
# 3332|->     return -1;
# 3333|     }
# 3334|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3303:3: alloc_fn: Storage is returned from allocation function "malloc". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3303:3: var_assign: Assigning: "Filenames" = storage returned from "malloc(NumFilenames * 8UL)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3336:5: leaked_storage: Variable "Filenames" going out of scope leaks the storage it points to.
# 3334|   
# 3335|     if (checkForErrors(TU) != 0)
# 3336|->     return -1;
# 3337|   
# 3338|     for (I = 0; I != Repeats; ++I) {

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3303:3: alloc_fn: Storage is returned from allocation function "malloc". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3303:3: var_assign: Assigning: "Filenames" = storage returned from "malloc(NumFilenames * 8UL)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:3345:9: leaked_storage: Variable "Filenames" going out of scope leaks the storage it points to.
# 3343|           describeLibclangFailure(Err);
# 3344|           clang_disposeTranslationUnit(TU);
# 3345|->         return 1;
# 3346|         }
# 3347|       }

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:4409:9: alloc_fn: Storage is returned from allocation function "clang_CompilationDatabase_getCompileCommands".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:4409:9: var_assign: Assigning: "CCmds" = storage returned from "clang_CompilationDatabase_getCompileCommands(db, argv[i + 1])".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:4417:9: noescape: Resource "CCmds" is not freed or pointed-to in "clang_CompileCommands_getSize".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:4458:3: leaked_storage: Variable "CCmds" going out of scope leaks the storage it points to.
# 4456|     free(tmp);
# 4457|   
# 4458|->   return errorCode;
# 4459|   }
# 4460|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:4397:3: alloc_fn: Storage is returned from allocation function "clang_CompilationDatabase_fromDirectory".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:4397:3: var_assign: Assigning: "db" = storage returned from "clang_CompilationDatabase_fromDirectory(buildDir, &ec)".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:4458:3: leaked_storage: Variable "db" going out of scope leaks the storage it points to.
# 4456|     free(tmp);
# 4457|   
# 4458|->   return errorCode;
# 4459|   }
# 4460|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:4587:3: alloc_fn: Storage is returned from allocation function "fopen".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:4587:3: var_assign: Assigning: "fp" = storage returned from "fopen(file_name, "r")".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:4594:3: noescape: Resource "fp" is not freed or pointed-to in "feof".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:4595:5: noescape: Resource "fp" is not freed or pointed-to in "fgetc".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:4594:3: noescape: Resource "fp" is not freed or pointed-to in "feof".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:4595:5: noescape: Resource "fp" is not freed or pointed-to in "fgetc".
llvm-project-19.0.0.src/clang/tools/c-index-test/c-index-test.c:4616:9: leaked_storage: Variable "fp" going out of scope leaks the storage it points to.
# 4614|         }
# 4615|         if (print_usrs(&args[0], &args[i]))
# 4616|->         return 1;
# 4617|       }
# 4618|       else

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/c-index-test/core_main.cpp:46:27: constructor_uses_global_object: The constructor of global object "<unnamed>::options::IndexTestCoreCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::options::IndexTestCoreCategory" might be created before "Allocator" is available.
#   44|   namespace options {
#   45|   
#   46|-> static cl::OptionCategory IndexTestCoreCategory("index-test-core options");
#   47|   
#   48|   static cl::opt<ActionType>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/c-index-test/core_main.cpp:46:27: constructor_uses_global_object: The constructor of global object "<unnamed>::options::IndexTestCoreCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::options::IndexTestCoreCategory" might be created before "GlobalParser" is available.
#   44|   namespace options {
#   45|   
#   46|-> static cl::OptionCategory IndexTestCoreCategory("index-test-core options");
#   47|   
#   48|   static cl::opt<ActionType>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/c-index-test/core_main.cpp:46:27: constructor_uses_global_object: The constructor of global object "<unnamed>::options::IndexTestCoreCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::options::IndexTestCoreCategory" might be created before "fuzzer::TPC" is available.
#   44|   namespace options {
#   45|   
#   46|-> static cl::OptionCategory IndexTestCoreCategory("index-test-core options");
#   47|   
#   48|   static cl::opt<ActionType>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/c-index-test/core_main.cpp:46:27: constructor_uses_global_object: The constructor of global object "<unnamed>::options::IndexTestCoreCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::options::IndexTestCoreCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   44|   namespace options {
#   45|   
#   46|-> static cl::OptionCategory IndexTestCoreCategory("index-test-core options");
#   47|   
#   48|   static cl::opt<ActionType>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/c-index-test/core_main.cpp:49:1: constructor_uses_global_object: The constructor of global object "<unnamed>::options::Action" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::options::Action" might be created before "Allocator" is available.
#   47|   
#   48|   static cl::opt<ActionType>
#   49|-> Action(cl::desc("Action:"), cl::init(ActionType::None),
#   50|          cl::values(
#   51|             clEnumValN(ActionType::PrintSourceSymbols,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/c-index-test/core_main.cpp:49:1: constructor_uses_global_object: The constructor of global object "<unnamed>::options::Action" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::options::Action" might be created before "fuzzer::TPC" is available.
#   47|   
#   48|   static cl::opt<ActionType>
#   49|-> Action(cl::desc("Action:"), cl::init(ActionType::None),
#   50|          cl::values(
#   51|             clEnumValN(ActionType::PrintSourceSymbols,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/c-index-test/core_main.cpp:49:1: constructor_uses_global_object: The constructor of global object "<unnamed>::options::Action" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::options::Action" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   47|   
#   48|   static cl::opt<ActionType>
#   49|-> Action(cl::desc("Action:"), cl::init(ActionType::None),
#   50|          cl::values(
#   51|             clEnumValN(ActionType::PrintSourceSymbols,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/c-index-test/core_main.cpp:49:1: constructor_uses_global_object: The constructor of global object "<unnamed>::options::Action" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::options::Action" might be created before "scudo::RegionPageMap::Buffers" is available.
#   47|   
#   48|   static cl::opt<ActionType>
#   49|-> Action(cl::desc("Action:"), cl::init(ActionType::None),
#   50|          cl::values(
#   51|             clEnumValN(ActionType::PrintSourceSymbols,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/c-index-test/core_main.cpp:55:22: constructor_uses_global_object: The constructor of global object "<unnamed>::options::MoreHelp" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::options::MoreHelp" might be created before "GlobalParser" is available.
#   53|          cl::cat(IndexTestCoreCategory));
#   54|   
#   55|-> static cl::extrahelp MoreHelp(
#   56|     "\nAdd \"-- <compiler arguments>\" at the end to setup the compiler "
#   57|     "invocation\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/c-index-test/core_main.cpp:61:1: constructor_uses_global_object: The constructor of global object "<unnamed>::options::DumpModuleImports" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::options::DumpModuleImports" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   59|   
#   60|   static cl::opt<bool>
#   61|-> DumpModuleImports("dump-imported-module-files",
#   62|                  cl::desc("Print symbols and input files from imported modules"));
#   63|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/c-index-test/core_main.cpp:65:1: constructor_uses_global_object: The constructor of global object "<unnamed>::options::IncludeLocals" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::options::IncludeLocals" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|   
#   64|   static cl::opt<bool>
#   65|-> IncludeLocals("include-locals", cl::desc("Print local symbols"));
#   66|   
#   67|   static cl::opt<bool> IgnoreMacros("ignore-macros",

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/c-index-test/core_main.cpp:67:22: constructor_uses_global_object: The constructor of global object "<unnamed>::options::IgnoreMacros" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::options::IgnoreMacros" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   65|   IncludeLocals("include-locals", cl::desc("Print local symbols"));
#   66|   
#   67|-> static cl::opt<bool> IgnoreMacros("ignore-macros",
#   68|                                     cl::desc("Skip indexing macros"));
#   69|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/c-index-test/core_main.cpp:71:1: constructor_uses_global_object: The constructor of global object "<unnamed>::options::ModuleFilePath[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::options::ModuleFilePath[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   69|   
#   70|   static cl::opt<std::string>
#   71|-> ModuleFilePath("module-file",
#   72|                  cl::desc("Path to module file to print symbols from"));
#   73|   static cl::opt<std::string>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/c-index-test/core_main.cpp:74:3: constructor_uses_global_object: The constructor of global object "<unnamed>::options::ModuleFormat[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "<unnamed>::options::ModuleFormat[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   72|                  cl::desc("Path to module file to print symbols from"));
#   73|   static cl::opt<std::string>
#   74|->   ModuleFormat("fmodule-format", cl::init("raw"),
#   75|           cl::desc("Container format for clang modules and PCH, 'raw' or 'obj'"));
#   76|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:42:22: constructor_uses_global_object: The constructor of global object "CommonHelp" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "CommonHelp" might be created before "GlobalParser" is available.
#   40|   using namespace llvm;
#   41|   
#   42|-> static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   43|   static cl::extrahelp MoreHelp(
#   44|       "\tFor example, to run clang-check on all files in a subtree of the\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:43:22: constructor_uses_global_object: The constructor of global object "MoreHelp" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "MoreHelp" might be created before "GlobalParser" is available.
#   41|   
#   42|   static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#   43|-> static cl::extrahelp MoreHelp(
#   44|       "\tFor example, to run clang-check on all files in a subtree of the\n"
#   45|       "\tsource tree, use:\n"

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:58:27: constructor_uses_global_object: The constructor of global object "ClangCheckCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ClangCheckCategory" might be created before "Allocator" is available.
#   56|   );
#   57|   
#   58|-> static cl::OptionCategory ClangCheckCategory("clang-check options");
#   59|   static const opt::OptTable &Options = getDriverOptTable();
#   60|   static cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:58:27: constructor_uses_global_object: The constructor of global object "ClangCheckCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "ClangCheckCategory" might be created before "GlobalParser" is available.
#   56|   );
#   57|   
#   58|-> static cl::OptionCategory ClangCheckCategory("clang-check options");
#   59|   static const opt::OptTable &Options = getDriverOptTable();
#   60|   static cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:58:27: constructor_uses_global_object: The constructor of global object "ClangCheckCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ClangCheckCategory" might be created before "fuzzer::TPC" is available.
#   56|   );
#   57|   
#   58|-> static cl::OptionCategory ClangCheckCategory("clang-check options");
#   59|   static const opt::OptTable &Options = getDriverOptTable();
#   60|   static cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:58:27: constructor_uses_global_object: The constructor of global object "ClangCheckCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ClangCheckCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   56|   );
#   57|   
#   58|-> static cl::OptionCategory ClangCheckCategory("clang-check options");
#   59|   static const opt::OptTable &Options = getDriverOptTable();
#   60|   static cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:61:5: constructor_uses_global_object: The constructor of global object "ASTDump" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ASTDump" might be created before "Allocator" is available.
#   59|   static const opt::OptTable &Options = getDriverOptTable();
#   60|   static cl::opt<bool>
#   61|->     ASTDump("ast-dump",
#   62|               cl::desc(Options.getOptionHelpText(options::OPT_ast_dump)),
#   63|               cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:61:5: constructor_uses_global_object: The constructor of global object "ASTDump" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ASTDump" might be created before "fuzzer::TPC" is available.
#   59|   static const opt::OptTable &Options = getDriverOptTable();
#   60|   static cl::opt<bool>
#   61|->     ASTDump("ast-dump",
#   62|               cl::desc(Options.getOptionHelpText(options::OPT_ast_dump)),
#   63|               cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:61:5: constructor_uses_global_object: The constructor of global object "ASTDump" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ASTDump" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   59|   static const opt::OptTable &Options = getDriverOptTable();
#   60|   static cl::opt<bool>
#   61|->     ASTDump("ast-dump",
#   62|               cl::desc(Options.getOptionHelpText(options::OPT_ast_dump)),
#   63|               cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:61:5: constructor_uses_global_object: The constructor of global object "ASTDump" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ASTDump" might be created before "scudo::RegionPageMap::Buffers" is available.
#   59|   static const opt::OptTable &Options = getDriverOptTable();
#   60|   static cl::opt<bool>
#   61|->     ASTDump("ast-dump",
#   62|               cl::desc(Options.getOptionHelpText(options::OPT_ast_dump)),
#   63|               cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:65:5: constructor_uses_global_object: The constructor of global object "ASTList" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ASTList" might be created before "Allocator" is available.
#   63|               cl::cat(ClangCheckCategory));
#   64|   static cl::opt<bool>
#   65|->     ASTList("ast-list",
#   66|               cl::desc(Options.getOptionHelpText(options::OPT_ast_list)),
#   67|               cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:65:5: constructor_uses_global_object: The constructor of global object "ASTList" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ASTList" might be created before "fuzzer::TPC" is available.
#   63|               cl::cat(ClangCheckCategory));
#   64|   static cl::opt<bool>
#   65|->     ASTList("ast-list",
#   66|               cl::desc(Options.getOptionHelpText(options::OPT_ast_list)),
#   67|               cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:65:5: constructor_uses_global_object: The constructor of global object "ASTList" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ASTList" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   63|               cl::cat(ClangCheckCategory));
#   64|   static cl::opt<bool>
#   65|->     ASTList("ast-list",
#   66|               cl::desc(Options.getOptionHelpText(options::OPT_ast_list)),
#   67|               cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:65:5: constructor_uses_global_object: The constructor of global object "ASTList" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ASTList" might be created before "scudo::RegionPageMap::Buffers" is available.
#   63|               cl::cat(ClangCheckCategory));
#   64|   static cl::opt<bool>
#   65|->     ASTList("ast-list",
#   66|               cl::desc(Options.getOptionHelpText(options::OPT_ast_list)),
#   67|               cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:69:5: constructor_uses_global_object: The constructor of global object "ASTPrint" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ASTPrint" might be created before "Allocator" is available.
#   67|               cl::cat(ClangCheckCategory));
#   68|   static cl::opt<bool>
#   69|->     ASTPrint("ast-print",
#   70|                cl::desc(Options.getOptionHelpText(options::OPT_ast_print)),
#   71|                cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:69:5: constructor_uses_global_object: The constructor of global object "ASTPrint" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ASTPrint" might be created before "fuzzer::TPC" is available.
#   67|               cl::cat(ClangCheckCategory));
#   68|   static cl::opt<bool>
#   69|->     ASTPrint("ast-print",
#   70|                cl::desc(Options.getOptionHelpText(options::OPT_ast_print)),
#   71|                cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:69:5: constructor_uses_global_object: The constructor of global object "ASTPrint" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ASTPrint" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   67|               cl::cat(ClangCheckCategory));
#   68|   static cl::opt<bool>
#   69|->     ASTPrint("ast-print",
#   70|                cl::desc(Options.getOptionHelpText(options::OPT_ast_print)),
#   71|                cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:69:5: constructor_uses_global_object: The constructor of global object "ASTPrint" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ASTPrint" might be created before "scudo::RegionPageMap::Buffers" is available.
#   67|               cl::cat(ClangCheckCategory));
#   68|   static cl::opt<bool>
#   69|->     ASTPrint("ast-print",
#   70|                cl::desc(Options.getOptionHelpText(options::OPT_ast_print)),
#   71|                cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:72:29: constructor_uses_global_object: The constructor of global object "ASTDumpFilter[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ASTDumpFilter[abi:cxx11]" might be created before "Allocator" is available.
#   70|                cl::desc(Options.getOptionHelpText(options::OPT_ast_print)),
#   71|                cl::cat(ClangCheckCategory));
#   72|-> static cl::opt<std::string> ASTDumpFilter(
#   73|       "ast-dump-filter",
#   74|       cl::desc(Options.getOptionHelpText(options::OPT_ast_dump_filter)),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:72:29: constructor_uses_global_object: The constructor of global object "ASTDumpFilter[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ASTDumpFilter[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   70|                cl::desc(Options.getOptionHelpText(options::OPT_ast_print)),
#   71|                cl::cat(ClangCheckCategory));
#   72|-> static cl::opt<std::string> ASTDumpFilter(
#   73|       "ast-dump-filter",
#   74|       cl::desc(Options.getOptionHelpText(options::OPT_ast_dump_filter)),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:72:29: constructor_uses_global_object: The constructor of global object "ASTDumpFilter[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ASTDumpFilter[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   70|                cl::desc(Options.getOptionHelpText(options::OPT_ast_print)),
#   71|                cl::cat(ClangCheckCategory));
#   72|-> static cl::opt<std::string> ASTDumpFilter(
#   73|       "ast-dump-filter",
#   74|       cl::desc(Options.getOptionHelpText(options::OPT_ast_dump_filter)),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:72:29: constructor_uses_global_object: The constructor of global object "ASTDumpFilter[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ASTDumpFilter[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   70|                cl::desc(Options.getOptionHelpText(options::OPT_ast_print)),
#   71|                cl::cat(ClangCheckCategory));
#   72|-> static cl::opt<std::string> ASTDumpFilter(
#   73|       "ast-dump-filter",
#   74|       cl::desc(Options.getOptionHelpText(options::OPT_ast_dump_filter)),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:77:5: constructor_uses_global_object: The constructor of global object "Analyze" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "Analyze" might be created before "Allocator" is available.
#   75|       cl::cat(ClangCheckCategory));
#   76|   static cl::opt<bool>
#   77|->     Analyze("analyze",
#   78|               cl::desc(Options.getOptionHelpText(options::OPT_analyze)),
#   79|               cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:77:5: constructor_uses_global_object: The constructor of global object "Analyze" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "Analyze" might be created before "fuzzer::TPC" is available.
#   75|       cl::cat(ClangCheckCategory));
#   76|   static cl::opt<bool>
#   77|->     Analyze("analyze",
#   78|               cl::desc(Options.getOptionHelpText(options::OPT_analyze)),
#   79|               cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:77:5: constructor_uses_global_object: The constructor of global object "Analyze" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Analyze" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   75|       cl::cat(ClangCheckCategory));
#   76|   static cl::opt<bool>
#   77|->     Analyze("analyze",
#   78|               cl::desc(Options.getOptionHelpText(options::OPT_analyze)),
#   79|               cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:77:5: constructor_uses_global_object: The constructor of global object "Analyze" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "Analyze" might be created before "scudo::RegionPageMap::Buffers" is available.
#   75|       cl::cat(ClangCheckCategory));
#   76|   static cl::opt<bool>
#   77|->     Analyze("analyze",
#   78|               cl::desc(Options.getOptionHelpText(options::OPT_analyze)),
#   79|               cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:81:5: constructor_uses_global_object: The constructor of global object "AnalyzerOutput[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "AnalyzerOutput[abi:cxx11]" might be created before "Allocator" is available.
#   79|               cl::cat(ClangCheckCategory));
#   80|   static cl::opt<std::string>
#   81|->     AnalyzerOutput("analyzer-output-path",
#   82|                      cl::desc(Options.getOptionHelpText(options::OPT_o)),
#   83|                      cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:81:5: constructor_uses_global_object: The constructor of global object "AnalyzerOutput[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "AnalyzerOutput[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   79|               cl::cat(ClangCheckCategory));
#   80|   static cl::opt<std::string>
#   81|->     AnalyzerOutput("analyzer-output-path",
#   82|                      cl::desc(Options.getOptionHelpText(options::OPT_o)),
#   83|                      cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:81:5: constructor_uses_global_object: The constructor of global object "AnalyzerOutput[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "AnalyzerOutput[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   79|               cl::cat(ClangCheckCategory));
#   80|   static cl::opt<std::string>
#   81|->     AnalyzerOutput("analyzer-output-path",
#   82|                      cl::desc(Options.getOptionHelpText(options::OPT_o)),
#   83|                      cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:81:5: constructor_uses_global_object: The constructor of global object "AnalyzerOutput[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "AnalyzerOutput[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   79|               cl::cat(ClangCheckCategory));
#   80|   static cl::opt<std::string>
#   81|->     AnalyzerOutput("analyzer-output-path",
#   82|                      cl::desc(Options.getOptionHelpText(options::OPT_o)),
#   83|                      cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:86:5: constructor_uses_global_object: The constructor of global object "Fixit" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "Fixit" might be created before "Allocator" is available.
#   84|   
#   85|   static cl::opt<bool>
#   86|->     Fixit("fixit", cl::desc(Options.getOptionHelpText(options::OPT_fixit)),
#   87|             cl::cat(ClangCheckCategory));
#   88|   static cl::opt<bool> FixWhatYouCan(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:86:5: constructor_uses_global_object: The constructor of global object "Fixit" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "Fixit" might be created before "fuzzer::TPC" is available.
#   84|   
#   85|   static cl::opt<bool>
#   86|->     Fixit("fixit", cl::desc(Options.getOptionHelpText(options::OPT_fixit)),
#   87|             cl::cat(ClangCheckCategory));
#   88|   static cl::opt<bool> FixWhatYouCan(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:86:5: constructor_uses_global_object: The constructor of global object "Fixit" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Fixit" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   84|   
#   85|   static cl::opt<bool>
#   86|->     Fixit("fixit", cl::desc(Options.getOptionHelpText(options::OPT_fixit)),
#   87|             cl::cat(ClangCheckCategory));
#   88|   static cl::opt<bool> FixWhatYouCan(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:86:5: constructor_uses_global_object: The constructor of global object "Fixit" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "Fixit" might be created before "scudo::RegionPageMap::Buffers" is available.
#   84|   
#   85|   static cl::opt<bool>
#   86|->     Fixit("fixit", cl::desc(Options.getOptionHelpText(options::OPT_fixit)),
#   87|             cl::cat(ClangCheckCategory));
#   88|   static cl::opt<bool> FixWhatYouCan(

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:88:22: constructor_uses_global_object: The constructor of global object "FixWhatYouCan" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "FixWhatYouCan" might be created before "Allocator" is available.
#   86|       Fixit("fixit", cl::desc(Options.getOptionHelpText(options::OPT_fixit)),
#   87|             cl::cat(ClangCheckCategory));
#   88|-> static cl::opt<bool> FixWhatYouCan(
#   89|       "fix-what-you-can",
#   90|       cl::desc(Options.getOptionHelpText(options::OPT_fix_what_you_can)),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:88:22: constructor_uses_global_object: The constructor of global object "FixWhatYouCan" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "FixWhatYouCan" might be created before "fuzzer::TPC" is available.
#   86|       Fixit("fixit", cl::desc(Options.getOptionHelpText(options::OPT_fixit)),
#   87|             cl::cat(ClangCheckCategory));
#   88|-> static cl::opt<bool> FixWhatYouCan(
#   89|       "fix-what-you-can",
#   90|       cl::desc(Options.getOptionHelpText(options::OPT_fix_what_you_can)),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:88:22: constructor_uses_global_object: The constructor of global object "FixWhatYouCan" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "FixWhatYouCan" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   86|       Fixit("fixit", cl::desc(Options.getOptionHelpText(options::OPT_fixit)),
#   87|             cl::cat(ClangCheckCategory));
#   88|-> static cl::opt<bool> FixWhatYouCan(
#   89|       "fix-what-you-can",
#   90|       cl::desc(Options.getOptionHelpText(options::OPT_fix_what_you_can)),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:88:22: constructor_uses_global_object: The constructor of global object "FixWhatYouCan" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "FixWhatYouCan" might be created before "scudo::RegionPageMap::Buffers" is available.
#   86|       Fixit("fixit", cl::desc(Options.getOptionHelpText(options::OPT_fixit)),
#   87|             cl::cat(ClangCheckCategory));
#   88|-> static cl::opt<bool> FixWhatYouCan(
#   89|       "fix-what-you-can",
#   90|       cl::desc(Options.getOptionHelpText(options::OPT_fix_what_you_can)),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:93:22: constructor_uses_global_object: The constructor of global object "SyntaxTreeDump" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "SyntaxTreeDump" might be created before "Allocator" is available.
#   91|       cl::cat(ClangCheckCategory));
#   92|   
#   93|-> static cl::opt<bool> SyntaxTreeDump("syntax-tree-dump",
#   94|                                       cl::desc("dump the syntax tree"),
#   95|                                       cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:93:22: constructor_uses_global_object: The constructor of global object "SyntaxTreeDump" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "SyntaxTreeDump" might be created before "fuzzer::TPC" is available.
#   91|       cl::cat(ClangCheckCategory));
#   92|   
#   93|-> static cl::opt<bool> SyntaxTreeDump("syntax-tree-dump",
#   94|                                       cl::desc("dump the syntax tree"),
#   95|                                       cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:93:22: constructor_uses_global_object: The constructor of global object "SyntaxTreeDump" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "SyntaxTreeDump" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   91|       cl::cat(ClangCheckCategory));
#   92|   
#   93|-> static cl::opt<bool> SyntaxTreeDump("syntax-tree-dump",
#   94|                                       cl::desc("dump the syntax tree"),
#   95|                                       cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:93:22: constructor_uses_global_object: The constructor of global object "SyntaxTreeDump" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "SyntaxTreeDump" might be created before "scudo::RegionPageMap::Buffers" is available.
#   91|       cl::cat(ClangCheckCategory));
#   92|   
#   93|-> static cl::opt<bool> SyntaxTreeDump("syntax-tree-dump",
#   94|                                       cl::desc("dump the syntax tree"),
#   95|                                       cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:96:22: constructor_uses_global_object: The constructor of global object "TokensDump" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "TokensDump" might be created before "Allocator" is available.
#   94|                                       cl::desc("dump the syntax tree"),
#   95|                                       cl::cat(ClangCheckCategory));
#   96|-> static cl::opt<bool> TokensDump("tokens-dump",
#   97|                                   cl::desc("dump the preprocessed tokens"),
#   98|                                   cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:96:22: constructor_uses_global_object: The constructor of global object "TokensDump" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "TokensDump" might be created before "fuzzer::TPC" is available.
#   94|                                       cl::desc("dump the syntax tree"),
#   95|                                       cl::cat(ClangCheckCategory));
#   96|-> static cl::opt<bool> TokensDump("tokens-dump",
#   97|                                   cl::desc("dump the preprocessed tokens"),
#   98|                                   cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:96:22: constructor_uses_global_object: The constructor of global object "TokensDump" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "TokensDump" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   94|                                       cl::desc("dump the syntax tree"),
#   95|                                       cl::cat(ClangCheckCategory));
#   96|-> static cl::opt<bool> TokensDump("tokens-dump",
#   97|                                   cl::desc("dump the preprocessed tokens"),
#   98|                                   cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-check/ClangCheck.cpp:96:22: constructor_uses_global_object: The constructor of global object "TokensDump" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "TokensDump" might be created before "scudo::RegionPageMap::Buffers" is available.
#   94|                                       cl::desc("dump the syntax tree"),
#   95|                                       cl::cat(ClangCheckCategory));
#   96|-> static cl::opt<bool> TokensDump("tokens-dump",
#   97|                                   cl::desc("dump the preprocessed tokens"),
#   98|                                   cl::cat(ClangCheckCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:23:27: constructor_uses_global_object: The constructor of global object "ClangDiffCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ClangDiffCategory" might be created before "Allocator" is available.
#   21|   using namespace clang::tooling;
#   22|   
#   23|-> static cl::OptionCategory ClangDiffCategory("clang-diff options");
#   24|   
#   25|   static cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:23:27: constructor_uses_global_object: The constructor of global object "ClangDiffCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "ClangDiffCategory" might be created before "GlobalParser" is available.
#   21|   using namespace clang::tooling;
#   22|   
#   23|-> static cl::OptionCategory ClangDiffCategory("clang-diff options");
#   24|   
#   25|   static cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:23:27: constructor_uses_global_object: The constructor of global object "ClangDiffCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ClangDiffCategory" might be created before "fuzzer::TPC" is available.
#   21|   using namespace clang::tooling;
#   22|   
#   23|-> static cl::OptionCategory ClangDiffCategory("clang-diff options");
#   24|   
#   25|   static cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:23:27: constructor_uses_global_object: The constructor of global object "ClangDiffCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ClangDiffCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   21|   using namespace clang::tooling;
#   22|   
#   23|-> static cl::OptionCategory ClangDiffCategory("clang-diff options");
#   24|   
#   25|   static cl::opt<bool>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:26:5: constructor_uses_global_object: The constructor of global object "ASTDump" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ASTDump" might be created before "Allocator" is available.
#   24|   
#   25|   static cl::opt<bool>
#   26|->     ASTDump("ast-dump",
#   27|               cl::desc("Print the internal representation of the AST."),
#   28|               cl::init(false), cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:26:5: constructor_uses_global_object: The constructor of global object "ASTDump" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ASTDump" might be created before "fuzzer::TPC" is available.
#   24|   
#   25|   static cl::opt<bool>
#   26|->     ASTDump("ast-dump",
#   27|               cl::desc("Print the internal representation of the AST."),
#   28|               cl::init(false), cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:26:5: constructor_uses_global_object: The constructor of global object "ASTDump" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ASTDump" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   24|   
#   25|   static cl::opt<bool>
#   26|->     ASTDump("ast-dump",
#   27|               cl::desc("Print the internal representation of the AST."),
#   28|               cl::init(false), cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:26:5: constructor_uses_global_object: The constructor of global object "ASTDump" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ASTDump" might be created before "scudo::RegionPageMap::Buffers" is available.
#   24|   
#   25|   static cl::opt<bool>
#   26|->     ASTDump("ast-dump",
#   27|               cl::desc("Print the internal representation of the AST."),
#   28|               cl::init(false), cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:30:22: constructor_uses_global_object: The constructor of global object "ASTDumpJson" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ASTDumpJson" might be created before "Allocator" is available.
#   28|               cl::init(false), cl::cat(ClangDiffCategory));
#   29|   
#   30|-> static cl::opt<bool> ASTDumpJson(
#   31|       "ast-dump-json",
#   32|       cl::desc("Print the internal representation of the AST as JSON."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:30:22: constructor_uses_global_object: The constructor of global object "ASTDumpJson" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ASTDumpJson" might be created before "fuzzer::TPC" is available.
#   28|               cl::init(false), cl::cat(ClangDiffCategory));
#   29|   
#   30|-> static cl::opt<bool> ASTDumpJson(
#   31|       "ast-dump-json",
#   32|       cl::desc("Print the internal representation of the AST as JSON."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:30:22: constructor_uses_global_object: The constructor of global object "ASTDumpJson" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ASTDumpJson" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   28|               cl::init(false), cl::cat(ClangDiffCategory));
#   29|   
#   30|-> static cl::opt<bool> ASTDumpJson(
#   31|       "ast-dump-json",
#   32|       cl::desc("Print the internal representation of the AST as JSON."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:30:22: constructor_uses_global_object: The constructor of global object "ASTDumpJson" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ASTDumpJson" might be created before "scudo::RegionPageMap::Buffers" is available.
#   28|               cl::init(false), cl::cat(ClangDiffCategory));
#   29|   
#   30|-> static cl::opt<bool> ASTDumpJson(
#   31|       "ast-dump-json",
#   32|       cl::desc("Print the internal representation of the AST as JSON."),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:35:22: constructor_uses_global_object: The constructor of global object "PrintMatches" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "PrintMatches" might be created before "Allocator" is available.
#   33|       cl::init(false), cl::cat(ClangDiffCategory));
#   34|   
#   35|-> static cl::opt<bool> PrintMatches("dump-matches",
#   36|                                     cl::desc("Print the matched nodes."),
#   37|                                     cl::init(false), cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:35:22: constructor_uses_global_object: The constructor of global object "PrintMatches" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "PrintMatches" might be created before "fuzzer::TPC" is available.
#   33|       cl::init(false), cl::cat(ClangDiffCategory));
#   34|   
#   35|-> static cl::opt<bool> PrintMatches("dump-matches",
#   36|                                     cl::desc("Print the matched nodes."),
#   37|                                     cl::init(false), cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:35:22: constructor_uses_global_object: The constructor of global object "PrintMatches" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "PrintMatches" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   33|       cl::init(false), cl::cat(ClangDiffCategory));
#   34|   
#   35|-> static cl::opt<bool> PrintMatches("dump-matches",
#   36|                                     cl::desc("Print the matched nodes."),
#   37|                                     cl::init(false), cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:35:22: constructor_uses_global_object: The constructor of global object "PrintMatches" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "PrintMatches" might be created before "scudo::RegionPageMap::Buffers" is available.
#   33|       cl::init(false), cl::cat(ClangDiffCategory));
#   34|   
#   35|-> static cl::opt<bool> PrintMatches("dump-matches",
#   36|                                     cl::desc("Print the matched nodes."),
#   37|                                     cl::init(false), cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:39:22: constructor_uses_global_object: The constructor of global object "HtmlDiff" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "HtmlDiff" might be created before "Allocator" is available.
#   37|                                     cl::init(false), cl::cat(ClangDiffCategory));
#   38|   
#   39|-> static cl::opt<bool> HtmlDiff("html",
#   40|                                 cl::desc("Output a side-by-side diff in HTML."),
#   41|                                 cl::init(false), cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:39:22: constructor_uses_global_object: The constructor of global object "HtmlDiff" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "HtmlDiff" might be created before "fuzzer::TPC" is available.
#   37|                                     cl::init(false), cl::cat(ClangDiffCategory));
#   38|   
#   39|-> static cl::opt<bool> HtmlDiff("html",
#   40|                                 cl::desc("Output a side-by-side diff in HTML."),
#   41|                                 cl::init(false), cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:39:22: constructor_uses_global_object: The constructor of global object "HtmlDiff" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "HtmlDiff" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   37|                                     cl::init(false), cl::cat(ClangDiffCategory));
#   38|   
#   39|-> static cl::opt<bool> HtmlDiff("html",
#   40|                                 cl::desc("Output a side-by-side diff in HTML."),
#   41|                                 cl::init(false), cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:39:22: constructor_uses_global_object: The constructor of global object "HtmlDiff" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "HtmlDiff" might be created before "scudo::RegionPageMap::Buffers" is available.
#   37|                                     cl::init(false), cl::cat(ClangDiffCategory));
#   38|   
#   39|-> static cl::opt<bool> HtmlDiff("html",
#   40|                                 cl::desc("Output a side-by-side diff in HTML."),
#   41|                                 cl::init(false), cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:43:29: constructor_uses_global_object: The constructor of global object "SourcePath[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "SourcePath[abi:cxx11]" might be created before "Allocator" is available.
#   41|                                 cl::init(false), cl::cat(ClangDiffCategory));
#   42|   
#   43|-> static cl::opt<std::string> SourcePath(cl::Positional, cl::desc("<source>"),
#   44|                                          cl::Required,
#   45|                                          cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:43:29: constructor_uses_global_object: The constructor of global object "SourcePath[abi:cxx11]" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "SourcePath[abi:cxx11]" might be created before "GlobalParser" is available.
#   41|                                 cl::init(false), cl::cat(ClangDiffCategory));
#   42|   
#   43|-> static cl::opt<std::string> SourcePath(cl::Positional, cl::desc("<source>"),
#   44|                                          cl::Required,
#   45|                                          cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:43:29: constructor_uses_global_object: The constructor of global object "SourcePath[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "SourcePath[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   41|                                 cl::init(false), cl::cat(ClangDiffCategory));
#   42|   
#   43|-> static cl::opt<std::string> SourcePath(cl::Positional, cl::desc("<source>"),
#   44|                                          cl::Required,
#   45|                                          cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:43:29: constructor_uses_global_object: The constructor of global object "SourcePath[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "SourcePath[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   41|                                 cl::init(false), cl::cat(ClangDiffCategory));
#   42|   
#   43|-> static cl::opt<std::string> SourcePath(cl::Positional, cl::desc("<source>"),
#   44|                                          cl::Required,
#   45|                                          cl::cat(ClangDiffCategory));

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:47:29: constructor_uses_global_object: The constructor of global object "DestinationPath[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "DestinationPath[abi:cxx11]" might be created before "Allocator" is available.
#   45|                                          cl::cat(ClangDiffCategory));
#   46|   
#   47|-> static cl::opt<std::string> DestinationPath(cl::Positional,
#   48|                                               cl::desc("<destination>"),
#   49|                                               cl::Optional,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:47:29: constructor_uses_global_object: The constructor of global object "DestinationPath[abi:cxx11]" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "DestinationPath[abi:cxx11]" might be created before "GlobalParser" is available.
#   45|                                          cl::cat(ClangDiffCategory));
#   46|   
#   47|-> static cl::opt<std::string> DestinationPath(cl::Positional,
#   48|                                               cl::desc("<destination>"),
#   49|                                               cl::Optional,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:47:29: constructor_uses_global_object: The constructor of global object "DestinationPath[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "DestinationPath[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   45|                                          cl::cat(ClangDiffCategory));
#   46|   
#   47|-> static cl::opt<std::string> DestinationPath(cl::Positional,
#   48|                                               cl::desc("<destination>"),
#   49|                                               cl::Optional,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:47:29: constructor_uses_global_object: The constructor of global object "DestinationPath[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "DestinationPath[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   45|                                          cl::cat(ClangDiffCategory));
#   46|   
#   47|-> static cl::opt<std::string> DestinationPath(cl::Positional,
#   48|                                               cl::desc("<destination>"),
#   49|                                               cl::Optional,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:52:29: constructor_uses_global_object: The constructor of global object "StopAfter[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "StopAfter[abi:cxx11]" might be created before "Allocator" is available.
#   50|                                               cl::cat(ClangDiffCategory));
#   51|   
#   52|-> static cl::opt<std::string> StopAfter("stop-diff-after",
#   53|                                         cl::desc("<topdown|bottomup>"),
#   54|                                         cl::Optional, cl::init(""),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:52:29: constructor_uses_global_object: The constructor of global object "StopAfter[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "StopAfter[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   50|                                               cl::cat(ClangDiffCategory));
#   51|   
#   52|-> static cl::opt<std::string> StopAfter("stop-diff-after",
#   53|                                         cl::desc("<topdown|bottomup>"),
#   54|                                         cl::Optional, cl::init(""),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:52:29: constructor_uses_global_object: The constructor of global object "StopAfter[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "StopAfter[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   50|                                               cl::cat(ClangDiffCategory));
#   51|   
#   52|-> static cl::opt<std::string> StopAfter("stop-diff-after",
#   53|                                         cl::desc("<topdown|bottomup>"),
#   54|                                         cl::Optional, cl::init(""),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:52:29: constructor_uses_global_object: The constructor of global object "StopAfter[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "StopAfter[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   50|                                               cl::cat(ClangDiffCategory));
#   51|   
#   52|-> static cl::opt<std::string> StopAfter("stop-diff-after",
#   53|                                         cl::desc("<topdown|bottomup>"),
#   54|                                         cl::Optional, cl::init(""),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:57:21: constructor_uses_global_object: The constructor of global object "MaxSize" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "MaxSize" might be created before "Allocator" is available.
#   55|                                         cl::cat(ClangDiffCategory));
#   56|   
#   57|-> static cl::opt<int> MaxSize("s", cl::desc("<maxsize>"), cl::Optional,
#   58|                               cl::init(-1), cl::cat(ClangDiffCategory));
#   59|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:57:21: constructor_uses_global_object: The constructor of global object "MaxSize" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "MaxSize" might be created before "fuzzer::TPC" is available.
#   55|                                         cl::cat(ClangDiffCategory));
#   56|   
#   57|-> static cl::opt<int> MaxSize("s", cl::desc("<maxsize>"), cl::Optional,
#   58|                               cl::init(-1), cl::cat(ClangDiffCategory));
#   59|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:57:21: constructor_uses_global_object: The constructor of global object "MaxSize" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "MaxSize" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   55|                                         cl::cat(ClangDiffCategory));
#   56|   
#   57|-> static cl::opt<int> MaxSize("s", cl::desc("<maxsize>"), cl::Optional,
#   58|                               cl::init(-1), cl::cat(ClangDiffCategory));
#   59|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:57:21: constructor_uses_global_object: The constructor of global object "MaxSize" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "MaxSize" might be created before "scudo::RegionPageMap::Buffers" is available.
#   55|                                         cl::cat(ClangDiffCategory));
#   56|   
#   57|-> static cl::opt<int> MaxSize("s", cl::desc("<maxsize>"), cl::Optional,
#   58|                               cl::init(-1), cl::cat(ClangDiffCategory));
#   59|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:60:29: constructor_uses_global_object: The constructor of global object "BuildPath[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "BuildPath[abi:cxx11]" might be created before "Allocator" is available.
#   58|                               cl::init(-1), cl::cat(ClangDiffCategory));
#   59|   
#   60|-> static cl::opt<std::string> BuildPath("p", cl::desc("Build path"), cl::init(""),
#   61|                                         cl::Optional, cl::cat(ClangDiffCategory));
#   62|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:60:29: constructor_uses_global_object: The constructor of global object "BuildPath[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "BuildPath[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   58|                               cl::init(-1), cl::cat(ClangDiffCategory));
#   59|   
#   60|-> static cl::opt<std::string> BuildPath("p", cl::desc("Build path"), cl::init(""),
#   61|                                         cl::Optional, cl::cat(ClangDiffCategory));
#   62|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:60:29: constructor_uses_global_object: The constructor of global object "BuildPath[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "BuildPath[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   58|                               cl::init(-1), cl::cat(ClangDiffCategory));
#   59|   
#   60|-> static cl::opt<std::string> BuildPath("p", cl::desc("Build path"), cl::init(""),
#   61|                                         cl::Optional, cl::cat(ClangDiffCategory));
#   62|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:60:29: constructor_uses_global_object: The constructor of global object "BuildPath[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "BuildPath[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   58|                               cl::init(-1), cl::cat(ClangDiffCategory));
#   59|   
#   60|-> static cl::opt<std::string> BuildPath("p", cl::desc("Build path"), cl::init(""),
#   61|                                         cl::Optional, cl::cat(ClangDiffCategory));
#   62|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:63:30: constructor_uses_global_object: The constructor of global object "ArgsAfter[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ArgsAfter[abi:cxx11]" might be created before "Allocator" is available.
#   61|                                         cl::Optional, cl::cat(ClangDiffCategory));
#   62|   
#   63|-> static cl::list<std::string> ArgsAfter(
#   64|       "extra-arg",
#   65|       cl::desc("Additional argument to append to the compiler command line"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:63:30: constructor_uses_global_object: The constructor of global object "ArgsAfter[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ArgsAfter[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   61|                                         cl::Optional, cl::cat(ClangDiffCategory));
#   62|   
#   63|-> static cl::list<std::string> ArgsAfter(
#   64|       "extra-arg",
#   65|       cl::desc("Additional argument to append to the compiler command line"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:63:30: constructor_uses_global_object: The constructor of global object "ArgsAfter[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ArgsAfter[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   61|                                         cl::Optional, cl::cat(ClangDiffCategory));
#   62|   
#   63|-> static cl::list<std::string> ArgsAfter(
#   64|       "extra-arg",
#   65|       cl::desc("Additional argument to append to the compiler command line"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:63:30: constructor_uses_global_object: The constructor of global object "ArgsAfter[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ArgsAfter[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   61|                                         cl::Optional, cl::cat(ClangDiffCategory));
#   62|   
#   63|-> static cl::list<std::string> ArgsAfter(
#   64|       "extra-arg",
#   65|       cl::desc("Additional argument to append to the compiler command line"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:68:30: constructor_uses_global_object: The constructor of global object "ArgsBefore[abi:cxx11]" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ArgsBefore[abi:cxx11]" might be created before "Allocator" is available.
#   66|       cl::cat(ClangDiffCategory));
#   67|   
#   68|-> static cl::list<std::string> ArgsBefore(
#   69|       "extra-arg-before",
#   70|       cl::desc("Additional argument to prepend to the compiler command line"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:68:30: constructor_uses_global_object: The constructor of global object "ArgsBefore[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ArgsBefore[abi:cxx11]" might be created before "fuzzer::TPC" is available.
#   66|       cl::cat(ClangDiffCategory));
#   67|   
#   68|-> static cl::list<std::string> ArgsBefore(
#   69|       "extra-arg-before",
#   70|       cl::desc("Additional argument to prepend to the compiler command line"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:68:30: constructor_uses_global_object: The constructor of global object "ArgsBefore[abi:cxx11]" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "ArgsBefore[abi:cxx11]" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   66|       cl::cat(ClangDiffCategory));
#   67|   
#   68|-> static cl::list<std::string> ArgsBefore(
#   69|       "extra-arg-before",
#   70|       cl::desc("Additional argument to prepend to the compiler command line"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-diff/ClangDiff.cpp:68:30: constructor_uses_global_object: The constructor of global object "ArgsBefore[abi:cxx11]" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ArgsBefore[abi:cxx11]" might be created before "scudo::RegionPageMap::Buffers" is available.
#   66|       cl::cat(ClangDiffCategory));
#   67|   
#   68|-> static cl::list<std::string> ArgsBefore(
#   69|       "extra-arg-before",
#   70|       cl::desc("Additional argument to prepend to the compiler command line"),

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-extdef-mapping/ClangExtDefMapGen.cpp:37:5: constructor_uses_global_object: The constructor of global object "ClangExtDefMapGenCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ClangExtDefMapGenCategory" might be created before "Allocator" is available.
#   35|   
#   36|   static cl::OptionCategory
#   37|->     ClangExtDefMapGenCategory("clang-extdefmapgen options");
#   38|   
#   39|   class MapExtDefNamesConsumer : public ASTConsumer {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-extdef-mapping/ClangExtDefMapGen.cpp:37:5: constructor_uses_global_object: The constructor of global object "ClangExtDefMapGenCategory" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "ClangExtDefMapGenCategory" might be created before "GlobalParser" is available.
#   35|   
#   36|   static cl::OptionCategory
#   37|->     ClangExtDefMapGenCategory("clang-extdefmapgen options");
#   38|   
#   39|   class MapExtDefNamesConsumer : public ASTConsumer {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-extdef-mapping/ClangExtDefMapGen.cpp:37:5: constructor_uses_global_object: The constructor of global object "ClangExtDefMapGenCategory" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of construction is unspecified, so "ClangExtDefMapGenCategory" might be created before "fuzzer::TPC" is available.
#   35|   
#   36|   static cl::OptionCategory
#   37|->     ClangExtDefMapGenCategory("clang-extdefmapgen options");
#   38|   
#   39|   class MapExtDefNamesConsumer : public ASTConsumer {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-extdef-mapping/ClangExtDefMapGen.cpp:37:5: constructor_uses_global_object: The constructor of global object "ClangExtDefMapGenCategory" itself makes use of global object "scudo::RegionPageMap::Buffers" defined in another compilation unit.  The order of construction is unspecified, so "ClangExtDefMapGenCategory" might be created before "scudo::RegionPageMap::Buffers" is available.
#   35|   
#   36|   static cl::OptionCategory
#   37|->     ClangExtDefMapGenCategory("clang-extdefmapgen options");
#   38|   
#   39|   class MapExtDefNamesConsumer : public ASTConsumer {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-extdef-mapping/ClangExtDefMapGen.cpp:122:22: constructor_uses_global_object: The constructor of global object "CommonHelp" itself makes use of global object "GlobalParser" defined in another compilation unit.  The order of construction is unspecified, so "CommonHelp" might be created before "GlobalParser" is available.
#  120|   };
#  121|   
#  122|-> static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);
#  123|   
#  124|   static IntrusiveRefCntPtr<DiagnosticsEngine> Diags;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-format/ClangFormat.cpp:33:22: constructor_uses_global_object: The constructor of global object "Help" itself makes use of global object "llvm::cl::TopLevelSubCommand" defined in another compilation unit.  The order of construction is unspecified, so "Help" might be created before "llvm::cl::TopLevelSubCommand" is available.
#   31|   using clang::tooling::Replacements;
#   32|   
#   33|-> static cl::opt<bool> Help("h", cl::desc("Alias for -help"), cl::Hidden);
#   34|   
#   35|   // Mark all our options with this category, everything else (except for -version

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-format/ClangFormat.cpp:37:27: constructor_uses_global_object: The constructor of global object "ClangFormatCategory" itself makes use of global object "Allocator" defined in another compilation unit.  The order of construction is unspecified, so "ClangFormatCategory" might be created before "Allocator" is available.
#   35|   // Mark all our options with this category, everything else (except for -version
#   36|   // and -help) will be hidden.
#   37|-> static cl::OptionCategory ClangFormatCategory("Clang-format options");
#   38|   
#   39|   static cl::list<unsigned>

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/clang/tools/clang-format/ClangFormat.cpp:37:27: error[too-many]: 11982 occurrences of constructor_uses_global_object exceeded the specified limit 1024
llvm-project-19.0.0.src/clang/tools/clang-format/ClangFormat.cpp:37:27: note: 10958 occurrences of constructor_uses_global_object were discarded because of this

Error: WRAPPER_ESCAPE (CWE-825):
llvm-project-19.0.0.src/clang/tools/driver/cc1gen_reproducer_main.cpp:189:3: extract: Calling "c_str" which extracts wrapped state from local "Path".
llvm-project-19.0.0.src/clang/tools/driver/cc1gen_reproducer_main.cpp:189:3: escape: The internal representation of local "Path" escapes into "DriverArgs[0UL]", but is destroyed when it exits scope.
#  187|       DriverArgs.push_back(Arg.c_str());
#  188|     std::string Path = GetExecutablePath(Argv0, /*CanonicalPrefixes=*/true);
#  189|->   DriverArgs[0] = Path.c_str();
#  190|     std::optional<driver::Driver::CompilationDiagnosticReport> Report =
#  191|         generateReproducerForInvocationArguments(DriverArgs, InvocationInfo,

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/tools/libclang/CIndex.cpp:3804:3: var_decl: Declaring variable "Pieces".
llvm-project-19.0.0.src/clang/tools/libclang/CIndex.cpp:3826:3: uninit_use: Using uninitialized value "Pieces". Field "Pieces.InlineElts" is uninitialized.
# 3824|     }
# 3825|   
# 3826|->   return Pieces;
# 3827|   }
# 3828|   } // namespace

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/tools/libclang/CIndex.cpp:4422:3: var_decl: Declaring variable "ER".
llvm-project-19.0.0.src/clang/tools/libclang/CIndex.cpp:4425:5: uninit_use_in_call: Using uninitialized value "ER.Val.Data" when calling "~EvalResult".
# 4423|     ASTContext &ctx = getCursorContext(C);
# 4424|     if (!expr)
# 4425|->     return nullptr;
# 4426|   
# 4427|     expr = expr->IgnoreParens();

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/tools/libclang/CIndex.cpp:9413:3: alloc_fn: Storage is returned from allocation function "release". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/tools/libclang/CIndex.cpp:9413:3: leaked_storage: Failing to save or free storage allocated by "entries.release()" leaks it.
# 9411|     CXTUResourceUsage usage = {(void *)entries.get(), (unsigned)entries->size(),
# 9412|                                !entries->empty() ? &(*entries)[0] : nullptr};
# 9413|->   (void)entries.release();
# 9414|     return usage;
# 9415|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/ASTMatchers/ASTMatchersNodeTest.cpp:980:3: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(5.)".
llvm-project-19.0.0.src/clang/unittests/ASTMatchers/ASTMatchersNodeTest.cpp:980:3: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#  978|     EXPECT_TRUE(matches("double i = 5.0;", floatLiteral(equals(5.0))));
#  979|     EXPECT_TRUE(matches("double i = 5.0;", floatLiteral(equals(5.0f))));
#  980|->   EXPECT_TRUE(
#  981|         matches("double i = 5.0;", floatLiteral(equals(llvm::APFloat(5.0)))));
#  982|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/ASTMatchers/ASTMatchersNodeTest.cpp:986:3: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(6.)".
llvm-project-19.0.0.src/clang/unittests/ASTMatchers/ASTMatchersNodeTest.cpp:986:3: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#  984|     EXPECT_TRUE(notMatches("double i = 5.0;", floatLiteral(equals(6.0))));
#  985|     EXPECT_TRUE(notMatches("double i = 5.0;", floatLiteral(equals(6.0f))));
#  986|->   EXPECT_TRUE(
#  987|         notMatches("double i = 5.0;", floatLiteral(equals(llvm::APFloat(6.0)))));
#  988|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/Analysis/ExprMutationAnalyzerTest.cpp:70:3: var_decl: Declaring variable "Chain".
llvm-project-19.0.0.src/clang/unittests/Analysis/ExprMutationAnalyzerTest.cpp:84:3: uninit_use: Using uninitialized value "Chain". Field "Chain.InlineElts" is uninitialized.
#   82|       E = dyn_cast<DeclRefExpr>(By);
#   83|     }
#   84|->   return Chain;
#   85|   }
#   86|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/BufferSourceTest.cpp:42:3: var_decl: Declaring variable "LO".
llvm-project-19.0.0.src/clang/unittests/CodeGen/BufferSourceTest.cpp:45:3: uninit_use_in_call: Using uninitialized value "LO.GPUDefaultStream" when calling "LangOptions".
llvm-project-19.0.0.src/clang/unittests/CodeGen/BufferSourceTest.cpp:45:3: uninit_use_in_call: Using uninitialized value "LO.CheckNew" when calling "LangOptions".
#   43|     LO.CPlusPlus = 1;
#   44|     LO.CPlusPlus11 = 1;
#   45|->   TestCompiler Compiler(LO);
#   46|     Compiler.init(TestProgram);
#   47|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/CodeGenExternalTest.cpp:262:3: var_decl: Declaring variable "LO".
llvm-project-19.0.0.src/clang/unittests/CodeGen/CodeGenExternalTest.cpp:265:3: uninit_use_in_call: Using uninitialized value "LO.GPUDefaultStream" when calling "LangOptions".
llvm-project-19.0.0.src/clang/unittests/CodeGen/CodeGenExternalTest.cpp:265:3: uninit_use_in_call: Using uninitialized value "LO.CheckNew" when calling "LangOptions".
#  263|     LO.CPlusPlus = 1;
#  264|     LO.CPlusPlus11 = 1;
#  265|->   TestCompiler Compiler(LO);
#  266|     auto CustomASTConsumer
#  267|       = std::make_unique<MyASTConsumer>(std::move(Compiler.CG));

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:28:5: var_decl: Declaring variable "CGOpts".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:31:5: uninit_use: Using uninitialized value "CGOpts". Field "CGOpts.LargeDataThreshold" is uninitialized.
#   29|       CGOpts.StructPathTBAA = 1;
#   30|       CGOpts.OptimizationLevel = 1;
#   31|->     return CGOpts;
#   32|     }
#   33|   };

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:64:3: var_decl: Declaring variable "LO".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:65:3: uninit_use_in_call: Using uninitialized value "LO.GPUDefaultStream" when calling "LangOptions".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:65:3: uninit_use_in_call: Using uninitialized value "LO.CheckNew" when calling "LangOptions".
#   63|   
#   64|     clang::LangOptions LO;
#   65|->   TBAATestCompiler Compiler(LO, TBAATestCompiler::getCommonCodeGenOpts());
#   66|     Compiler.init(TestProgram);
#   67|     const BasicBlock *BB = Compiler.compile();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:160:3: var_decl: Declaring variable "LO".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:162:3: uninit_use_in_call: Using uninitialized value "LO.GPUDefaultStream" when calling "LangOptions".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:162:3: uninit_use_in_call: Using uninitialized value "LO.CheckNew" when calling "LangOptions".
#  160|     clang::LangOptions LO;
#  161|     LO.C11 = 1;
#  162|->   TBAATestCompiler Compiler(LO, TBAATestCompiler::getCommonCodeGenOpts());
#  163|     Compiler.init(TestProgram);
#  164|     const BasicBlock *BB = Compiler.compile();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:282:3: var_decl: Declaring variable "LO".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:284:3: uninit_use_in_call: Using uninitialized value "LO.GPUDefaultStream" when calling "LangOptions".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:284:3: uninit_use_in_call: Using uninitialized value "LO.CheckNew" when calling "LangOptions".
#  282|     clang::LangOptions LO;
#  283|     LO.C11 = 1;
#  284|->   TBAATestCompiler Compiler(LO, TBAATestCompiler::getCommonCodeGenOpts());
#  285|     Compiler.init(TestProgram);
#  286|     const BasicBlock *BB = Compiler.compile();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:375:3: var_decl: Declaring variable "LO".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:377:3: uninit_use_in_call: Using uninitialized value "LO.GPUDefaultStream" when calling "LangOptions".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:377:3: uninit_use_in_call: Using uninitialized value "LO.CheckNew" when calling "LangOptions".
#  375|     clang::LangOptions LO;
#  376|     LO.C11 = 1;
#  377|->   TBAATestCompiler Compiler(LO, TBAATestCompiler::getCommonCodeGenOpts());
#  378|     Compiler.init(TestProgram);
#  379|     const BasicBlock *BB = Compiler.compile();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:469:3: var_decl: Declaring variable "LO".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:471:3: uninit_use_in_call: Using uninitialized value "LO.GPUDefaultStream" when calling "LangOptions".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:471:3: uninit_use_in_call: Using uninitialized value "LO.CheckNew" when calling "LangOptions".
#  469|     clang::LangOptions LO;
#  470|     LO.C11 = 1;
#  471|->   TBAATestCompiler Compiler(LO, TBAATestCompiler::getCommonCodeGenOpts());
#  472|     Compiler.init(TestProgram);
#  473|     const BasicBlock *BB = Compiler.compile();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:571:3: var_decl: Declaring variable "LO".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:574:3: uninit_use_in_call: Using uninitialized value "LO.GPUDefaultStream" when calling "LangOptions".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:574:3: uninit_use_in_call: Using uninitialized value "LO.CheckNew" when calling "LangOptions".
#  572|     LO.CPlusPlus = 1;
#  573|     LO.CPlusPlus11 = 1;
#  574|->   TBAATestCompiler Compiler(LO, TBAATestCompiler::getCommonCodeGenOpts());
#  575|     Compiler.init(TestProgram);
#  576|     const BasicBlock *BB = Compiler.compile();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:694:3: var_decl: Declaring variable "LO".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:697:3: uninit_use_in_call: Using uninitialized value "LO.GPUDefaultStream" when calling "LangOptions".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:697:3: uninit_use_in_call: Using uninitialized value "LO.CheckNew" when calling "LangOptions".
#  695|     LO.CPlusPlus = 1;
#  696|     LO.CPlusPlus11 = 1;
#  697|->   TBAATestCompiler Compiler(LO, TBAATestCompiler::getCommonCodeGenOpts());
#  698|     Compiler.init(TestProgram);
#  699|     const BasicBlock *BB = Compiler.compile();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:795:3: var_decl: Declaring variable "LO".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:798:3: uninit_use_in_call: Using uninitialized value "LO.GPUDefaultStream" when calling "LangOptions".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:798:3: uninit_use_in_call: Using uninitialized value "LO.CheckNew" when calling "LangOptions".
#  796|     LO.CPlusPlus = 1;
#  797|     LO.CPlusPlus11 = 1;
#  798|->   TBAATestCompiler Compiler(LO, TBAATestCompiler::getCommonCodeGenOpts());
#  799|     Compiler.init(TestProgram);
#  800|     const BasicBlock *BB = Compiler.compile();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:877:3: var_decl: Declaring variable "LO".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:880:3: uninit_use_in_call: Using uninitialized value "LO.GPUDefaultStream" when calling "LangOptions".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:880:3: uninit_use_in_call: Using uninitialized value "LO.CheckNew" when calling "LangOptions".
#  878|     LO.CPlusPlus = 1;
#  879|     LO.CPlusPlus11 = 1;
#  880|->   TBAATestCompiler Compiler(LO, TBAATestCompiler::getCommonCodeGenOpts());
#  881|     Compiler.init(TestProgram);
#  882|     const BasicBlock *BB = Compiler.compile();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:956:3: var_decl: Declaring variable "LO".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:959:3: uninit_use_in_call: Using uninitialized value "LO.GPUDefaultStream" when calling "LangOptions".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:959:3: uninit_use_in_call: Using uninitialized value "LO.CheckNew" when calling "LangOptions".
#  957|     LO.CPlusPlus = 1;
#  958|     LO.CPlusPlus11 = 1;
#  959|->   TBAATestCompiler Compiler(LO, TBAATestCompiler::getCommonCodeGenOpts());
#  960|     Compiler.init(TestProgram);
#  961|     const BasicBlock *BB = Compiler.compile();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:1032:3: var_decl: Declaring variable "LO".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:1035:3: uninit_use_in_call: Using uninitialized value "LO.GPUDefaultStream" when calling "LangOptions".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:1035:3: uninit_use_in_call: Using uninitialized value "LO.CheckNew" when calling "LangOptions".
# 1033|     LO.CPlusPlus = 1;
# 1034|     LO.CPlusPlus11 = 1;
# 1035|->   TBAATestCompiler Compiler(LO, TBAATestCompiler::getCommonCodeGenOpts());
# 1036|     Compiler.init(TestProgram);
# 1037|     const BasicBlock *BB = Compiler.compile();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:1106:3: var_decl: Declaring variable "LO".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:1109:3: uninit_use_in_call: Using uninitialized value "LO.GPUDefaultStream" when calling "LangOptions".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:1109:3: uninit_use_in_call: Using uninitialized value "LO.CheckNew" when calling "LangOptions".
# 1107|     LO.CPlusPlus = 1;
# 1108|     LO.CPlusPlus11 = 1;
# 1109|->   TBAATestCompiler Compiler(LO, TBAATestCompiler::getCommonCodeGenOpts());
# 1110|     Compiler.init(TestProgram);
# 1111|     const BasicBlock *BB = Compiler.compile();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:1192:3: var_decl: Declaring variable "LO".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:1195:3: uninit_use_in_call: Using uninitialized value "LO.GPUDefaultStream" when calling "LangOptions".
llvm-project-19.0.0.src/clang/unittests/CodeGen/TBAAMetadataTest.cpp:1195:3: uninit_use_in_call: Using uninitialized value "LO.CheckNew" when calling "LangOptions".
# 1193|     LO.CPlusPlus = 1;
# 1194|     LO.CPlusPlus11 = 1;
# 1195|->   TBAATestCompiler Compiler(LO, TBAATestCompiler::getCommonCodeGenOpts());
# 1196|     Compiler.init(TestProgram);
# 1197|     const BasicBlock *BB = Compiler.compile();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/DirectoryWatcher/DirectoryWatcherTest.cpp:140:5: var_decl: Declaring variable "L".
llvm-project-19.0.0.src/clang/unittests/DirectoryWatcher/DirectoryWatcherTest.cpp:148:7: uninit_use_in_call: Using uninitialized value "L._M_device" when calling "unlock".
llvm-project-19.0.0.src/clang/unittests/DirectoryWatcher/DirectoryWatcherTest.cpp:148:7: uninit_use_in_call: Using uninitialized value "L._M_owns" when calling "unlock".
#  146|       }
#  147|       if (result()) {
#  148|->       L.unlock();
#  149|         ResultIsReady.notify_one();
#  150|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/DirectoryWatcher/DirectoryWatcherTest.cpp:154:5: var_decl: Declaring variable "L".
llvm-project-19.0.0.src/clang/unittests/DirectoryWatcher/DirectoryWatcherTest.cpp:169:7: uninit_use_in_call: Using uninitialized value "L._M_device" when calling "unlock".
llvm-project-19.0.0.src/clang/unittests/DirectoryWatcher/DirectoryWatcherTest.cpp:169:7: uninit_use_in_call: Using uninitialized value "L._M_owns" when calling "unlock".
#  167|       }
#  168|       if (result()) {
#  169|->       L.unlock();
#  170|         ResultIsReady.notify_one();
#  171|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/Format/MacroCallReconstructorTest.cpp:72:5: var_decl: Declaring variable "UnexpandedTokens".
llvm-project-19.0.0.src/clang/unittests/Format/MacroCallReconstructorTest.cpp:75:5: uninit_use: Using uninitialized value "UnexpandedTokens". Field "UnexpandedTokens.InlineElts" is uninitialized.
#   73|       for (const UnwrappedLineNode &Node : Unexpanded[ID]->Tokens)
#   74|         UnexpandedTokens.push_back(Node.Tok);
#   75|->     return UnexpandedTokens;
#   76|     }
#   77|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/Format/MacroCallReconstructorTest.cpp:80:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/unittests/Format/MacroCallReconstructorTest.cpp:83:5: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
#   81|       for (const auto &Arg : Args)
#   82|         Result.push_back(uneof(Lex.lex(Arg)));
#   83|->     return Result;
#   84|     }
#   85|     llvm::DenseMap<FormatToken *, std::unique_ptr<UnwrappedLine>> Unexpanded;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/Format/MacroExpanderTest.cpp:37:5: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/clang/unittests/Format/MacroExpanderTest.cpp:40:5: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
#   38|       for (const auto &Arg : Args)
#   39|         Result.push_back(uneof(Lex.lex(Arg)));
#   40|->     return Result;
#   41|     }
#   42|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/Frontend/FrontendActionTest.cpp:210:5: var_decl: Declaring variable "TC".
llvm-project-19.0.0.src/clang/unittests/Frontend/FrontendActionTest.cpp:214:5: uninit_use: Using uninitialized value "TC". Field "TC.CorrectionDecls.InlineElts" is uninitialized.
#  212|           DiagnosticsEngine::Note, "This is a note");
#  213|       TC.addExtraDiagnostic(PartialDiagnostic(DiagID, Ctx.getDiagAllocator()));
#  214|->     return TC;
#  215|     }
#  216|   };

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/clang/unittests/Serialization/PreambleInNamedModulesTest.cpp:125:3: alloc_fn: Storage is returned from allocation function "release". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/clang/unittests/Serialization/PreambleInNamedModulesTest.cpp:125:3: leaked_storage: Ignoring storage allocated by "Buffer.release()" leaks it.
#  123|     EXPECT_TRUE(Clang->createTarget());
#  124|   
#  125|->   Buffer.release();
#  126|   
#  127|     SyntaxOnlyAction Action;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/StaticAnalyzer/CheckerRegistration.h:111:3: var_decl: Declaring variable "FileName".
llvm-project-19.0.0.src/clang/unittests/StaticAnalyzer/CheckerRegistration.h:113:3: uninit_use: Using uninitialized value "FileName". Field "FileName.InlineElts" is uninitialized.
#  111|     SmallString<80> FileName;
#  112|     (Twine{Info->name()} + ".cc").toVector(FileName);
#  113|->   return FileName;
#  114|   }
#  115|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/clang/unittests/Tooling/RefactoringActionRulesTest.cpp:139:5: var_decl: Declaring variable "DiagID" without initializer.
llvm-project-19.0.0.src/clang/unittests/Tooling/RefactoringActionRulesTest.cpp:144:5: uninit_use_in_call: Using uninitialized value "DiagID" when calling "Compare".
#  142|                               DiagID = Error.getDiagnostic().second.getDiagID();
#  143|                             });
#  144|->     EXPECT_EQ(DiagID, diag::err_refactor_no_selection);
#  145|     }
#  146|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/asan/asan_interceptors.cpp:267:3: var_decl: Declaring variable "result" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/asan/asan_interceptors.cpp:281:3: uninit_use: Using uninitialized value "result".
#  279|       });
#  280|     }
#  281|->   if (result != 0) {
#  282|       // If the thread didn't start delete the AsanThread to avoid leaking it.
#  283|       // Note AsanThreadContexts never get destroyed so the AsanThreadContext

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/asan/asan_interceptors.cpp:291:3: var_decl: Declaring variable "result" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/asan/asan_interceptors.cpp:296:3: uninit_use: Using uninitialized value "result".
#  294|       return !result;
#  295|     });
#  296|->   return result;
#  297|   }
#  298|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/asan/asan_interceptors.cpp:300:3: var_decl: Declaring variable "result" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/asan/asan_interceptors.cpp:305:3: uninit_use: Using uninitialized value "result".
#  303|       return !result;
#  304|     });
#  305|->   return result;
#  306|   }
#  307|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/asan/asan_interceptors.cpp:315:3: var_decl: Declaring variable "result" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/asan/asan_interceptors.cpp:320:3: uninit_use: Using uninitialized value "result".
#  318|       return !result;
#  319|     });
#  320|->   return result;
#  321|   }
#  322|   #    endif

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/asan/asan_interceptors.cpp:327:3: var_decl: Declaring variable "result" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/asan/asan_interceptors.cpp:332:3: uninit_use: Using uninitialized value "result".
#  330|       return !result;
#  331|     });
#  332|->   return result;
#  333|   }
#  334|   #    endif

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/compiler-rt/lib/dfsan/dfsan_custom.cpp:2779:3: address_of: Taking address with "&str_origin" yields a singleton pointer.
llvm-project-19.0.0.src/compiler-rt/lib/dfsan/dfsan_custom.cpp:2779:3: callee_ptr_arith: Passing "&str_origin" to function "scan_buffer" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 2777|     va_list ap;
# 2778|     va_start(ap, ret_origin);
# 2779|->   int ret = scan_buffer(str, ~0ul, format, va_labels, ret_label, &str_origin,
# 2780|                           ret_origin, ap);
# 2781|     va_end(ap);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/hwasan/hwasan_interceptors.cpp:294:3: var_decl: Declaring variable "result" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/hwasan/hwasan_interceptors.cpp:299:3: uninit_use: Using uninitialized value "result".
#  297|       return !result;
#  298|     });
#  299|->   return result;
#  300|   }
#  301|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/hwasan/hwasan_interceptors.cpp:303:3: var_decl: Declaring variable "result" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/hwasan/hwasan_interceptors.cpp:308:3: uninit_use: Using uninitialized value "result".
#  306|       return !result;
#  307|     });
#  308|->   return result;
#  309|   }
#  310|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/hwasan/hwasan_interceptors.cpp:318:3: var_decl: Declaring variable "result" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/hwasan/hwasan_interceptors.cpp:323:3: uninit_use: Using uninitialized value "result".
#  321|       return !result;
#  322|     });
#  323|->   return result;
#  324|   }
#  325|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/hwasan/hwasan_interceptors.cpp:328:3: var_decl: Declaring variable "result" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/hwasan/hwasan_interceptors.cpp:333:3: uninit_use: Using uninitialized value "result".
#  331|       return !result;
#  332|     });
#  333|->   return result;
#  334|   }
#  335|   #    endif

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_common_linux.cpp:54:3: var_decl: Declaring variable "modules".
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_common_linux.cpp:56:31: assign: Assigning: "__range1" = "modules", which points to uninitialized data.
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_common_linux.cpp:56:29: uninit_use_in_call: Using uninitialized value "__range1.modules_.data_" when calling "begin".
#   54|     ListOfModules modules;
#   55|     modules.init();
#   56|->   for (LoadedModule &module : modules) {
#   57|       if (!IsLinker(module))
#   58|         continue;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_common_linux.cpp:54:3: var_decl: Declaring variable "modules".
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_common_linux.cpp:56:31: assign: Assigning: "__range1" = "modules", which points to uninitialized data.
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_common_linux.cpp:56:29: uninit_use_in_call: Using uninitialized value "__range1.modules_.size_" when calling "end".
#   54|     ListOfModules modules;
#   55|     modules.init();
#   56|->   for (LoadedModule &module : modules) {
#   57|       if (!IsLinker(module))
#   58|         continue;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_interceptors.cpp:456:3: var_decl: Declaring variable "result" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_interceptors.cpp:472:3: uninit_use: Using uninitialized value "result".
#  470|     if (attr == &myattr)
#  471|       pthread_attr_destroy(&myattr);
#  472|->   return result;
#  473|   }
#  474|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_interceptors.cpp:476:3: var_decl: Declaring variable "result" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_interceptors.cpp:481:3: uninit_use: Using uninitialized value "result".
#  479|       return !result;
#  480|     });
#  481|->   return result;
#  482|   }
#  483|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_interceptors.cpp:485:3: var_decl: Declaring variable "result" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_interceptors.cpp:490:3: uninit_use: Using uninitialized value "result".
#  488|       return !result;
#  489|     });
#  490|->   return result;
#  491|   }
#  492|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_interceptors.cpp:500:3: var_decl: Declaring variable "result" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_interceptors.cpp:505:3: uninit_use: Using uninitialized value "result".
#  503|       return !result;
#  504|     });
#  505|->   return result;
#  506|   }
#  507|   #    define LSAN_MAYBE_INTERCEPT_TRYJOIN INTERCEPT_FUNCTION(pthread_tryjoin_np)

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_interceptors.cpp:515:3: var_decl: Declaring variable "result" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/lsan/lsan_interceptors.cpp:520:3: uninit_use: Using uninitialized value "result".
#  518|       return !result;
#  519|     });
#  520|->   return result;
#  521|   }
#  522|   #    define LSAN_MAYBE_INTERCEPT_TIMEDJOIN \

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/memprof/memprof_allocator.cpp:300:7: var_decl: Declaring variable "List".
llvm-project-19.0.0.src/compiler-rt/lib/memprof/memprof_allocator.cpp:302:7: uninit_use_in_call: Using uninitialized value "List.modules_.data_" when calling "begin".
#  300|         __sanitizer::ListOfModules List;
#  301|         List.init();
#  302|->       ArrayRef<LoadedModule> Modules(List.begin(), List.end());
#  303|         u64 BytesSerialized = SerializeToRawProfile(MIBMap, Modules, Buffer);
#  304|         CHECK(Buffer && BytesSerialized && "could not serialize to buffer");

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/memprof/memprof_allocator.cpp:300:7: var_decl: Declaring variable "List".
llvm-project-19.0.0.src/compiler-rt/lib/memprof/memprof_allocator.cpp:302:7: uninit_use_in_call: Using uninitialized value "List.modules_.size_" when calling "end".
#  300|         __sanitizer::ListOfModules List;
#  301|         List.init();
#  302|->       ArrayRef<LoadedModule> Modules(List.begin(), List.end());
#  303|         u64 BytesSerialized = SerializeToRawProfile(MIBMap, Modules, Buffer);
#  304|         CHECK(Buffer && BytesSerialized && "could not serialize to buffer");

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/compiler-rt/lib/profile/InstrProfilingFile.c:1026:3: alloc_fn: Storage is returned from allocation function "malloc". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/compiler-rt/lib/profile/InstrProfilingFile.c:1026:3: var_assign: Assigning: "FilenameBuf" = storage returned from "malloc(Length + 1)".
llvm-project-19.0.0.src/compiler-rt/lib/profile/InstrProfilingFile.c:1031:3: noescape: Resource "FilenameBuf" is not freed or pointed-to in "getCurFilename".
llvm-project-19.0.0.src/compiler-rt/lib/profile/InstrProfilingFile.c:1033:5: leaked_storage: Variable "FilenameBuf" going out of scope leaks the storage it points to.
# 1031|     Filename = getCurFilename(FilenameBuf, 1);
# 1032|     if (!Filename)
# 1033|->     return "\0";
# 1034|   
# 1035|     return FilenameBuf;

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/compiler-rt/lib/profile/InstrProfilingValue.c:222:3: alloc_fn: Storage is returned from allocation function "allocateOneNode".
llvm-project-19.0.0.src/compiler-rt/lib/profile/InstrProfilingValue.c:222:3: var_assign: Assigning: "CurVNode" = storage returned from "allocateOneNode()".
llvm-project-19.0.0.src/compiler-rt/lib/profile/InstrProfilingValue.c:239:1: leaked_storage: Variable "CurVNode" going out of scope leaks the storage it points to.
#  237|       return;
#  238|     }
#  239|-> }
#  240|   
#  241|   COMPILER_RT_VISIBILITY void

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h:145:5: assignment: Assigning: "i0" = "this->idx0(idx)". The value of "i0" may now be up to 1.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h:148:5: overrun-local: Overrunning array "this->l1_" of 1 8-byte elements at element index 1 (byte offset 15) using index "i0" (which evaluates to 1).
#  146|       uptr i1 = idx1(idx);
#  147|       uptr i2 = idx2(idx);
#  148|->     if (!l1_[i0].getBit(i1)) {
#  149|         l1_[i0].setBit(i1);
#  150|         l2_[i0][i1].clear();

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h:145:5: assignment: Assigning: "i0" = "this->idx0(idx)". The value of "i0" may now be up to 1.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h:149:7: overrun-local: Overrunning array "this->l1_" of 1 8-byte elements at element index 1 (byte offset 15) using index "i0" (which evaluates to 1).
#  147|       uptr i2 = idx2(idx);
#  148|       if (!l1_[i0].getBit(i1)) {
#  149|->       l1_[i0].setBit(i1);
#  150|         l2_[i0][i1].clear();
#  151|       }

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h:160:5: assignment: Assigning: "i0" = "this->idx0(idx)". The value of "i0" may now be up to 1.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h:164:5: overrun-local: Overrunning array "this->l1_" of 1 8-byte elements at element index 1 (byte offset 15) using index "i0" (which evaluates to 1).
#  162|       uptr i2 = idx2(idx);
#  163|       bool res = false;
#  164|->     if (l1_[i0].getBit(i1)) {
#  165|         res = l2_[i0][i1].clearBit(i2);
#  166|         if (l2_[i0][i1].empty())

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h:160:5: assignment: Assigning: "i0" = "this->idx0(idx)". The value of "i0" may now be up to 1.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h:167:9: overrun-local: Overrunning array "this->l1_" of 1 8-byte elements at element index 1 (byte offset 15) using index "i0" (which evaluates to 1).
#  165|         res = l2_[i0][i1].clearBit(i2);
#  166|         if (l2_[i0][i1].empty())
#  167|->         l1_[i0].clearBit(i1);
#  168|       }
#  169|       return res;

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h:174:5: assignment: Assigning: "i0" = "this->idx0(idx)". The value of "i0" may now be up to 1.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h:178:5: overrun-local: Overrunning array of 8 bytes at byte offset 8 by dereferencing pointer "this->l1_[i0]".
#  176|       uptr i2 = idx2(idx);
#  177|       // Printf("%s: %zd => %zd %zd %zd\n", __func__, idx, i0, i1, i2);
#  178|->     return l1_[i0].getBit(i1) && l2_[i0][i1].getBit(i2);
#  179|     }
#  180|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:3423:3: var_decl: Declaring variable "local_iovec" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:3472:7: uninit_use: Using uninitialized value "local_iovec.iov_base".
# 3470|         __sanitizer_iovec *iovec = (__sanitizer_iovec*)data;
# 3471|         COMMON_INTERCEPTOR_WRITE_RANGE(ctx, iovec, sizeof(*iovec));
# 3472|->       COMMON_INTERCEPTOR_WRITE_RANGE(ctx, local_iovec.iov_base,
# 3473|                                        local_iovec.iov_len);
# 3474|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:3423:3: var_decl: Declaring variable "local_iovec" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:3472:7: uninit_use: Using uninitialized value "local_iovec.iov_len".
# 3470|         __sanitizer_iovec *iovec = (__sanitizer_iovec*)data;
# 3471|         COMMON_INTERCEPTOR_WRITE_RANGE(ctx, iovec, sizeof(*iovec));
# 3472|->       COMMON_INTERCEPTOR_WRITE_RANGE(ctx, local_iovec.iov_base,
# 3473|                                        local_iovec.iov_len);
# 3474|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:3423:3: var_decl: Declaring variable "local_iovec" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:3472:7: uninit_use_in_call: Using uninitialized value "local_iovec.iov_base" when calling "__memprof_record_access_range".
# 3470|         __sanitizer_iovec *iovec = (__sanitizer_iovec*)data;
# 3471|         COMMON_INTERCEPTOR_WRITE_RANGE(ctx, iovec, sizeof(*iovec));
# 3472|->       COMMON_INTERCEPTOR_WRITE_RANGE(ctx, local_iovec.iov_base,
# 3473|                                        local_iovec.iov_len);
# 3474|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:3423:3: var_decl: Declaring variable "local_iovec" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:3472:7: uninit_use_in_call: Using uninitialized value "local_iovec.iov_base" when calling "__msan_unpoison".
# 3470|         __sanitizer_iovec *iovec = (__sanitizer_iovec*)data;
# 3471|         COMMON_INTERCEPTOR_WRITE_RANGE(ctx, iovec, sizeof(*iovec));
# 3472|->       COMMON_INTERCEPTOR_WRITE_RANGE(ctx, local_iovec.iov_base,
# 3473|                                        local_iovec.iov_len);
# 3474|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:3423:3: var_decl: Declaring variable "local_iovec" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:3472:7: uninit_use_in_call: Using uninitialized value "local_iovec.iov_len" when calling "__memprof_record_access_range".
# 3470|         __sanitizer_iovec *iovec = (__sanitizer_iovec*)data;
# 3471|         COMMON_INTERCEPTOR_WRITE_RANGE(ctx, iovec, sizeof(*iovec));
# 3472|->       COMMON_INTERCEPTOR_WRITE_RANGE(ctx, local_iovec.iov_base,
# 3473|                                        local_iovec.iov_len);
# 3474|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:3423:3: var_decl: Declaring variable "local_iovec" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:3472:7: uninit_use_in_call: Using uninitialized value "local_iovec.iov_len" when calling "__msan_unpoison".
# 3470|         __sanitizer_iovec *iovec = (__sanitizer_iovec*)data;
# 3471|         COMMON_INTERCEPTOR_WRITE_RANGE(ctx, iovec, sizeof(*iovec));
# 3472|->       COMMON_INTERCEPTOR_WRITE_RANGE(ctx, local_iovec.iov_base,
# 3473|                                        local_iovec.iov_len);
# 3474|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_libignore.cpp:53:3: var_decl: Declaring variable "modules".
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_libignore.cpp:58:28: assign: Assigning: "__range2" = "modules", which points to uninitialized data.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_libignore.cpp:58:26: uninit_use_in_call: Using uninitialized value "__range2.modules_.data_" when calling "begin".
#   56|       Lib *lib = &libs_[i];
#   57|       bool loaded = false;
#   58|->     for (const auto &mod : modules) {
#   59|         for (const auto &range : mod.ranges()) {
#   60|           if (!range.executable)

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_libignore.cpp:53:3: var_decl: Declaring variable "modules".
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_libignore.cpp:58:28: assign: Assigning: "__range2" = "modules", which points to uninitialized data.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_libignore.cpp:58:26: uninit_use_in_call: Using uninitialized value "__range2.modules_.size_" when calling "end".
#   56|       Lib *lib = &libs_[i];
#   57|       bool loaded = false;
#   58|->     for (const auto &mod : modules) {
#   59|         for (const auto &range : mod.ranges()) {
#   60|           if (!range.executable)

Error: INTEGER_OVERFLOW (CWE-190):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_printf.cpp:51:5: underflow: The decrement operator on the unsigned variable "minimal_num_length" might result in an underflow.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_printf.cpp:63:5: overflow: The expression "minimal_num_length - pos" is deemed underflowed because at least one of its arguments has underflowed.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_printf.cpp:63:5: overflow: The expression "8UL * (minimal_num_length - pos)" is deemed underflowed because at least one of its arguments has underflowed.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_printf.cpp:63:5: overflow_sink: "8UL * (minimal_num_length - pos)", which might have underflowed, is passed to "__sanitizer::internal_memset(&num_buffer[pos], 0, 8UL * (minimal_num_length - pos))".
#   61|     if (pos < minimal_num_length) {
#   62|       // Make sure compiler doesn't insert call to memset here.
#   63|->     internal_memset(&num_buffer[pos], 0,
#   64|                       sizeof(num_buffer[0]) * (minimal_num_length - pos));
#   65|       pos = minimal_num_length;

Error: INTEGER_OVERFLOW (CWE-125):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_printf.cpp:51:5: underflow: The decrement operator on the unsigned variable "minimal_num_length" might result in an underflow.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_printf.cpp:65:5: cast_overflow: An assign that casts to a different type, which might trigger an overflow.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_printf.cpp:69:3: deref_overflow: "pos", which might have underflowed, is passed to "num_buffer[pos]".
#   67|     RAW_CHECK(pos > 0);
#   68|     pos--;
#   69|->   for (; pos >= 0 && num_buffer[pos] == 0; pos--) {
#   70|       char c = (pad_with_zero || pos == 0) ? '0' : ' ';
#   71|       result += AppendChar(buff, buff_end, c);

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_termination.cpp:33:3: cond_at_most: Checking "i < 5" implies that "i" may be up to 4 on the true branch.
llvm-project-19.0.0.src/compiler-rt/lib/sanitizer_common/sanitizer_termination.cpp:35:7: overrun-local: Overrunning array of 40 bytes at byte offset 40 by dereferencing pointer "&__sanitizer::InternalDieCallbacks[i + 1]".
#   33|     for (int i = 0; i < kMaxNumOfInternalDieCallbacks; i++) {
#   34|       if (InternalDieCallbacks[i] == callback) {
#   35|->       internal_memmove(&InternalDieCallbacks[i], &InternalDieCallbacks[i + 1],
#   36|                          sizeof(InternalDieCallbacks[0]) *
#   37|                              (kMaxNumOfInternalDieCallbacks - i - 1));

Error: INTEGER_OVERFLOW (CWE-190):
llvm-project-19.0.0.src/compiler-rt/lib/scudo/standalone/string_utils.cpp:28:5: underflow: The decrement operator on the unsigned variable "MinNumberLength" might result in an underflow.
llvm-project-19.0.0.src/compiler-rt/lib/scudo/standalone/string_utils.cpp:41:5: overflow: The expression "MinNumberLength - Pos" is deemed underflowed because at least one of its arguments has underflowed.
llvm-project-19.0.0.src/compiler-rt/lib/scudo/standalone/string_utils.cpp:41:5: overflow: The expression "8UL * static_cast<scudo::uptr>(MinNumberLength - Pos)" is deemed underflowed because at least one of its arguments has underflowed.
llvm-project-19.0.0.src/compiler-rt/lib/scudo/standalone/string_utils.cpp:41:5: overflow_sink: "8UL * static_cast<scudo::uptr>(MinNumberLength - Pos)", which might have underflowed, is passed to "memset(&NumBuffer[Pos], 0, 8UL * static_cast<scudo::uptr>(MinNumberLength - Pos))".
#   39|     } while (AbsoluteValue > 0);
#   40|     if (Pos < MinNumberLength) {
#   41|->     memset(&NumBuffer[Pos], 0,
#   42|              sizeof(NumBuffer[0]) * static_cast<uptr>(MinNumberLength - Pos));
#   43|       Pos = MinNumberLength;

Error: INTEGER_OVERFLOW (CWE-125):
llvm-project-19.0.0.src/compiler-rt/lib/scudo/standalone/string_utils.cpp:28:5: underflow: The decrement operator on the unsigned variable "MinNumberLength" might result in an underflow.
llvm-project-19.0.0.src/compiler-rt/lib/scudo/standalone/string_utils.cpp:43:5: cast_overflow: An assign that casts to a different type, which might trigger an overflow.
llvm-project-19.0.0.src/compiler-rt/lib/scudo/standalone/string_utils.cpp:47:3: deref_overflow: "Pos", which might have underflowed, is passed to "NumBuffer[Pos]".
#   45|     RAW_CHECK(Pos > 0);
#   46|     Pos--;
#   47|->   for (; Pos >= 0 && NumBuffer[Pos] == 0; Pos--) {
#   48|       char c = (PadWithZero || Pos == 0) ? '0' : ' ';
#   49|       String.push_back(c);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp:279:3: var_decl: Declaring variable "old" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp:295:3: uninit_use_in_call: Using uninitialized value "static_cast<__tsan::RawShadow>(old)" when calling "Shadow".
#  293|         break;
#  294|     }
#  295|->   Shadow prev(static_cast<RawShadow>(old));
#  296|     // For the free shadow markers the first element (that contains kFreeSid)
#  297|     // triggers the race, but the second element contains info about the freeing

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/tsan/rtl/tsan_sync.cpp:21:10: uninit_in_ctor: Fields of "this" are uninitialized at the beginning of the constructor.
llvm-project-19.0.0.src/compiler-rt/lib/tsan/rtl/tsan_sync.cpp:21:46: uninit_use_in_call: Using uninitialized value "this->clock" when calling "Reset".
llvm-project-19.0.0.src/compiler-rt/lib/tsan/rtl/tsan_sync.cpp:21:46: uninit_use_in_call: Using uninitialized value "this->read_clock" when calling "Reset".
#   19|   void DDMutexInit(ThreadState *thr, uptr pc, SyncVar *s);
#   20|   
#   21|-> SyncVar::SyncVar() : mtx(MutexTypeSyncVar) { Reset(); }
#   22|   
#   23|   void SyncVar::Init(ThreadState *thr, uptr pc, uptr addr, bool save_stack) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/ubsan/ubsan_handlers.cpp:88:3: var_decl: Declaring variable "Loc".
llvm-project-19.0.0.src/compiler-rt/lib/ubsan/ubsan_handlers.cpp:112:3: uninit_use_in_call: Using uninitialized value "Loc". Field "Loc.MemoryLoc" is uninitialized when calling "ScopedReport".
#  110|     }
#  111|   
#  112|->   ScopedReport R(Opts, Loc, ET);
#  113|   
#  114|     switch (ET) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/ubsan/ubsan_handlers.cpp:156:3: var_decl: Declaring variable "Loc".
llvm-project-19.0.0.src/compiler-rt/lib/ubsan/ubsan_handlers.cpp:164:3: uninit_use_in_call: Using uninitialized value "Loc". Field "Loc.MemoryLoc" is uninitialized when calling "ScopedReport".
#  162|       return;
#  163|   
#  164|->   ScopedReport R(Opts, Loc, ET);
#  165|   
#  166|     uptr RealPointer = Pointer - Offset;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/compiler-rt/lib/xray/xray_basic_logging.cpp:184:5: var_decl: Declaring variable "E" without initializer.
llvm-project-19.0.0.src/compiler-rt/lib/xray/xray_basic_logging.cpp:191:5: uninit_use_in_call: Using uninitialized value "E". Field "E.Padding" is uninitialized when calling "internal_memcpy".
#  189|       auto StackEntryPtr = static_cast<char *>(TLD.ShadowStack) +
#  190|                            (sizeof(StackEntry) * (TLD.StackEntries - 1));
#  191|->     internal_memcpy(StackEntryPtr, &E, sizeof(StackEntry));
#  192|       break;
#  193|     }

Error: INTEGER_OVERFLOW (CWE-190):
llvm-project-19.0.0.src/compiler-rt/lib/xray/xray_utils.cpp:144:3: tainted_data_return: Called function "write(this->Fd, Begin, TotalBytes)", and a possible return value may be less than zero.
llvm-project-19.0.0.src/compiler-rt/lib/xray/xray_utils.cpp:144:3: assign: Assigning: "Written" = "write(this->Fd, Begin, TotalBytes)".
llvm-project-19.0.0.src/compiler-rt/lib/xray/xray_utils.cpp:151:5: overflow: The expression "TotalBytes" is considered to have possibly overflowed.
llvm-project-19.0.0.src/compiler-rt/lib/xray/xray_utils.cpp:144:3: overflow_sink: "TotalBytes", which might be negative, is passed to "write(this->Fd, Begin, TotalBytes)".
#  142|       return;
#  143|     auto TotalBytes = std::distance(Begin, End);
#  144|->   while (auto Written = write(Fd, Begin, TotalBytes)) {
#  145|       if (Written < 0) {
#  146|         if (errno == EINTR)

Error: INTEGER_OVERFLOW (CWE-190):
llvm-project-19.0.0.src/compiler-rt/lib/xray/xray_x86_64.cpp:33:3: tainted_data_return: Called function "read(Fd, Begin, BytesToRead)", and a possible return value may be less than zero.
llvm-project-19.0.0.src/compiler-rt/lib/xray/xray_x86_64.cpp:33:3: assign: Assigning: "BytesRead" = "read(Fd, Begin, BytesToRead)".
llvm-project-19.0.0.src/compiler-rt/lib/xray/xray_x86_64.cpp:42:5: overflow: The expression "BytesToRead" is considered to have possibly overflowed.
llvm-project-19.0.0.src/compiler-rt/lib/xray/xray_x86_64.cpp:33:3: overflow_sink: "BytesToRead", which might be negative, is passed to "read(Fd, Begin, BytesToRead)".
#   31|     ssize_t BytesRead;
#   32|     ssize_t TotalBytesRead = 0;
#   33|->   while (BytesToRead && (BytesRead = read(Fd, Begin, BytesToRead))) {
#   34|       if (BytesRead == -1) {
#   35|         if (errno == EINTR)

Error: SIGMA.container_requesting_net_raw (CWE-269):
llvm-project-19.0.0.src/libcxx/utils/ci/docker-compose.yml:9: Sigma main event: The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces.
llvm-project-19.0.0.src/libcxx/utils/ci/docker-compose.yml:9: remediation: Explicitly remove the `NET_RAW` capability by adding either `NET_RAW` or `ALL` to the `cap_drop` list and avoiding the `NET_RAW` capability in the `cap_add` list.
#    7|   services:
#    8|     buildkite-builder:
#    9|->     image: ghcr.io/libcxx/buildkite-builder:${TAG:-latest}
#   10|       build:
#   11|         context: .

Error: SIGMA.container_requesting_net_raw (CWE-269):
llvm-project-19.0.0.src/libcxx/utils/ci/docker-compose.yml:18: Sigma main event: The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces.
llvm-project-19.0.0.src/libcxx/utils/ci/docker-compose.yml:18: remediation: Explicitly remove the `NET_RAW` capability by adding either `NET_RAW` or `ALL` to the `cap_drop` list and avoiding the `NET_RAW` capability in the `cap_add` list.
#   16|           <<: *compiler_versions
#   17|     actions-builder:
#   18|->     image: ghcr.io/libcxx/actions-builder:${TAG:-latest}
#   19|       build:
#   20|         context: .

Error: SIGMA.container_requesting_net_raw (CWE-269):
llvm-project-19.0.0.src/libcxx/utils/ci/docker-compose.yml:27: Sigma main event: The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces.
llvm-project-19.0.0.src/libcxx/utils/ci/docker-compose.yml:27: remediation: Explicitly remove the `NET_RAW` capability by adding either `NET_RAW` or `ALL` to the `cap_drop` list and avoiding the `NET_RAW` capability in the `cap_add` list.
#   25|           <<: *compiler_versions
#   26|     android-buildkite-builder:
#   27|->     image: ghcr.io/libcxx/android-buildkite-builder:${TAG:-latest}
#   28|       build:
#   29|         context: .

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/lld/COFF/Chunks.cpp:1021:3: return_constant: Function call "llvm::Log2_32(c->getAlignment())" may return 4294967295.
llvm-project-19.0.0.src/lld/COFF/Chunks.cpp:1021:3: assignment: Assigning: "p2Align" = "llvm::Log2_32(c->getAlignment())". The value of "p2Align" is now 255.
llvm-project-19.0.0.src/lld/COFF/Chunks.cpp:1023:3: alias: Assigning: "mc" = "ctx.mergeChunkInstances[p2Align]". "mc" now points to element 255 of "ctx.mergeChunkInstances" (which consists of 14 8-byte elements).
llvm-project-19.0.0.src/lld/COFF/Chunks.cpp:1024:3: overrun-local: Overrunning array of 14 8-byte elements at element index 255 (byte offset 2047) by dereferencing pointer "mc".
# 1022|     assert(p2Align < std::size(ctx.mergeChunkInstances));
# 1023|     auto *&mc = ctx.mergeChunkInstances[p2Align];
# 1024|->   if (!mc)
# 1025|       mc = make<MergeChunk>(c->getAlignment());
# 1026|     mc->sections.push_back(c);

Error: Y2K38_SAFETY (CWE-197):
llvm-project-19.0.0.src/lld/COFF/Driver.cpp:1824:27: store_truncates_time_t: A "time_t" value is stored in an integer with too few bits to accommodate it.  The expression "time(NULL)" is cast to "uint32_t".
# 1822|                 ".  Expected 32-bit integer");
# 1823|       } else {
# 1824|->       config->timestamp = time(nullptr);
# 1825|       }
# 1826|     }

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/lld/COFF/InputFiles.cpp:160:5: alloc_fn: Storage is returned from allocation function "release". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/lld/COFF/InputFiles.cpp:160:5: leaked_storage: Ignoring storage allocated by "bin.release()" leaks it.
#  158|   
#  159|     if (auto *obj = dyn_cast<COFFObjectFile>(bin.get())) {
#  160|->     bin.release();
#  161|       coffObj.reset(obj);
#  162|     } else {

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/lld/COFF/InputFiles.cpp:1137:5: alloc_fn: Storage is returned from allocation function "release". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/lld/COFF/InputFiles.cpp:1137:5: leaked_storage: Ignoring storage allocated by "bin.release()" leaks it.
# 1135|   
# 1136|     if (auto *obj = dyn_cast<COFFObjectFile>(bin.get())) {
# 1137|->     bin.release();
# 1138|       coffObj.reset(obj);
# 1139|     } else {

Error: WRITE_CONST_FIELD (CWE-843):
llvm-project-19.0.0.src/lld/COFF/Symbols.h:109:18: field_definition: A const-qualified field is defined.
llvm-project-19.0.0.src/lld/COFF/SymbolTable.cpp:503:9: store_writes_const_field: A write to an aggregate overwrites a const-qualified field within the aggregate.
#  501|         // are dealing with and copy the correct number of bytes.
#  502|         if (isa<DefinedRegular>(d))
#  503|->         memcpy(sym, d, sizeof(DefinedRegular));
#  504|         else if (isa<DefinedAbsolute>(d))
#  505|           memcpy(sym, d, sizeof(DefinedAbsolute));

Error: WRITE_CONST_FIELD (CWE-843):
llvm-project-19.0.0.src/lld/COFF/Symbols.h:109:18: field_definition: A const-qualified field is defined.
llvm-project-19.0.0.src/lld/COFF/SymbolTable.cpp:505:9: store_writes_const_field: A write to an aggregate overwrites a const-qualified field within the aggregate.
#  503|           memcpy(sym, d, sizeof(DefinedRegular));
#  504|         else if (isa<DefinedAbsolute>(d))
#  505|->         memcpy(sym, d, sizeof(DefinedAbsolute));
#  506|         else
#  507|           memcpy(sym, d, sizeof(SymbolUnion));

Error: WRITE_CONST_FIELD (CWE-843):
llvm-project-19.0.0.src/lld/COFF/Symbols.h:109:18: field_definition: A const-qualified field is defined.
llvm-project-19.0.0.src/lld/COFF/SymbolTable.cpp:507:9: store_writes_const_field: A write to an aggregate overwrites a const-qualified field within the aggregate.
#  505|           memcpy(sym, d, sizeof(DefinedAbsolute));
#  506|         else
#  507|->         memcpy(sym, d, sizeof(SymbolUnion));
#  508|         continue;
#  509|       }

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/lld/Common/Filesystem.cpp:87:3: open_arg: "openFileForRead" opens handle stored into "fd".
llvm-project-19.0.0.src/lld/Common/Filesystem.cpp:91:5: leaked_handle: Handle variable "fd" going out of scope leaks the handle.
#   89|   
#   90|     if (ec)
#   91|->     return;
#   92|   
#   93|     // close and therefore remove TempPath in background.

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/lld/ELF/Arch/PPC64.cpp:272:3: var_decl: Declaring variable "first" without initializer.
llvm-project-19.0.0.src/lld/ELF/Arch/PPC64.cpp:288:3: uninit_use: Using uninitialized value "first".
#  286|     // The full section content has the extent of [begin, end). We drop unused
#  287|     // instructions and write [first,end).
#  288|->   auto *sec = make<InputSection>(
#  289|         ctx.internalFile, SHF_ALLOC, SHT_PROGBITS, 4,
#  290|         ArrayRef(reinterpret_cast<uint8_t *>(buf.data() + first),

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/lld/ELF/SyntheticSections.cpp:3058:3: var_decl: Declaring variable "offsets" without initializer.
llvm-project-19.0.0.src/lld/ELF/SyntheticSections.cpp:3059:3: uninit_use: Using uninitialized element of array "offsets".
# 3057|     // current shard.
# 3058|     uint32_t offsets[numShards];
# 3059|->   parallelFor(0, numShards, [&](size_t shard) {
# 3060|       uint32_t offset = 0;
# 3061|       for (NameEntry &ne : nameVecs[shard]) {

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/lld/MachO/Driver.cpp:85:49: destructor_uses_global_object: The destructor of global object "resolvedLibraries" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "resolvedLibraries" might be called after "fuzzer::TPC" has already been destroyed.
#   83|   }
#   84|   
#   85|-> static DenseMap<CachedHashStringRef, StringRef> resolvedLibraries;
#   86|   static std::optional<StringRef> findLibrary(StringRef name) {
#   87|     CachedHashStringRef key(name);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/lld/MachO/Driver.cpp:116:49: destructor_uses_global_object: The destructor of global object "resolvedFrameworks" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "resolvedFrameworks" might be called after "fuzzer::TPC" has already been destroyed.
#  114|   }
#  115|   
#  116|-> static DenseMap<CachedHashStringRef, StringRef> resolvedFrameworks;
#  117|   static std::optional<StringRef> findFramework(StringRef name) {
#  118|     CachedHashStringRef key(name);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/lld/MachO/Driver.cpp:271:45: destructor_uses_global_object: The destructor of global object "loadedArchives" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "loadedArchives" might be called after "fuzzer::TPC" has already been destroyed.
#  269|   };
#  270|   
#  271|-> static DenseMap<StringRef, ArchiveFileInfo> loadedArchives;
#  272|   
#  273|   static InputFile *addFile(StringRef path, LoadType loadType,

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/lld/MachO/DriverUtils.cpp:222:51: destructor_uses_global_object: The destructor of global object "loadedDylibs" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "loadedDylibs" might be called after "fuzzer::TPC" has already been destroyed.
#  220|   // It's not uncommon to have multiple attempts to load a single dylib,
#  221|   // especially if it's a commonly re-exported core library.
#  222|-> static DenseMap<CachedHashStringRef, DylibFile *> loadedDylibs;
#  223|   
#  224|   DylibFile *macho::loadDylib(MemoryBufferRef mbref, DylibFile *umbrella,

Error: Y2K38_SAFETY (CWE-197):
llvm-project-19.0.0.src/lld/MachO/DriverUtils.cpp:309:14: store_truncates_time_t: A "time_t" value is stored in an integer with too few bits to accommodate it.  The expression "llvm::sys::toTimeT(stat.getLastModificationTime())" is cast to "uint32_t".
#  307|     if (!fs::status(path, stat))
#  308|       if (fs::exists(stat))
#  309|->       return toTimeT(stat.getLastModificationTime());
#  310|   
#  311|     warn("failed to get modification time of " + path);

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/lld/MachO/InputFiles.cpp:214:55: destructor_uses_global_object: The destructor of global object "lld::macho::cachedReads" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "lld::macho::cachedReads" might be called after "fuzzer::TPC" has already been destroyed.
#  212|   // Theoretically this caching could be more efficient by hoisting it, but that
#  213|   // would require altering many callers to track the state.
#  214|-> DenseMap<CachedHashStringRef, MemoryBufferRef> macho::cachedReads;
#  215|   // Open a given file path and return it as a memory-mapped file.
#  216|   std::optional<MemoryBufferRef> macho::readFile(StringRef path) {

Error: Y2K38_SAFETY (CWE-197):
llvm-project-19.0.0.src/lld/MachO/InputFiles.cpp:2203:30: store_truncates_time_t: A "time_t" value is stored in an integer with too few bits to accommodate it.  The expression "llvm::sys::toTimeT(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(*modTime))" is cast to "uint32_t".
# 2201|   
# 2202|     Expected<InputFile *> file =
# 2203|->       loadArchiveMember(*mb, toTimeT(*modTime), getName(), c.getChildOffset(),
# 2204|                           forceHidden, compatArch);
# 2205|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/lld/MachO/MapFile.cpp:65:3: var_decl: Declaring variable "info".
llvm-project-19.0.0.src/lld/MachO/MapFile.cpp:122:3: uninit_use: Using uninitialized value "info". Field "info.files.InlineElts" is uninitialized.
#  120|         return p1.first < p2.first;
#  121|       });
#  122|->   return info;
#  123|   }
#  124|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/lld/MachO/OutputSegment.cpp:170:45: destructor_uses_global_object: The destructor of global object "nameToOutputSegment" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "nameToOutputSegment" might be called after "fuzzer::TPC" has already been destroyed.
#  168|   }
#  169|   
#  170|-> static DenseMap<StringRef, OutputSegment *> nameToOutputSegment;
#  171|   std::vector<OutputSegment *> macho::outputSegments;
#  172|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/lld/MachO/SyntheticSections.cpp:811:24: destructor_uses_global_object: The destructor of global object "lld::macho::ObjCSelRefsHelper::methnameToSelref" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "lld::macho::ObjCSelRefsHelper::methnameToSelref" might be called after "fuzzer::TPC" has already been destroyed.
#  809|   
#  810|   llvm::DenseMap<llvm::CachedHashStringRef, ConcatInputSection *>
#  811|->     ObjCSelRefsHelper::methnameToSelref;
#  812|   void ObjCSelRefsHelper::initialize() {
#  813|     // Do not fold selrefs without ICF.

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/lld/MachO/SyntheticSections.cpp:1891:3: var_decl: Declaring variable "firstFile" without initializer.
llvm-project-19.0.0.src/lld/MachO/SyntheticSections.cpp:1901:7: uninit_use_in_call: Using uninitialized value "firstFile" when calling "toString".
# 1899|   
# 1900|       if (info.swiftVersion != 0 && info.swiftVersion != inputInfo.swiftVersion) {
# 1901|->       error("Swift version mismatch: " + toString(firstFile) + " has version " +
# 1902|               swiftVersionString(info.swiftVersion) + " but " + toString(file) +
# 1903|               " has version " + swiftVersionString(inputInfo.swiftVersion));

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/lld/wasm/InputFiles.cpp:422:3: alloc_fn: Storage is returned from allocation function "release". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/lld/wasm/InputFiles.cpp:422:3: leaked_storage: Ignoring storage allocated by "bin.release()" leaks it.
#  420|       fatal(toString(this) + ": not a relocatable wasm file");
#  421|   
#  422|->   bin.release();
#  423|     wasmObj.reset(obj);
#  424|   

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/llvm/include/llvm/ADT/MapVector.h:150:5: move: "Val" is moved (indicated by "std::forward(Val)").
llvm-project-19.0.0.src/llvm/include/llvm/ADT/MapVector.h:152:7: use_after_move: "Val" is used after it has been already moved.
#  150|       auto Ret = try_emplace(Key, std::forward<V>(Val));
#  151|       if (!Ret.second)
#  152|->       Ret.first->second = std::forward<V>(Val);
#  153|       return Ret;
#  154|     }

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/llvm/include/llvm/ADT/MapVector.h:157:5: move: "Val" is moved (indicated by "std::forward(Val)").
llvm-project-19.0.0.src/llvm/include/llvm/ADT/MapVector.h:159:7: use_after_move: "Val" is used after it has been already moved.
#  157|       auto Ret = try_emplace(std::move(Key), std::forward<V>(Val));
#  158|       if (!Ret.second)
#  159|->       Ret.first->second = std::forward<V>(Val);
#  160|       return Ret;
#  161|     }

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/include/llvm/CodeGen/LinkAllCodegenComponents.h:46:7: alloc_fn: Storage is returned from allocation function "createFastDAGScheduler".
llvm-project-19.0.0.src/llvm/include/llvm/CodeGen/LinkAllCodegenComponents.h:46:7: leaked_storage: Failing to save or free storage allocated by "llvm::createFastDAGScheduler(NULL, Default)" leaks it.
#   44|         (void)llvm::createHybridListDAGScheduler(nullptr,
#   45|                                                  llvm::CodeGenOptLevel::Default);
#   46|->       (void)llvm::createFastDAGScheduler(nullptr,
#   47|                                            llvm::CodeGenOptLevel::Default);
#   48|         (void)llvm::createDefaultScheduler(nullptr,

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/include/llvm/CodeGen/LinkAllCodegenComponents.h:48:7: alloc_fn: Storage is returned from allocation function "createDefaultScheduler".
llvm-project-19.0.0.src/llvm/include/llvm/CodeGen/LinkAllCodegenComponents.h:48:7: leaked_storage: Failing to save or free storage allocated by "llvm::createDefaultScheduler(NULL, Default)" leaks it.
#   46|         (void)llvm::createFastDAGScheduler(nullptr,
#   47|                                            llvm::CodeGenOptLevel::Default);
#   48|->       (void)llvm::createDefaultScheduler(nullptr,
#   49|                                            llvm::CodeGenOptLevel::Default);
#   50|         (void)llvm::createVLIWDAGScheduler(nullptr,

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/llvm/include/llvm/CodeGen/SDPatternMatch.h:667:3: move: "Op" is moved (indicated by "std::forward(Op)").
llvm-project-19.0.0.src/llvm/include/llvm/CodeGen/SDPatternMatch.h:667:3: use_after_move: "Op" is used after it has been already moved.
#  665|   /// Allows to peek through optional extensions
#  666|   template <typename Opnd> inline auto m_ZExtOrSelf(Opnd &&Op) {
#  667|->   return m_AnyOf(m_ZExt(std::forward<Opnd>(Op)), std::forward<Opnd>(Op));
#  668|   }
#  669|   

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/llvm/include/llvm/CodeGen/SDPatternMatch.h:673:3: move: "Op" is moved (indicated by "std::forward(Op)").
llvm-project-19.0.0.src/llvm/include/llvm/CodeGen/SDPatternMatch.h:673:3: use_after_move: "Op" is used after it has been already moved.
#  671|   /// Allows to peek through optional extensions
#  672|   template <typename Opnd> inline auto m_SExtOrSelf(Opnd &&Op) {
#  673|->   return m_AnyOf(m_SExt(std::forward<Opnd>(Op)), std::forward<Opnd>(Op));
#  674|   }
#  675|   

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/llvm/include/llvm/CodeGen/SDPatternMatch.h:680:3: move: "Op" is moved (indicated by "std::forward(Op)").
llvm-project-19.0.0.src/llvm/include/llvm/CodeGen/SDPatternMatch.h:680:3: use_after_move: "Op" is used after it has been already moved.
#  678|   template <typename Opnd>
#  679|   inline Or<UnaryOpc_match<Opnd>, Opnd> m_AExtOrSelf(Opnd &&Op) {
#  680|->   return Or<UnaryOpc_match<Opnd>, Opnd>(m_AnyExt(std::forward<Opnd>(Op)),
#  681|                                           std::forward<Opnd>(Op));
#  682|   }

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/llvm/include/llvm/CodeGen/SDPatternMatch.h:688:3: move: "Op" is moved (indicated by "std::forward(Op)").
llvm-project-19.0.0.src/llvm/include/llvm/CodeGen/SDPatternMatch.h:688:3: use_after_move: "Op" is used after it has been already moved.
#  686|   template <typename Opnd>
#  687|   inline Or<UnaryOpc_match<Opnd>, Opnd> m_TruncOrSelf(Opnd &&Op) {
#  688|->   return Or<UnaryOpc_match<Opnd>, Opnd>(m_Trunc(std::forward<Opnd>(Op)),
#  689|                                           std::forward<Opnd>(Op));
#  690|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/include/llvm/DWARFLinker/Utils.h:42:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/llvm/include/llvm/DWARFLinker/Utils.h:46:5: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
#   44|     StringRef Base = sys::path::parent_path(SysRoot);
#   45|     if (sys::path::filename(Base) != "SDKs")
#   46|->     return Result;
#   47|     Base = sys::path::parent_path(Base);
#   48|     Result = Base;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/include/llvm/DebugInfo/CodeView/SymbolDeserializer.h:49:5: var_decl: Declaring variable "Record".
llvm-project-19.0.0.src/llvm/include/llvm/DebugInfo/CodeView/SymbolDeserializer.h:50:5: uninit_use_in_call: Using uninitialized value "Record.Machine" when calling "deserializeAs".
#   48|     template <typename T> static Expected<T> deserializeAs(CVSymbol Symbol) {
#   49|       T Record(static_cast<SymbolRecordKind>(Symbol.kind()));
#   50|->     if (auto EC = deserializeAs<T>(Symbol, Record))
#   51|         return std::move(EC);
#   52|       return Record;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/include/llvm/DebugInfo/CodeView/SymbolDeserializer.h:49:5: var_decl: Declaring variable "Record".
llvm-project-19.0.0.src/llvm/include/llvm/DebugInfo/CodeView/SymbolDeserializer.h:52:5: uninit_use_in_call: Using uninitialized value "Record". Field "Record.Machine" is uninitialized when calling "Expected".
#   50|       if (auto EC = deserializeAs<T>(Symbol, Record))
#   51|         return std::move(EC);
#   52|->     return Record;
#   53|     }
#   54|   

Error: VIRTUAL_DTOR (CWE-772):
llvm-project-19.0.0.src/llvm/include/llvm/IR/Metadata.h:382:7: no_virtual_dtor: Class "llvm::ReplaceableMetadataImpl" does not have a virtual destructor.
llvm-project-19.0.0.src/llvm/include/llvm/IR/DebugInfoMetadata.h:3830:3: dtor_in_derived: Class "llvm::DIArgList" has a destructor and a pointer to it is upcast to class "llvm::ReplaceableMetadataImpl" which doesn't have a virtual destructor.
llvm-project-19.0.0.src/llvm/lib/IR/Metadata.cpp:457:5: upcast: Example 1: Casting from a pointer to "llvm::DIArgList" to a pointer to "llvm::ReplaceableMetadataImpl" in "ArgList".
/usr/include/c++/14/bits/unique_ptr.h:93:2: delete: Example 1: Deletion of type "llvm::ReplaceableMetadataImpl".
llvm-project-19.0.0.src/llvm/lib/IR/DebugInfoMetadata.cpp:2139:3: alloc: Example 1: Allocated an object of type "llvm::DIArgList".
#  380|   /// use-lists and associated API for the three that support it (
#  381|   /// \a ValueAsMetadata, \a TempMDNode, and \a DIArgList).
#  382|-> class ReplaceableMetadataImpl {
#  383|     friend class MetadataTracking;
#  384|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/include/llvm/LinkAllPasses.h:62:7: alloc_fn: Storage is returned from allocation function "createAtomicExpandLegacyPass".
llvm-project-19.0.0.src/llvm/include/llvm/LinkAllPasses.h:62:7: leaked_storage: Failing to save or free storage allocated by "llvm::createAtomicExpandLegacyPass()" leaks it.
#   60|           return;
#   61|   
#   62|->       (void)llvm::createAtomicExpandLegacyPass();
#   63|         (void) llvm::createBasicAAWrapperPass();
#   64|         (void) llvm::createSCEVAAWrapperPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/include/llvm/LinkAllPasses.h:98:7: alloc_fn: Storage is returned from allocation function "createPromoteMemoryToRegisterPass".
llvm-project-19.0.0.src/llvm/include/llvm/LinkAllPasses.h:98:7: leaked_storage: Failing to save or free storage allocated by "llvm::createPromoteMemoryToRegisterPass()" leaks it.
#   96|         (void) llvm::createNaryReassociatePass();
#   97|         (void) llvm::createObjCARCContractPass();
#   98|->       (void) llvm::createPromoteMemoryToRegisterPass();
#   99|         (void)llvm::createPostDomOnlyPrinterWrapperPassPass();
#  100|         (void)llvm::createPostDomPrinterWrapperPassPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/include/llvm/LinkAllPasses.h:115:7: alloc_fn: Storage is returned from allocation function "createCodeGenPrepareLegacyPass".
llvm-project-19.0.0.src/llvm/include/llvm/LinkAllPasses.h:115:7: leaked_storage: Failing to save or free storage allocated by "llvm::createCodeGenPrepareLegacyPass()" leaks it.
#  113|         (void)llvm::createTLSVariableHoistPass();
#  114|         (void) llvm::createConstantHoistingPass();
#  115|->       (void)llvm::createCodeGenPrepareLegacyPass();
#  116|         (void) llvm::createEarlyCSEPass();
#  117|         (void) llvm::createGVNPass();

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/include/llvm/LinkAllPasses.h:121:7: alloc_fn: Storage is returned from allocation function "createExpandMemCmpLegacyPass".
llvm-project-19.0.0.src/llvm/include/llvm/LinkAllPasses.h:121:7: leaked_storage: Failing to save or free storage allocated by "llvm::createExpandMemCmpLegacyPass()" leaks it.
#  119|         (void) llvm::createMergeICmpsLegacyPass();
#  120|         (void) llvm::createExpandLargeDivRemPass();
#  121|->       (void)llvm::createExpandMemCmpLegacyPass();
#  122|         (void) llvm::createExpandVectorPredicationPass();
#  123|         std::string buf;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/include/llvm/ProfileData/MemProf.h:749:5: var_decl: Declaring variable "CS".
llvm-project-19.0.0.src/llvm/include/llvm/ProfileData/MemProf.h:758:5: uninit_use: Using uninitialized value "CS". Field "CS.InlineElts" is uninitialized.
#  756|         CS.push_back(F);
#  757|       }
#  758|->     return CS;
#  759|     }
#  760|   };

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/include/llvm/ProfileData/MemProf.h:808:5: var_decl: Declaring variable "Frames".
llvm-project-19.0.0.src/llvm/include/llvm/ProfileData/MemProf.h:819:5: uninit_use: Using uninitialized value "Frames". Field "Frames.InlineElts" is uninitialized.
#  817|           Frames.push_back(FrameIdToFrame(Id));
#  818|       }
#  819|->     return Frames;
#  820|     }
#  821|   };

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Analysis/ConstantFolding.cpp:2221:9: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(10.)".
llvm-project-19.0.0.src/llvm/lib/Analysis/ConstantFolding.cpp:2221:9: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 2219|         case Intrinsic::exp10:
# 2220|           // Fold exp10(x) as pow(10, x), in case the host lacks a C99 library.
# 2221|->         return ConstantFoldBinaryFP(pow, APFloat(10.0), APF, Ty);
# 2222|         case Intrinsic::sin:
# 2223|           return ConstantFoldFP(sin, APF, Ty);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:3142:9: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::IEEEhalf(), llvm::APInt(16U, (uint16_t)Record[0UL], false))".
llvm-project-19.0.0.src/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:3142:9: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 3140|         auto *ScalarTy = CurTy->getScalarType();
# 3141|         if (ScalarTy->isHalfTy())
# 3142|->         V = ConstantFP::get(CurTy, APFloat(APFloat::IEEEhalf(),
# 3143|                                              APInt(16, (uint16_t)Record[0])));
# 3144|         else if (ScalarTy->isBFloatTy())

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:3145:9: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::BFloat(), llvm::APInt(16U, (uint32_t)Record[0UL], false))".
llvm-project-19.0.0.src/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:3145:9: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 3143|                                              APInt(16, (uint16_t)Record[0])));
# 3144|         else if (ScalarTy->isBFloatTy())
# 3145|->         V = ConstantFP::get(
# 3146|               CurTy, APFloat(APFloat::BFloat(), APInt(16, (uint32_t)Record[0])));
# 3147|         else if (ScalarTy->isFloatTy())

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:3148:9: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::IEEEsingle(), llvm::APInt(32U, (uint32_t)Record[0UL], false))".
llvm-project-19.0.0.src/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:3148:9: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 3146|               CurTy, APFloat(APFloat::BFloat(), APInt(16, (uint32_t)Record[0])));
# 3147|         else if (ScalarTy->isFloatTy())
# 3148|->         V = ConstantFP::get(CurTy, APFloat(APFloat::IEEEsingle(),
# 3149|                                              APInt(32, (uint32_t)Record[0])));
# 3150|         else if (ScalarTy->isDoubleTy())

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:3151:9: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::IEEEdouble(), llvm::APInt(64U, Record[0UL], false))".
llvm-project-19.0.0.src/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:3151:9: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 3149|                                              APInt(32, (uint32_t)Record[0])));
# 3150|         else if (ScalarTy->isDoubleTy())
# 3151|->         V = ConstantFP::get(
# 3152|               CurTy, APFloat(APFloat::IEEEdouble(), APInt(64, Record[0])));
# 3153|         else if (ScalarTy->isX86_FP80Ty()) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:3158:9: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::x87DoubleExtended(), llvm::APInt(80U, llvm::ArrayRef<unsigned long>(Rearrange)))".
llvm-project-19.0.0.src/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:3158:9: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 3156|           Rearrange[0] = (Record[1] & 0xffffLL) | (Record[0] << 16);
# 3157|           Rearrange[1] = Record[0] >> 48;
# 3158|->         V = ConstantFP::get(
# 3159|               CurTy, APFloat(APFloat::x87DoubleExtended(), APInt(80, Rearrange)));
# 3160|         } else if (ScalarTy->isFP128Ty())

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:3161:9: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::IEEEquad(), llvm::APInt(128U, llvm::ArrayRef<unsigned long>(Record)))".
llvm-project-19.0.0.src/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:3161:9: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 3159|               CurTy, APFloat(APFloat::x87DoubleExtended(), APInt(80, Rearrange)));
# 3160|         } else if (ScalarTy->isFP128Ty())
# 3161|->         V = ConstantFP::get(CurTy,
# 3162|                               APFloat(APFloat::IEEEquad(), APInt(128, Record)));
# 3163|         else if (ScalarTy->isPPC_FP128Ty())

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:3164:9: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::PPCDoubleDouble(), llvm::APInt(128U, llvm::ArrayRef<unsigned long>(Record)))".
llvm-project-19.0.0.src/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:3164:9: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 3162|                               APFloat(APFloat::IEEEquad(), APInt(128, Record)));
# 3163|         else if (ScalarTy->isPPC_FP128Ty())
# 3164|->         V = ConstantFP::get(
# 3165|               CurTy, APFloat(APFloat::PPCDoubleDouble(), APInt(128, Record)));
# 3166|         else

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:817:3: return_constant: Function call "getOutlineAtomicLibcall(MI)" may return 653.
llvm-project-19.0.0.src/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:817:3: assignment: Assigning: "RTLibcall" = "getOutlineAtomicLibcall(MI)". The value of "RTLibcall" is now 653.
llvm-project-19.0.0.src/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:828:3: overrun-call: Overrunning callee's array of size 653 by passing argument "RTLibcall" (which evaluates to 653) in call to "getLibcallCallingConv".
#  826|   
#  827|     CallLowering::CallLoweringInfo Info;
#  828|->   Info.CallConv = TLI.getLibcallCallingConv(RTLibcall);
#  829|     Info.Callee = MachineOperand::CreateES(Name);
#  830|     Info.OrigRet = CallLowering::ArgInfo(RetRegs, RetTy, 0);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/CodeGen/SelectOptimize.cpp:1199:3: var_decl: Declaring variable "SImap".
llvm-project-19.0.0.src/llvm/lib/CodeGen/SelectOptimize.cpp:1203:3: uninit_use: Using uninitialized value "SImap". Field "SImap.NumEntries" is uninitialized.
# 1201|       for (SelectLike SI : ASI)
# 1202|         SImap.try_emplace(SI.getI(), SI);
# 1203|->   return SImap;
# 1204|   }
# 1205|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:17149:7: var_decl: Declaring variable "Recip".
llvm-project-19.0.0.src/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:17150:7: uninit_use_in_call: Using uninitialized value "Recip.U" when calling "divide".
#17148|         const APFloat &N1APF = N1CFP->getValueAPF();
#17149|         APFloat Recip(N1APF.getSemantics(), 1); // 1.0
#17150|->       APFloat::opStatus st = Recip.divide(N1APF, APFloat::rmNearestTiesToEven);
#17151|         // Only do the transform if the reciprocal is a legal fp immediate that
#17152|         // isn't too nasty (eg NaN, denormal, ...).

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22395:7: var_decl: Declaring variable "CstFP".
llvm-project-19.0.0.src/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22398:9: uninit_use_in_call: Using uninitialized value "CstFP.U" when calling "getConstantFP".
#22396|             APFloat(DAG.EVTToAPFloatSemantics(ScalarVT), KnownElt.getConstant());
#22397|         if (TLI.isFPImmLegal(CstFP, ScalarVT))
#22398|->         return DAG.getConstantFP(CstFP, DL, ScalarVT);
#22399|       }
#22400|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22395:7: var_decl: Declaring variable "CstFP".
llvm-project-19.0.0.src/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22399:5: uninit_use_in_call: Using uninitialized value "CstFP.U" when calling "~APFloat".
#22397|         if (TLI.isFPImmLegal(CstFP, ScalarVT))
#22398|           return DAG.getConstantFP(CstFP, DL, ScalarVT);
#22399|->     }
#22400|     }
#22401|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:6324:9: var_decl: Declaring variable "apf".
llvm-project-19.0.0.src/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:6326:9: uninit_use_in_call: Using uninitialized value "apf.U" when calling "convertFromAPInt".
# 6324|           APFloat apf(EVTToAPFloatSemantics(VT),
# 6325|                       APInt::getZero(VT.getSizeInBits()));
# 6326|->         (void)apf.convertFromAPInt(Val, Opcode == ISD::SINT_TO_FP,
# 6327|                                      APFloat::rmNearestTiesToEven);
# 6328|           return getConstantFP(apf, DL, VT);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:5962:3: var_decl: Declaring variable "Ret".
llvm-project-19.0.0.src/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:5987:3: uninit_use: Using uninitialized value "Ret". Field "Ret.InlineElts" is uninitialized.
# 5985|         });
# 5986|   
# 5987|->   return Ret;
# 5988|   }
# 5989|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/CodeGen/TargetLoweringBase.cpp:776:21: uninit_in_ctor: Fields of "this" are uninitialized at the beginning of the constructor.
llvm-project-19.0.0.src/llvm/lib/CodeGen/TargetLoweringBase.cpp:777:3: uninit_use_in_call: Using uninitialized element of array "this->AtomicLoadExtActions" when calling "initActions".
#  775|   /// NOTE: The TargetMachine owns TLOF.
#  776|   TargetLoweringBase::TargetLoweringBase(const TargetMachine &tm) : TM(tm) {
#  777|->   initActions();
#  778|   
#  779|     // Perform these initializations only once.

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:1212:9: address_of: Taking address with "&LinkedAddress" yields a singleton pointer.
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:1212:9: identity_transfer: Passing "reinterpret_cast<uint8_t const *>(&LinkedAddress)" as argument 1 to constructor for class "ArrayRef", which sets "AddressBytes.Data" to that argument.
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:1215:9: callee_ptr_arith: Passing "AddressBytes.Data" via argument "AddressBytes" to function "end" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 1213|               reinterpret_cast<const uint8_t *>(&LinkedAddress),
# 1214|               OrigAddressByteSize);
# 1215|->         OutputBuffer.append(AddressBytes.begin(), AddressBytes.end());
# 1216|         } else
# 1217|           Linker.reportWarning("cannot read DW_OP_addrx operand.", File);

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:1246:11: address_of: Taking address with "&LinkedAddress" yields a singleton pointer.
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:1246:11: identity_transfer: Passing "reinterpret_cast<uint8_t const *>(&LinkedAddress)" as argument 1 to constructor for class "ArrayRef", which sets "AddressBytes.Data" to that argument.
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:1249:11: callee_ptr_arith: Passing "AddressBytes.Data" via argument "AddressBytes" to function "end" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 1247|                 reinterpret_cast<const uint8_t *>(&LinkedAddress),
# 1248|                 OrigAddressByteSize);
# 1249|->           OutputBuffer.append(AddressBytes.begin(), AddressBytes.end());
# 1250|           }
# 1251|         } else

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:1995:7: var_decl: Declaring variable "LinkedExpression".
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:2009:7: uninit_use_in_call: Using uninitialized value "LinkedExpression". Field "LinkedExpression.Expr.InlineElts" is uninitialized when calling "push_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
# 2007|                     CurLocAttr.RelocAdjustment);
# 2008|   
# 2009|->       LinkedLocationExpressions.push_back(LinkedExpression);
# 2010|       }
# 2011|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Parallel/DIEAttributeCloner.cpp:551:3: cond_at_least: Checking "Bytes.size() > 4294967295UL" implies that "<temporary>.Length", "Buffer.Size", "Bytes.Length" and "Bytes.size()" are at least 4294967296 on the true branch.
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Parallel/DIEAttributeCloner.cpp:577:3: overrun-buffer-arg: Calling "~SmallVector" with "Buffer->BeginX" and "Buffer->Size" is suspicious because of the very large index, 4294967296. The index may be due to a negative parameter being interpreted as unsigned.
#  575|           InUnit.getGlobalData().getOptions().UpdateIndexTablesOnly;
#  576|   
#  577|->   return FinalAttributeSize;
#  578|   }
#  579|   

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.cpp:1178:9: address_of: Taking address with "&LinkedAddress" yields a singleton pointer.
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.cpp:1178:9: identity_transfer: Passing "reinterpret_cast<uint8_t const *>(&LinkedAddress)" as argument 1 to constructor for class "ArrayRef", which sets "AddressBytes.Data" to that argument.
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.cpp:1181:9: callee_ptr_arith: Passing "AddressBytes.Data" via argument "AddressBytes" to function "end" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 1179|               reinterpret_cast<const uint8_t *>(&LinkedAddress),
# 1180|               OrigAddressByteSize);
# 1181|->         OutputExpression.append(AddressBytes.begin(), AddressBytes.end());
# 1182|         } else
# 1183|           warn("cann't read DW_OP_addrx operand.");

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.cpp:1215:11: address_of: Taking address with "&LinkedAddress" yields a singleton pointer.
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.cpp:1215:11: identity_transfer: Passing "reinterpret_cast<uint8_t const *>(&LinkedAddress)" as argument 1 to constructor for class "ArrayRef", which sets "AddressBytes.Data" to that argument.
llvm-project-19.0.0.src/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.cpp:1218:11: callee_ptr_arith: Passing "AddressBytes.Data" via argument "AddressBytes" to function "end" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 1216|                 reinterpret_cast<const uint8_t *>(&LinkedAddress),
# 1217|                 OrigAddressByteSize);
# 1218|->           OutputExpression.append(AddressBytes.begin(), AddressBytes.end());
# 1219|           }
# 1220|         } else

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/DebugInfo/GSYM/GsymCreator.cpp:457:3: var_decl: Declaring variable "DstFI".
llvm-project-19.0.0.src/llvm/lib/DebugInfo/GSYM/GsymCreator.cpp:481:3: uninit_use_in_call: Using uninitialized value "DstFI". Field "DstFI.EncodingCache.InlineElts" is uninitialized when calling "emplace_back". [Note: The source code implementation of the function has been overridden by a builtin model.]
#  479|     }
#  480|     std::lock_guard<std::mutex> Guard(Mutex);
#  481|->   Funcs.emplace_back(DstFI);
#  482|     return Funcs.back().cacheEncoding();
#  483|   }

Error: Y2K38_SAFETY (CWE-197):
llvm-project-19.0.0.src/llvm/lib/DebugInfo/PDB/Native/PDBFileBuilder.cpp:368:20: store_truncates_time_t: A "time_t" value is stored in an integer with too few bits to accommodate it.  The expression "Sig.operator bool() ? *Sig : time(NULL)" is cast to "llvm::support::detail::packed_endian_specific_integral<unsigned int, (llvm::endianness)1, 1ul, 1ul>::value_type".
#  366|       H->Guid = Info->getGuid();
#  367|       std::optional<uint32_t> Sig = Info->getSignature();
#  368|->     H->Signature = Sig ? *Sig : time(nullptr);
#  369|     }
#  370|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Debuginfod/Debuginfod.cpp:72:3: var_decl: Declaring variable "ReadGuard".
llvm-project-19.0.0.src/llvm/lib/Debuginfod/Debuginfod.cpp:76:5: uninit_use_in_call: Using uninitialized value "ReadGuard._M_owns" when calling "unlock".
llvm-project-19.0.0.src/llvm/lib/Debuginfod/Debuginfod.cpp:76:5: uninit_use_in_call: Using uninitialized value "ReadGuard._M_pm" when calling "unlock".
#   74|       // Only read from the environment variable if the user hasn't already
#   75|       // set the value.
#   76|->     ReadGuard.unlock();
#   77|       std::unique_lock<llvm::sys::RWMutex> WriteGuard(UrlsMutex);
#   78|       DebuginfodUrls = SmallVector<StringRef>();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Debuginfod/Debuginfod.cpp:77:5: var_decl: Declaring variable "WriteGuard".
llvm-project-19.0.0.src/llvm/lib/Debuginfod/Debuginfod.cpp:83:5: uninit_use_in_call: Using uninitialized value "WriteGuard._M_device" when calling "unlock".
llvm-project-19.0.0.src/llvm/lib/Debuginfod/Debuginfod.cpp:83:5: uninit_use_in_call: Using uninitialized value "WriteGuard._M_owns" when calling "unlock".
#   81|             .split(DebuginfodUrls.value(), " ", -1, false);
#   82|       }
#   83|->     WriteGuard.unlock();
#   84|       ReadGuard.lock();
#   85|     }

Error: WRAPPER_ESCAPE (CWE-825):
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Core.cpp:2312:3: extract: Calling "back" which extracts wrapped state from "IPLS.CurDefGeneratorStack".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Core.cpp:2312:3: identity_transfer: Member function call "IPLS.CurDefGeneratorStack.back()->lock()" returns "IPLS.CurDefGeneratorStack.back()" ("this").
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Core.cpp:2312:3: assign: Assigning: "DG" = "IPLS.CurDefGeneratorStack.back()->lock()".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Core.cpp:2313:5: invalidate: Calling "pop_back" invalidates the internal representation of "IPLS.CurDefGeneratorStack".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Core.cpp:2314:5: use_after_free: Using invalidated internal representation of "IPLS.CurDefGeneratorStack".
# 2312|     if (auto DG = IPLS.CurDefGeneratorStack.back().lock()) {
# 2313|       IPLS.CurDefGeneratorStack.pop_back();
# 2314|->     std::lock_guard<std::mutex> Lock(DG->M);
# 2315|   
# 2316|       // If there are no pending lookups then mark the generator as free and

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:163:3: var_decl: Declaring variable "Record".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:169:5: uninit_use_in_call: Using uninitialized value "Record.EHFrameAddr" when calling "Expected".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:169:5: uninit_use_in_call: Using uninitialized value "Record.EHFrameHdrAddr" when calling "Expected".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:169:5: uninit_use_in_call: Using uninitialized value "Record.EHFrameHdrSize" when calling "Expected".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:169:5: uninit_use_in_call: Using uninitialized value "Record.MappedSize" when calling "Expected".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:169:5: uninit_use_in_call: Using uninitialized value "Record.UnwindDataSize" when calling "Expected".
#  167|     if (!Eh_frame) {
#  168|       LLVM_DEBUG(dbgs() << "No .eh_frame section found\n");
#  169|->     return Record;
#  170|     }
#  171|     if (!G.getTargetTriple().isOSBinFormatELF()) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:163:3: var_decl: Declaring variable "Record".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:173:5: uninit_use_in_call: Using uninitialized value "Record.EHFrameAddr" when calling "Expected".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:173:5: uninit_use_in_call: Using uninitialized value "Record.EHFrameHdrAddr" when calling "Expected".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:173:5: uninit_use_in_call: Using uninitialized value "Record.EHFrameHdrSize" when calling "Expected".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:173:5: uninit_use_in_call: Using uninitialized value "Record.MappedSize" when calling "Expected".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:173:5: uninit_use_in_call: Using uninitialized value "Record.UnwindDataSize" when calling "Expected".
#  171|     if (!G.getTargetTriple().isOSBinFormatELF()) {
#  172|       LLVM_DEBUG(dbgs() << "Not an ELF file, will not emit unwinding info\n");
#  173|->     return Record;
#  174|     }
#  175|     auto SR = SectionRange(*Eh_frame);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:163:3: var_decl: Declaring variable "Record".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:186:7: uninit_use_in_call: Using uninitialized value "Record.EHFrameAddr" when calling "Expected".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:186:7: uninit_use_in_call: Using uninitialized value "Record.EHFrameHdrAddr" when calling "Expected".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:186:7: uninit_use_in_call: Using uninitialized value "Record.EHFrameHdrSize" when calling "Expected".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:186:7: uninit_use_in_call: Using uninitialized value "Record.MappedSize" when calling "Expected".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:186:7: uninit_use_in_call: Using uninitialized value "Record.UnwindDataSize" when calling "Expected".
#  184|       } else {
#  185|         LLVM_DEBUG(dbgs() << "No .eh_frame_hdr section found\n");
#  186|->       return Record;
#  187|       }
#  188|       Record.EHFrameHdrAddr = 0;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:230:3: var_decl: Declaring variable "Batch".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:251:3: uninit_use: Using uninitialized value "Batch". Field "Batch.UnwindingRecord.Prefix" is uninitialized.
#  249|       Batch.UnwindingRecord.Prefix.TotalSize = 0;
#  250|     }
#  251|->   return Batch;
#  252|   }
#  253|   } // namespace
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:251:3: note: trimmed 2 message(s) with length over 512

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:230:3: var_decl: Declaring variable "Batch".
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:251:3: uninit_use: Using uninitialized value "Batch". Field "Batch.UnwindingRecord.UnwindDataSize" is uninitialized.
#  249|       Batch.UnwindingRecord.Prefix.TotalSize = 0;
#  250|     }
#  251|->   return Batch;
#  252|   }
#  253|   } // namespace
llvm-project-19.0.0.src/llvm/lib/ExecutionEngine/Orc/Debugging/PerfSupportPlugin.cpp:251:3: note: trimmed 2 message(s) with length over 512

Error: BAD_FREE (CWE-763):
llvm-project-19.0.0.src/llvm/lib/IR/BasicBlock.cpp:126:5: address: Taking address of "*Inst.DebugMarker".
llvm-project-19.0.0.src/llvm/lib/IR/BasicBlock.cpp:126:5: assign: Assigning: "Marker" = "*Inst.DebugMarker".
llvm-project-19.0.0.src/llvm/lib/IR/BasicBlock.cpp:131:5: incorrect_free: "eraseFromParent" frees incorrect pointer "Marker".
#  129|                         DR.createDebugIntrinsic(getModule(), nullptr));
#  130|   
#  131|->     Marker.eraseFromParent();
#  132|     }
#  133|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/IR/Metadata.cpp:290:3: var_decl: Declaring variable "DVRUsers".
llvm-project-19.0.0.src/llvm/lib/IR/Metadata.cpp:293:3: uninit_use: Using uninitialized value "DVRUsers". Field "DVRUsers.InlineElts" is uninitialized.
#  291|     for (auto UserWithID : DVRUsersWithID)
#  292|       DVRUsers.push_back(UserWithID->first.get<DebugValueUser *>()->getUser());
#  293|->   return DVRUsers;
#  294|   }
#  295|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/IR/ReplaceConstant.cpp:27:3: var_decl: Declaring variable "NewInsts".
llvm-project-19.0.0.src/llvm/lib/IR/ReplaceConstant.cpp:49:3: uninit_use: Using uninitialized value "NewInsts". Field "NewInsts.InlineElts" is uninitialized.
#   47|       llvm_unreachable("Not an expandable user");
#   48|     }
#   49|->   return NewInsts;
#   50|   }
#   51|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/IR/Verifier.cpp:5293:7: assignment: Assigning: "Kind" = "llvm::Attribute::getAttrKindFromName(Elem.Tag->getKey())". The value of "Kind" is now between 0 and 92 (inclusive).
llvm-project-19.0.0.src/llvm/lib/IR/Verifier.cpp:5308:7: cond_between: Checking "Kind == None" implies that "Kind" is between 1 and 92 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/IR/Verifier.cpp:5314:14: overrun-call: Overrunning callee's array of size 89 by passing argument "Kind" (which evaluates to 92) in call to "canUseAsParamAttr".
# 5312|           Check(isa<ConstantInt>(Call.getOperand(Elem.Begin + 1)),
# 5313|                 "the second argument should be a constant integral value", Call);
# 5314|->       } else if (Attribute::canUseAsParamAttr(Kind)) {
# 5315|           Check((ArgCount) == 1, "this attribute should have one argument", Call);
# 5316|         } else if (Attribute::canUseAsFnAttr(Kind)) {

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/IR/Verifier.cpp:5293:7: assignment: Assigning: "Kind" = "llvm::Attribute::getAttrKindFromName(Elem.Tag->getKey())". The value of "Kind" is now between 0 and 92 (inclusive).
llvm-project-19.0.0.src/llvm/lib/IR/Verifier.cpp:5308:7: cond_between: Checking "Kind == None" implies that "Kind" is between 1 and 92 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/IR/Verifier.cpp:5316:14: overrun-call: Overrunning callee's array of size 89 by passing argument "Kind" (which evaluates to 92) in call to "canUseAsFnAttr".
# 5314|         } else if (Attribute::canUseAsParamAttr(Kind)) {
# 5315|           Check((ArgCount) == 1, "this attribute should have one argument", Call);
# 5316|->       } else if (Attribute::canUseAsFnAttr(Kind)) {
# 5317|           Check((ArgCount) == 0, "this attribute has no argument", Call);
# 5318|         }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/MC/WasmObjectWriter.cpp:1658:11: var_decl: Declaring variable "Global".
llvm-project-19.0.0.src/llvm/lib/MC/WasmObjectWriter.cpp:1683:11: uninit_use_in_call: Using uninitialized value "Global". Field "Global.Offset" is uninitialized when calling "push_back".
# 1681|             assert(WasmIndices.count(&WS) == 0);
# 1682|             WasmIndices[&WS] = Global.Index;
# 1683|->           Globals.push_back(Global);
# 1684|           } else {
# 1685|             // An import; the index was assigned above

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Object/WasmObjectFile.cpp:710:5: var_decl: Declaring variable "Info".
llvm-project-19.0.0.src/llvm/lib/Object/WasmObjectFile.cpp:886:5: uninit_use_in_call: Using uninitialized value "Info". Field "Info" is uninitialized when calling "emplace_back".
#  884|                                                   Twine(Info.Name),
#  885|                                               object_error::parse_failed);
#  886|->     Symbols.emplace_back(Info, GlobalType, TableType, Signature);
#  887|       LLVM_DEBUG(dbgs() << "Adding symbol: " << Symbols.back() << "\n");
#  888|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Passes/StandardInstrumentations.cpp:751:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/llvm/lib/Passes/StandardInstrumentations.cpp:781:3: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
#  779|       llvm_unreachable("Unknown wrapped IR type");
#  780|     }
#  781|->   return Result;
#  782|   }
#  783|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:184:3: var_decl: Declaring variable "LastPoppedValue" without initializer.
llvm-project-19.0.0.src/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:208:9: uninit_use: Using uninitialized value "LastPoppedValue".
#  206|           Current.VisitCount = StackElem::KVisitedOnce;
#  207|         } else if (Current.VisitCount == StackElem::KVisitedOnce) {
#  208|->         Current.LHS = LastPoppedValue;
#  209|           CounterStack.push(StackElem{E.RHS});
#  210|           Current.VisitCount = StackElem::KVisitedTwice;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:184:3: var_decl: Declaring variable "LastPoppedValue" without initializer.
llvm-project-19.0.0.src/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:213:9: uninit_use: Using uninitialized value "LastPoppedValue".
#  211|         } else {
#  212|           int64_t LHS = Current.LHS;
#  213|->         int64_t RHS = LastPoppedValue;
#  214|           LastPoppedValue =
#  215|               E.Kind == CounterExpression::Subtract ? LHS - RHS : LHS + RHS;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:545:3: var_decl: Declaring variable "LastPoppedValue" without initializer.
llvm-project-19.0.0.src/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:569:11: uninit_use: Using uninitialized value "LastPoppedValue".
#  567|             Current.VisitCount = StackElem::KVisitedOnce;
#  568|           } else if (Current.VisitCount == StackElem::KVisitedOnce) {
#  569|->           Current.LHS = LastPoppedValue;
#  570|             CounterStack.push(StackElem{E.RHS});
#  571|             Current.VisitCount = StackElem::KVisitedTwice;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:545:3: var_decl: Declaring variable "LastPoppedValue" without initializer.
llvm-project-19.0.0.src/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:574:11: uninit_use: Using uninitialized value "LastPoppedValue".
#  572|           } else {
#  573|             int64_t LHS = Current.LHS;
#  574|->           int64_t RHS = LastPoppedValue;
#  575|             LastPoppedValue = std::max(LHS, RHS);
#  576|             CounterStack.pop();

Error: WRAPPER_ESCAPE (CWE-825):
llvm-project-19.0.0.src/llvm/lib/ProfileData/InstrProfCorrelator.cpp:113:5: extract: Calling "get" which extracts wrapped state from temporary of type "std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >".
llvm-project-19.0.0.src/llvm/lib/ProfileData/InstrProfCorrelator.cpp:113:5: assign: Assigning: "<temporary>" = "llvm::InstrProfCorrelator::get(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >(std::move(*BufferOrErr)), FileKind)".
llvm-project-19.0.0.src/llvm/lib/ProfileData/InstrProfCorrelator.cpp:113:5: escape: The internal representation of temporary of type "std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >" escapes, but is destroyed when it exits scope.
#  111|         return std::move(Err);
#  112|   
#  113|->     return get(std::move(*BufferOrErr), FileKind);
#  114|     }
#  115|     if (FileKind == BINARY) {

Error: WRAPPER_ESCAPE (CWE-825):
llvm-project-19.0.0.src/llvm/lib/ProfileData/InstrProfCorrelator.cpp:120:5: extract: Calling "get" which extracts wrapped state from temporary of type "std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >".
llvm-project-19.0.0.src/llvm/lib/ProfileData/InstrProfCorrelator.cpp:120:5: assign: Assigning: "<temporary>" = "llvm::InstrProfCorrelator::get(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >(std::move(*BufferOrErr)), FileKind)".
llvm-project-19.0.0.src/llvm/lib/ProfileData/InstrProfCorrelator.cpp:120:5: escape: The internal representation of temporary of type "std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >" escapes, but is destroyed when it exits scope.
#  118|         return std::move(Err);
#  119|   
#  120|->     return get(std::move(*BufferOrErr), FileKind);
#  121|     }
#  122|     return make_error<InstrProfError>(

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/llvm/lib/ProfileData/InstrProfReader.cpp:961:5: move: "BitmapByteBuffer" is moved (indicated by "std::move(BitmapByteBuffer)").
llvm-project-19.0.0.src/llvm/lib/ProfileData/InstrProfReader.cpp:961:5: use_after_move: "BitmapByteBuffer" is used after it has been already moved.
#  959|       }
#  960|   
#  961|->     DataBuffer.emplace_back(K, Hash, std::move(CounterBuffer),
#  962|                               std::move(BitmapByteBuffer));
#  963|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/ProfileData/MemProf.cpp:14:3: var_decl: Declaring variable "List".
llvm-project-19.0.0.src/llvm/lib/ProfileData/MemProf.cpp:18:3: uninit_use: Using uninitialized value "List". Field "List.InlineElts" is uninitialized.
#   16|   #include "llvm/ProfileData/MIBEntryDef.inc"
#   17|   #undef MIBEntryDef
#   18|->   return List;
#   19|   }
#   20|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/ProfileData/MemProf.cpp:206:3: var_decl: Declaring variable "Record".
llvm-project-19.0.0.src/llvm/lib/ProfileData/MemProf.cpp:228:3: uninit_use: Using uninitialized value "Record". Field "Record.AllocSites.InlineElts" is uninitialized.
#  226|     }
#  227|   
#  228|->   return Record;
#  229|   }
#  230|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/ProfileData/MemProf.cpp:248:3: var_decl: Declaring variable "Record".
llvm-project-19.0.0.src/llvm/lib/ProfileData/MemProf.cpp:260:3: uninit_use: Using uninitialized value "Record". Field "Record.AllocSites.InlineElts" is uninitialized.
#  258|       Record.CallSites.push_back(Callback(CSId));
#  259|   
#  260|->   return Record;
#  261|   }
#  262|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/ProfileData/MemProfReader.cpp:90:3: var_decl: Declaring variable "Items".
llvm-project-19.0.0.src/llvm/lib/ProfileData/MemProfReader.cpp:95:3: uninit_use: Using uninitialized value "Items". Field "Items.InlineElts" is uninitialized.
#   93|           Ptr + I * sizeof(SegmentEntry)));
#   94|     }
#   95|->   return Items;
#   96|   }
#   97|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/ProfileData/MemProfReader.cpp:104:3: var_decl: Declaring variable "Items".
llvm-project-19.0.0.src/llvm/lib/ProfileData/MemProfReader.cpp:113:3: uninit_use: Using uninitialized value "Items". Field "Items.InlineElts" is uninitialized.
#  111|       Ptr += sizeof(MemInfoBlock);
#  112|     }
#  113|->   return Items;
#  114|   }
#  115|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Support/APFloat.cpp:4290:5: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloat::IEEEFloat(reciprocal), this->semantics)".
llvm-project-19.0.0.src/llvm/lib/Support/APFloat.cpp:4290:5: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 4288|   
# 4289|     if (inv)
# 4290|->     *inv = APFloat(reciprocal, *semantics);
# 4291|   
# 4292|     return true;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Support/APFloat.cpp:5215:5: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloat::IEEEFloat(std::move(this->getIEEE())), ToSemantics)".
llvm-project-19.0.0.src/llvm/lib/Support/APFloat.cpp:5215:5: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 5213|         usesLayout<IEEEFloat>(ToSemantics)) {
# 5214|       auto Ret = getIEEE().convert(ToSemantics, RM, losesInfo);
# 5215|->     *this = APFloat(std::move(getIEEE()), ToSemantics);
# 5216|       return Ret;
# 5217|     }

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/lib/Support/raw_socket_stream.cpp:77:3: open_fn: Returning handle opened by "socket".
llvm-project-19.0.0.src/llvm/lib/Support/raw_socket_stream.cpp:77:3: var_assign: Assigning: "Socket" = handle returned from "socket(1, SOCK_STREAM, 0)".
llvm-project-19.0.0.src/llvm/lib/Support/raw_socket_stream.cpp:85:3: noescape: Resource "Socket" is not freed or pointed-to in "connect".
llvm-project-19.0.0.src/llvm/lib/Support/raw_socket_stream.cpp:86:5: leaked_handle: Handle variable "Socket" going out of scope leaks the handle.
#   84|     struct sockaddr_un Addr = setSocketAddr(SocketPath);
#   85|     if (::connect(Socket, (struct sockaddr *)&Addr, sizeof(Addr)) == -1)
#   86|->     return llvm::make_error<StringError>(getLastSocketErrorCode(),
#   87|                                            "Connect socket failed");
#   88|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:428:3: return_constant: Function call "llvm::countr_zero(SmallSize)" may return 32.
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:428:3: overrun-local: Overrunning array "RepeatedOnesTable" of 7 8-byte elements at element index 32 (byte offset 263) using index "llvm::countr_zero(SmallSize)" (which evaluates to 32).
#  426|     // dividing the 64-bit value into fields of width SmallSize, and placing a
#  427|     // one in the least significant bit of each field.
#  428|->   uint64_t SmallOnes = RepeatedOnesTable[countr_zero(SmallSize)];
#  429|   
#  430|     // Now we try to find the number of ones in each of the smaller repetitions,

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:1025:3: var_decl: Declaring variable "Opc" without initializer.
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:1039:3: uninit_use_in_call: Using uninitialized value "Opc" when calling "get".
# 1037|     auto TRI = MBB.getParent()->getSubtarget().getRegisterInfo();
# 1038|     unsigned SMReg32 = TRI->getSubReg(PStateSM, AArch64::sub_32);
# 1039|->   MachineInstrBuilder Tbx =
# 1040|         BuildMI(MBB, MBBI, DL, TII->get(Opc)).addReg(SMReg32).addImm(0);
# 1041|   
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:1039:3: note: trimmed 1 message(s) with length over 512

Error: WRAPPER_ESCAPE (CWE-825):
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:8258:3: extract: Calling "operator []" which extracts wrapped state from parameter "RepeatedSequenceLocs".
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:8258:3: assign: Assigning: "FirstCand" = "RepeatedSequenceLocs[0UL]".
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:8554:7: invalidate: Calling "operator =" invalidates the internal representation of parameter "RepeatedSequenceLocs".
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:8627:5: use_after_free: Using invalidated internal representation of parameter "RepeatedSequenceLocs".
# 8625|       // link register.
# 8626|       bool ModStackToSaveLR = false;
# 8627|->     if (std::any_of(FirstCand.begin(), std::prev(FirstCand.end()),
# 8628|                       [](const MachineInstr &MI) { return MI.isCall(); }))
# 8629|         ModStackToSaveLR = true;
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:8627:5: note: trimmed 1 message(s) with length over 512

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5609:7: return_constant: Function call "llvm::Log2_32(MemSize)" may return 4294967295.
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5609:7: overrun-local: Overrunning array "FPROpcodes" of 5 4-byte elements at element index 4294967295 (byte offset 17179869183) using index "llvm::Log2_32(MemSize)" (which evaluates to 4294967295).
# 5607|           AArch64::LDRQpre};
# 5608|       if (RBI.getRegBank(Dst, MRI, TRI)->getID() == AArch64::FPRRegBankID)
# 5609|->       Opc = FPROpcodes[Log2_32(MemSize)];
# 5610|       else
# 5611|         Opc = GPROpcodes[Log2_32(MemSize)];

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5611:7: return_constant: Function call "llvm::Log2_32(MemSize)" may return 4294967295.
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5611:7: overrun-local: Overrunning array "GPROpcodes" of 4 4-byte elements at element index 4294967295 (byte offset 17179869183) using index "llvm::Log2_32(MemSize)" (which evaluates to 4294967295).
# 5609|         Opc = FPROpcodes[Log2_32(MemSize)];
# 5610|       else
# 5611|->       Opc = GPROpcodes[Log2_32(MemSize)];
# 5612|     } else {
# 5613|       static constexpr unsigned GPROpcodes[] = {

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5620:7: return_constant: Function call "llvm::Log2_32(MemSize)" may return 4294967295.
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5620:7: overrun-local: Overrunning array "FPROpcodes" of 5 4-byte elements at element index 4294967295 (byte offset 17179869183) using index "llvm::Log2_32(MemSize)" (which evaluates to 4294967295).
# 5618|           AArch64::LDRDpost, AArch64::LDRQpost};
# 5619|       if (RBI.getRegBank(Dst, MRI, TRI)->getID() == AArch64::FPRRegBankID)
# 5620|->       Opc = FPROpcodes[Log2_32(MemSize)];
# 5621|       else
# 5622|         Opc = GPROpcodes[Log2_32(MemSize)];

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5622:7: return_constant: Function call "llvm::Log2_32(MemSize)" may return 4294967295.
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5622:7: overrun-local: Overrunning array "GPROpcodes" of 4 4-byte elements at element index 4294967295 (byte offset 17179869183) using index "llvm::Log2_32(MemSize)" (which evaluates to 4294967295).
# 5620|         Opc = FPROpcodes[Log2_32(MemSize)];
# 5621|       else
# 5622|->       Opc = GPROpcodes[Log2_32(MemSize)];
# 5623|     }
# 5624|     auto Cst = getIConstantVRegVal(Offset, MRI);

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5654:7: return_constant: Function call "llvm::Log2_32(llvm::TypeSize(ValTy.getSizeInBytes()).operator llvm::details::FixedOrScalableQuantity<llvm::TypeSize, unsigned long>::ScalarTy())" may return 4294967295.
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5654:7: overrun-local: Overrunning array "FPROpcodes" of 5 4-byte elements at element index 4294967295 (byte offset 17179869183) using index "llvm::Log2_32(llvm::TypeSize(ValTy.getSizeInBytes()).operator llvm::details::FixedOrScalableQuantity<llvm::TypeSize, unsigned long>::ScalarTy())" (which evaluates to 4294967295).
# 5652|   
# 5653|       if (RBI.getRegBank(Val, MRI, TRI)->getID() == AArch64::FPRRegBankID)
# 5654|->       Opc = FPROpcodes[Log2_32(ValTy.getSizeInBytes())];
# 5655|       else
# 5656|         Opc = GPROpcodes[Log2_32(ValTy.getSizeInBytes())];

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5656:7: return_constant: Function call "llvm::Log2_32(llvm::TypeSize(ValTy.getSizeInBytes()).operator llvm::details::FixedOrScalableQuantity<llvm::TypeSize, unsigned long>::ScalarTy())" may return 4294967295.
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5656:7: overrun-local: Overrunning array "GPROpcodes" of 4 4-byte elements at element index 4294967295 (byte offset 17179869183) using index "llvm::Log2_32(llvm::TypeSize(ValTy.getSizeInBytes()).operator llvm::details::FixedOrScalableQuantity<llvm::TypeSize, unsigned long>::ScalarTy())" (which evaluates to 4294967295).
# 5654|         Opc = FPROpcodes[Log2_32(ValTy.getSizeInBytes())];
# 5655|       else
# 5656|->       Opc = GPROpcodes[Log2_32(ValTy.getSizeInBytes())];
# 5657|     } else {
# 5658|       static constexpr unsigned GPROpcodes[] = {

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5666:7: return_constant: Function call "llvm::Log2_32(llvm::TypeSize(ValTy.getSizeInBytes()).operator llvm::details::FixedOrScalableQuantity<llvm::TypeSize, unsigned long>::ScalarTy())" may return 4294967295.
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5666:7: overrun-local: Overrunning array "FPROpcodes" of 5 4-byte elements at element index 4294967295 (byte offset 17179869183) using index "llvm::Log2_32(llvm::TypeSize(ValTy.getSizeInBytes()).operator llvm::details::FixedOrScalableQuantity<llvm::TypeSize, unsigned long>::ScalarTy())" (which evaluates to 4294967295).
# 5664|   
# 5665|       if (RBI.getRegBank(Val, MRI, TRI)->getID() == AArch64::FPRRegBankID)
# 5666|->       Opc = FPROpcodes[Log2_32(ValTy.getSizeInBytes())];
# 5667|       else
# 5668|         Opc = GPROpcodes[Log2_32(ValTy.getSizeInBytes())];

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5668:7: return_constant: Function call "llvm::Log2_32(llvm::TypeSize(ValTy.getSizeInBytes()).operator llvm::details::FixedOrScalableQuantity<llvm::TypeSize, unsigned long>::ScalarTy())" may return 4294967295.
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:5668:7: overrun-local: Overrunning array "GPROpcodes" of 4 4-byte elements at element index 4294967295 (byte offset 17179869183) using index "llvm::Log2_32(llvm::TypeSize(ValTy.getSizeInBytes()).operator llvm::details::FixedOrScalableQuantity<llvm::TypeSize, unsigned long>::ScalarTy())" (which evaluates to 4294967295).
# 5666|         Opc = FPROpcodes[Log2_32(ValTy.getSizeInBytes())];
# 5667|       else
# 5668|->       Opc = GPROpcodes[Log2_32(ValTy.getSizeInBytes())];
# 5669|     }
# 5670|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AsmBackend.cpp:77:5: cond_between: Checking "Kind >= FirstLiteralRelocationKind" implies that "Kind" is between 0 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AsmBackend.cpp:80:5: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 128 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AsmBackend.cpp:85:5: illegal_address: "Infos[Kind - FirstTargetFixupKind]" evaluates to an address that is at byte offset 3048 of an array of 360 bytes.
#   83|       assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&
#   84|              "Invalid kind!");
#   85|->     return Infos[Kind - FirstTargetFixupKind];
#   86|     }
#   87|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/AMDGPU/AMDGPUArgumentUsageInfo.cpp:153:3: var_decl: Declaring variable "AI".
llvm-project-19.0.0.src/llvm/lib/Target/AMDGPU/AMDGPUArgumentUsageInfo.cpp:174:3: uninit_use: Using uninitialized value "AI". Field "AI.PreloadKernArgs.NumEntries" is uninitialized.
#  172|     AI.WorkItemIDY = ArgDescriptor::createRegister(AMDGPU::VGPR31, Mask << 10);
#  173|     AI.WorkItemIDZ = ArgDescriptor::createRegister(AMDGPU::VGPR31, Mask << 20);
#  174|->   return AI;
#  175|   }
#  176|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp:3235:3: var_decl: Declaring variable "ModOpcode" without initializer.
llvm-project-19.0.0.src/llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp:3252:7: uninit_use_in_call: Using uninitialized value "ModOpcode" when calling "selectWMMAModsNegAbs".
# 3250|       // All elements have ModOpcode modifier
# 3251|       if (BV->getNumOperands() * 2 == EltsF16.size())
# 3252|->       selectWMMAModsNegAbs(ModOpcode, Mods, EltsF16, Src, CurDAG, SDLoc(In),
# 3253|                              16);
# 3254|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp:3345:15: var_decl: Declaring variable "FloatVal".
llvm-project-19.0.0.src/llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp:3349:15: uninit_use_in_call: Using uninitialized value "FloatVal.U" when calling "isInlineConstant".
# 3347|                                      : APFloatBase::BFloat(),
# 3348|                                  RawValue.value());
# 3349|->               if (TII->isInlineConstant(FloatVal)) {
# 3350|                   Src = CurDAG->getTargetConstant(RawValue.value(), SDLoc(In),
# 3351|                                                   MVT::i16);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp:5252:11: var_decl: Declaring variable "Zero".
llvm-project-19.0.0.src/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp:5253:11: uninit_use_in_call: Using uninitialized value "Zero.U" when calling "~APFloat".
# 5251|           if (V.isDenormal()) {
# 5252|             APFloat Zero(V.getSemantics(), 0);
# 5253|->           return V.isNegative() ? -Zero : Zero;
# 5254|           }
# 5255|           return V;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.cpp:1781:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/llvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.cpp:1795:3: uninit_use: Using uninitialized value "Result". Field "Result.InlineElts" is uninitialized.
# 1793|     }
# 1794|   
# 1795|->   return Result;
# 1796|   }
# 1797|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:923:9: cond_at_most: Checking "Interval.first >= NUM_ALL_VGPRS" implies that "Interval.first" may be up to 520 on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:931:16: assignment: Assigning: "RegNo" = "Interval.first". The value of "RegNo" may now be up to 520.
llvm-project-19.0.0.src/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:931:69: incr: Incrementing "RegNo". The value of "RegNo" may now be up to 521.
llvm-project-19.0.0.src/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:932:13: overrun-local: Overrunning array "this->VgprVmemTypes" of 521 bytes at byte offset 521 using index "RegNo" (which evaluates to 521).
#  930|             VmemType V = getVmemType(Inst);
#  931|             for (int RegNo = Interval.first; RegNo < Interval.second; ++RegNo)
#  932|->             VgprVmemTypes[RegNo] |= 1 << V;
#  933|           }
#  934|         }

Error: WRAPPER_ESCAPE (CWE-825):
llvm-project-19.0.0.src/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp:5876:3: extract: Calling "operator []" which extracts wrapped state from parameter "RepeatedSequenceLocs".
llvm-project-19.0.0.src/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp:5876:3: assign: Assigning: "FirstCand" = "RepeatedSequenceLocs[0UL]".
llvm-project-19.0.0.src/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp:6063:7: invalidate: Calling "operator =" invalidates the internal representation of parameter "RepeatedSequenceLocs".
llvm-project-19.0.0.src/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp:6074:5: use_after_free: Using invalidated internal representation of parameter "RepeatedSequenceLocs".
# 6072|       // check if the range contains a call.  These require a save + restore of
# 6073|       // the link register.
# 6074|->     if (std::any_of(FirstCand.begin(), std::prev(FirstCand.end()),
# 6075|                       [](const MachineInstr &MI) { return MI.isCall(); }))
# 6076|         NumBytesToCreateFrame += Costs.SaveRestoreLROnStack;

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/ARM/ARMFastISel.cpp:1691:3: assignment: Assigning: "LC" = "UNKNOWN_LIBCALL".
llvm-project-19.0.0.src/llvm/lib/Target/ARM/ARMFastISel.cpp:1704:3: overrun-call: Overrunning callee's array of size 653 by passing argument "LC" (which evaluates to 653) in call to "ARMEmitLibcall".
# 1702|     assert(LC != RTLIB::UNKNOWN_LIBCALL && "Unsupported SDIV!");
# 1703|   
# 1704|->   return ARMEmitLibcall(I, LC);
# 1705|   }
# 1706|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/ARM/ARMFastISel.cpp:1720:3: assignment: Assigning: "LC" = "UNKNOWN_LIBCALL".
llvm-project-19.0.0.src/llvm/lib/Target/ARM/ARMFastISel.cpp:1733:3: overrun-call: Overrunning callee's array of size 653 by passing argument "LC" (which evaluates to 653) in call to "ARMEmitLibcall".
# 1731|     assert(LC != RTLIB::UNKNOWN_LIBCALL && "Unsupported SREM!");
# 1732|   
# 1733|->   return ARMEmitLibcall(I, LC);
# 1734|   }
# 1735|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/ARM/MCTargetDesc/ARMAsmBackend.cpp:198:3: cond_between: Checking "Kind >= FirstLiteralRelocationKind" implies that "Kind" is between 0 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/ARM/MCTargetDesc/ARMAsmBackend.cpp:201:3: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 128 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/ARM/MCTargetDesc/ARMAsmBackend.cpp:206:3: illegal_address: "((this->Endian == little) ? InfosLE : InfosBE)[Kind - FirstTargetFixupKind]" evaluates to an address that is at byte offset 3048 of an array of 984 bytes.
#  204|     assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&
#  205|            "Invalid kind!");
#  206|->   return (Endian == llvm::endianness::little
#  207|                 ? InfosLE
#  208|                 : InfosBE)[Kind - FirstTargetFixupKind];

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/AVR/AVRISelLowering.cpp:2194:3: var_decl: Declaring variable "Opc" without initializer.
llvm-project-19.0.0.src/llvm/lib/Target/AVR/AVRISelLowering.cpp:2216:3: uninit_use_in_call: Using uninitialized value "Opc" when calling "insertMultibyteShift".
# 2214|   
# 2215|     // Do the shift. The registers are modified in-place.
# 2216|->   insertMultibyteShift(MI, BB, Registers, Opc, ShiftAmt);
# 2217|   
# 2218|     // Combine the 8-bit registers into 16-bit register pairs.

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/AVR/MCTargetDesc/AVRAsmBackend.cpp:485:3: cond_between: Checking "Kind >= FirstLiteralRelocationKind" implies that "Kind" is between 0 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/AVR/MCTargetDesc/AVRAsmBackend.cpp:488:3: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 0 and 127 (inclusive) on the true branch.
llvm-project-19.0.0.src/llvm/lib/Target/AVR/MCTargetDesc/AVRAsmBackend.cpp:489:5: overrun-call: Overrunning callee's array of size 22 by passing argument "Kind" (which evaluates to 127) in call to "getFixupKindInfo".
#  487|   
#  488|     if (Kind < FirstTargetFixupKind)
#  489|->     return MCAsmBackend::getFixupKindInfo(Kind);
#  490|   
#  491|     assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/AVR/MCTargetDesc/AVRAsmBackend.cpp:485:3: cond_between: Checking "Kind >= FirstLiteralRelocationKind" implies that "Kind" is between 0 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/AVR/MCTargetDesc/AVRAsmBackend.cpp:488:3: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 128 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/AVR/MCTargetDesc/AVRAsmBackend.cpp:494:3: illegal_address: "Infos[Kind - FirstTargetFixupKind]" evaluates to an address that is at byte offset 3048 of an array of 840 bytes.
#  492|            "Invalid kind!");
#  493|   
#  494|->   return Infos[Kind - FirstTargetFixupKind];
#  495|   }
#  496|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/BPF/BPFTargetTransformInfo.h:74:5: var_decl: Declaring variable "Options".
llvm-project-19.0.0.src/llvm/lib/Target/BPF/BPFTargetTransformInfo.h:77:5: uninit_use: Using uninitialized value "Options". Field "Options.AllowedTailExpansions.InlineElts" is uninitialized.
#   75|       Options.LoadSizes = {8, 4, 2, 1};
#   76|       Options.MaxNumLoads = TLI->getMaxExpandSizeMemcmp(OptSize);
#   77|->     return Options;
#   78|     }
#   79|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/BPF/MCTargetDesc/BPFAsmBackend.cpp:63:3: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 0 and 127 (inclusive) on the true branch.
llvm-project-19.0.0.src/llvm/lib/Target/BPF/MCTargetDesc/BPFAsmBackend.cpp:64:5: overrun-call: Overrunning callee's array of size 22 by passing argument "Kind" (which evaluates to 127) in call to "getFixupKindInfo".
#   62|   
#   63|     if (Kind < FirstTargetFixupKind)
#   64|->     return MCAsmBackend::getFixupKindInfo(Kind);
#   65|   
#   66|     assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:147:7: var_decl: Declaring variable "Nodes".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:149:7: uninit_use: Using uninitialized value "Nodes". Field "Nodes.InlineElts" is uninitialized.
#  147|         SmallVector<Node*,8> Nodes;
#  148|         nodesWith(Root, P, CheckAlign, Nodes);
#  149|->       return Nodes;
#  150|       }
#  151|       void dump() const;

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:1206:3: alloc_fn: Storage is returned from allocation function "getLoopTripCount".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:1206:3: var_assign: Assigning: "TripCount" = storage returned from "this->getLoopTripCount(L, OldInsts)".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:1211:3: noescape: Resource "TripCount" is not freed or pointed-to in "isReg".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:1214:5: noescape: Resource "TripCount" is not freed or pointed-to in "getReg".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:1217:7: leaked_storage: Variable "TripCount" going out of scope leaks the storage it points to.
# 1215|       MachineBasicBlock *BBDef = TCDef->getParent();
# 1216|       if (!MDT->dominates(BBDef, Preheader))
# 1217|->       return false;
# 1218|     }
# 1219|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:1206:3: alloc_fn: Storage is returned from allocation function "getLoopTripCount".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:1206:3: var_assign: Assigning: "TripCount" = storage returned from "this->getLoopTripCount(L, OldInsts)".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:1211:3: noescape: Resource "TripCount" is not freed or pointed-to in "isReg".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:1229:7: leaked_storage: Variable "TripCount" going out of scope leaks the storage it points to.
# 1227|   
# 1228|       if (TII->analyzeBranch(*ExitingBlock, TB, FB, Cond, false))
# 1229|->       return false;
# 1230|   
# 1231|       if (L->contains(TB))

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp:1890:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp:1912:3: uninit_use: Using uninitialized value "Result". Field "Result.Weight" is uninitialized.
# 1910|     }
# 1911|   
# 1912|->   return Result;
# 1913|   }
# 1914|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp:1917:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp:1939:3: uninit_use: Using uninitialized value "Result". Field "Result.Weight" is uninitialized.
# 1937|     }
# 1938|   
# 1939|->   return Result;
# 1940|   }
# 1941|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:1058:3: var_decl: Declaring variable "SegList".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:1060:5: uninit_use: Using uninitialized value "SegList". Field "SegList.InlineElts" is uninitialized.
# 1058|     SmallVector<unsigned, 4> SegList;
# 1059|     if (SM.MaxSrc == -1)
# 1060|->     return SegList;
# 1061|   
# 1062|     unsigned Shift = Log2_32(SegLen);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:1058:3: var_decl: Declaring variable "SegList".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:1072:3: uninit_use: Using uninitialized value "SegList". Field "SegList.InlineElts" is uninitialized.
# 1070|     for (unsigned B : Segs.set_bits())
# 1071|       SegList.push_back(B);
# 1072|->   return SegList;
# 1073|   }
# 1074|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:1340:8: assignment: Assigning: "X" = "*__begin1".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:1344:7: assignment: Assigning: "Seg0" = "X".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:1345:10: cond_const: Checking "Seg1 != 4294967295U" implies that "Seg1" is 4294967295 on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:1391:5: cond_at_most: Checking "Seg0 / 2U == Seg1 / 2U" implies that "Seg0" may be up to 4294967293 on the true branch.
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:1393:7: overrun-local: Overrunning array "Inp" of 2 24-byte elements at element index 2147483646 (byte offset 51539607527) using index "Seg0 / 2U" (which evaluates to 2147483646).
# 1391|       if (Seg0 / 2 == Seg1 / 2) {
# 1392|         // Same input vector.
# 1393|->       Va = Inp[Seg0 / 2];
# 1394|         if (Seg0 > Seg1) {
# 1395|           // Swap halves.

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp:2899:3: var_decl: Declaring variable "TLOpc" without initializer.
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp:2916:3: uninit_use_in_call: Using uninitialized value "TLOpc" when calling "getNode".
# 2914|   
# 2915|     const SDLoc &dl(Op);
# 2916|->   return DAG.getNode(TLOpc, dl, ty(Op), Op.getOperand(0),
# 2917|                        DAG.getUNDEF(MVT::i128), // illegal type
# 2918|                        DAG.getConstant(Opc, dl, MVT::i32));

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:3361:3: var_decl: Declaring variable "Jumpers".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:3365:5: uninit_use: Using uninitialized value "Jumpers". Field "Jumpers.InlineElts" is uninitialized.
# 3363|     MachineBasicBlock::instr_iterator I = MBB.instr_end();
# 3364|     if (I == MBB.instr_begin())
# 3365|->     return Jumpers;
# 3366|   
# 3367|     // A basic block may looks like this:

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:3361:3: var_decl: Declaring variable "Jumpers".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:3382:7: uninit_use: Using uninitialized value "Jumpers". Field "Jumpers.InlineElts" is uninitialized.
# 3380|       --I;
# 3381|       if (I->isEHLabel())
# 3382|->       return Jumpers;
# 3383|     } while (I != MBB.instr_begin());
# 3384|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:3361:3: var_decl: Declaring variable "Jumpers".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:3390:7: uninit_use: Using uninitialized value "Jumpers". Field "Jumpers.InlineElts" is uninitialized.
# 3388|     while (I->isDebugInstr()) {
# 3389|       if (I == MBB.instr_begin())
# 3390|->       return Jumpers;
# 3391|       --I;
# 3392|     }

Error: WRAPPER_ESCAPE (CWE-825):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp:1140:5: extract: Calling "operator []" which extracts wrapped state from "ASpan.Blocks".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp:1140:5: escape: The internal representation of "ASpan.Blocks" escapes into "ASpan.Blocks[Index].Seg.Val", but is destroyed when it exits scope.
# 1138|       ASpan.Blocks.emplace_back(nullptr, ScLen, Index * ScLen);
# 1139|     for (int Index = 0; Index != NumSectors; ++Index) {
# 1140|->     ASpan.Blocks[Index].Seg.Val =
# 1141|           reinterpret_cast<Value *>(&ASpan.Blocks[Index]);
# 1142|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp:2121:3: var_decl: Declaring variable "WordP".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp:2127:3: uninit_use: Using uninitialized value "WordP". Field "WordP.InlineElts" is uninitialized.
# 2125|     }
# 2126|   
# 2127|->   return WordP;
# 2128|   }
# 2129|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp:196:5: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 0 and 127 (inclusive) on the true branch.
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp:197:7: overrun-call: Overrunning callee's array of size 22 by passing argument "Kind" (which evaluates to 127) in call to "getFixupKindInfo".
#  195|   
#  196|       if (Kind < FirstTargetFixupKind)
#  197|->       return MCAsmBackend::getFixupKindInfo(Kind);
#  198|   
#  199|       assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp:697:3: var_decl: Declaring variable "Result".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp:1009:3: uninit_use: Using uninitialized value "Result". Field "Result.Operands.InlineElts" is uninitialized.
# 1007|       break; //    1,2 SUBInst $Rd = zxth($Rs)
# 1008|     }
# 1009|->   return Result;
# 1010|   }
# 1011|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp:1032:3: var_decl: Declaring variable "duplexToTry".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp:1104:3: uninit_use: Using uninitialized value "duplexToTry". Field "duplexToTry.InlineElts" is uninitialized.
# 1102|       }
# 1103|     }
# 1104|->   return duplexToTry;
# 1105|   }

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCELFStreamer.cpp:108:5: overrun-local: Overrunning array "sbss" of 4 16-byte elements at element index 63 (byte offset 1023) using index "llvm::Log2_64(AccessSize)" (which evaluates to 63).
#  106|   
#  107|     if (ELFSymbol->getBinding() == ELF::STB_LOCAL) {
#  108|->     StringRef SectionName =
#  109|           ((AccessSize == 0) || (Size == 0) || (Size > GPSize))
#  110|               ? ".bss"

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCTargetDesc.cpp:576:3: alloc_fn: Storage is returned from allocation function "createHexagonMCSubtargetInfoImpl".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCTargetDesc.cpp:576:3: var_assign: Assigning: "X" = storage returned from "llvm::createHexagonMCSubtargetInfoImpl(TT, CPUName, CPUName, ArchFS)".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCTargetDesc.cpp:587:5: leaked_storage: Variable "X" going out of scope leaks the storage it points to.
#  585|       errs() << "error: invalid CPU \"" << CPUName.str().c_str()
#  586|              << "\" specified\n";
#  587|->     return nullptr;
#  588|     }
#  589|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:465:7: uninit_use: Using uninitialized value "Summary.pSlot3Cnt".
#  463|   
#  464|       if (HexagonMCInstrInfo::prefersSlot3(MCII, ID)) {
#  465|->       ++Summary.pSlot3Cnt;
#  466|         Summary.PrefSlot3Inst = ISJ;
#  467|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:470:5: uninit_use: Using uninitialized value "Summary.ReservedSlotMask".
#  468|       const unsigned ReservedSlots =
#  469|           HexagonMCInstrInfo::getOtherReservedSlots(MCII, STI, ID);
#  470|->     Summary.ReservedSlotMask |= ReservedSlots;
#  471|       if (ReservedSlots != 0)
#  472|         AppliedRestrictions.push_back(std::make_pair(ID.getLoc(),

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:491:7: uninit_use: Using uninitialized value "Summary.NonZCVIloads".
#  489|       case HexagonII::TypeCVI_GATHER_DV:
#  490|       case HexagonII::TypeCVI_GATHER_RST:
#  491|->       ++Summary.NonZCVIloads;
#  492|         [[fallthrough]];
#  493|       case HexagonII::TypeCVI_ZW:

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:494:7: uninit_use: Using uninitialized value "Summary.AllCVIloads".
#  492|         [[fallthrough]];
#  493|       case HexagonII::TypeCVI_ZW:
#  494|->       ++Summary.AllCVIloads;
#  495|         [[fallthrough]];
#  496|       case HexagonII::TypeLD:

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:497:7: uninit_use: Using uninitialized value "Summary.loads".
#  495|         [[fallthrough]];
#  496|       case HexagonII::TypeLD:
#  497|->       ++Summary.loads;
#  498|         ++Summary.memory;
#  499|         if (ISJ->Core.getUnits() == slotSingleLoad ||

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:498:7: uninit_use: Using uninitialized value "Summary.memory".
#  496|       case HexagonII::TypeLD:
#  497|         ++Summary.loads;
#  498|->       ++Summary.memory;
#  499|         if (ISJ->Core.getUnits() == slotSingleLoad ||
#  500|             HexagonMCInstrInfo::getType(MCII, ID) == HexagonII::TypeCVI_VM_VP_LDU)

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:501:9: uninit_use: Using uninitialized value "Summary.load0".
#  499|         if (ISJ->Core.getUnits() == slotSingleLoad ||
#  500|             HexagonMCInstrInfo::getType(MCII, ID) == HexagonII::TypeCVI_VM_VP_LDU)
#  501|->         ++Summary.load0;
#  502|         if (HexagonMCInstrInfo::getDesc(MCII, ID).isReturn())
#  503|           Summary.branchInsts.push_back(ISJ);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:513:7: uninit_use: Using uninitialized value "Summary.CVIstores".
#  511|       case HexagonII::TypeCVI_SCATTER_NEW_RST:
#  512|       case HexagonII::TypeCVI_SCATTER_NEW_ST:
#  513|->       ++Summary.CVIstores;
#  514|         [[fallthrough]];
#  515|       case HexagonII::TypeST:

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:516:7: uninit_use: Using uninitialized value "Summary.stores".
#  514|         [[fallthrough]];
#  515|       case HexagonII::TypeST:
#  516|->       ++Summary.stores;
#  517|         ++Summary.memory;
#  518|         if (ISJ->Core.getUnits() == slotSingleStore ||

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:517:7: uninit_use: Using uninitialized value "Summary.memory".
#  515|       case HexagonII::TypeST:
#  516|         ++Summary.stores;
#  517|->       ++Summary.memory;
#  518|         if (ISJ->Core.getUnits() == slotSingleStore ||
#  519|             HexagonMCInstrInfo::getType(MCII, ID) == HexagonII::TypeCVI_VM_STU)

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:520:9: uninit_use: Using uninitialized value "Summary.store0".
#  518|         if (ISJ->Core.getUnits() == slotSingleStore ||
#  519|             HexagonMCInstrInfo::getType(MCII, ID) == HexagonII::TypeCVI_VM_STU)
#  520|->         ++Summary.store0;
#  521|         break;
#  522|       case HexagonII::TypeV4LDST:

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:523:7: uninit_use: Using uninitialized value "Summary.loads".
#  521|         break;
#  522|       case HexagonII::TypeV4LDST:
#  523|->       ++Summary.loads;
#  524|         ++Summary.stores;
#  525|         ++Summary.store1;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:524:7: uninit_use: Using uninitialized value "Summary.stores".
#  522|       case HexagonII::TypeV4LDST:
#  523|         ++Summary.loads;
#  524|->       ++Summary.stores;
#  525|         ++Summary.store1;
#  526|         ++Summary.memops;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:525:7: uninit_use: Using uninitialized value "Summary.store1".
#  523|         ++Summary.loads;
#  524|         ++Summary.stores;
#  525|->       ++Summary.store1;
#  526|         ++Summary.memops;
#  527|         ++Summary.memory;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:526:7: uninit_use: Using uninitialized value "Summary.memops".
#  524|         ++Summary.stores;
#  525|         ++Summary.store1;
#  526|->       ++Summary.memops;
#  527|         ++Summary.memory;
#  528|         break;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:527:7: uninit_use: Using uninitialized value "Summary.memory".
#  525|         ++Summary.store1;
#  526|         ++Summary.memops;
#  527|->       ++Summary.memory;
#  528|         break;
#  529|       case HexagonII::TypeNCJ:

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:530:7: uninit_use: Using uninitialized value "Summary.memory".
#  528|         break;
#  529|       case HexagonII::TypeNCJ:
#  530|->       ++Summary.memory; // NV insns are memory-like.
#  531|         Summary.branchInsts.push_back(ISJ);
#  532|         break;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:535:9: uninit_use: Using uninitialized value "Summary.loads".
#  533|       case HexagonII::TypeV2LDST:
#  534|         if (HexagonMCInstrInfo::getDesc(MCII, ID).mayLoad()) {
#  535|->         ++Summary.loads;
#  536|           ++Summary.memory;
#  537|           if (ISJ->Core.getUnits() == slotSingleLoad ||

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:536:9: uninit_use: Using uninitialized value "Summary.memory".
#  534|         if (HexagonMCInstrInfo::getDesc(MCII, ID).mayLoad()) {
#  535|           ++Summary.loads;
#  536|->         ++Summary.memory;
#  537|           if (ISJ->Core.getUnits() == slotSingleLoad ||
#  538|               HexagonMCInstrInfo::getType(MCII, ID) ==

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:540:11: uninit_use: Using uninitialized value "Summary.load0".
#  538|               HexagonMCInstrInfo::getType(MCII, ID) ==
#  539|                   HexagonII::TypeCVI_VM_VP_LDU)
#  540|->           ++Summary.load0;
#  541|         } else {
#  542|           assert(HexagonMCInstrInfo::getDesc(MCII, ID).mayStore());

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:543:9: uninit_use: Using uninitialized value "Summary.memory".
#  541|         } else {
#  542|           assert(HexagonMCInstrInfo::getDesc(MCII, ID).mayStore());
#  543|->         ++Summary.memory;
#  544|           ++Summary.stores;
#  545|         }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:544:9: uninit_use: Using uninitialized value "Summary.stores".
#  542|           assert(HexagonMCInstrInfo::getDesc(MCII, ID).mayStore());
#  543|           ++Summary.memory;
#  544|->         ++Summary.stores;
#  545|         }
#  546|         break;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:554:7: uninit_use: Using uninitialized value "Summary.duplex".
#  552|         break;
#  553|       case HexagonII::TypeDUPLEX: {
#  554|->       ++Summary.duplex;
#  555|         MCInst const &Inst0 = *ID.getOperand(0).getInst();
#  556|         MCInst const &Inst1 = *ID.getOperand(1).getInst();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:453:3: var_decl: Declaring variable "Summary".
llvm-project-19.0.0.src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:569:3: uninit_use: Using uninitialized value "Summary". Field "Summary.memory" is uninitialized.
#  567|       }
#  568|     }
#  569|->   return Summary;
#  570|   }
#  571|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/Lanai/MCTargetDesc/LanaiAsmBackend.cpp:151:3: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 0 and 127 (inclusive) on the true branch.
llvm-project-19.0.0.src/llvm/lib/Target/Lanai/MCTargetDesc/LanaiAsmBackend.cpp:152:5: overrun-call: Overrunning callee's array of size 22 by passing argument "Kind" (which evaluates to 127) in call to "getFixupKindInfo".
#  150|   
#  151|     if (Kind < FirstTargetFixupKind)
#  152|->     return MCAsmBackend::getFixupKindInfo(Kind);
#  153|   
#  154|     assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/LoongArch/MCTargetDesc/LoongArchAsmBackend.cpp:74:3: cond_between: Checking "Kind >= FirstLiteralRelocationKind" implies that "Kind" is between 0 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/LoongArch/MCTargetDesc/LoongArchAsmBackend.cpp:77:3: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 0 and 127 (inclusive) on the true branch.
llvm-project-19.0.0.src/llvm/lib/Target/LoongArch/MCTargetDesc/LoongArchAsmBackend.cpp:78:5: overrun-call: Overrunning callee's array of size 22 by passing argument "Kind" (which evaluates to 127) in call to "getFixupKindInfo".
#   76|   
#   77|     if (Kind < FirstTargetFixupKind)
#   78|->     return MCAsmBackend::getFixupKindInfo(Kind);
#   79|   
#   80|     assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/LoongArch/MCTargetDesc/LoongArchAsmBackend.cpp:74:3: cond_between: Checking "Kind >= FirstLiteralRelocationKind" implies that "Kind" is between 0 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/LoongArch/MCTargetDesc/LoongArchAsmBackend.cpp:77:3: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 128 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/LoongArch/MCTargetDesc/LoongArchAsmBackend.cpp:82:3: illegal_address: "Infos[Kind - FirstTargetFixupKind]" evaluates to an address that is at byte offset 3048 of an array of 264 bytes.
#   80|     assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&
#   81|            "Invalid kind!");
#   82|->   return Infos[Kind - FirstTargetFixupKind];
#   83|   }
#   84|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/LoongArch/MCTargetDesc/LoongArchMatInt.cpp:27:3: var_decl: Declaring variable "Insts".
llvm-project-19.0.0.src/llvm/lib/Target/LoongArch/MCTargetDesc/LoongArchMatInt.cpp:31:5: uninit_use: Using uninitialized value "Insts". Field "Insts.InlineElts" is uninitialized.
#   29|     if (Highest12 != 0 && SignExtend64<52>(Val) == 0) {
#   30|       Insts.push_back(Inst(LoongArch::LU52I_D, SignExtend64<12>(Highest12)));
#   31|->     return Insts;
#   32|     }
#   33|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/LoongArch/MCTargetDesc/LoongArchMatInt.cpp:27:3: var_decl: Declaring variable "Insts".
llvm-project-19.0.0.src/llvm/lib/Target/LoongArch/MCTargetDesc/LoongArchMatInt.cpp:50:3: uninit_use: Using uninitialized value "Insts". Field "Insts.InlineElts" is uninitialized.
#   48|       Insts.push_back(Inst(LoongArch::LU52I_D, SignExtend64<12>(Highest12)));
#   49|   
#   50|->   return Insts;
#   51|   }

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/MSP430/MCTargetDesc/MSP430AsmBackend.cpp:87:5: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 0 and 127 (inclusive) on the true branch.
llvm-project-19.0.0.src/llvm/lib/Target/MSP430/MCTargetDesc/MSP430AsmBackend.cpp:88:7: overrun-call: Overrunning callee's array of size 22 by passing argument "Kind" (which evaluates to 127) in call to "getFixupKindInfo".
#   86|   
#   87|       if (Kind < FirstTargetFixupKind)
#   88|->       return MCAsmBackend::getFixupKindInfo(Kind);
#   89|     
#   90|       return Infos[Kind - FirstTargetFixupKind];

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:3414:5: var_decl: Declaring variable "RealVal".
llvm-project-19.0.0.src/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:3415:5: uninit_use_in_call: Using uninitialized value "RealVal.U" when calling "bitcastToAPInt".
# 3413|     if ((Hi_32(ImmOp64) & 0x7ff00000) == 0) {
# 3414|       APFloat RealVal(APFloat::IEEEdouble(), ImmOp64);
# 3415|->     ImmOp64 = RealVal.bitcastToAPInt().getZExtValue();
# 3416|     }
# 3417|     return ImmOp64;

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/PowerPC/MCTargetDesc/PPCAsmBackend.cpp:128:5: cond_between: Checking "Kind >= FirstLiteralRelocationKind" implies that "Kind" is between 0 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/PowerPC/MCTargetDesc/PPCAsmBackend.cpp:131:5: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 128 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/PowerPC/MCTargetDesc/PPCAsmBackend.cpp:136:5: illegal_address: "((this->Endian == little) ? InfosLE : InfosBE)[Kind - FirstTargetFixupKind]" evaluates to an address that is at byte offset 3048 of an array of 264 bytes.
#  134|       assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&
#  135|              "Invalid kind!");
#  136|->     return (Endian == llvm::endianness::little
#  137|                   ? InfosLE
#  138|                   : InfosBE)[Kind - FirstTargetFixupKind];

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp:438:3: var_decl: Declaring variable "Options".
llvm-project-19.0.0.src/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp:441:3: uninit_use: Using uninitialized value "Options". Field "Options.AllowedTailExpansions.InlineElts" is uninitialized.
#  439|     Options.LoadSizes = {8, 4, 2, 1};
#  440|     Options.MaxNumLoads = TLI->getMaxExpandSizeMemcmp(OptSize);
#  441|->   return Options;
#  442|   }
#  443|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp:615:5: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::IEEEdouble(), llvm::APInt(64U, this->getFPConst(), false))".
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp:615:5: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#  613|       if (Kind != KindTy::FPImmediate)
#  614|         return false;
#  615|->     int Idx = RISCVLoadFPImm::getLoadFPImm(
#  616|           APFloat(APFloat::IEEEdouble(), APInt(64, getFPConst())));
#  617|       // Don't allow decimal version of the minimum value. It is a different value

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp:1210:5: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::IEEEdouble(), llvm::APInt(64U, this->getFPConst(), false))".
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp:1210:5: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 1208|       }
# 1209|   
# 1210|->     int Imm = RISCVLoadFPImm::getLoadFPImm(
# 1211|           APFloat(APFloat::IEEEdouble(), APInt(64, getFPConst())));
# 1212|       Inst.addOperand(MCOperand::createImm(Imm));

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp:1944:3: var_decl: Declaring variable "RealVal".
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp:1945:3: uninit_use_in_call: Using uninitialized value "RealVal.U" when calling "convertFromString".
# 1943|     // Parse FP representation.
# 1944|     APFloat RealVal(APFloat::IEEEdouble());
# 1945|->   auto StatusOrErr =
# 1946|         RealVal.convertFromString(Tok.getString(), APFloat::rmTowardZero);
# 1947|     if (errorToBool(StatusOrErr.takeError()))

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/MCA/RISCVCustomBehaviour.cpp:138:5: var_decl: Declaring variable "Instruments".
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/MCA/RISCVCustomBehaviour.cpp:163:5: uninit_use: Using uninitialized value "Instruments". Field "Instruments.InlineElts" is uninitialized.
#  161|           createInstrument(RISCVSEWInstrument::DESC_NAME, SEWStr));
#  162|   
#  163|->     return Instruments;
#  164|     }
#  165|     return SmallVector<UniqueInstrument>();

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp:101:3: cond_between: Checking "Kind >= FirstLiteralRelocationKind" implies that "Kind" is between 0 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp:104:3: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 0 and 127 (inclusive) on the true branch.
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp:105:5: overrun-call: Overrunning callee's array of size 22 by passing argument "Kind" (which evaluates to 127) in call to "getFixupKindInfo".
#  103|   
#  104|     if (Kind < FirstTargetFixupKind)
#  105|->     return MCAsmBackend::getFixupKindInfo(Kind);
#  106|   
#  107|     assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp:101:3: cond_between: Checking "Kind >= FirstLiteralRelocationKind" implies that "Kind" is between 0 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp:104:3: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 128 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp:109:3: illegal_address: "Infos[Kind - FirstTargetFixupKind]" evaluates to an address that is at byte offset 3048 of an array of 624 bytes.
#  107|     assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&
#  108|            "Invalid kind!");
#  109|->   return Infos[Kind - FirstTargetFixupKind];
#  110|   }
#  111|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp:380:3: var_decl: Declaring variable "NonLibcallCSI".
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp:388:3: uninit_use: Using uninitialized value "NonLibcallCSI". Field "NonLibcallCSI.InlineElts" is uninitialized.
#  386|     }
#  387|   
#  388|->   return NonLibcallCSI;
#  389|   }
#  390|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp:395:3: var_decl: Declaring variable "RVVCSI".
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp:403:3: uninit_use: Using uninitialized value "RVVCSI". Field "RVVCSI.InlineElts" is uninitialized.
#  401|     }
#  402|   
#  403|->   return RVVCSI;
#  404|   }
#  405|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:840:3: var_decl: Declaring variable "Opcode" without initializer.
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:873:3: uninit_use_in_call: Using uninitialized value "Opcode" when calling "getMachineNode".
#  871|     }
#  872|   
#  873|->   ReplaceNode(Node, CurDAG->getMachineNode(
#  874|                           Opcode, DL, Node->getSimpleValueType(0), Operands));
#  875|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:3025:3: var_decl: Declaring variable "MaxVal".
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:3026:3: uninit_use_in_call: Using uninitialized value "MaxVal.U" when calling "convertFromAPInt".
# 3024|     unsigned Precision = APFloat::semanticsPrecision(FltSem);
# 3025|     APFloat MaxVal = APFloat(FltSem);
# 3026|->   MaxVal.convertFromAPInt(APInt::getOneBitSet(Precision, Precision - 1),
# 3027|                             /*IsSigned*/ false, APFloat::rmNearestTiesToEven);
# 3028|     SDValue MaxValNode =

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:3135:3: var_decl: Declaring variable "MaxVal".
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:3136:3: uninit_use_in_call: Using uninitialized value "MaxVal.U" when calling "convertFromAPInt".
# 3134|     unsigned Precision = APFloat::semanticsPrecision(FltSem);
# 3135|     APFloat MaxVal = APFloat(FltSem);
# 3136|->   MaxVal.convertFromAPInt(APInt::getOneBitSet(Precision, Precision - 1),
# 3137|                             /*IsSigned*/ false, APFloat::rmNearestTiesToEven);
# 3138|     SDValue MaxValNode =

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:3215:3: var_decl: Declaring variable "MaxVal".
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:3216:3: uninit_use_in_call: Using uninitialized value "MaxVal.U" when calling "convertFromAPInt".
# 3214|     unsigned Precision = APFloat::semanticsPrecision(FltSem);
# 3215|     APFloat MaxVal = APFloat(FltSem);
# 3216|->   MaxVal.convertFromAPInt(APInt::getOneBitSet(Precision, Precision - 1),
# 3217|                             /*IsSigned*/ false, APFloat::rmNearestTiesToEven);
# 3218|     SDValue MaxValNode = DAG.getConstantFP(MaxVal, DL, VT);

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:7606:9: address_of: Taking address with "&NewSel" yields a singleton pointer.
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:7606:9: callee_ptr_arith: Passing "&NewSel" to function "ReplaceAllUsesWith" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 7604|         if (SDValue NewSel = foldBinOpIntoSelectIfProfitable(*Op->use_begin(),
# 7605|                                                              DAG, Subtarget)) {
# 7606|->         DAG.ReplaceAllUsesWith(BinOp, &NewSel);
# 7607|           return lowerSELECT(NewSel, DAG);
# 7608|         }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:14478:3: var_decl: Declaring variable "Strategies".
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:14525:3: uninit_use: Using uninitialized value "Strategies". Field "Strategies.InlineElts" is uninitialized.
#14523|       llvm_unreachable("Unexpected opcode");
#14524|     }
#14525|->   return Strategies;
#14526|   }
#14527|   } // End anonymous namespace.

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/Sparc/MCTargetDesc/SparcAsmBackend.cpp:260:7: cond_between: Checking "Kind >= FirstLiteralRelocationKind" implies that "Kind" is between 0 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/Sparc/MCTargetDesc/SparcAsmBackend.cpp:263:7: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 0 and 127 (inclusive) on the true branch.
llvm-project-19.0.0.src/llvm/lib/Target/Sparc/MCTargetDesc/SparcAsmBackend.cpp:264:9: overrun-call: Overrunning callee's array of size 22 by passing argument "Kind" (which evaluates to 127) in call to "getFixupKindInfo".
#  262|   
#  263|         if (Kind < FirstTargetFixupKind)
#  264|->         return MCAsmBackend::getFixupKindInfo(Kind);
#  265|   
#  266|         assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/Sparc/MCTargetDesc/SparcAsmBackend.cpp:260:7: cond_between: Checking "Kind >= FirstLiteralRelocationKind" implies that "Kind" is between 0 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/Sparc/MCTargetDesc/SparcAsmBackend.cpp:263:7: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 128 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/Sparc/MCTargetDesc/SparcAsmBackend.cpp:269:9: illegal_address: "InfosLE[Kind - FirstTargetFixupKind]" evaluates to an address that is at byte offset 3048 of an array of 1008 bytes.
#  267|                "Invalid kind!");
#  268|         if (Endian == llvm::endianness::little)
#  269|->         return InfosLE[Kind - FirstTargetFixupKind];
#  270|   
#  271|         return InfosBE[Kind - FirstTargetFixupKind];

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/Sparc/MCTargetDesc/SparcAsmBackend.cpp:260:7: cond_between: Checking "Kind >= FirstLiteralRelocationKind" implies that "Kind" is between 0 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/Sparc/MCTargetDesc/SparcAsmBackend.cpp:263:7: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 128 and 255 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/Sparc/MCTargetDesc/SparcAsmBackend.cpp:271:7: illegal_address: "InfosBE[Kind - FirstTargetFixupKind]" evaluates to an address that is at byte offset 3048 of an array of 1008 bytes.
#  269|           return InfosLE[Kind - FirstTargetFixupKind];
#  270|   
#  271|->       return InfosBE[Kind - FirstTargetFixupKind];
#  272|       }
#  273|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/Sparc/SparcISelLowering.cpp:3226:3: overrun-call: Overrunning callee's array of size 8 by passing argument "llvm::cast(Op)->getSuccessOrdering()" (which evaluates to 15) in call to "isStrongerThanMonotonic".
# 3224|   
# 3225|   static SDValue LowerATOMIC_LOAD_STORE(SDValue Op, SelectionDAG &DAG) {
# 3226|->   if (isStrongerThanMonotonic(cast<AtomicSDNode>(Op)->getSuccessOrdering())) {
# 3227|       // Expand with a fence.
# 3228|       return SDValue();

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/VE/AsmParser/VEAsmParser.cpp:686:5: cond_at_most: Checking "regIdx > 31U" implies that "regIdx" may be up to 31 on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/VE/AsmParser/VEAsmParser.cpp:686:5: overrun-local: Overrunning array "MISCRegs" of 31 2-byte elements at element index 31 (byte offset 63) using index "regIdx" (which evaluates to 31).
#  684|         return false;
#  685|       unsigned regIdx = ConstExpr->getValue();
#  686|->     if (regIdx > 31 || MISCRegs[regIdx] == VE::NoRegister)
#  687|         return false;
#  688|       Op.Kind = k_Register;

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/VE/AsmParser/VEAsmParser.cpp:686:5: cond_at_most: Checking "regIdx > 31U" implies that "regIdx" may be up to 31 on the false branch.
llvm-project-19.0.0.src/llvm/lib/Target/VE/AsmParser/VEAsmParser.cpp:689:5: overrun-local: Overrunning array "MISCRegs" of 31 2-byte elements at element index 31 (byte offset 63) using index "regIdx" (which evaluates to 31).
#  687|         return false;
#  688|       Op.Kind = k_Register;
#  689|->     Op.Reg.RegNum = MISCRegs[regIdx];
#  690|       return true;
#  691|     }

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/VE/MCTargetDesc/VEAsmBackend.cpp:126:5: cond_between: Checking "Kind < FirstTargetFixupKind" implies that "Kind" is between 0 and 127 (inclusive) on the true branch.
llvm-project-19.0.0.src/llvm/lib/Target/VE/MCTargetDesc/VEAsmBackend.cpp:127:7: overrun-call: Overrunning callee's array of size 22 by passing argument "Kind" (which evaluates to 127) in call to "getFixupKindInfo".
#  125|   
#  126|       if (Kind < FirstTargetFixupKind)
#  127|->       return MCAsmBackend::getFixupKindInfo(Kind);
#  128|   
#  129|       assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/X86/GISel/X86RegisterBankInfo.cpp:450:5: var_decl: Declaring variable "AltMappings".
llvm-project-19.0.0.src/llvm/lib/Target/X86/GISel/X86RegisterBankInfo.cpp:452:5: uninit_use: Using uninitialized value "AltMappings". Field "AltMappings.InlineElts" is uninitialized.
#  450|       InstructionMappings AltMappings;
#  451|       AltMappings.push_back(&Mapping);
#  452|->     return AltMappings;
#  453|     }
#  454|     default:

Error: INTEGER_OVERFLOW (CWE-190):
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ExpandPseudo.cpp:651:5: tainted_data_return: Called function "llvm::X86::getFirstAddrOperandIdx(MI)", and a possible return value may be less than zero.
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ExpandPseudo.cpp:651:5: assign: Assigning: "MemOpNo" = "llvm::X86::getFirstAddrOperandIdx(MI)".
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ExpandPseudo.cpp:652:5: overflow: The expression "MemOpNo + AddrDisp" is considered to have possibly overflowed.
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ExpandPseudo.cpp:652:5: overflow_sink: "MemOpNo + AddrDisp", which might be negative, is passed to "MI->getOperand(MemOpNo + AddrDisp)".
#  650|         return false;
#  651|       int MemOpNo = X86::getFirstAddrOperandIdx(MI);
#  652|->     const MachineOperand &DispOp = MI.getOperand(MemOpNo + X86::AddrDisp);
#  653|       Register Base = MI.getOperand(MemOpNo + X86::AddrBaseReg).getReg();
#  654|       // If the displacement is a expr, conservatively estimate 4 bytes.

Error: INTEGER_OVERFLOW (CWE-190):
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ExpandPseudo.cpp:651:5: tainted_data_return: Called function "llvm::X86::getFirstAddrOperandIdx(MI)", and a possible return value may be less than zero.
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ExpandPseudo.cpp:651:5: assign: Assigning: "MemOpNo" = "llvm::X86::getFirstAddrOperandIdx(MI)".
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ExpandPseudo.cpp:658:5: overflow: The expression "MemOpNo + AddrIndexReg" is considered to have possibly overflowed.
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ExpandPseudo.cpp:658:5: overflow_sink: "MemOpNo + AddrIndexReg", which might be negative, is passed to "MI->getOperand(MemOpNo + AddrIndexReg)".
#  656|         return false;
#  657|       // There can only be one of three: SIB, segment override register, ADSIZE
#  658|->     Register Index = MI.getOperand(MemOpNo + X86::AddrIndexReg).getReg();
#  659|       unsigned Count = !!MI.getOperand(MemOpNo + X86::AddrSegmentReg).getReg();
#  660|       if (X86II::needSIB(Base, Index, /*In64BitMode=*/true))

Error: INTEGER_OVERFLOW (CWE-190):
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ExpandPseudo.cpp:651:5: tainted_data_return: Called function "llvm::X86::getFirstAddrOperandIdx(MI)", and a possible return value may be less than zero.
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ExpandPseudo.cpp:651:5: assign: Assigning: "MemOpNo" = "llvm::X86::getFirstAddrOperandIdx(MI)".
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ExpandPseudo.cpp:659:5: overflow: The expression "MemOpNo + AddrSegmentReg" is considered to have possibly overflowed.
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ExpandPseudo.cpp:659:5: overflow_sink: "MemOpNo + AddrSegmentReg", which might be negative, is passed to "MI->getOperand(MemOpNo + AddrSegmentReg)".
#  657|       // There can only be one of three: SIB, segment override register, ADSIZE
#  658|       Register Index = MI.getOperand(MemOpNo + X86::AddrIndexReg).getReg();
#  659|->     unsigned Count = !!MI.getOperand(MemOpNo + X86::AddrSegmentReg).getReg();
#  660|       if (X86II::needSIB(Base, Index, /*In64BitMode=*/true))
#  661|         ++Count;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ISelLowering.cpp:7211:9: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::IEEEhalf(), Val)".
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ISelLowering.cpp:7211:9: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 7209|       if (VT.isFloatingPoint()) {
# 7210|         if (ScalarSize == 16)
# 7211|->         return ConstantFP::get(C, APFloat(APFloat::IEEEhalf(), Val));
# 7212|         if (ScalarSize == 32)
# 7213|           return ConstantFP::get(C, APFloat(APFloat::IEEEsingle(), Val));

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ISelLowering.cpp:7213:9: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::IEEEsingle(), Val)".
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ISelLowering.cpp:7213:9: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 7211|           return ConstantFP::get(C, APFloat(APFloat::IEEEhalf(), Val));
# 7212|         if (ScalarSize == 32)
# 7213|->         return ConstantFP::get(C, APFloat(APFloat::IEEEsingle(), Val));
# 7214|         assert(ScalarSize == 64 && "Unsupported floating point scalar size");
# 7215|         return ConstantFP::get(C, APFloat(APFloat::IEEEdouble(), Val));

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ISelLowering.cpp:7215:7: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(llvm::APFloatBase::IEEEdouble(), Val)".
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ISelLowering.cpp:7215:7: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 7213|           return ConstantFP::get(C, APFloat(APFloat::IEEEsingle(), Val));
# 7214|         assert(ScalarSize == 64 && "Unsupported floating point scalar size");
# 7215|->       return ConstantFP::get(C, APFloat(APFloat::IEEEdouble(), Val));
# 7216|       }
# 7217|       return Constant::getIntegerValue(Type::getIntNTy(C, ScalarSize), Val);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ISelLowering.cpp:47529:7: var_decl: Declaring variable "ShiftAmt1" without initializer.
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86ISelLowering.cpp:47540:9: uninit_use_in_call: Using uninitialized value "ShiftAmt1" when calling "Log2_64".
#47538|   
#47539|         if (Opc) {
#47540|->         SDValue Shift1 =
#47541|               DAG.getNode(ISD::SHL, DL, VT, N->getOperand(0),
#47542|                           DAG.getConstant(Log2_64(ShiftAmt1), DL, ShiftVT));

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86InstrInfo.cpp:5680:9: return_constant: Function call "UseMI->findRegisterUseOperandIdx(Reg, NULL, false)" may return -1.
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86InstrInfo.cpp:5680:9: overrun-buffer-arg: Calling "removeOperand" with "UseMI.Operands" and "UseMI->findRegisterUseOperandIdx(Reg, NULL, false)" is suspicious because of the very large index, 4294967295. The index may be due to a negative parameter being interpreted as unsigned.
# 5678|             return true;
# 5679|           UseMI.setDesc(get(X86::MOV32r0));
# 5680|->         UseMI.removeOperand(
# 5681|               UseMI.findRegisterUseOperandIdx(Reg, /*TRI=*/nullptr));
# 5682|           UseMI.addOperand(MachineOperand::CreateReg(X86::EFLAGS, /*isDef=*/true,

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86InstrInfo.cpp:5714:5: return_constant: Function call "UseMI->findRegisterUseOperandIdx(Reg, NULL, false)" may return -1.
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86InstrInfo.cpp:5714:5: assignment: Assigning: "RegIdx" = "UseMI->findRegisterUseOperandIdx(Reg, NULL, false)". The value of "RegIdx" is now 4294967295.
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86InstrInfo.cpp:5724:5: overrun-buffer-arg: Calling "removeOperand" with "UseMI.Operands" and "RegIdx" is suspicious because of the very large index, 4294967295. The index may be due to a negative parameter being interpreted as unsigned.
# 5722|         return true;
# 5723|       UseMI.setDesc(get(NewOpc));
# 5724|->     UseMI.removeOperand(RegIdx);
# 5725|       UseMI.addOperand(MachineOperand::CreateImm(ImmVal));
# 5726|       // Reg is physical register $cl, so we don't know if DefMI is dead through

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86InstrInfo.cpp:5743:7: return_constant: Function call "UseMI->findRegisterUseOperandIdx(Reg, NULL, false)" may return -1.
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86InstrInfo.cpp:5743:7: overrun-buffer-arg: Calling "removeOperand" with "UseMI.Operands" and "UseMI->findRegisterUseOperandIdx(Reg, NULL, false)" is suspicious because of the very large index, 4294967295. The index may be due to a negative parameter being interpreted as unsigned.
# 5741|         //          %100 = COPY %101
# 5742|         UseMI.setDesc(get(TargetOpcode::COPY));
# 5743|->       UseMI.removeOperand(
# 5744|             UseMI.findRegisterUseOperandIdx(Reg, /*TRI=*/nullptr));
# 5745|         UseMI.removeOperand(

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86InstrInfo.cpp:5745:7: return_constant: Function call "UseMI->findRegisterDefOperandIdx(llvm::Register(EFLAGS), NULL, false, false)" may return -1.
llvm-project-19.0.0.src/llvm/lib/Target/X86/X86InstrInfo.cpp:5745:7: overrun-buffer-arg: Calling "removeOperand" with "UseMI.Operands" and "UseMI->findRegisterDefOperandIdx(llvm::Register(EFLAGS), NULL, false, false)" is suspicious because of the very large index, 4294967295. The index may be due to a negative parameter being interpreted as unsigned.
# 5743|         UseMI.removeOperand(
# 5744|             UseMI.findRegisterUseOperandIdx(Reg, /*TRI=*/nullptr));
# 5745|->       UseMI.removeOperand(
# 5746|             UseMI.findRegisterDefOperandIdx(X86::EFLAGS, /*TRI=*/nullptr));
# 5747|         UseMI.untieRegOperand(0);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Transforms/IPO/Attributor.cpp:3934:3: var_decl: Declaring variable "AC".
llvm-project-19.0.0.src/llvm/lib/Transforms/IPO/Attributor.cpp:3946:3: uninit_use_in_call: Using uninitialized value "AC.IPOAmendableCB". Field "AC.IPOAmendableCB.callable" is uninitialized when calling "AttributorConfig".
# 3944|     AC.UseLiveness = false;
# 3945|   
# 3946|->   Attributor A(Functions, InfoCache, AC);
# 3947|   
# 3948|     for (Function *F : Functions) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Transforms/IPO/Attributor.cpp:3934:3: var_decl: Declaring variable "AC".
llvm-project-19.0.0.src/llvm/lib/Transforms/IPO/Attributor.cpp:3946:3: uninit_use_in_call: Using uninitialized value "AC.OREGetter". Field "AC.OREGetter.callable" is uninitialized when calling "AttributorConfig".
# 3944|     AC.UseLiveness = false;
# 3945|   
# 3946|->   Attributor A(Functions, InfoCache, AC);
# 3947|   
# 3948|     for (Function *F : Functions) {

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Transforms/IPO/ForceFunctionAttrs.cpp:62:5: assignment: Assigning: "Kind" = "llvm::Attribute::getAttrKindFromName(AttributeText)". The value of "Kind" is now between 0 and 92 (inclusive).
llvm-project-19.0.0.src/llvm/lib/Transforms/IPO/ForceFunctionAttrs.cpp:63:5: cond_between: Checking "Kind == None" implies that "Kind" is between 1 and 92 (inclusive) on the false branch.
llvm-project-19.0.0.src/llvm/lib/Transforms/IPO/ForceFunctionAttrs.cpp:63:5: overrun-call: Overrunning callee's array of size 89 by passing argument "Kind" (which evaluates to 92) in call to "canUseAsFnAttr".
#   61|       }
#   62|       auto Kind = Attribute::getAttrKindFromName(AttributeText);
#   63|->     if (Kind == Attribute::None || !Attribute::canUseAsFnAttr(Kind)) {
#   64|         LLVM_DEBUG(dbgs() << "ForcedAttribute: " << AttributeText
#   65|                           << " unknown or not a function attribute!\n");

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Transforms/IPO/ForceFunctionAttrs.cpp:112:11: assignment: Assigning: "AttrKind" = "llvm::Attribute::getAttrKindFromName(SplitPair.second)". The value of "AttrKind" is now between 0 and 92 (inclusive).
llvm-project-19.0.0.src/llvm/lib/Transforms/IPO/ForceFunctionAttrs.cpp:113:11: cond_between: Checking "AttrKind != None" implies that "AttrKind" is between 1 and 92 (inclusive) on the true branch.
llvm-project-19.0.0.src/llvm/lib/Transforms/IPO/ForceFunctionAttrs.cpp:113:11: overrun-call: Overrunning callee's array of size 89 by passing argument "AttrKind" (which evaluates to 92) in call to "canUseAsFnAttr".
#  111|           } else {
#  112|             auto AttrKind = Attribute::getAttrKindFromName(SplitPair.second);
#  113|->           if (AttrKind != Attribute::None &&
#  114|                 Attribute::canUseAsFnAttr(AttrKind)) {
#  115|               // TODO: There could be string attributes without a value, we should

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp:2711:7: address_of: Taking address with "&EI" yields a singleton pointer.
llvm-project-19.0.0.src/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp:2711:7: callee_ptr_arith: Passing "&EI" to function "moveEdgeToExistingCalleeClone" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 2709|       // The edge iterator is adjusted when we move the CallerEdge to the clone.
# 2710|       if (Clone)
# 2711|->       moveEdgeToExistingCalleeClone(CallerEdge, Clone, &EI, /*NewClone=*/false,
# 2712|                                       CallerEdgeContextsForAlloc);
# 2713|       else

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp:3164:17: address_of: Taking address with "&EI" yields a singleton pointer.
llvm-project-19.0.0.src/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp:3164:17: callee_ptr_arith: Passing "&EI" to function "moveEdgeToExistingCalleeClone" which uses it as an array. This might corrupt or misinterpret adjacent memory locations.
# 3162|                   ContextNode *NewClone =
# 3163|                       FuncCloneToNewCallsiteCloneMap[FuncCloneCalledByCaller];
# 3164|->                 moveEdgeToExistingCalleeClone(Edge, NewClone, &EI);
# 3165|                   // Cleanup any none type edges cloned over.
# 3166|                   removeNoneTypeCalleeEdges(NewClone);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp:260:3: var_decl: Declaring variable "T".
llvm-project-19.0.0.src/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp:261:3: uninit_use_in_call: Using uninitialized value "T.U" when calling "changeSign".
#  259|   
#  260|     APFloat T(Sem, 0 - Val);
#  261|->   T.changeSign();
#  262|   
#  263|     return T;

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3291:9: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(FPType->getFltSemantics(), C)".
llvm-project-19.0.0.src/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3291:9: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
# 3289|                 Attribute::NoImplicitFloat) &&
# 3290|             Cmp.isEquality() && FPType->isIEEELikeFPTy()) {
# 3291|->         FPClassTest Mask = APFloat(FPType->getFltSemantics(), *C).classify();
# 3292|           if (Mask & (fcInf | fcZero)) {
# 3293|             if (Pred == ICmpInst::ICMP_NE)

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Transforms/Scalar/SROA.cpp:4012:7: var_decl: Declaring variable "NewOps".
llvm-project-19.0.0.src/llvm/lib/Transforms/Scalar/SROA.cpp:4018:7: uninit_use: Using uninitialized value "NewOps". Field "NewOps.InlineElts" is uninitialized.
# 4016|           else
# 4017|             NewOps.push_back(Op);
# 4018|->       return NewOps;
# 4019|       };
# 4020|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Transforms/Scalar/SROA.cpp:4102:7: var_decl: Declaring variable "NewOps".
llvm-project-19.0.0.src/llvm/lib/Transforms/Scalar/SROA.cpp:4108:7: uninit_use: Using uninitialized value "NewOps". Field "NewOps.InlineElts" is uninitialized.
# 4106|           else
# 4107|             NewOps.push_back(Op);
# 4108|->       return NewOps;
# 4109|       };
# 4110|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Transforms/Utils/InlineFunction.cpp:1442:3: var_decl: Declaring variable "Valid".
llvm-project-19.0.0.src/llvm/lib/Transforms/Utils/InlineFunction.cpp:1447:3: uninit_use: Using uninitialized value "Valid". Field "Valid.Attrs.InlineElts" is uninitialized.
# 1445|     if (CB.hasRetAttr(Attribute::Alignment))
# 1446|       Valid.addAlignmentAttr(CB.getRetAlign());
# 1447|->   return Valid;
# 1448|   }
# 1449|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:9033:3: var_decl: Declaring variable "ArgTys".
llvm-project-19.0.0.src/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:9048:3: uninit_use: Using uninitialized value "ArgTys". Field "ArgTys.InlineElts" is uninitialized.
# 9046|       ArgTys.push_back(FixedVectorType::get(Arg->getType(), VF));
# 9047|     }
# 9048|->   return ArgTys;
# 9049|   }
# 9050|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:15155:5: var_decl: Declaring variable "CallChecker".
llvm-project-19.0.0.src/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:15211:5: uninit_use_in_call: Using uninitialized value "CallChecker.callable" when calling "operator ()".
#15209|       (void)AttemptCheckBitwidth(Checker, NeedToExit);
#15210|       BitWidth = BestBitWidth;
#15211|->     return TryProcessInstruction(BitWidth, Operands, CallChecker);
#15212|     }
#15213|   
llvm-project-19.0.0.src/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:15211:5: note: trimmed 1 message(s) with length over 512

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:15832:9: var_decl: Declaring variable "AnyProfitableGraph" without initializer.
llvm-project-19.0.0.src/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:15959:9: uninit_use: Using uninitialized value "AnyProfitableGraph".
#15957|             break;
#15958|           // Check if tried all attempts or no need for the last attempts at all.
#15959|->         if (Repeat >= MaxAttempts ||
#15960|               (Repeat > 1 && (RepeatChanged || !AnyProfitableGraph)))
#15961|             break;
llvm-project-19.0.0.src/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:15959:9: note: trimmed 5 message(s) with length over 512

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp:1235:3: var_decl: Declaring variable "HeaderMasks".
llvm-project-19.0.0.src/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp:1250:3: uninit_use: Using uninitialized value "HeaderMasks". Field "HeaderMasks.InlineElts" is uninitialized.
# 1248|       }
# 1249|     }
# 1250|->   return HeaderMasks;
# 1251|   }
# 1252|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/lib/Transforms/Vectorize/VectorCombine.cpp:1702:9: var_decl: Declaring variable "NItem".
llvm-project-19.0.0.src/llvm/lib/Transforms/Vectorize/VectorCombine.cpp:1710:9: uninit_use: Using uninitialized value "NItem". Field "NItem.InlineElts" is uninitialized.
# 1708|                           cast<Instruction>(V.first)->getOperand(Op), V.second));
# 1709|           }
# 1710|->         return NItem;
# 1711|         };
# 1712|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:348:11: alloc_fn: Storage is returned from allocation function "strdup".
llvm-project-19.0.0.src/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:348:11: var_assign: Assigning: "NewDefinedDefaultHref" = storage returned from "strdup(reinterpret_cast<char const *>(Def->href))".
llvm-project-19.0.0.src/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:348:11: overwrite_var: Overwriting "NewDefinedDefaultHref" in "NewDefinedDefaultHref = reinterpret_cast<unsigned char const *>(strdup(reinterpret_cast<char const *>(Def->href)))" leaks the storage that "NewDefinedDefaultHref" points to.
#  346|         if (!Def->prefix) {
#  347|           if (namespaceOverrides(Def->href, OriginalNsDef->href)) {
#  348|->           NewDefinedDefaultHref = TO_XML_CHAR(strdup(FROM_XML_CHAR(Def->href)));
#  349|           }
#  350|         } else if (!xmlStringsEqual(OriginalNsDef->href, Def->href)) {

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:348:11: alloc_fn: Storage is returned from allocation function "strdup".
llvm-project-19.0.0.src/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:348:11: var_assign: Assigning: "NewDefinedDefaultHref" = storage returned from "strdup(reinterpret_cast<char const *>(Def->href))".
llvm-project-19.0.0.src/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:351:9: leaked_storage: Variable "NewDefinedDefaultHref" going out of scope leaks the storage it points to.
#  349|           }
#  350|         } else if (!xmlStringsEqual(OriginalNsDef->href, Def->href)) {
#  351|->         return make_error<WindowsManifestError>(
#  352|               Twine("conflicting namespace definitions for ") +
#  353|               FROM_XML_CHAR(Def->prefix));

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:337:5: alloc_fn: Storage is returned from allocation function "xmlStrdup".
llvm-project-19.0.0.src/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:337:5: var_assign: Assigning: "OriginalDefinedDefaultHref" = storage returned from "xmlStrdup(OriginalDefinedDefaultNs->href)".
llvm-project-19.0.0.src/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:351:9: leaked_storage: Variable "OriginalDefinedDefaultHref" going out of scope leaks the storage it points to.
#  349|           }
#  350|         } else if (!xmlStringsEqual(OriginalNsDef->href, Def->href)) {
#  351|->         return make_error<WindowsManifestError>(
#  352|               Twine("conflicting namespace definitions for ") +
#  353|               FROM_XML_CHAR(Def->prefix));

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:348:11: alloc_fn: Storage is returned from allocation function "strdup".
llvm-project-19.0.0.src/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:348:11: var_assign: Assigning: "NewDefinedDefaultHref" = storage returned from "strdup(reinterpret_cast<char const *>(Def->href))".
llvm-project-19.0.0.src/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:385:11: leaked_storage: Variable "NewDefinedDefaultHref" going out of scope leaks the storage it points to.
#  383|               searchOrDefine(OriginalDefinedDefaultHref, DominantNode);
#  384|           if (!EC) {
#  385|->           return EC.takeError();
#  386|           }
#  387|           xmlNsPtr PrefixDominantDefinedDefault = std::move(EC.get());

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/redhat-linux-build/lib/Target/LoongArch/LoongArchGenDAGISel.inc:48129:3: assignment: Assigning: "Ordering" = "llvm::cast(N)->getSuccessOrdering()". The value of "Ordering" may now be up to 15.
llvm-project-19.0.0.src/llvm/redhat-linux-build/lib/Target/LoongArch/LoongArchGenDAGISel.inc:48130:3: overrun-call: Overrunning callee's array of size 8 by passing argument "Ordering" (which evaluates to 15) in call to "isReleaseOrStronger".
#48128|   
#48129|     AtomicOrdering Ordering = cast<AtomicSDNode>(N)->getSuccessOrdering();
#48130|->   return !isReleaseOrStronger(Ordering);
#48131|   
#48132|     }

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/llvm/redhat-linux-build/lib/Target/LoongArch/LoongArchGenDAGISel.inc:48199:3: assignment: Assigning: "Ordering" = "llvm::cast(N)->getSuccessOrdering()". The value of "Ordering" may now be up to 15.
llvm-project-19.0.0.src/llvm/redhat-linux-build/lib/Target/LoongArch/LoongArchGenDAGISel.inc:48200:3: overrun-call: Overrunning callee's array of size 8 by passing argument "Ordering" (which evaluates to 15) in call to "isReleaseOrStronger".
#48198|   
#48199|     AtomicOrdering Ordering = cast<AtomicSDNode>(N)->getSuccessOrdering();
#48200|->   return isReleaseOrStronger(Ordering);
#48201|   
#48202|     }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/redhat-linux-build/tools/clang/include/clang/AST/AbstractBasicReader.inc:579:5: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(floatSema, value)".
llvm-project-19.0.0.src/llvm/redhat-linux-build/tools/clang/include/clang/AST/AbstractBasicReader.inc:579:5: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#  577|       const llvm::fltSemantics &floatSema = llvm::APFloatBase::EnumToSemantics(
#  578|           static_cast<llvm::APFloatBase::Semantics>(semantics));
#  579|->     return APValue(llvm::APFloat(floatSema, value));
#  580|     
#  581|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/redhat-linux-build/tools/clang/include/clang/AST/AbstractBasicReader.inc:604:5: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(sema, imag)".
llvm-project-19.0.0.src/llvm/redhat-linux-build/tools/clang/include/clang/AST/AbstractBasicReader.inc:604:5: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#  602|       const llvm::fltSemantics &sema = llvm::APFloatBase::EnumToSemantics(
#  603|           static_cast<llvm::APFloatBase::Semantics>(semantics));
#  604|->     return APValue(llvm::APFloat(sema, real),
#  605|                      llvm::APFloat(sema, imag));
#  606|     

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/redhat-linux-build/tools/clang/include/clang/AST/AbstractBasicReader.inc:629:5: var_decl: Declaring variable "result".
llvm-project-19.0.0.src/llvm/redhat-linux-build/tools/clang/include/clang/AST/AbstractBasicReader.inc:633:7: uninit_use_in_call: Using uninitialized value "result.Data" when calling "getArrayInitializedElt".
#  631|       result.MakeArray(initLength, totalLength);
#  632|       for (unsigned i = 0; i < initLength; ++i)
#  633|->       result.getArrayInitializedElt(i) = elements[i];
#  634|       if (hasFiller)
#  635|         result.getArrayFiller() = elements.back();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/redhat-linux-build/tools/clang/include/clang/AST/AbstractBasicReader.inc:646:5: var_decl: Declaring variable "result".
llvm-project-19.0.0.src/llvm/redhat-linux-build/tools/clang/include/clang/AST/AbstractBasicReader.inc:649:7: uninit_use_in_call: Using uninitialized value "result.Data" when calling "getStructBase".
#  647|       result.MakeStruct(bases.size(), fields.size());
#  648|       for (unsigned i = 0; i < bases.size(); ++i)
#  649|->       result.getStructBase(i) = bases[i];
#  650|       for (unsigned i = 0; i < fields.size(); ++i)
#  651|         result.getStructField(i) = fields[i];

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/redhat-linux-build/tools/clang/include/clang/AST/AbstractBasicReader.inc:678:5: var_decl: Declaring variable "result".
llvm-project-19.0.0.src/llvm/redhat-linux-build/tools/clang/include/clang/AST/AbstractBasicReader.inc:684:5: uninit_use: Using uninitialized value "result". Field "result.Data" is uninitialized.
#  682|       for (unsigned i = 0; i < pathSize; ++i)
#  683|         pathArray[i] = memberPath[i]->getCanonicalDecl();
#  684|->     return result;
#  685|     
#  686|       }

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/llvm/tools/gold/gold-plugin.cpp:128:34: destructor_uses_global_object: The destructor of global object "ResInfo" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "ResInfo" might be called after "fuzzer::TPC" has already been destroyed.
#  126|   static std::list<claimed_file> Modules;
#  127|   static DenseMap<int, void *> FDToLeaderHandle;
#  128|-> static StringMap<ResolutionInfo> ResInfo;
#  129|   static std::vector<std::string> Cleanup;
#  130|   

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/llvm/tools/llvm-cov/CodeCoverage.cpp:351:5: move: "CoverageInfo" is moved (indicated by "std::move(CoverageInfo)").
llvm-project-19.0.0.src/llvm/tools/llvm-cov/CodeCoverage.cpp:351:5: use_after_move: "CoverageInfo" is used after it has been already moved.
#  349|         ViewBranches.push_back(*NextBranch++);
#  350|   
#  351|->     View.addBranch(CurrentLine, std::move(ViewBranches),
#  352|                      SourceCoverageView::create(SourceName, File, ViewOpts,
#  353|                                                 std::move(CoverageInfo)));

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/llvm/tools/llvm-cov/CodeCoverage.cpp:377:5: move: "CoverageInfo" is moved (indicated by "std::move(CoverageInfo)").
llvm-project-19.0.0.src/llvm/tools/llvm-cov/CodeCoverage.cpp:377:5: use_after_move: "CoverageInfo" is used after it has been already moved.
#  375|         ViewMCDCRecords.push_back(*NextRecord++);
#  376|   
#  377|->     View.addMCDCRecord(CurrentLine, std::move(ViewMCDCRecords),
#  378|                          SourceCoverageView::create(SourceName, File, ViewOpts,
#  379|                                                     std::move(CoverageInfo)));

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:439:5: var_decl: Declaring variable "rlim" without initializer.
llvm-project-19.0.0.src/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:442:5: uninit_use_in_call: Using uninitialized value "rlim". Field "rlim.rlim_max" is uninitialized when calling "setrlimit".
#  440|   
#  441|       rlim.rlim_cur = 0;
#  442|->     setrlimit(RLIMIT_CORE, &rlim);
#  443|     }
#  444|   

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/llvm/tools/llvm-exegesis/llvm-exegesis.cpp:427:13: move: "Err" is moved (indicated by "std::move(Err)").
llvm-project-19.0.0.src/llvm/tools/llvm-exegesis/llvm-exegesis.cpp:429:11: use_after_move: "Err" is used after it has been already moved.
#  427|               ExitOnErr(std::move(Err));
#  428|   
#  429|->           BenchmarkResult.Error = toString(std::move(Err));
#  430|           }
#  431|           AllResults.push_back(std::move(BenchmarkResult));

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/tools/llvm-nm/llvm-nm.cpp:665:3: var_decl: Declaring variable "Line" without initializer.
llvm-project-19.0.0.src/llvm/tools/llvm-nm/llvm-nm.cpp:724:3: uninit_use_in_call: Using uninitialized value "Line" when calling "operator <<".
#  722|     }
#  723|     }
#  724|->   outs() << '\t' << FileName << ':' << Line;
#  725|   }
#  726|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp:283:37: destructor_uses_global_object: The destructor of global object "TargetMap" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "TargetMap" might be called after "fuzzer::TPC" has already been destroyed.
#  281|   
#  282|   // FIXME: consolidate with the bfd parsing used by lld.
#  283|-> static const StringMap<MachineInfo> TargetMap{
#  284|       // Name, {EMachine, 64bit, LittleEndian}
#  285|       // x86

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/llvm/tools/llvm-profgen/PerfReader.cpp:1227:52: destructor_uses_global_object: The destructor of global object "llvm::sampleprof::PerfScriptReader::TempFileCleanups" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "llvm::sampleprof::PerfScriptReader::TempFileCleanups" might be called after "fuzzer::TPC" has already been destroyed.
# 1225|   }
# 1226|   
# 1227|-> SmallVector<CleanupInstaller, 2> PerfScriptReader::TempFileCleanups;
# 1228|   
# 1229|   } // end namespace sampleprof

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/llvm/tools/llvm-rc/ResourceScriptStmt.cpp:149:44: destructor_uses_global_object: The destructor of global object "llvm::rc::Control::SupportedCtls" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "llvm::rc::Control::SupportedCtls" might be called after "fuzzer::TPC" has already been destroyed.
#  147|   }
#  148|   
#  149|-> const StringMap<Control::CtlInfo> Control::SupportedCtls = {
#  150|       {"LTEXT", CtlInfo{0x50020000, ClsStatic, true}},
#  151|       {"CTEXT", CtlInfo{0x50020001, ClsStatic, true}},

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/llvm/tools/llvm-rc/ResourceScriptStmt.cpp:220:57: destructor_uses_global_object: The destructor of global object "llvm::rc::VersionInfoResource::VersionInfoFixed::FixedFieldsInfoMap" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "llvm::rc::VersionInfoResource::VersionInfoFixed::FixedFieldsInfoMap" might be called after "fuzzer::TPC" has already been destroyed.
#  218|           "FILEFLAGS", "FILEOS",      "FILETYPE",       "FILESUBTYPE"};
#  219|   
#  220|-> const StringMap<VersionInfoFixedType> VersionInfoFixed::FixedFieldsInfoMap = {
#  221|       {FixedFieldsNames[FtFileVersion], FtFileVersion},
#  222|       {FixedFieldsNames[FtProductVersion], FtProductVersion},

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/llvm/tools/llvm-rc/llvm-rc.cpp:109:20: destructor_uses_global_object: The destructor of global object "<unnamed>::TempPreprocFile" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "<unnamed>::TempPreprocFile" might be called after "fuzzer::TPC" has already been destroyed.
#  107|   
#  108|   static ExitOnError ExitOnErr;
#  109|-> static FileRemover TempPreprocFile;
#  110|   static FileRemover TempResFile;
#  111|   

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/llvm/tools/llvm-rc/llvm-rc.cpp:110:20: destructor_uses_global_object: The destructor of global object "<unnamed>::TempResFile" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "<unnamed>::TempResFile" might be called after "fuzzer::TPC" has already been destroyed.
#  108|   static ExitOnError ExitOnErr;
#  109|   static FileRemover TempPreprocFile;
#  110|-> static FileRemover TempResFile;
#  111|   
#  112|   [[noreturn]] static void fatalError(const Twine &Message) {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/tools/llvm-readtapi/DiffEngine.cpp:287:3: var_decl: Declaring variable "Diff".
llvm-project-19.0.0.src/llvm/tools/llvm-readtapi/DiffEngine.cpp:293:3: uninit_use: Using uninitialized value "Diff". Field "Diff.Kind" is uninitialized.
#  291|       Diff.Values.push_back(std::make_unique<T>(RHS));
#  292|     }
#  293|->   return Diff;
#  294|   }
#  295|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/tools/obj2yaml/dxcontainer2yaml.cpp:20:3: var_decl: Declaring variable "YAML".
llvm-project-19.0.0.src/llvm/tools/obj2yaml/dxcontainer2yaml.cpp:26:3: uninit_use: Using uninitialized value "YAML". Field "YAML.Parameters.InlineElts" is uninitialized.
#   24|           Param.SystemValue, Param.CompType, Param.Register, Param.Mask,
#   25|           Param.ExclusiveMask, Param.MinPrecision});
#   26|->   return YAML;
#   27|   }
#   28|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/unittests/ADT/APFloatTest.cpp:583:3: var_decl: Declaring variable "zn".
llvm-project-19.0.0.src/llvm/unittests/ADT/APFloatTest.cpp:584:3: uninit_use_in_call: Using uninitialized value "zn.U" when calling "minnum".
#  582|     APFloat zp(0.0);
#  583|     APFloat zn(-0.0);
#  584|->   EXPECT_EQ(-0.0, minnum(zp, zn).convertToDouble());
#  585|     EXPECT_EQ(-0.0, minnum(zn, zp).convertToDouble());
#  586|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/unittests/ADT/APFloatTest.cpp:582:3: var_decl: Declaring variable "zp".
llvm-project-19.0.0.src/llvm/unittests/ADT/APFloatTest.cpp:584:3: uninit_use_in_call: Using uninitialized value "zp.U" when calling "minnum".
#  582|     APFloat zp(0.0);
#  583|     APFloat zn(-0.0);
#  584|->   EXPECT_EQ(-0.0, minnum(zp, zn).convertToDouble());
#  585|     EXPECT_EQ(-0.0, minnum(zn, zp).convertToDouble());
#  586|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/unittests/ADT/APFloatTest.cpp:599:3: var_decl: Declaring variable "zn".
llvm-project-19.0.0.src/llvm/unittests/ADT/APFloatTest.cpp:600:3: uninit_use_in_call: Using uninitialized value "zn.U" when calling "maxnum".
#  598|     APFloat zp(0.0);
#  599|     APFloat zn(-0.0);
#  600|->   EXPECT_EQ(0.0, maxnum(zp, zn).convertToDouble());
#  601|     EXPECT_EQ(0.0, maxnum(zn, zp).convertToDouble());
#  602|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/unittests/ADT/APFloatTest.cpp:598:3: var_decl: Declaring variable "zp".
llvm-project-19.0.0.src/llvm/unittests/ADT/APFloatTest.cpp:600:3: uninit_use_in_call: Using uninitialized value "zp.U" when calling "maxnum".
#  598|     APFloat zp(0.0);
#  599|     APFloat zn(-0.0);
#  600|->   EXPECT_EQ(0.0, maxnum(zp, zn).convertToDouble());
#  601|     EXPECT_EQ(0.0, maxnum(zn, zp).convertToDouble());
#  602|   }

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/llvm/unittests/ADT/MapVectorTest.cpp:136:3: move: "two" is moved (indicated by "std::move(two)").
llvm-project-19.0.0.src/llvm/unittests/ADT/MapVectorTest.cpp:142:3: use_after_move: "two" is used after it has been already moved.
#  140|   
#  141|     std::unique_ptr<int> p(new int(3));
#  142|->   auto try3 = mv.try_emplace(std::move(two), 3, std::move(p));
#  143|     EXPECT_FALSE(try3.second);
#  144|     EXPECT_EQ(2, try3.first->second.a.v);

Error: USE_AFTER_MOVE (CWE-457):
llvm-project-19.0.0.src/llvm/unittests/ADT/MapVectorTest.cpp:175:3: move: "two" is moved (indicated by "std::move(two)").
llvm-project-19.0.0.src/llvm/unittests/ADT/MapVectorTest.cpp:180:3: use_after_move: "two" is used after it has been already moved.
#  178|     EXPECT_EQ(1, try2.first->second.move);
#  179|   
#  180|->   auto try3 = mv.insert_or_assign(std::move(two), 3);
#  181|     EXPECT_FALSE(try3.second);
#  182|     EXPECT_EQ(3, try3.first->second.v);

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/unittests/CodeGen/MLRegAllocDevelopmentFeatures.cpp:50:5: var_decl: Declaring variable "PositionsToReturn".
llvm-project-19.0.0.src/llvm/unittests/CodeGen/MLRegAllocDevelopmentFeatures.cpp:80:5: uninit_use: Using uninitialized value "PositionsToReturn". Field "PositionsToReturn.InlineElts" is uninitialized.
#   78|         CurrentIndex += SlotIndex::InstrDist;
#   79|       }
#   80|->     return PositionsToReturn;
#   81|     }
#   82|   

Error: WRAPPER_ESCAPE (CWE-825):
llvm-project-19.0.0.src/llvm/unittests/DebugInfo/LogicalView/DWARFReaderTest.cpp:323:3: extract: Calling "get" which extracts wrapped state from local "Reference".
llvm-project-19.0.0.src/llvm/unittests/DebugInfo/LogicalView/DWARFReaderTest.cpp:323:3: escape: The internal representation of local "Reference" escapes, but is destroyed when it exits scope.
#  321|     std::unique_ptr<LVReader> Target =
#  322|         createReader(ReaderHandler, InputsDir, DwarfGcc);
#  323|->   checkElementComparison(Reference.get(), Target.get());
#  324|   }
#  325|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/unittests/ExecutionEngine/Orc/OrcCAPITest.cpp:540:3: alloc_fn: Storage is returned from allocation function "LLVMOrcLLJITEnableDebugSupport".
llvm-project-19.0.0.src/llvm/unittests/ExecutionEngine/Orc/OrcCAPITest.cpp:540:3: var_assign: Assigning: "E" = storage returned from "LLVMOrcLLJITEnableDebugSupport(this->Jit)".
llvm-project-19.0.0.src/llvm/unittests/ExecutionEngine/Orc/OrcCAPITest.cpp:544:5: leaked_storage: Variable "E" going out of scope leaks the storage it points to.
#  542|           << "Error testing LLJIT debug support "
#  543|           << "(triple = " << TargetTriple << "): " << toString(E);
#  544|->     GTEST_SKIP() << "LLJIT C bindings provide debug support only for JITLink";
#  545|     }
#  546|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/unittests/ExecutionEngine/Orc/OrcCAPITest.cpp:537:3: alloc_fn: Storage is returned from allocation function "createTestObject".
llvm-project-19.0.0.src/llvm/unittests/ExecutionEngine/Orc/OrcCAPITest.cpp:537:3: var_assign: Assigning: "ObjBuffer" = storage returned from "OrcCAPITestBase::createTestObject(<unnamed>::SumDebugExample, llvm::StringRef("sum.ll"))".
llvm-project-19.0.0.src/llvm/unittests/ExecutionEngine/Orc/OrcCAPITest.cpp:544:5: leaked_storage: Variable "ObjBuffer" going out of scope leaks the storage it points to.
#  542|           << "Error testing LLJIT debug support "
#  543|           << "(triple = " << TargetTriple << "): " << toString(E);
#  544|->     GTEST_SKIP() << "LLJIT C bindings provide debug support only for JITLink";
#  545|     }
#  546|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/unittests/ExecutionEngine/Orc/OrcCAPITest.cpp:699:3: alloc_fn: Storage is returned from allocation function "LLVMOrcMaterializationResponsibilityNotifyEmitted".
llvm-project-19.0.0.src/llvm/unittests/ExecutionEngine/Orc/OrcCAPITest.cpp:699:3: leaked_storage: Ignoring storage allocated by "LLVMOrcMaterializationResponsibilityNotifyEmitted(MR, &DependenceSet, 1UL)" leaks it.
#  697|         /* .NumDependencies = */ 1};
#  698|   
#  699|->   LLVMOrcMaterializationResponsibilityNotifyEmitted(MR, &DependenceSet, 1);
#  700|     LLVMOrcDisposeMaterializationResponsibility(MR);
#  701|   }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/unittests/IR/PatternMatch.cpp:573:3: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(1.)".
llvm-project-19.0.0.src/llvm/unittests/IR/PatternMatch.cpp:573:3: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#  571|   
#  572|   TEST_F(PatternMatchTest, BitCast) {
#  573|->   Value *OneDouble = ConstantFP::get(IRB.getDoubleTy(), APFloat(1.0));
#  574|     Value *ScalableDouble = ConstantFP::get(
#  575|         VectorType::get(IRB.getDoubleTy(), 2, /*Scalable=*/true), APFloat(1.0));

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/unittests/IR/PatternMatch.cpp:574:3: temporary: Creating temporary of type "llvm::APFloat" in "llvm::APFloat(1.)".
llvm-project-19.0.0.src/llvm/unittests/IR/PatternMatch.cpp:574:3: uninit_use_in_call: Using uninitialized value "<temporary>.U" when calling "~APFloat".
#  572|   TEST_F(PatternMatchTest, BitCast) {
#  573|     Value *OneDouble = ConstantFP::get(IRB.getDoubleTy(), APFloat(1.0));
#  574|->   Value *ScalableDouble = ConstantFP::get(
#  575|         VectorType::get(IRB.getDoubleTy(), 2, /*Scalable=*/true), APFloat(1.0));
#  576|     // scalar -> scalar

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/llvm/unittests/IR/VFABIDemanglerTest.cpp:24:20: destructor_uses_global_object: The destructor of global object "<unnamed>::Ctx" itself makes use of global object "UseConstantFPForFixedLengthSplat" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "<unnamed>::Ctx" might be called after "UseConstantFPForFixedLengthSplat" has already been destroyed.
#   22|   namespace {
#   23|   
#   24|-> static LLVMContext Ctx;
#   25|   
#   26|   /// Perform tests against VFABI Rules. `invokeParser` creates a VFInfo object

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/llvm/unittests/IR/VFABIDemanglerTest.cpp:24:20: destructor_uses_global_object: The destructor of global object "<unnamed>::Ctx" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "<unnamed>::Ctx" might be called after "fuzzer::TPC" has already been destroyed.
#   22|   namespace {
#   23|   
#   24|-> static LLVMContext Ctx;
#   25|   
#   26|   /// Perform tests against VFABI Rules. `invokeParser` creates a VFInfo object

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/unittests/ProfileData/CoverageMappingTest.cpp:29:3: var_decl: Declaring variable "Found" without initializer.
llvm-project-19.0.0.src/llvm/unittests/ProfileData/CoverageMappingTest.cpp:37:3: uninit_use: Using uninitialized value "Found".
#   35|       FoundMsg = CME.message();
#   36|     });
#   37|->   if (Expected_Err == Found && Msg == Expected_Msg)
#   38|       return ::testing::AssertionSuccess();
#   39|     return ::testing::AssertionFailure() << "error: " << FoundMsg << "\n";

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/unittests/ProfileData/InstrProfTest.cpp:411:3: var_decl: Declaring variable "MR".
llvm-project-19.0.0.src/llvm/unittests/ProfileData/InstrProfTest.cpp:419:3: uninit_use: Using uninitialized value "MR". Field "MR.AllocSites.InlineElts" is uninitialized.
#  417|     for (const auto &CSId : CallSiteFrames)
#  418|       MR.CallSiteIds.push_back(CSId);
#  419|->   return MR;
#  420|   }
#  421|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/unittests/Support/Path.cpp:1458:5: open_arg: "openFileForRead" opens handle stored into "FD".
llvm-project-19.0.0.src/llvm/unittests/Support/Path.cpp:1460:5: identity_transfer: Passing "FD" as argument 1 to function "convertFDToNativeFile", which returns that argument.
llvm-project-19.0.0.src/llvm/unittests/Support/Path.cpp:1460:5: noescape: Resource "FD" is not freed or pointed-to in "convertFDToNativeFile".
llvm-project-19.0.0.src/llvm/unittests/Support/Path.cpp:1460:5: noescape: Resource "llvm::sys::fs::convertFDToNativeFile(FD)" is not freed or pointed-to in "mapped_file_region".
llvm-project-19.0.0.src/llvm/unittests/Support/Path.cpp:1462:5: leaked_handle: Handle variable "FD" going out of scope leaks the handle.
# 1460|       fs::mapped_file_region mfr(fs::convertFDToNativeFile(FD),
# 1461|                                  fs::mapped_file_region::readonly, Size, 0, EC);
# 1462|->     ASSERT_NO_ERROR(EC);
# 1463|   
# 1464|       // Verify content

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/unittests/Support/Path.cpp:1458:5: open_arg: "openFileForRead" opens handle stored into "FD".
llvm-project-19.0.0.src/llvm/unittests/Support/Path.cpp:1460:5: identity_transfer: Passing "FD" as argument 1 to function "convertFDToNativeFile", which returns that argument.
llvm-project-19.0.0.src/llvm/unittests/Support/Path.cpp:1460:5: noescape: Resource "FD" is not freed or pointed-to in "convertFDToNativeFile".
llvm-project-19.0.0.src/llvm/unittests/Support/Path.cpp:1460:5: noescape: Resource "llvm::sys::fs::convertFDToNativeFile(FD)" is not freed or pointed-to in "mapped_file_region".
llvm-project-19.0.0.src/llvm/unittests/Support/Path.cpp:1468:5: identity_transfer: Passing "FD" as argument 1 to function "convertFDToNativeFile", which returns that argument.
llvm-project-19.0.0.src/llvm/unittests/Support/Path.cpp:1468:5: noescape: Resource "FD" is not freed or pointed-to in "convertFDToNativeFile".
llvm-project-19.0.0.src/llvm/unittests/Support/Path.cpp:1468:5: noescape: Resource "llvm::sys::fs::convertFDToNativeFile(FD)" is not freed or pointed-to in "mapped_file_region".
llvm-project-19.0.0.src/llvm/unittests/Support/Path.cpp:1470:5: leaked_handle: Handle variable "FD" going out of scope leaks the handle.
# 1468|       fs::mapped_file_region m(fs::convertFDToNativeFile(FD),
# 1469|                                fs::mapped_file_region::readonly, Size, 0, EC);
# 1470|->     ASSERT_NO_ERROR(EC);
# 1471|       ASSERT_EQ(close(FD), 0);
# 1472|     }

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/unittests/Support/ProgramTest.cpp:463:3: open_arg: "openFileForRead" opens handle stored into "fd".
llvm-project-19.0.0.src/llvm/unittests/Support/ProgramTest.cpp:478:3: noescape: Resource "fd" is not freed or pointed-to in "read".
llvm-project-19.0.0.src/llvm/unittests/Support/ProgramTest.cpp:478:3: leaked_handle: Handle variable "fd" going out of scope leaks the handle.
#  476|   #else
#  477|     char buf[10];
#  478|->   ASSERT_EQ(::read(fd, buf, 10), 10);
#  479|     ASSERT_EQ(strncmp(buf, utf8_text, 10), 0);
#  480|   #endif

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/unittests/Support/ProgramTest.cpp:463:3: open_arg: "openFileForRead" opens handle stored into "fd".
llvm-project-19.0.0.src/llvm/unittests/Support/ProgramTest.cpp:478:3: noescape: Resource "fd" is not freed or pointed-to in "read".
llvm-project-19.0.0.src/llvm/unittests/Support/ProgramTest.cpp:479:3: leaked_handle: Handle variable "fd" going out of scope leaks the handle.
#  477|     char buf[10];
#  478|     ASSERT_EQ(::read(fd, buf, 10), 10);
#  479|->   ASSERT_EQ(strncmp(buf, utf8_text, 10), 0);
#  480|   #endif
#  481|     ::close(fd);

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/unittests/TargetParser/Host.cpp:405:5: open_arg: "openFileForRead" opens handle stored into "FD".
llvm-project-19.0.0.src/llvm/unittests/TargetParser/Host.cpp:406:5: noescape: Resource "FD" is not freed or pointed-to in "lseek".
llvm-project-19.0.0.src/llvm/unittests/TargetParser/Host.cpp:407:5: leaked_handle: Handle variable "FD" going out of scope leaks the handle.
#  405|       ASSERT_NO_ERROR(fs::openFileForRead(OutputPath, FD));
#  406|       Size = ::lseek(FD, 0, SEEK_END);
#  407|->     ASSERT_NE(-1, Size);
#  408|       ::lseek(FD, 0, SEEK_SET);
#  409|       Buffer = std::make_unique<char[]>(Size);

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/unittests/TargetParser/Host.cpp:405:5: open_arg: "openFileForRead" opens handle stored into "FD".
llvm-project-19.0.0.src/llvm/unittests/TargetParser/Host.cpp:406:5: noescape: Resource "FD" is not freed or pointed-to in "lseek".
llvm-project-19.0.0.src/llvm/unittests/TargetParser/Host.cpp:408:5: noescape: Resource "FD" is not freed or pointed-to in "lseek".
llvm-project-19.0.0.src/llvm/unittests/TargetParser/Host.cpp:410:5: noescape: Resource "FD" is not freed or pointed-to in "read".
llvm-project-19.0.0.src/llvm/unittests/TargetParser/Host.cpp:410:5: leaked_handle: Handle variable "FD" going out of scope leaks the handle.
#  408|       ::lseek(FD, 0, SEEK_SET);
#  409|       Buffer = std::make_unique<char[]>(Size);
#  410|->     ASSERT_EQ(::read(FD, Buffer.get(), Size), Size);
#  411|       ::close(FD);
#  412|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/llvm/utils/TableGen/Common/CodeGenRegisters.cpp:502:7: var_decl: Declaring variable "Parts".
llvm-project-19.0.0.src/llvm/utils/TableGen/Common/CodeGenRegisters.cpp:526:7: uninit_use_in_call: Using uninitialized value "Parts". Field "Parts.InlineElts" is uninitialized when calling "getConcatSubRegIndex".
#  524|         // Each part of Cand is a sub-register of this. Make the full Cand also
#  525|         // a sub-register with a concatenated sub-register index.
#  526|->       CodeGenSubRegIndex *Concat =
#  527|             RegBank.getConcatSubRegIndex(Parts, RegBank.getHwModes());
#  528|         std::pair<CodeGenSubRegIndex *, CodeGenRegister *> NewSubReg =

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/llvm/utils/TableGen/Common/DAGISelMatcher.cpp:44:3: alloc_fn: Storage is returned from allocation function "takeNext".
llvm-project-19.0.0.src/llvm/utils/TableGen/Common/DAGISelMatcher.cpp:44:3: leaked_storage: Ignoring storage allocated by "Cur->takeNext()" leaks it.
#   42|     if (!Cur)
#   43|       return nullptr;
#   44|->   Cur->takeNext();
#   45|     Cur->setNext(Other->takeNext());
#   46|     return this;

Error: GLOBAL_INIT_ORDER (CWE-908):
llvm-project-19.0.0.src/llvm/utils/TableGen/Common/GlobalISel/MatchDataInfo.cpp:19:37: destructor_uses_global_object: The destructor of global object "llvm::gi::AllMatchDataVars[abi:cxx11]" itself makes use of global object "fuzzer::TPC" defined in another compilation unit.  The order of destruction is unspecified, so the destructor of "llvm::gi::AllMatchDataVars[abi:cxx11]" might be called after "fuzzer::TPC" has already been destroyed.
#   17|   namespace gi {
#   18|   
#   19|-> StringMap<std::vector<std::string>> AllMatchDataVars;
#   20|   
#   21|   StringRef MatchDataInfo::getVariableName() const {

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/offload/plugins-nextgen/amdgpu/src/rtl.cpp:512:5: var_decl: Declaring variable "SymbolType" without initializer.
llvm-project-19.0.0.src/offload/plugins-nextgen/amdgpu/src/rtl.cpp:532:5: uninit_use: Using uninitialized value "SymbolType".
#  530|   
#  531|       // Make sure it is a kernel symbol.
#  532|->     if (SymbolType != HSA_SYMBOL_KIND_KERNEL)
#  533|         return Plugin::error("Symbol %s is not a kernel function");
#  534|   

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/offload/plugins-nextgen/amdgpu/src/rtl.cpp:2792:5: var_decl: Declaring variable "AMDGPUKernel".
llvm-project-19.0.0.src/offload/plugins-nextgen/amdgpu/src/rtl.cpp:2799:5: uninit_use_in_call: Using uninitialized value "AMDGPUKernel.ArgsSize" when calling "launchImpl".
# 2797|   
# 2798|       KernelArgsTy KernelArgs = {};
# 2799|->     if (auto Err = AMDGPUKernel.launchImpl(*this, /*NumThread=*/1u,
# 2800|                                              /*NumBlocks=*/1ul, KernelArgs,
# 2801|                                              /*Args=*/nullptr, AsyncInfoWrapper))

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/offload/plugins-nextgen/amdgpu/src/rtl.cpp:3014:5: var_decl: Declaring variable "SymbolSize" without initializer.
llvm-project-19.0.0.src/offload/plugins-nextgen/amdgpu/src/rtl.cpp:3030:5: uninit_use: Using uninitialized value "SymbolSize".
# 3028|   
# 3029|       // Check the size of the symbol.
# 3030|->     if (SymbolSize != DeviceGlobal.getSize())
# 3031|         return Plugin::error(
# 3032|             "Failed to load global '%s' due to size mismatch (%zu != %zu)",

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/offload/plugins-nextgen/amdgpu/src/rtl.cpp:3013:5: var_decl: Declaring variable "SymbolAddr" without initializer.
llvm-project-19.0.0.src/offload/plugins-nextgen/amdgpu/src/rtl.cpp:3037:5: uninit_use_in_call: Using uninitialized value "reinterpret_cast<void *>(SymbolAddr)" when calling "setPtr".
# 3035|   
# 3036|       // Store the symbol address on the device global metadata.
# 3037|->     DeviceGlobal.setPtr(reinterpret_cast<void *>(SymbolAddr));
# 3038|   
# 3039|       return Plugin::success();

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/offload/plugins-nextgen/amdgpu/utils/UtilitiesRTL.h:241:5: var_decl: Declaring variable "KernelData" without initializer.
llvm-project-19.0.0.src/offload/plugins-nextgen/amdgpu/utils/UtilitiesRTL.h:248:5: uninit_use_in_call: Using uninitialized value "KernelData". Field "KernelData.KernelObject" is uninitialized when calling "pair".
#  246|           return Err;
#  247|   
#  248|->     KernelInfoMap.insert({KernelName, KernelData});
#  249|       return Error::success();
#  250|     }

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/offload/plugins-nextgen/common/src/GlobalHandler.cpp:139:3: identity_transfer: Passing "4294967295U" as argument 2 to constructor for class "GlobalTy", which sets "ImageGlobal.Size" to that argument.
llvm-project-19.0.0.src/offload/plugins-nextgen/common/src/GlobalHandler.cpp:143:3: identity_transfer: Member function call "ImageGlobal.getSize()" returns field "Size".
llvm-project-19.0.0.src/offload/plugins-nextgen/common/src/GlobalHandler.cpp:143:3: cond_const: Checking "ImageGlobal.getSize() != HostGlobal->getSize()" implies that "HostGlobal->getSize()" and "HostGlobal.Size" are 4294967295 on the false branch.
llvm-project-19.0.0.src/offload/plugins-nextgen/common/src/GlobalHandler.cpp:160:3: identity_transfer: Member function call "HostGlobal->getSize()" returns field "Size".
llvm-project-19.0.0.src/offload/plugins-nextgen/common/src/GlobalHandler.cpp:160:3: overrun-buffer-arg: Calling "memcpy" with "HostGlobal->getPtr()" and "HostGlobal->getSize()" is suspicious because of the very large index, 4294967295. The index may be due to a negative parameter being interpreted as unsigned.
#  158|   
#  159|     // Perform the copy from the image to the host memory.
#  160|->   std::memcpy(HostGlobal.getPtr(), ImageGlobal.getPtr(), HostGlobal.getSize());
#  161|   
#  162|     return Plugin::success();

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/offload/plugins-nextgen/common/src/GlobalHandler.cpp:139:3: identity_transfer: Passing "4294967295U" as argument 2 to constructor for class "GlobalTy", which sets "ImageGlobal.Size" to that argument.
llvm-project-19.0.0.src/offload/plugins-nextgen/common/src/GlobalHandler.cpp:143:3: identity_transfer: Member function call "ImageGlobal.getSize()" returns field "Size".
llvm-project-19.0.0.src/offload/plugins-nextgen/common/src/GlobalHandler.cpp:143:3: cond_const: Checking "ImageGlobal.getSize() != HostGlobal->getSize()" implies that "HostGlobal->getSize()" and "HostGlobal.Size" are 4294967295 on the false branch.
llvm-project-19.0.0.src/offload/plugins-nextgen/common/src/GlobalHandler.cpp:160:3: identity_transfer: Member function call "HostGlobal->getSize()" returns field "Size".
llvm-project-19.0.0.src/offload/plugins-nextgen/common/src/GlobalHandler.cpp:160:3: overrun-buffer-arg: Calling "memcpy" with "ImageGlobal.getPtr()" and "HostGlobal->getSize()" is suspicious because of the very large index, 4294967295. The index may be due to a negative parameter being interpreted as unsigned.
#  158|   
#  159|     // Perform the copy from the image to the host memory.
#  160|->   std::memcpy(HostGlobal.getPtr(), ImageGlobal.getPtr(), HostGlobal.getSize());
#  161|   
#  162|     return Plugin::success();

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/offload/plugins-nextgen/host/src/rtl.cpp:185:5: alloc_fn: Storage is returned from allocation function "fdopen".
llvm-project-19.0.0.src/offload/plugins-nextgen/host/src/rtl.cpp:185:5: var_assign: Assigning: "TmpFile" = storage returned from "fdopen(TmpFileFd, "wb")".
llvm-project-19.0.0.src/offload/plugins-nextgen/host/src/rtl.cpp:191:5: noescape: Resource "TmpFile" is not freed or pointed-to in "fwrite".
llvm-project-19.0.0.src/offload/plugins-nextgen/host/src/rtl.cpp:193:7: leaked_storage: Variable "TmpFile" going out of scope leaks the storage it points to.
#  191|       size_t Written = fwrite(Image->getStart(), Image->getSize(), 1, TmpFile);
#  192|       if (Written != 1)
#  193|->       return Plugin::error("Failed to write target image to tmpfile %s",
#  194|                              TmpFileName);
#  195|   

Error: BAD_FREE (CWE-763):
llvm-project-19.0.0.src/offload/src/OpenMP/Mapping.cpp:104:3: address: Taking address of "*It->HDTT".
llvm-project-19.0.0.src/offload/src/OpenMP/Mapping.cpp:104:3: assign: Assigning: "HDTT" = "*It->HDTT".
llvm-project-19.0.0.src/offload/src/OpenMP/Mapping.cpp:119:5: incorrect_free: "operator delete" frees incorrect pointer "HDTT". [Note: The source code implementation of the function has been overridden by a builtin model.]
#  117|       DP("Association found, removing it\n");
#  118|       void *Event = HDTT.getEvent();
#  119|->     delete &HDTT;
#  120|       if (Event)
#  121|         Device.destroyEvent(Event);

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/offload/src/omptarget.cpp:844:3: alloc_fn: Storage is returned from allocation function "operator new". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/offload/src/omptarget.cpp:844:3: var_assign: Assigning: "PostProcessingPtrs" = storage returned from "new llvm::SmallVector<<unnamed>::PostProcessingInfo, 1u>".
llvm-project-19.0.0.src/offload/src/omptarget.cpp:867:9: leaked_storage: Variable "PostProcessingPtrs" going out of scope leaks the storage it points to.
#  865|           REPORT("Call to targetDataEnd via targetDataMapper for custom mapper"
#  866|                  " failed.\n");
#  867|->         return OFFLOAD_FAIL;
#  868|         }
#  869|   

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/offload/src/omptarget.cpp:844:3: alloc_fn: Storage is returned from allocation function "operator new". [Note: The source code implementation of the function has been overridden by a builtin model.]
llvm-project-19.0.0.src/offload/src/omptarget.cpp:844:3: var_assign: Assigning: "PostProcessingPtrs" = storage returned from "new llvm::SmallVector<<unnamed>::PostProcessingInfo, 1u>".
llvm-project-19.0.0.src/offload/src/omptarget.cpp:912:9: leaked_storage: Variable "PostProcessingPtrs" going out of scope leaks the storage it points to.
#  910|                   "not exist for host address " DPxMOD " (%" PRId64 " bytes)",
#  911|                   DPxPTR(HstPtrBegin), DataSize);
#  912|->         return OFFLOAD_FAIL;
#  913|         }
#  914|       } else {

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/offload/tools/kernelreplay/llvm-omp-kernel-replay.cpp:112:3: address_of: Taking address with "&KernelEntry" yields a singleton pointer.
llvm-project-19.0.0.src/offload/tools/kernelreplay/llvm-omp-kernel-replay.cpp:112:3: ptr_arith: Using "&KernelEntry" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  110|     DeviceImage.ImageEnd = const_cast<char *>(ImageMB.get()->getBufferEnd());
#  111|     DeviceImage.EntriesBegin = &KernelEntry;
#  112|->   DeviceImage.EntriesEnd = &KernelEntry + 1;
#  113|   
#  114|     __tgt_bin_desc Desc;

Error: ARRAY_VS_SINGLETON (CWE-119):
llvm-project-19.0.0.src/offload/tools/kernelreplay/llvm-omp-kernel-replay.cpp:117:3: address_of: Taking address with "&KernelEntry" yields a singleton pointer.
llvm-project-19.0.0.src/offload/tools/kernelreplay/llvm-omp-kernel-replay.cpp:117:3: ptr_arith: Using "&KernelEntry" as an array.  This might corrupt or misinterpret adjacent memory locations.
#  115|     Desc.NumDeviceImages = 1;
#  116|     Desc.HostEntriesBegin = &KernelEntry;
#  117|->   Desc.HostEntriesEnd = &KernelEntry + 1;
#  118|     Desc.DeviceImages = &DeviceImage;
#  119|   

Error: OVERLAPPING_COPY:
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:238:7: equal: The address of "buf" is equal to "buf".
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:238:7: equal: The address of "*((int8_t *)buf)" is equal to "buf".
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:238:7: overlapping_assignment: Assigning "*((int8_t *)buf)" to "buf", which have overlapping memory locations and different types.
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:238:7: target_type: "buf" has type "int".
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:238:7: source_type: "*((int8_t *)buf)" has type "signed char".
#  236|       switch (baseTypeSize) {
#  237|       case 1:
#  238|->       buf = (T) * ((int8_t *)&buf);
#  239|         break;
#  240|       case 2:

Error: OVERLAPPING_COPY:
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:241:7: equal: The address of "buf" is equal to "buf".
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:241:7: equal: The address of "*((int16_t *)buf)" is equal to "buf".
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:241:7: overlapping_assignment: Assigning "*((int16_t *)buf)" to "buf", which have overlapping memory locations and different types.
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:241:7: target_type: "buf" has type "signed char".
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:241:7: source_type: "*((int16_t *)buf)" has type "short".
#  239|         break;
#  240|       case 2:
#  241|->       buf = (T) * ((int16_t *)&buf);
#  242|         break;
#  243|       case 4:

Error: OVERLAPPING_COPY:
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:244:7: equal: The address of "buf" is equal to "buf".
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:244:7: equal: The address of "*((int32_t *)buf)" is equal to "buf".
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:244:7: overlapping_assignment: Assigning "*((int32_t *)buf)" to "buf", which have overlapping memory locations and different types.
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:244:7: target_type: "buf" has type "signed char".
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:244:7: source_type: "*((int32_t *)buf)" has type "int".
#  242|         break;
#  243|       case 4:
#  244|->       buf = (T) * ((int32_t *)&buf);
#  245|         break;
#  246|       case 8:

Error: OVERLAPPING_COPY:
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:247:7: equal: The address of "buf" is equal to "buf".
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:247:7: equal: The address of "*((int64_t *)buf)" is equal to "buf".
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:247:7: overlapping_assignment: Assigning "*((int64_t *)buf)" to "buf", which have overlapping memory locations and different types.
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:247:7: target_type: "buf" has type "signed char".
llvm-project-19.0.0.src/openmp/libompd/src/TargetValue.h:247:7: source_type: "*((int64_t *)buf)" has type "long".
#  245|         break;
#  246|       case 8:
#  247|->       buf = (T) * ((int64_t *)&buf);
#  248|         break;
#  249|       }

Error: UNINIT (CWE-457):
llvm-project-19.0.0.src/openmp/runtime/src/kmp_affinity.cpp:4718:3: var_decl: Declaring variable "numUnique" without initializer.
llvm-project-19.0.0.src/openmp/runtime/src/kmp_affinity.cpp:4750:5: uninit_use: Using uninitialized value "numUnique".
# 4748|     }
# 4749|     if (affinity.gran_levels == 0) {
# 4750|->     KMP_DEBUG_ASSERT((int)numUnique == __kmp_avail_proc);
# 4751|     }
# 4752|   

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/openmp/runtime/src/kmp_alloc.cpp:442:5: assignment: Assigning: "size" = "16L".
llvm-project-19.0.0.src/openmp/runtime/src/kmp_alloc.cpp:445:3: assignment: Assigning: "size" = "size + 7L & 0xfffffffffffffff8L". The value of "size" is now 16.
llvm-project-19.0.0.src/openmp/runtime/src/kmp_alloc.cpp:448:3: assignment: Assigning: "size" += "32UL". The value of "size" is now 48.
llvm-project-19.0.0.src/openmp/runtime/src/kmp_alloc.cpp:461:5: cond_at_most: Checking "bin < 20" implies that "bin" may be up to 19 on the true branch.
llvm-project-19.0.0.src/openmp/runtime/src/kmp_alloc.cpp:467:9: alias: Assigning: "best" = "&thr->freelist[bin]". "best" may now point to as high as element 19 of "thr->freelist" (which consists of 20 48-byte elements).
llvm-project-19.0.0.src/openmp/runtime/src/kmp_alloc.cpp:482:9: alias: Assigning: "b" = "best". "b" may now point to as high as element 19 of "thr->freelist" (which consists of 20 48-byte elements).
llvm-project-19.0.0.src/openmp/runtime/src/kmp_alloc.cpp:495:11: cond_between: Checking "b->bh.bb.bsize - (bufsize)size > 48L" implies that "b->bh.bb.bsize" is between 48 and 96 (inclusive) on the false branch.
llvm-project-19.0.0.src/openmp/runtime/src/kmp_alloc.cpp:532:13: alias: Assigning: "ba" = "(char *)b + b->bh.bb.bsize". "ba" may now point to as high as byte 1008 of "thr->freelist" (which consists of 960 bytes).
llvm-project-19.0.0.src/openmp/runtime/src/kmp_alloc.cpp:534:13: overrun-local: Overrunning array of 960 bytes at byte offset 1008 by dereferencing pointer "ba".
#  532|               ba = BH(((char *)b) + b->bh.bb.bsize);
#  533|   
#  534|->             KMP_DEBUG_ASSERT(ba->bb.prevfree == b->bh.bb.bsize);
#  535|   
#  536|               /* The buffer isn't big enough to split.  Give  the  whole

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/openmp/runtime/src/kmp_barrier.cpp:1665:11: overrun-buffer-arg: Overrunning struct type kmp_internal_control_t of 56 bytes by passing it to a function which accesses it at byte offset 63 using argument "64UL".
# 1663|             // Use ngo store (if available) to both store ICVs and release child
# 1664|             // via child's b_go
# 1665|->           ngo_store_go(&child_bar->th_fixed_icvs, &thr_bar->th_fixed_icvs);
# 1666|           }
# 1667|           ngo_sync();

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/openmp/runtime/src/kmp_csupport.cpp:1545:3: assignment: Assigning: "lockseq" = "__kmp_map_hint_to_lock(hint)". The value of "lockseq" is now between 0 and 14 (inclusive).
llvm-project-19.0.0.src/openmp/runtime/src/kmp_csupport.cpp:1547:5: cond_const: Checking "lockseq >= lockseq_tas" implies that "lockseq" is 0 on the false branch.
llvm-project-19.0.0.src/openmp/runtime/src/kmp_csupport.cpp:1552:7: overrun-call: Overrunning callee's array of size 10 by passing argument "(kmp_indirect_locktag_t)(lockseq - lockseq_ticket)" (which evaluates to 4294967291) in call to "__kmp_init_indirect_csptr".
# 1550|             KMP_GET_D_TAG(lockseq));
# 1551|       } else {
# 1552|->       __kmp_init_indirect_csptr(crit, loc, global_tid, KMP_GET_I_TAG(lockseq));
# 1553|       }
# 1554|     }

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/openmp/runtime/src/kmp_csupport.cpp:3444:5: cond_const: Checking "__kmp_user_lock_seq >= lockseq_tas" implies that "__kmp_user_lock_seq" is 0 on the false branch.
llvm-project-19.0.0.src/openmp/runtime/src/kmp_csupport.cpp:3448:7: overrun-call: Overrunning callee's array of size 10 by passing argument "(kmp_indirect_locktag_t)(__kmp_user_lock_seq - lockseq_ticket)" (which evaluates to 4294967291) in call to "__kmp_init_indirect_csptr".
# 3446|                                     KMP_GET_D_TAG(__kmp_user_lock_seq));
# 3447|       } else {
# 3448|->       __kmp_init_indirect_csptr(crit, loc, global_tid,
# 3449|                                   KMP_GET_I_TAG(__kmp_user_lock_seq));
# 3450|       }

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/openmp/runtime/src/ompt-general.cpp:364:5: alloc_fn: Storage is returned from allocation function "dlopen".
llvm-project-19.0.0.src/openmp/runtime/src/ompt-general.cpp:364:5: var_assign: Assigning: "h" = storage returned from "dlopen(fname, 1)".
llvm-project-19.0.0.src/openmp/runtime/src/ompt-general.cpp:368:7: noescape: Resource "h" is not freed or pointed-to in "dlsym".
llvm-project-19.0.0.src/openmp/runtime/src/ompt-general.cpp:377:11: leaked_storage: Variable "h" going out of scope leaks the storage it points to.
#  375|             OMPT_VERBOSE_INIT_PRINT(
#  376|                 "----- END LOGGING OF TOOL REGISTRATION -----\n");
#  377|->           return ret;
#  378|           }
#  379|           OMPT_VERBOSE_INIT_CONTINUED_PRINT(

Error: RESOURCE_LEAK (CWE-772):
llvm-project-19.0.0.src/openmp/runtime/src/ompt-general.cpp:364:5: alloc_fn: Storage is returned from allocation function "dlopen".
llvm-project-19.0.0.src/openmp/runtime/src/ompt-general.cpp:364:5: var_assign: Assigning: "h" = storage returned from "dlopen(fname, 1)".
llvm-project-19.0.0.src/openmp/runtime/src/ompt-general.cpp:368:7: noescape: Resource "h" is not freed or pointed-to in "dlsym".
llvm-project-19.0.0.src/openmp/runtime/src/ompt-general.cpp:385:3: leaked_storage: Variable "h" going out of scope leaks the storage it points to.
#  383|         }
#  384|       }
#  385|->   }
#  386|   #endif
#  387|     OMPT_VERBOSE_INIT_PRINT("No OMP tool loaded.\n");

Error: LOCK_EVASION (CWE-543):
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1282:7: thread1_checks_field: Thread1 uses the value read from field "api_initialized" in the condition "__kmp_itt__ittapi_global.api_initialized". It sees that the condition is true.
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1283:5: thread1_acquires_lock: Thread1 acquires lock "___itt_global.mutex".
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1284:9: thread1_double_checks_field: Thread1 double checks the field "api_initialized" in the condition "__kmp_itt__ittapi_global.api_initialized".
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1303:9: thread1_modifies_field: Thread1 modifies the field "api_initialized". "api_initialized" is of type "long", a scalar type whose values cannot be accessed atomically. This modification will be split into multiple writes which can complete at different times and can be re-ordered independently. Also, these modifications can be re-ordered with other correlated field assignments within this critical section at runtime. Thus, checking the value of "api_initialized" is not an adequate test that the critical section has completed unless t [...]
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1282:7: thread2_checks_field_early: Thread2 checks "api_initialized", reading it after Thread1 assigns to "api_initialized" but before some of the correlated field assignments can occur. It sees the condition "__kmp_itt__ittapi_global.api_initialized" as being false. It continues on before the critical section has completed, and can read data changed by that critical section while it is in an inconsistent state.
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1282:7: remove_unlocked_check: Remove this outer, unlocked check of "api_initialized".
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1283:5: correlated_field: The modification of "mutex_initialized" can race with the unguarded check of "api_initialized".
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1304:9: code_after_assignment: Any code run after the execution of "__kmp_itt__ittapi_global.api_initialized = 0L;" may not necessarily run when a second thread reaches "if (__kmp_itt__ittapi_global.api_initialized)".
# 1280|     static volatile TIDT current_thread = 0;
# 1281|   
# 1282|->   if (_N_(_ittapi_global).api_initialized) {
# 1283|       ITT_MUTEX_INIT_AND_LOCK(_N_(_ittapi_global));
# 1284|       if (_N_(_ittapi_global).api_initialized) {
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1282:7: note: trimmed 1 message(s) with length over 512

Error: LOCK_EVASION (CWE-543):
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1374:7: thread1_checks_field: Thread1 uses the value read from field "api_initialized" in the condition "!__kmp_itt__ittapi_global.api_initialized". It sees that the condition is true.
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1376:5: thread1_acquires_lock: Thread1 acquires lock "___itt_global.mutex".
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1379:9: thread1_double_checks_field: Thread1 double checks the field "api_initialized" in the condition "!__kmp_itt__ittapi_global.api_initialized".
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1478:9: thread1_modifies_field: Thread1 modifies the field "api_initialized". "api_initialized" is of type "long", a scalar type whose values cannot be accessed atomically. This modification will be split into multiple writes which can complete at different times and can be re-ordered independently. Also, these modifications can be re-ordered with other correlated field assignments within this critical section at runtime. Thus, checking the value of "api_initialized" is not an adequate test that the critical section has completed unless t [...]
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1374:7: thread2_checks_field_early: Thread2 checks "api_initialized", reading it after Thread1 assigns to "api_initialized" but before some of the correlated field assignments can occur. It sees the condition "!__kmp_itt__ittapi_global.api_initialized" as being false. It continues on before the critical section has completed, and can read data changed by that critical section while it is in an inconsistent state.
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1374:7: remove_unlocked_check: Remove this outer, unlocked check of "api_initialized".
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1376:5: correlated_field: The modification of "mutex_initialized" can race with the unguarded check of "api_initialized".
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1388:11: correlated_field: The modification of "lib" can race with the unguarded check of "api_initialized".
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1431:17: correlated_field: The modification of "__kmp_itt_thread_ignore_ptr__3_0" can race with the unguarded check of "api_initialized".
# 1372|     static volatile TIDT current_thread = 0;
# 1373|   
# 1374|->   if (!_N_(_ittapi_global).api_initialized) {
# 1375|   #ifndef ITT_SIMPLE_INIT
# 1376|       ITT_MUTEX_INIT_AND_LOCK(_N_(_ittapi_global));
llvm-project-19.0.0.src/openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp:1374:7: note: trimmed 1 message(s) with length over 512

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/third-party/unittest/googlemock/src/gmock.cc:220:3: alias: Assigning: "argv" = "&argv0". "argv" now points to element 0 of "argv0" (which consists of 1 8-byte elements).
llvm-project-19.0.0.src/third-party/unittest/googlemock/src/gmock.cc:222:3: overrun-buffer-val: Overrunning buffer pointed to by "argv" of 1 8-byte elements by passing it to a function which accesses it at element index 2 (byte offset 23).
#  220|     char** argv = &argv0;
#  221|   
#  222|->   internal::InitGoogleMockImpl(&argc, argv);
#  223|   }
#  224|   

Error: CTOR_DTOR_LEAK (CWE-401):
llvm-project-19.0.0.src/third-party/unittest/googletest/src/gtest-port.cc:1035:46: alloc_fn: Calling allocation function "dup".
llvm-project-19.0.0.src/third-party/unittest/googletest/src/gtest-port.cc:1035:46: assign: Assigning: "this->uncaptured_fd_" = "dup(fd)".
llvm-project-19.0.0.src/third-party/unittest/googletest/src/gtest-port.cc:1035:46: ctor_dtor_leak: The constructor allocates field "uncaptured_fd_" of "testing::internal::CapturedStream" but the destructor and whatever functions it calls do not free it.
# 1033|    public:
# 1034|     // The ctor redirects the stream to a temporary file.
# 1035|->   explicit CapturedStream(int fd) : fd_(fd), uncaptured_fd_(dup(fd)) {
# 1036|   #ifdef GTEST_OS_WINDOWS
# 1037|       char temp_dir_path[MAX_PATH + 1] = {'\0'};   // NOLINT

Error: OVERRUN (CWE-119):
llvm-project-19.0.0.src/third-party/unittest/googletest/src/gtest-port.cc:1206:3: return_constant: Function call "testing::internal::GetFileSize(file)" may return 18446744073709551615.
llvm-project-19.0.0.src/third-party/unittest/googletest/src/gtest-port.cc:1206:3: assignment: Assigning: "file_size" = "testing::internal::GetFileSize(file)". The value of "file_size" is now 18446744073709551615.
llvm-project-19.0.0.src/third-party/unittest/googletest/src/gtest-port.cc:1220:57: cond_at_least: Checking "bytes_read < file_size" implies that "bytes_read" is at least 18446744073709551615 on the false branch.
llvm-project-19.0.0.src/third-party/unittest/googletest/src/gtest-port.cc:1222:3: overrun-buffer-arg: Calling "basic_string" with "buffer" and "bytes_read" is suspicious because of the very large index, 18446744073709551615. The index may be due to a negative parameter being interpreted as unsigned. [Note: The source code implementation of the function has been overridden by a builtin model.]
# 1220|     } while (bytes_last_read > 0 && bytes_read < file_size);
# 1221|   
# 1222|->   const std::string content(buffer, bytes_read);
# 1223|     delete[] buffer;
# 1224|   

Error: IDENTICAL_BRANCHES (CWE-398):
llvm-project-19.0.0.src/clang/lib/Basic/Targets/ARM.cpp:1191:7: identical_branches: The same code is executed regardless of whether "!this->supportsThumb2()" is true, because the 'then' and 'else' branches are identical. Should one of the branches be modified, or the entire 'if' statement replaced?
# 1189|     case 'K':
# 1190|       if (isThumb()) {
# 1191|->       if (!supportsThumb2())
# 1192|           // FIXME: should check if immediate value can be obtained from shifting
# 1193|           // a value between 0 and 255 left by any amount

Error: IDENTICAL_BRANCHES (CWE-398):
llvm-project-19.0.0.src/clang/lib/Basic/Targets/ARM.cpp:1218:5: identical_branches: The same code is executed regardless of whether "this->isThumb() && !this->supportsThumb2()" is true, because the 'then' and 'else' branches are identical. Should one of the branches be modified, or the entire 'if' statement replaced?
# 1216|       return true;
# 1217|     case 'M':
# 1218|->     if (isThumb() && !supportsThumb2())
# 1219|         // FIXME: should check if immediate value is a multiple of 4 between 0 and
# 1220|         // 1020

Error: COPY_PASTE_ERROR (CWE-398):
llvm-project-19.0.0.src/clang/lib/CodeGen/ItaniumCXXABI.cpp:4071:18: original: "VMI_NonDiamondRepeat" looks like the original copy.
llvm-project-19.0.0.src/clang/lib/CodeGen/ItaniumCXXABI.cpp:4061:18: copy_paste_error: "VMI_NonDiamondRepeat" looks like a copy-paste error.
llvm-project-19.0.0.src/clang/lib/CodeGen/ItaniumCXXABI.cpp:4061:18: remediation: Should it say "VMI_DiamondShaped" instead?
# 4059|       } else {
# 4060|         if (Bases.NonVirtualBases.count(BaseDecl))
# 4061|->         Flags |= ItaniumRTTIBuilder::VMI_NonDiamondRepeat;
# 4062|       }
# 4063|     } else {

Error: UNEXPECTED_CONTROL_FLOW (CWE-398):
llvm-project-19.0.0.src/clang/lib/Parse/ParseTentative.cpp:1970:7: continue_in_do_while_false: A "continue" statement within a "do ... while (...)" loop only continues execution of the loop body if the loop continuation condition is still true.  Since the condition will never be true in a "do ... while (false)" loop, the "continue"statement has the same effect as a "break" statement.  Did you intend execution to continue at the top of the loop?
llvm-project-19.0.0.src/clang/lib/Parse/ParseTentative.cpp:1977:12: do_while_false_condition: This loop will never continue since the condition "false" is never true.
# 1968|       if (Tok.is(tok::comma)) {
# 1969|         ConsumeToken();
# 1970|->       continue;
# 1971|       }
# 1972|   

Error: COPY_PASTE_ERROR (CWE-398):
llvm-project-19.0.0.src/clang/lib/Sema/SemaDeclCXX.cpp:7144:32: original: "MD->isDeleted()" looks like the original copy.
llvm-project-19.0.0.src/clang/lib/Sema/SemaDeclCXX.cpp:7158:32: copy_paste_error: "isDeleted" in "MD->isDeleted()" looks like a copy-paste error.
llvm-project-19.0.0.src/clang/lib/Sema/SemaDeclCXX.cpp:7158:32: remediation: Should it say "isConsteval" instead?
# 7156|                             return MD->isConsteval() != V->isConsteval();
# 7157|                           })) {
# 7158|->       if (MD->isDefaulted() && MD->isDeleted())
# 7159|           // Explain why this defaulted function was deleted.
# 7160|           DiagnoseDeletedDefaultedFunction(MD);

Error: COPY_PASTE_ERROR (CWE-398):
llvm-project-19.0.0.src/clang/lib/Sema/SemaExpr.cpp:7704:14: original: "CK_IntegralCast" looks like the original copy.
llvm-project-19.0.0.src/clang/lib/Sema/SemaExpr.cpp:7670:14: copy_paste_error: "CK_IntegralCast" looks like a copy-paste error.
llvm-project-19.0.0.src/clang/lib/Sema/SemaExpr.cpp:7670:14: remediation: Should it say "CK_FloatingCast" instead?
# 7668|              diag::err_unimplemented_conversion_with_fixed_point_type)
# 7669|             << SrcTy;
# 7670|->       return CK_IntegralCast;
# 7671|       }
# 7672|       llvm_unreachable("Should have returned before this");

Error: COPY_PASTE_ERROR (CWE-398):
llvm-project-19.0.0.src/clang/lib/Sema/SemaObjCProperty.cpp:674:20: original: "kind_unsafe_unretained" looks like the original copy.
llvm-project-19.0.0.src/clang/lib/Sema/SemaObjCProperty.cpp:687:20: copy_paste_error: "kind_unsafe_unretained" looks like a copy-paste error.
llvm-project-19.0.0.src/clang/lib/Sema/SemaObjCProperty.cpp:687:20: remediation: Should it say "kind_assign" instead?
#  685|   
#  686|     // 'unsafe_unretained' is alias for 'assign'.
#  687|->   if (Attributes & ObjCPropertyAttribute::kind_unsafe_unretained)
#  688|       PDecl->setPropertyAttributes(ObjCPropertyAttribute::kind_assign);
#  689|     if (isAssign)

Error: COPY_PASTE_ERROR (CWE-398):
llvm-project-19.0.0.src/clang/tools/libclang/CIndexHigh.cpp:446:51: original: "clang::cxcursor::getCursorTU(cursor)" looks like the original copy.
llvm-project-19.0.0.src/clang/tools/libclang/CIndexHigh.cpp:471:46: copy_paste_error: "cursor" in "clang::cxcursor::getCursorTU(cursor)" looks like a copy-paste error.
llvm-project-19.0.0.src/clang/tools/libclang/CIndexHigh.cpp:471:46: remediation: Should it say "refCursor" instead?
#  469|     }
#  470|   
#  471|->   if (findIdRefsInFile(cxcursor::getCursorTU(cursor),
#  472|                          refCursor,
#  473|                          *cxfile::getFileEntryRef(file),

Error: IDENTICAL_BRANCHES (CWE-398):
llvm-project-19.0.0.src/clang/tools/scan-build-py/lib/libear/__init__.py:140:17: identical_branches: Ternary expression on condition "release" has identical then and else expressions: "{}". Should one of the expressions be modified, or the entire ternary expression replaced?
#  138|   
#  139|       def shared_library_ld_flags(self, release, name):
#  140|->         extra = [] if release else []
#  141|           return extra + ["-shared", "-Wl,-soname," + name]
#  142|   

Error: IDENTIFIER_TYPO (CWE-688):
llvm-project-19.0.0.src/clang/utils/ClangDataFormat.py:124:9: identifier_typo: Using "getTypename" appears to be a typo:
* Identifier "getTypename" is only known to be referenced here, or in copies of this code.
* Identifier "getTypeName" is referenced elsewhere at least 17 times.
llvm-project-19.0.0.src/clang/utils/ClangDataFormat.py:124:9: remediation: Should identifier "getTypename" be replaced by "getTypeName"?
llvm-project-19.0.0.src/clang/utils/ABITest/ABITestGen.py:220:20: identifier_use: Example 2: Using identifier "getTypeName".
llvm-project-19.0.0.src/clang/utils/ABITest/TypeGen.py:160:23: identifier_use: Example 3: Using identifier "getTypeName".
llvm-project-19.0.0.src/clang/utils/ABITest/TypeGen.py:53:9: identifier_use: Example 5: Using identifier "getTypeName".
#  122|       def getTypename(value):
#  123|           # FIXME: lldb should provide something like getBaseType
#  124|->         ty = value.GetType()
#  125|           if ty.IsPointerType() or ty.IsReferenceType():
#  126|               return ty.GetPointeeType().GetName()

Error: COPY_PASTE_ERROR (CWE-398):
llvm-project-19.0.0.src/clang/utils/update_options_td_flags.py:35:68: original: "m.end" looks like the original copy.
llvm-project-19.0.0.src/clang/utils/update_options_td_flags.py:41:69: copy_paste_error: "end" in "m.end" looks like a copy-paste error.
llvm-project-19.0.0.src/clang/utils/update_options_td_flags.py:41:69: remediation: Should it say "start" instead?
#   39|       m = re.search(r'let Flags = \[([A-Za-z0-9, ]*)\]', line)
#   40|       if m:
#   41|->         return process_letflags(m.group(1), line[:m.start(1)], line[m.end():])
#   42|   
#   43|       return [line]

Error: COPY_PASTE_ERROR (CWE-398):
llvm-project-19.0.0.src/compiler-rt/lib/builtins/udivmoddi4.c:44:26: original: "d.s.low" looks like the original copy.
llvm-project-19.0.0.src/compiler-rt/lib/builtins/udivmoddi4.c:61:27: copy_paste_error: "low" in "d.s.low" looks like a copy-paste error.
llvm-project-19.0.0.src/compiler-rt/lib/builtins/udivmoddi4.c:61:27: remediation: Should it say "high" instead?
#   59|         // 0 0
#   60|         if (rem)
#   61|->         *rem = n.s.high % d.s.low;
#   62|         return n.s.high / d.s.low;
#   63|       }

Error: IDENTIFIER_TYPO (CWE-688):
llvm-project-19.0.0.src/cross-project-tests/debuginfo-tests/dexter/dex/debugger/dbgeng/control.py:331:22: identifier_typo: Using "WaitforEvent" appears to be a typo:
* Identifier "WaitforEvent" is only known to be referenced here, or in copies of this code.
* Identifier "WaitForEvent" is referenced elsewhere at least 10 times.
llvm-project-19.0.0.src/cross-project-tests/debuginfo-tests/dexter/dex/debugger/dbgeng/control.py:331:22: remediation: Should identifier "WaitforEvent" be replaced by "WaitForEvent"?
llvm-project-19.0.0.src/cross-project-tests/debuginfo-tests/dexter/dex/debugger/dbgeng/setup.py:93:11: identifier_use: Example 2: Using identifier "WaitForEvent" (2 total uses in this function).
llvm-project-19.0.0.src/lldb/examples/python/performance.py:201:20: identifier_use: Example 3: Using identifier "WaitForEvent".
llvm-project-19.0.0.src/lldb/examples/python/process_events.py:347:24: identifier_use: Example 4: Using identifier "WaitForEvent".
llvm-project-19.0.0.src/lldb/utils/lui/debuggerdriver.py:117:25: identifier_use: Example 5: Using identifier "WaitForEvent".
#  329|           # No flags are taken by WaitForEvent, hence 0
#  330|           ret = self.vt.WaitForEvent(self.control, 0, timeout)
#  331|->         aborter(ret, "WaitforEvent", ignore=[S_FALSE])
#  332|           return ret
#  333|   

Error: COPY_PASTE_ERROR (CWE-398):
llvm-project-19.0.0.src/lld/wasm/Writer.cpp:455:9: original: "memoryPtr > lld::wasm::config->initialMemory" looks like the original copy.
llvm-project-19.0.0.src/lld/wasm/Writer.cpp:480:9: copy_paste_error: "memoryPtr" in "memoryPtr > lld::wasm::config->maxMemory" looks like a copy-paste error.
llvm-project-19.0.0.src/lld/wasm/Writer.cpp:480:9: remediation: Should it say "maxMemory" instead?
#  478|       if (config->maxMemory != alignTo(config->maxMemory, WasmPageSize))
#  479|         error("maximum memory must be " + Twine(WasmPageSize) + "-byte aligned");
#  480|->     if (memoryPtr > config->maxMemory)
#  481|         error("maximum memory too small, " + Twine(memoryPtr) + " bytes needed");
#  482|       if (config->maxMemory > maxMemorySetting)

Error: COPY_PASTE_ERROR (CWE-398):
llvm-project-19.0.0.src/lldb/examples/summaries/cocoa/NSIndexSet.py:48:21: original: "lldb.eBasicTypeUnsignedInt" looks like the original copy.
llvm-project-19.0.0.src/lldb/examples/summaries/cocoa/NSIndexSet.py:41:21: copy_paste_error: "eBasicTypeUnsignedInt" in "lldb.eBasicTypeUnsignedInt" looks like a copy-paste error.
llvm-project-19.0.0.src/lldb/examples/summaries/cocoa/NSIndexSet.py:41:21: remediation: Should it say "eBasicTypeUnsignedLong" instead?
#   39|                   )
#   40|                   self.sys_params.types_cache.uint32 = self.valobj.GetType().GetBasicType(
#   41|->                     lldb.eBasicTypeUnsignedInt
#   42|                   )
#   43|               else:

Error: IDENTICAL_BRANCHES (CWE-398):
llvm-project-19.0.0.src/llvm/include/llvm/ADT/SmallVector.h:643:7: identical_branches: The same code is executed regardless of whether "true" is true, because the 'then' and 'else' branches are identical. Should one of the branches be modified, or the entire 'if' statement replaced?
#  641|       this->reserve(N);
#  642|       for (auto I = this->end(), E = this->begin() + N; I != E; ++I)
#  643|->       if (ForOverwrite)
#  644|           new (&*I) T;
#  645|         else

Error: COPY_PASTE_ERROR (CWE-398):
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:10139:7: original: "VecVT" looks like the original copy.
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:10109:9: copy_paste_error: "VecVT" looks like a copy-paste error.
llvm-project-19.0.0.src/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:10109:9: remediation: Should it say "ContainerVT" instead?
#10107|     if (SubVecVT.isFixedLengthVector() && !VLen) {
#10108|       MVT ContainerVT = VecVT;
#10109|->     if (VecVT.isFixedLengthVector()) {
#10110|         ContainerVT = getContainerForFixedLengthVector(VecVT);
#10111|         Vec = convertToScalableVector(ContainerVT, Vec, DAG, Subtarget);

Error: IDENTICAL_BRANCHES (CWE-398):
llvm-project-19.0.0.src/llvm/redhat-linux-build/lib/libear/__init__.py:140:17: identical_branches: Ternary expression on condition "release" has identical then and else expressions: "{}". Should one of the expressions be modified, or the entire ternary expression replaced?
#  138|   
#  139|       def shared_library_ld_flags(self, release, name):
#  140|->         extra = [] if release else []
#  141|           return extra + ["-shared", "-Wl,-soname," + name]
#  142|   
